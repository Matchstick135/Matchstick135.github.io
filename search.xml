<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>so加固原理及对抗</title>
      <link href="/2025/01/15/2025-1-15%20so%E5%8A%A0%E5%9B%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9%E6%8A%97/"/>
      <url>/2025/01/15/2025-1-15%20so%E5%8A%A0%E5%9B%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9%E6%8A%97/</url>
      
        <content type="html"><![CDATA[<p>本文记录了常见so加固手段，从原理及对抗两个方面进行总结<br>文章会根据后续的学习进度，持续追加新内容</p><h1 id="加固手段"><a href="#加固手段" class="headerlink" title="加固手段"></a>加固手段</h1><h2 id="section加密"><a href="#section加密" class="headerlink" title="section加密"></a>section加密</h2><ol><li><p>源码中，将待保护函数放到自定义section，然后在初始化函数中对该section进行解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_example_jni02_CallSo.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getLibAddr</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 待保护函数</span></span><br><span class="line">JNIEXPORT jint JNICALL <span class="title function_">Java_com_example_jni02_CallSo_plus</span><span class="params">(JNIEnv* env, jobject obj, jint a, jint b)</span> </span><br><span class="line">    __<span class="title function_">attribute__</span><span class="params">((section(<span class="string">&quot;.mytext&quot;</span>)))</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_Java_com_example_jni02_CallSo_plus</span><span class="params">()</span> __<span class="title function_">attribute__</span><span class="params">((constructor))</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> base;</span><br><span class="line">    Elf64_Ehdr *ehdr;</span><br><span class="line"></span><br><span class="line">    base = getLibAddr();</span><br><span class="line">    ehdr = (Elf64_Ehdr *)base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 elf_header 的 e_phoff 中取出自定义section的 s_offset（具体原因见下方加密逻辑）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> text_addr = ehdr-&gt;e_phoff + base;   </span><br><span class="line">    <span class="comment">// 从 elf_header 的 e_entry 中取出自定义section的 s_size</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nsize = ehdr-&gt;e_entry &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nblock = ehdr-&gt;e_entry &gt;&gt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mprotect((<span class="type">void</span> *)(text_addr / PAGE_SIZE * PAGE_SIZE), <span class="number">4096</span> * nsize, PROT_READ | PROT_EXEC | PROT_WRITE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;mem privilege change failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; nblock; ++i) &#123;</span><br><span class="line">        <span class="type">char</span> *addr = (<span class="type">char</span> *)(text_addr + i);</span><br><span class="line">        *addr = ~(*addr);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mprotect((<span class="type">void</span> *)(text_addr / PAGE_SIZE * PAGE_SIZE), <span class="number">4096</span> * nsize, PROT_READ | PROT_EXEC) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;mem privilege change failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Decrypt success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getLibAddr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> name[] = <span class="string">&quot;libaddcomputer.so&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">char</span> *temp;</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    FILE *fp;</span><br><span class="line"></span><br><span class="line">    pid = getpid();</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/maps&quot;</span>, pid);</span><br><span class="line">    fp = fopen(buf, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;open failed&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> _error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), fp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, name)) &#123;</span><br><span class="line">            temp = strtok(buf, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            ret = strtoul(temp, <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">_error:</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>针对编译后的so，找到自定义sectioin进行加密</p></li></ol><p>1）通过 elf_header 的 e_shtrndx，找到 section_header_table 中.shstrtab的表项，获取其 s_offset、s_size<br>2）通过此 s_offset 和每个表项 的 s_name，找到每个section的名称在.shstrtab中的位置<br>3）通过匹配名称，找到 section_header_table 中自定义section的表项，获取其 s_offset、s_size<br>4）通过此 s_offset、s_size，找到自定义section，进行加密<br>5）将此 s_offset、s_size 临时放置于 elf_header 的 e_phoff、e_entry（不影响正常运行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">encodeSection</span><span class="params">(<span class="type">byte</span>[] fileByteArys)</span> &#123;</span><br><span class="line">    <span class="comment">// 1）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">string_section_index</span> <span class="operator">=</span> Utils.byte2Int(type_64.hdr.e_shstrndx);</span><br><span class="line">    <span class="type">Elf64_Shdr</span> <span class="variable">shdr</span> <span class="operator">=</span> type_64.shdrList.get(string_section_index);</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> Utils.byte2Int(shdr.sh_size);</span><br><span class="line">    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> Utils.byte2Int(shdr.sh_offset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mySectionOffset</span> <span class="operator">=</span> <span class="number">0</span>, mySectionSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Elf64_Shdr temp : type_64.shdrList) &#123;    </span><br><span class="line">        <span class="type">int</span> <span class="variable">sectionNameOffset</span> <span class="operator">=</span> offset + Utils.byte2Int(temp.sh_name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3）</span></span><br><span class="line">        <span class="keyword">if</span> (Utils.isEqualByteAry(fileByteArys, sectionNameOffset, encodeSectionName)) &#123;</span><br><span class="line">            mySectionOffset = Utils.byte2Int(temp.sh_offset);</span><br><span class="line">            mySectionSize = Utils.byte2Int(temp.sh_size);</span><br><span class="line">            <span class="comment">// 4）</span></span><br><span class="line">            <span class="type">byte</span>[] sectionAry = Utils.copyBytes(fileByteArys, mySectionOffset, mySectionSize);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sectionAry.length; i++) &#123;</span><br><span class="line">                sectionAry[i] = (<span class="type">byte</span>) ~sectionAry[i];</span><br><span class="line">            &#125;</span><br><span class="line">            Utils.replaceByteAry(fileByteArys, mySectionOffset, sectionAry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5）</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">nSize</span> <span class="operator">=</span> (mySectionSize + <span class="number">4095</span>) / <span class="number">4096</span>; </span><br><span class="line">    <span class="type">byte</span>[] entry = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; </span><br><span class="line">    Utils.long2Byte(((<span class="type">long</span>)mySectionSize &lt;&lt; <span class="number">32</span>) | nSize, entry); </span><br><span class="line">    Utils.replaceByteAry(fileByteArys, <span class="number">24</span>, entry); </span><br><span class="line">    <span class="type">byte</span>[] offsetAry = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; </span><br><span class="line">    Utils.long2Byte(mySectionOffset, offsetAry);</span><br><span class="line">    Utils.replaceByteAry(fileByteArys, <span class="number">32</span>, offsetAry); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>替换掉原so，重打包后签名</li></ol><h2 id="函数加密"><a href="#函数加密" class="headerlink" title="函数加密"></a>函数加密</h2><ol><li><p>源码中，在初始化函数中对目标函数进行解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getLibAddr</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_getStringFromNative</span><span class="params">()</span> __<span class="title function_">attribute__</span><span class="params">((constructor))</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> base;</span><br><span class="line">    Elf64_Ehdr *ehdr;</span><br><span class="line"></span><br><span class="line">    base = getLibAddr();</span><br><span class="line">    ehdr = (Elf64_Ehdr *)base;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从 elf_header 的 e_phoff 中取出目标函数的 st_value（具体原因见下方加密逻辑）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> text_addr = ehdr-&gt;e_phoff + base;   </span><br><span class="line">    <span class="comment">// 从 elf_header 的 e_entry 中取出目标函数的 st_size</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nsize = ehdr-&gt;e_entry &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nblock = ehdr-&gt;e_entry &gt;&gt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mprotect((<span class="type">void</span> *)text_addr, <span class="number">4096</span> * nsize, PROT_READ | PROT_EXEC | PROT_WRITE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;mem privilege change failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; nblock; ++i) &#123;</span><br><span class="line">        <span class="type">char</span> *addr = (<span class="type">char</span> *)(text_addr + i);</span><br><span class="line">        *addr = ~(*addr);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mprotect((<span class="type">void</span> *)text_addr, <span class="number">4096</span> * nsize, PROT_READ | PROT_EXEC) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;mem privilege change failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Decrypt success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getLibAddr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> name[] = <span class="string">&quot;libegg.so&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>], *temp;</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    FILE *fp;</span><br><span class="line"></span><br><span class="line">    pid = getpid();</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/maps&quot;</span>, pid);</span><br><span class="line">    fp = fopen(buf, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;open failed&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> _error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), fp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, name)) &#123;</span><br><span class="line">            temp = strtok(buf, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            ret = strtoul(temp, <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">_error:</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>针对编译后的so，找到目标函数进行加密</p></li></ol><p>1）通过匹配 program_header_table 的每个表项的 p_type，找到PT_DYNAMIC的表项，获取其 p_offset、p_filesz<br>2）通过此 p_offset、p_filesz，找到PT_DYNAMIC，读取其中的条目<br>3）通过匹配各条目的 d_tag ，获取.hash、.dynsym的 d_ptr，以及.dynstr的 d_ptr、d_val<br>4）读取.dynstr中的字符串数据<br>5）通过匹配 st_name，找到.dynsym中目标函数的表项，获取其 st_value、st_size<br>6）通过此 st_value、st_size，找到目标函数，进行加密<br>7）将此 st_value、st_size 临时放置于 elf_header 的 e_phoff、e_entry（不影响正常运行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">encodeFunc</span><span class="params">(<span class="type">byte</span>[] fileByteArys)</span> &#123;</span><br><span class="line">    <span class="comment">// 1）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">dy_offset</span> <span class="operator">=</span> <span class="number">0</span>, dy_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Elf64_Phdr phdr : type_64.phdrList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Utils.byte2Int(phdr.p_type) == ElfType64.PT_DYNAMIC) &#123;</span><br><span class="line">            dy_offset = Utils.byte2Long(phdr.p_offset).intValue(); </span><br><span class="line">            dy_size = Utils.byte2Long(phdr.p_filesz).intValue();   </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">dynSize</span> <span class="operator">=</span> <span class="number">16</span>; </span><br><span class="line">    <span class="type">byte</span>[] dest = <span class="keyword">new</span> <span class="title class_">byte</span>[dynSize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dy_size / dynSize; i++) &#123;</span><br><span class="line">        System.arraycopy(fileByteArys, i * dynSize + dy_offset, dest, <span class="number">0</span>, dynSize);</span><br><span class="line">        type_64.dynList.add(parseDynamic(dest));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3）</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">strOffset</span> <span class="operator">=</span> <span class="number">0</span>, strSize = <span class="number">0</span>, symbolOffset = <span class="number">0</span>, dynHashOffset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Elf64_Dyn dyn : type_64.dynList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (Utils.byte2Long(dyn.d_tag).intValue()) &#123; </span><br><span class="line">            <span class="keyword">case</span> ElfType64.DT_HASH:</span><br><span class="line">                dynHashOffset = Utils.byte2Long(dyn.d_ptr);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ElfType64.DT_STRTAB:</span><br><span class="line">                strOffset = Utils.byte2Long(dyn.d_ptr);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ElfType64.DT_SYMTAB:</span><br><span class="line">                symbolOffset = Utils.byte2Long(dyn.d_ptr);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ElfType64.DT_STRSZ:</span><br><span class="line">                strSize = Utils.byte2Long(dyn.d_val);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4）</span></span><br><span class="line">    <span class="type">byte</span>[] symbolStr = Utils.copyBytes(fileByteArys, strOffset.intValue(), strSize.intValue()); <span class="comment">// 注意转换为int</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">symbolSize</span> <span class="operator">=</span> <span class="number">24</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5）</span></span><br><span class="line">    <span class="keyword">for</span> (Elf64_Dyn dyn : type_64.dynList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Utils.byte2Long(dyn.d_tag).intValue() != ElfType64.DT_HASH) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nbucket</span> <span class="operator">=</span> Utils.byte2Int(Utils.copyBytes(fileByteArys, dynHashOffset.intValue(), <span class="number">4</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">nchain</span> <span class="operator">=</span> Utils.byte2Int(Utils.copyBytes(fileByteArys, dynHashOffset.intValue() + <span class="number">4</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> (<span class="type">int</span>) elfhash(funcName.getBytes());</span><br><span class="line">        hash %= nbucket;</span><br><span class="line">        <span class="type">int</span> <span class="variable">funcIndex</span> <span class="operator">=</span> Utils.byte2Int(Utils.copyBytes(fileByteArys, dynHashOffset.intValue() + <span class="number">8</span> + hash * <span class="number">4</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] des = <span class="keyword">new</span> <span class="title class_">byte</span>[symbolSize];</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.arraycopy(fileByteArys, symbolOffset.intValue() + funcIndex * symbolSize, des, <span class="number">0</span>, symbolSize);</span><br><span class="line">            <span class="type">Elf64_Sym</span> <span class="variable">sym</span> <span class="operator">=</span> parseSymbolTable(des);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isFindFunc</span> <span class="operator">=</span> Utils.isEqualByteAry(symbolStr, Utils.byte2Int(sym.st_name), funcName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isFindFunc) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">funcSize</span> <span class="operator">=</span> Utils.byte2Int(sym.st_size);</span><br><span class="line">                <span class="type">int</span> <span class="variable">funcOffset</span> <span class="operator">=</span> Utils.byte2Int(sym.st_value);</span><br><span class="line">                <span class="comment">// 6）</span></span><br><span class="line">                <span class="type">byte</span>[] funcAry = Utils.copyBytes(fileByteArys, funcOffset - <span class="number">1</span>, funcSize);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; funcAry.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    funcAry[i] = (<span class="type">byte</span>) (funcAry[i] ^ <span class="number">0xFF</span>); </span><br><span class="line">                &#125;</span><br><span class="line">                Utils.replaceByteAry(fileByteArys, funcOffset - <span class="number">1</span>, funcAry);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 7）</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">nSize</span> <span class="operator">=</span> (funcSize + <span class="number">4095</span>) / <span class="number">4096</span>; </span><br><span class="line">                <span class="type">byte</span>[] entry = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; </span><br><span class="line">                Utils.long2Byte(((<span class="type">long</span>)funcSize &lt;&lt; <span class="number">32</span>) | nSize, entry);</span><br><span class="line">                Utils.replaceByteAry(fileByteArys, <span class="number">24</span>, entry);</span><br><span class="line">                <span class="type">byte</span>[] offsetAry = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; </span><br><span class="line">                Utils.long2Byte(funcOffset, offsetAry);</span><br><span class="line">                Utils.replaceByteAry(fileByteArys, <span class="number">32</span>, offsetAry); </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            funcIndex = Utils.byte2Int(Utils.copyBytes(fileByteArys, dynHashOffset.intValue() + <span class="number">4</span> * (<span class="number">2</span> + nbucket + funcIndex), <span class="number">4</span>));</span><br><span class="line">            <span class="keyword">if</span> (funcIndex == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>替换掉原so，重打包后签名</li></ol><h2 id="基于linker"><a href="#基于linker" class="headerlink" title="基于linker"></a>基于linker</h2><h2 id="OLLVM混淆"><a href="#OLLVM混淆" class="headerlink" title="OLLVM混淆"></a>OLLVM混淆</h2><h1 id="对抗"><a href="#对抗" class="headerlink" title="对抗"></a>对抗</h1><h2 id="dump修复"><a href="#dump修复" class="headerlink" title="dump修复"></a>dump修复</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/379521981">https://zhuanlan.zhihu.com/p/379521981</a><br><a href="https://blog.csdn.net/zhangmiaoping23/article/details/80016399">https://blog.csdn.net/zhangmiaoping23/article/details/80016399</a><br><a href="https://blog.csdn.net/feibabeibei_beibei/article/details/52642288">https://blog.csdn.net/feibabeibei_beibei/article/details/52642288</a><br><a href="https://bbs.kanxue.com/thread-255220.htm">https://bbs.kanxue.com/thread-255220.htm</a><br><a href="https://www.cnblogs.com/r0ysue/p/15331594.html">https://www.cnblogs.com/r0ysue/p/15331594.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯游戏安全 2024 安卓 初赛</title>
      <link href="/2025/01/08/2025-1-8%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20%E5%AE%89%E5%8D%93%20%E5%88%9D%E8%B5%9B/"/>
      <url>/2025/01/08/2025-1-8%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20%E5%AE%89%E5%8D%93%20%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>一次UE4逆向的初体验，整体下来的感觉就是，在运用常规Android逆向手段的基础上，<br>还要对UE4的 C++源码、API使用、对象内存布局 都较为熟悉，不然无从下手 </p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/2025-1-8/5.png"></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="ARM64模拟器"><a href="#ARM64模拟器" class="headerlink" title="ARM64模拟器"></a>ARM64模拟器</h2><p>原来一直用的 leidian模拟器是x86-64的，但是这里限制ARM64，所以得搞一台<br>然而人比较懒，比起物理机，还是想着用Android Studio中自带的模拟器</p><p>创建后一跑，报错“Unable to launch Pixel 8 APl34-Theemulator process for AVD Pixel_8_APl_34 hasterminated.”<br>按照网上的教程动了环境变量、.android\avd 路径、Windows功能————结果都无济于事<br>这时候意识到Android Studio还有个日志（C:\Users\xxx\AppData\Local\Google\AndroidStudio2023.3\log\idea.log）<br><img src="/img/2025-1-8/6.png"></p><p>难道我x86-64主机注定与ARM64模拟器无缘吗？<br>其实不然，查阅资料得知，x86_64 主机上进行 ARM64 模拟目前只能达到 API 27 Oreo 级别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __x86_64__</span></span><br><span class="line">  <span class="keyword">if</span> (sarch == <span class="string">&quot;arm64&quot;</span> &amp;&amp; apiLevel &gt;=<span class="number">28</span>) &#123;</span><br><span class="line">      APANIC(<span class="string">&quot;Avd&#x27;s CPU Architecture &#x27;%s&#x27; is not supported by the QEMU2 emulator on x86_64 host.\n&quot;</span>, avdarch);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>也就是在创建设备时，只能在如下镜像中挑选<br><img src="/img/2025-1-8/7.png"><br>但是据说即便搞出来了性能也会低到感人，所以为日后着想，还是着手搞一台真机吧</p><h2 id="ARM64真机"><a href="#ARM64真机" class="headerlink" title="ARM64真机"></a>ARM64真机</h2><p>google usb_driver已在设备管理器中添加，但对于没显示“便携设备”选项的问题，这里参考了以下两篇文章————<br><a href="https://webbedxp.com/zh-CN/tech/ardith/solucion-dispositivos-portatiles-no-se-muestran-en-administrador-de-dispositivos-windows-11-10/">1.</a><br><a href="https://blog.csdn.net/weixin_42277380/article/details/103736309">2.</a></p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="before-section0"><a href="#before-section0" class="headerlink" title="before section0"></a>before section0</h2><h3 id="dump-SDK"><a href="#dump-SDK" class="headerlink" title="dump SDK"></a>dump SDK</h3><p>对于Android下的UE4逆向，首先需要dump SDK，得到各个API在 libUE4.so中的偏移地址（反过来讲，即符号还原）<br>大致包含以下几个步骤:</p><ol><li><p>AndroidManifest.xml中查看 “com.epicgames.ue4.GameActivity.EngineVersion”键值<br>但此处被抹去了，所以得用别的方法<br><img src="/img/2025-1-8/1.png"></p></li><li><p>IDA中分析libUE4.so，获取关键信息<br>版本：<br><img src="/img/2025-1-8/2.png"><br>一开始用 alt+b 去搜”+UE4+Release”，还搜不到。<br>观察后发现部分字符串的是UTF-16编码的，而非UTF-8。<br>因此”2b 2b 55 45 34 2b 52 65 6c 65 61 73 65”的基础上，每个字节间还要添个”00”</p></li></ol><p>GNames偏移（基于libUE4.so基址）：<br>对于寻找参数，大体思路是从UE源码入手，通过参数附近的特征字符串，快速定位到其本身<br>搜索 “ByteProperty”，交叉引用来到 FNamePool构造函数<br><img src="/img/2025-1-8/8.png"><br>继续对该函数进行交叉引用，此时的传参即是 GNames<br><img src="/img/2025-1-8/9.png"></p><p>GUObjectArray偏移：<br>同样的思路，搜索”CloseDisregardForGC”，交叉引用来到 FEngineLoop::PreInitPostStartupScreen()<br><img src="/img/2025-1-8/10.png"><br>其中”CloseDisregardForGC”的下方，便是 GUObjectArray<br><img src="/img/2025-1-8/11.png"></p><p>GWorld偏移：<br>搜索”    SeamlessTravel FlushLevelStreaming “，交叉引用来到 SeamlessTravelHandler::Tick()<br><img src="/img/2025-1-8/12.png"><br>顺着往上即可看到 GWorld<br><img src="/img/2025-1-8/13.png"></p><ol start="3"><li>使用 UE4Dumper工具，dump SDK<br>.&#x2F;Ue4dumper<br>–package com.tencent.ace.match2024<br>–ptrdec    （启用指针解密模式，以便正确读取数据）<br>–sdku      （基于 GObjectArray参数实现dump）<br>–gname 0x0B171CC0<br>–guobj 0x0B1B5F98<br>–output &#x2F;data&#x2F;local&#x2F;tmp<br>–newue     （启用对 UE4 4.23及以上版本的支持）</li></ol><h3 id="SDK-使用示例"><a href="#SDK-使用示例" class="headerlink" title="SDK 使用示例"></a>SDK 使用示例</h3><p>结合各API偏移地址与 libUE4.so基址，可以实现调用native的任意 UE4 API，从而实现外挂功能<br>这里简单展示如何调用API————SetActorLocation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setActorLocation</span>(<span class="params">actor_addr, x, y, z</span>) &#123;</span><br><span class="line">    <span class="comment">// SetActorLocation - 0x965DC3C</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x8C3181C</span>); </span><br><span class="line">    <span class="comment">// 创建目标函数的 本地JavaScript函数对象，需传入 目标函数地址、返回类型、参数类型数组</span></span><br><span class="line">    <span class="keyword">var</span> setLocationFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;bool&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;float&#x27;</span>]);</span><br><span class="line">    <span class="comment">// 调用目标函数并传递地址作为参数</span></span><br><span class="line">    <span class="title function_">setLocationFunc</span>(<span class="title function_">ptr</span>(actor_addr), <span class="number">0</span>, <span class="title function_">ptr</span>(<span class="number">0</span>), <span class="number">0</span>, x, y, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有点要注意，dump的SDK中显示的函数偏移地址，本质上是该API的中转函数的；中转函数在return处调用的，才是该API本身<br>这也是为什么上述示例中，使用的是 0x8C3181C 而不是 0x965DC3C<br><img src="/img/2025-1-8/14.png"></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>已知参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">GName</span>_Offset = <span class="number">0xB171CC0</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GUObjectArray</span>_Offset = <span class="number">0xB1B5F98</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GWorld</span>_Ptr_Offset = <span class="number">0xB32D8A8</span></span><br></pre></td></tr></table></figure><p>初始化参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleBase;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GName</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GUObjectArray</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GWorld</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">moduleName</span>)&#123;</span><br><span class="line">  moduleBase = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(moduleName)；</span><br><span class="line">  <span class="title class_">GName</span> = moduleBase.<span class="title function_">add</span>(<span class="title class_">GName</span>_Offset);</span><br><span class="line">  <span class="title class_">GUObjectArray</span> = moduleBase.<span class="title function_">add</span>(<span class="title class_">GUObjectArray</span>_Offset);</span><br><span class="line">  <span class="title class_">GWorld</span> = moduleBase.<span class="title function_">add</span>(<span class="title class_">GWorld</span>_Offset).<span class="title function_">readPointer</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">set</span>(<span class="string">&#x27;liblibUE4.so&#x27;</span>)</span><br></pre></td></tr></table></figure><p>UObject类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> offset_UObject_ClassPrivate = <span class="number">0x10</span>;</span><br><span class="line"><span class="keyword">var</span> offset_UObject_FNameIndex = <span class="number">0x18</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UObject</span> = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValid</span>(obj))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">getFNameFromID</span>(<span class="variable language_">this</span>.<span class="title function_">getNameId</span>(obj));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;None&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isValid</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> isValid = (<span class="title function_">ptr</span>(obj) &gt; <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">getNameId</span>(obj) &gt; <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">getClass</span>(obj) &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getClass</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> classPrivate = <span class="title function_">ptr</span>(obj).<span class="title function_">add</span>(offset_UObject_ClassPrivate).<span class="title function_">readPointer</span>();</span><br><span class="line">        <span class="keyword">return</span> classPrivate;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getNameId</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> nameId = <span class="title function_">ptr</span>(obj).<span class="title function_">add</span>(offset_UObject_FNameIndex).<span class="title function_">readU32</span>();</span><br><span class="line">            <span class="keyword">return</span> nameId;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFNameFromID</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="comment">// FNamePool相关偏移量和步长</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FNameStride</span> = <span class="number">0x2</span>;                   <span class="comment">// FNameEntry 的步长，每个FNameEntry占用2字节</span></span><br><span class="line">  <span class="keyword">var</span> offset_GName_FNamePool = <span class="number">0x30</span>;       <span class="comment">// GName 到 FNamePool 的偏移量</span></span><br><span class="line">  <span class="keyword">var</span> offset_FNamePool_Blocks = <span class="number">0x10</span>;      <span class="comment">// FNamePool 到 Blocks 的偏移量</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">// FNameEntry相关偏移量和位</span></span><br><span class="line">  <span class="keyword">var</span> offset_FNameEntry_Info = <span class="number">0</span>;          <span class="comment">// FNameEntry 到 Info 的偏移量</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FNameEntry</span>_LenBit = <span class="number">6</span>;               <span class="comment">// FNameEntry 长度位</span></span><br><span class="line">  <span class="keyword">var</span> offset_FNameEntry_String = <span class="number">0x2</span>;      <span class="comment">// FNameEntry 到字符串部分的偏移量</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 计算块和偏移量</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Block</span> = index &gt;&gt; <span class="number">16</span>;                 <span class="comment">// 块索引</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Offset</span> = index &amp; <span class="number">65535</span>;              <span class="comment">// 块内偏移量</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 获取FNamePool的起始地址</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FNamePool</span> = <span class="title class_">GName</span>.<span class="title function_">add</span>(offset_GName_FNamePool);</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 获取特定块的地址</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">NamePoolChunk</span> = <span class="title class_">FNamePool</span>.<span class="title function_">add</span>(offset_FNamePool_Blocks + <span class="title class_">Block</span> * <span class="number">8</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 计算FNameEntry的地址</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FNameEntry</span> = <span class="title class_">NamePoolChunk</span>.<span class="title function_">add</span>(<span class="title class_">FNameStride</span> * <span class="title class_">Offset</span>);</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 读取FNameEntry的Header</span></span><br><span class="line">      <span class="keyword">if</span> (offset_FNameEntry_Info !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> <span class="title class_">FNameEntryHeader</span> = <span class="title class_">FNameEntry</span>.<span class="title function_">add</span>(offset_FNameEntry_Info).<span class="title function_">readU16</span>();    </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> <span class="title class_">FNameEntryHeader</span> = <span class="title class_">FNameEntry</span>.<span class="title function_">readU16</span>();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取字符串地址</span></span><br><span class="line">  <span class="keyword">var</span> str_addr = <span class="title class_">FNameEntry</span>.<span class="title function_">add</span>(offset_FNameEntry_String);</span><br><span class="line">  <span class="comment">// console.log(`str_addr: $&#123;str_addr&#125;`);</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 计算字符串长度和宽度</span></span><br><span class="line">  <span class="keyword">var</span> str_length = <span class="title class_">FNameEntryHeader</span> &gt;&gt; <span class="title class_">FNameEntry</span>_LenBit; <span class="comment">// 计算字符串长度</span></span><br><span class="line">  <span class="keyword">var</span> wide = <span class="title class_">FNameEntryHeader</span> &amp; <span class="number">1</span>;                       <span class="comment">// 判断字符串是否为宽字符</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 如果是宽字符，返回 &quot;widestr&quot;</span></span><br><span class="line">  <span class="keyword">if</span> (wide) <span class="keyword">return</span> <span class="string">&quot;widestr&quot;</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 如果字符串长度合理，读取并返回UTF-8字符串</span></span><br><span class="line">  <span class="keyword">if</span> (str_length &gt; <span class="number">0</span> &amp;&amp; str_length &lt; <span class="number">250</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> str = str_addr.<span class="title function_">readUtf8String</span>(str_length);</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;None&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各Actor地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getActorsAddr</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Level</span>_Offset = <span class="number">0x30</span>  </span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Actors</span>_Offset = <span class="number">0x98</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Level</span> = <span class="title class_">GWorld</span>.<span class="title function_">add</span>(<span class="title class_">Level</span>_Offset).<span class="title function_">readPointer</span>()    <span class="comment">// 读取GWorld的level指针</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Actors</span> = <span class="title class_">Level</span>.<span class="title function_">add</span>(<span class="title class_">Actors</span>_Offset).<span class="title function_">readPointer</span>()   <span class="comment">// 读取Actors的指针</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Actors</span>_Num = <span class="title class_">Level</span>.<span class="title function_">add</span>(<span class="title class_">Actors</span>_Offset).<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readU32</span>()    <span class="comment">// 获取Actor的数量</span></span><br><span class="line">  <span class="keyword">var</span> actorsAddr = &#123;&#125;;  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="title class_">Actors</span>_Num; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> actor_addr = <span class="title class_">Actors</span>.<span class="title function_">add</span>(index*<span class="number">8</span>).<span class="title function_">readPointer</span>()    <span class="comment">// 读取当前索引处的Actor地址</span></span><br><span class="line">        <span class="keyword">var</span> actorName = <span class="title class_">UObject</span>.<span class="title function_">getName</span>(actor_addr)   <span class="comment">// 通过地址获取字符串名字</span></span><br><span class="line">        actorsAddr[actorName] = actor_addr;   <span class="comment">// 以字符串名字对应地址</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        console.log(`actors[$&#123;index&#125;]`,actorName);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> actorsAddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="section0"><a href="#section0" class="headerlink" title="section0"></a>section0</h2><h3 id="获取Player位置"><a href="#获取Player位置" class="headerlink" title="获取Player位置"></a>获取Player位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">z</span> = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.z&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPlayerLocation</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">getActorLocation</span>(<span class="title function_">getPlayerAddr</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPlayerAddr</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> player_addr;</span><br><span class="line">    <span class="keyword">var</span> actorsAddr = <span class="title function_">getActorsAddr</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> actorsAddr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="string">&quot;FirstPersonCharacter_C&quot;</span>)&#123;  <span class="comment">// Player的Name，可事先从getActorsAddr()在控制台的输出中获取</span></span><br><span class="line">            player_addr = actorsAddr[key];  <span class="comment">// 获取Actor里Player地址</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> player_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getActorLocation</span>(<span class="params">actor_addr</span>)&#123;</span><br><span class="line">    <span class="comment">// GetActorLocation()</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x965ddf8</span>);</span><br><span class="line">    <span class="keyword">var</span> getLocationFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">var</span> buf = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title function_">getLocationFunc</span>(<span class="title function_">ptr</span>(actor_addr), buf, buf);</span><br><span class="line">        <span class="title function_">dumpVector</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dumpVector</span>(<span class="params">addr</span>)&#123;</span><br><span class="line">  <span class="comment">// 从地址空间中读取三个浮点数</span></span><br><span class="line">  <span class="keyword">const</span> values = <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(addr, <span class="number">3</span> * <span class="number">4</span>);  <span class="comment">// 3个float共占12个字节</span></span><br><span class="line">  <span class="comment">// 解析浮点数并初始化 Vector 对象</span></span><br><span class="line">  <span class="keyword">const</span> vec = <span class="keyword">new</span> <span class="title class_">Vector</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Float32Array</span>(values, <span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>],  <span class="comment">// 读取第一个浮点数</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Float32Array</span>(values, <span class="number">4</span>, <span class="number">1</span>)[<span class="number">0</span>],  <span class="comment">// 读取第二个浮点数</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Float32Array</span>(values, <span class="number">8</span>, <span class="number">1</span>)[<span class="number">0</span>]   <span class="comment">// 读取第三个浮点数</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] 坐标：&#x27;</span>,vec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">getPlayerLocation</span>();</span><br></pre></td></tr></table></figure><h3 id="篡改Player位置"><a href="#篡改Player位置" class="headerlink" title="篡改Player位置"></a>篡改Player位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setPlayerLocation</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">    <span class="title function_">setActorLocation</span>(<span class="title function_">getPlayerAddr</span>(), x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setActorLocation</span>(<span class="params">actor_addr, x, y, z</span>) &#123;</span><br><span class="line">    <span class="comment">// SetActorLocation(const FVector&amp; NewLocation, bool bSweep = false, FHitResult* OutSweepHitResult = nullptr, ETeleportType Teleport = ETeleportType::None)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x8C3181C</span>);</span><br><span class="line">    <span class="keyword">var</span> setLocationFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;bool&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;float&#x27;</span>]);</span><br><span class="line">    <span class="title function_">setLocationFunc</span>(<span class="title function_">ptr</span>(actor_addr), <span class="number">0</span>, <span class="title function_">ptr</span>(<span class="number">0</span>), <span class="number">0</span>, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setPlayerLocation</span>(-<span class="number">1000</span>, <span class="number">100</span>, <span class="number">270</span>);</span><br></pre></td></tr></table></figure><h2 id="section1"><a href="#section1" class="headerlink" title="section1"></a>section1</h2><h3 id="篡改所有Actor可见性"><a href="#篡改所有Actor可见性" class="headerlink" title="篡改所有Actor可见性"></a>篡改所有Actor可见性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SetVisibility</span>(<span class="params">actor_addr, bVisible, bOnlyThisComponent</span>) &#123;</span><br><span class="line">    <span class="comment">// SetVisibility(bool bVisible, bool bOnlyThisComponent = false)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x8E619BC</span>);</span><br><span class="line">    <span class="keyword">var</span> callSetVisibility = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&quot;void&quot;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="title function_">callSetVisibility</span>(<span class="title function_">ptr</span>(actor_addr).<span class="title function_">add</span>(<span class="number">0x130</span>).<span class="title function_">readPointer</span>(), bVisible, bOnlyThisComponent);   <span class="comment">// 操作特定组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setActorHidden</span>(<span class="params">actor_addr, NewHidden, bPropagateToChildren</span>) &#123;</span><br><span class="line">    <span class="comment">// SetActorHiddenInGame(bool bNewHidden, bool bPropagateToChildren = false)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x8E61C70</span>);</span><br><span class="line">    <span class="keyword">var</span> setActorHiddenFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&quot;void&quot;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;char&#x27;</span>, <span class="string">&#x27;char&#x27;</span>]);</span><br><span class="line">    <span class="title function_">setActorHiddenFunc</span>(<span class="title function_">ptr</span>(actor_addr), <span class="title class_">NewHidden</span>, bPropagateToChildren); <span class="comment">// 操作Actor</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setPlayerLocation</span>(-<span class="number">1700</span>, <span class="number">700</span>, <span class="number">270</span>)</span><br><span class="line"><span class="keyword">var</span> actors = <span class="title function_">getActorsAddr</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> actorName <span class="keyword">in</span> actors) &#123;</span><br><span class="line">    <span class="keyword">var</span> actor_addr = actors[actorName];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">SetVisibility</span>(actor_addr, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        setActorHidden(actor_addr, false, false);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="section2"><a href="#section2" class="headerlink" title="section2"></a>section2</h2><h3 id="篡改部分Actor可碰撞性"><a href="#篡改部分Actor可碰撞性" class="headerlink" title="篡改部分Actor可碰撞性"></a>篡改部分Actor可碰撞性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SetCollisionEnable</span>(<span class="params">actor_addr, NewType</span>) &#123;</span><br><span class="line">    <span class="comment">// SetCollisionEnabled(ECollisionEnabled::Type NewType)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x933B300</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">CallFunc</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="title class_">CallFunc</span>(<span class="title function_">ptr</span>(actor_addr).<span class="title function_">add</span>(<span class="number">0x130</span>).<span class="title function_">readPointer</span>(), <span class="title class_">NewType</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setStaticMeshActorCollisionEnabled</span>(<span class="params">actor_addr, NewType</span>) &#123;</span><br><span class="line">    <span class="comment">// SetCollisionEnabled(ECollisionEnabled::Type NewType)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = actor_addr.<span class="title function_">add</span>(<span class="number">0x220</span>).<span class="title function_">readPointer</span>().<span class="title function_">readPointer</span>().<span class="title function_">add</span>(<span class="number">0x660</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">CallFunc</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="title class_">CallFunc</span>(<span class="title function_">ptr</span>(actor_addr).<span class="title function_">add</span>(<span class="number">0x130</span>).<span class="title function_">readPointer</span>(), <span class="title class_">NewType</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setPlayerLocation</span>(-<span class="number">1700</span>, <span class="number">1500</span>, <span class="number">270</span>)</span><br><span class="line"><span class="keyword">var</span> actors = <span class="title function_">getActorsAddr</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> actorName <span class="keyword">in</span> actors) &#123;</span><br><span class="line">    <span class="keyword">if</span> (actorName.<span class="title function_">includes</span>(<span class="string">&quot;Cube&quot;</span>)) &#123; <span class="comment">// 检查名字是否包含 &quot;Cube&quot;</span></span><br><span class="line">        <span class="keyword">var</span> actor_addr = actors[actorName];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">SetCollisionEnable</span>(actor_addr, <span class="number">3</span>); <span class="comment">// 设置为可碰撞</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            setActorHidden(actor_addr, false, false);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="section3"><a href="#section3" class="headerlink" title="section3"></a>section3</h2><h3 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h3><p>最后一部分flag位于 libplay.so的 get_last_flag()中，大致逻辑为————</p><ol><li><p>key,cipher分别被异或<br><img src="/img/2025-1-8/15.png"></p></li><li><p>sub_192C中，使用key对输入进行循环异或<br><img src="/img/2025-1-8/16.png"></p></li><li><p>sub_19BC中，字母表被异或后，进行换表Base64加密<br>（后续操作都如出一辙，访问函数指针表，跳转到指定函数处，循环往复）<br><img src="/img/2025-1-8/17.png"></p></li><li><p>off_3DB0中，与cipher进行比较<br><img src="/img/2025-1-8/18.png"></p></li></ol><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><ol><li><p>异或后cipher 进行换表Base64解密<br><img src="/img/2025-1-8/19.png"></p></li><li><p>与异或后key 进行异或</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">base64_decoded = <span class="built_in">bytearray</span>([</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x4d</span>, <span class="number">0x60</span>, <span class="number">0x74</span>, <span class="number">0x38</span>, <span class="number">0x49</span>, <span class="number">0x64</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0x2c</span>, <span class="number">0x7b</span>, <span class="number">0x4f</span>, <span class="number">0x03</span>, <span class="number">0x68</span>, <span class="number">0x36</span>, <span class="number">0x1f</span>, <span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x8e</span>, <span class="number">0x8a</span> </span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytearray</span>([</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x0C</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0x16</span>, <span class="number">0x27</span>, <span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0x49</span>, <span class="number">0x1A</span>, <span class="number">0x3B</span>, <span class="number">0x5C</span>, <span class="number">0x2D</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0xFE</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    base64_decoded[i] ^= key[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> byte <span class="keyword">in</span> base64_decoded:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(byte), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://bbs.kanxue.com/thread-281998.htm">https://bbs.kanxue.com/thread-281998.htm</a><br><a href="http://www.yxfzedu.com/article/10613">http://www.yxfzedu.com/article/10613</a><br><a href="https://www.cnblogs.com/revercc/p/17641855.html">https://www.cnblogs.com/revercc/p/17641855.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 腾讯游戏安全 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Frida-Labs 过关记录</title>
      <link href="/2025/01/04/2025-1-4%20Frida-Labs%20%E8%BF%87%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/01/04/2025-1-4%20Frida-Labs%20%E8%BF%87%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>虽然都可以像解CTF题那样，直接解密得flag，但既然是frida专场，那还是老老实实用它吧</p><h1 id="Frida-0x1"><a href="#Frida-0x1" class="headerlink" title="Frida 0x1"></a>Frida 0x1</h1><p>思路：<br>hook MainActivity.check(int i, int i2)，在其中调用其自身，且传参设为0,4</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="property">check</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">i, i2</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> new_i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> new_i2 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">check</span>(new_i, new_i2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x2"><a href="#Frida-0x2" class="headerlink" title="Frida 0x2"></a>Frida 0x2</h1><p>思路：<br>直接调用静态方法 MainActivity.get_flag(int a)，传参为4919</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x2.MainActivity&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="title function_">get_flag</span>(<span class="number">4919</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x3"><a href="#Frida-0x3" class="headerlink" title="Frida 0x3"></a>Frida 0x3</h1><p>思路：<br>直接调用256次静态方法 Checker.increase()</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x3.Checker&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">Checker</span>.<span class="title function_">increase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x4"><a href="#Frida-0x4" class="headerlink" title="Frida 0x4"></a>Frida 0x4</h1><p>思路：<br>创建 Checker实例，调用其实例方法 get_flag(int a)，传参为1337<br>然后打印返回值</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Check</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x4.Check&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> checkInstance = <span class="title class_">Check</span>.$new();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = checkInstance.<span class="title function_">get_flag</span>(<span class="number">1337</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag: &quot;</span> + result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x5"><a href="#Frida-0x5" class="headerlink" title="Frida 0x5"></a>Frida 0x5</h1><p>思路：<br>遍历所有已存在的 MainActivity实例，调用其实例方法 flag()，传参为1337</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x5.MainActivity&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                instance.<span class="title function_">flag</span>(<span class="number">1337</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x6"><a href="#Frida-0x6" class="headerlink" title="Frida 0x6"></a>Frida 0x6</h1><p>思路：<br>创建 Checker实例，设置其num1,num2分别为1234,4321（要使用value属性来操作，因为Frida的 Java API将Java字段封装在一个对象中）<br>然后遍历所有已存在的 MainActivity实例，调用其实例方法 get_flag(Checker A)，传参为上述实例</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x6.Checker&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> checkerInstance = <span class="title class_">Checker</span>.$new();</span><br><span class="line">    checkerInstance.<span class="property">num1</span>.<span class="property">value</span> = <span class="number">1234</span>;</span><br><span class="line">    checkerInstance.<span class="property">num2</span>.<span class="property">value</span> = <span class="number">4321</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x6.MainActivity&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                instance.<span class="title function_">get_flag</span>(checkerInstance);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x7"><a href="#Frida-0x7" class="headerlink" title="Frida 0x7"></a>Frida 0x7</h1><p>思路：<br>hook Checker的构造方法，在其中调用其自身，且传参设为513,513<br>（要以spawn模式注入脚本）</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x7.Checker&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Checker</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> newA = <span class="number">513</span>;</span><br><span class="line">        <span class="keyword">var</span> newB = <span class="number">513</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.$init(newA, newB);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x8"><a href="#Frida-0x8" class="headerlink" title="Frida 0x8"></a>Frida 0x8</h1><p>思路：<br>从native层入手</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">Java_com_ad2001_frida0x8_MainActivity_cmpstr</span><span class="params">(JNIEnv *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-9Ch]</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [sp+20h] [bp-98h]</span></span><br><span class="line">  <span class="type">char</span> *input; <span class="comment">// [sp+28h] [bp-90h]</span></span><br><span class="line">  <span class="type">char</span> cipher[<span class="number">100</span>]; <span class="comment">// [sp+48h] [bp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  input = (<span class="type">char</span> *)_JNIEnv::GetStringUTFChars(a1, a3);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; _strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xFFFFFFFF</span>); ++i )</span><br><span class="line">    cipher[i] = aGsjebObujwfMbo[i] - <span class="number">1</span>;</span><br><span class="line">  cipher[_strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xFFFFFFFF</span>)] = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">strcmp</span>(input, cipher);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">&quot;input &quot;</span>, <span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">&quot;Password&quot;</span>, <span class="string">&quot;%s&quot;</span>, cipher);</span><br><span class="line">  _JNIEnv::ReleaseStringUTFChars(a1, a3, input);</span><br><span class="line">  <span class="keyword">return</span> v4 == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hook strcmp()，且只在第一个参数为”aaa”时，打印第二个参数<br>最后在应用中输入”aaa”</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libfrida0x8 = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&#x27;libfrida0x8.so&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> strcmp_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(libfrida0x8.<span class="property">name</span>, <span class="string">&#x27;strcmp&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(strcmp_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> str1 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> str2 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str1 === <span class="string">&quot;aaa&quot;</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag: &quot;</span> + str2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x9"><a href="#Frida-0x9" class="headerlink" title="Frida 0x9"></a>Frida 0x9</h1><p>思路：<br>hook native层 Java_com_ad2001_a0x9_MainActivity_check_1flag()，设置返回值为1337</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> liba0x9 = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&#x27;liba0x9.so&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> check_1flag_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(liba0x9.<span class="property">name</span>, <span class="string">&#x27;Java_com_ad2001_a0x9_MainActivity_check_1flag&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(check_1flag_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">return_value</span> = <span class="number">1337</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            retval.<span class="title function_">replace</span>(<span class="number">1337</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0xA"><a href="#Frida-0xA" class="headerlink" title="Frida 0xA"></a>Frida 0xA</h1><p>思路：<br>直接调用 native层导出的 get_flag(int a1, int a2)，参数为1,2<br>（在模块中找目标函数时，要使用导出名）</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libfrida0xa = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&#x27;libfrida0xa.so&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> get_flag = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(</span><br><span class="line">        <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&#x27;libfrida0xa.so&#x27;</span>, <span class="string">&#x27;_Z8get_flagii&#x27;</span>), </span><br><span class="line">        <span class="string">&#x27;int&#x27;</span>, </span><br><span class="line">        [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="title function_">get_flag</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0xB"><a href="#Frida-0xB" class="headerlink" title="Frida 0xB"></a>Frida 0xB</h1><p>思路：<br>native层 Java_com_ad2001_frida0xb_MainActivity_getFlag()的伪代码未完全显示，从汇编层面可发现原因</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000</span>A2DE <span class="number">88</span> <span class="number">42</span>                         CMP             R0, R1</span><br><span class="line">.text:<span class="number">0000</span>A<span class="number">2E0</span> <span class="number">3</span>F D1                         BNE             loc_A362</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">.text:<span class="number">0000</span>A362 <span class="number">0</span>C B0                         ADD             SP, SP, #<span class="number">0x30</span> ; <span class="string">&#x27;0&#x27;</span></span><br><span class="line">.text:<span class="number">0000</span>A364 <span class="number">80</span> BD                         POP             &#123;R7,PC&#125;</span><br><span class="line">.text:<span class="number">0000</span>A364</span><br><span class="line">.text:<span class="number">0000</span>A364                               ; End of function Java_com_ad2001_frida0xb_MainActivity_getFlag</span><br></pre></td></tr></table></figure><p>所以通过偏移定位，将”BNE” patch成”NOP”</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libfrida0xb = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&#x27;libfrida0xb.so&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getFlagExport = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&#x27;libfrida0xb.so&#x27;</span>, <span class="string">&#x27;Java_com_ad2001_frida0xb_MainActivity_getFlag&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> offsetFromGetFlag = <span class="number">0x1C</span>;</span><br><span class="line">    <span class="keyword">var</span> patchAddress = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(getFlagExport).<span class="title function_">add</span>(offsetFromGetFlag);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(patchAddress, <span class="number">2</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">writeU16</span>(patchAddress, <span class="number">0xBF00</span>); </span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(patchAddress, <span class="number">2</span>, <span class="string">&#x27;r-x&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>Frida 0x1 : hookFrida 0x2 : 调用静态方法Frida 0x3 : 改变量值Frida 0x4 : 创建类的实例Frida 0x5 : 调用已有实例的实例方法Frida 0x6 : 调用已有实例的实例方法，且传参为实例Frida 0x7 : hook构造函数Frida 0x8 : hook native函数Frida 0x9 : 改变native函数返回值Frida 0xA : 调用native函数Frida 0xB : 用X86Writer,ARM64Writer实现patch</code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CBCTF 2024</title>
      <link href="/2024/12/31/2024-12-31%20CBCTF%202024/"/>
      <url>/2024/12/31/2024-12-31%20CBCTF%202024/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="鸽鸽的礼物"><a href="#鸽鸽的礼物" class="headerlink" title="鸽鸽的礼物"></a>鸽鸽的礼物</h2><p>切入点：<br>MainActivity-&gt;View$OnClickListenerC0135a.onClick()</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decode_message</span><span class="params">(<span class="type">char</span> *input, <span class="type">char</span> *output)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(input); ++i) &#123;</span><br><span class="line">        output[i] = input[i] - <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    output[<span class="built_in">strlen</span>(input)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(output); ++i) &#123;</span><br><span class="line">        <span class="type">char</span> c = output[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isupper</span>(c)) &#123;</span><br><span class="line">            c = <span class="string">&#x27;A&#x27;</span> + (c - <span class="string">&#x27;*&#x27;</span> + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(c)) &#123;</span><br><span class="line">            c = <span class="string">&#x27;a&#x27;</span> + (c - <span class="string">&#x27;J&#x27;</span> + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output[i] = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> encoded_message[] = <span class="string">&quot;lrgm~;&lt;lgk:j:hj:8594;&lt;739&lt;g6i3;37jh8g&quot;</span>;</span><br><span class="line">    <span class="type">char</span> decoded_message[<span class="number">256</span>]; </span><br><span class="line">    decode_message(encoded_message, decoded_message);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decoded message: %s\n&quot;</span>, decoded_message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CBCTF&#123;89fae7d7bd75261894069a3c0804db5a&#125;</span></span><br></pre></td></tr></table></figure><h2 id="inside"><a href="#inside" class="headerlink" title="inside"></a>inside</h2><p>win10环境下，用unlicense脱壳先</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> output[<span class="number">40</span>] = &#123;</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">15</span>, <span class="number">119</span>, <span class="number">67</span>, <span class="number">16</span>, <span class="number">28</span>, <span class="number">4</span>, <span class="number">113</span>, <span class="number">17</span>,</span><br><span class="line">        <span class="number">41</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">102</span>, <span class="number">34</span>, <span class="number">1</span>, <span class="number">118</span>, <span class="number">57</span>, <span class="number">106</span>, <span class="number">90</span>,</span><br><span class="line">        <span class="number">88</span>, <span class="number">56</span>, <span class="number">3</span>, <span class="number">73</span>, <span class="number">88</span>, <span class="number">57</span>, <span class="number">106</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">102</span>,</span><br><span class="line">        <span class="number">23</span>, <span class="number">85</span>, <span class="number">76</span>, <span class="number">63</span>, <span class="number">3</span>, <span class="number">85</span>, <span class="number">76</span>, <span class="number">103</span>, <span class="number">106</span>, <span class="number">28</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> xor_values[<span class="number">4</span>] = &#123;<span class="number">0x15</span>, <span class="number">0x55</span>, <span class="number">0x45</span>, <span class="number">0x33</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(output); i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span> &amp;&amp; i + j &lt; <span class="keyword">sizeof</span>(output); ++j) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> result = output[i + j] ^ xor_values[j];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后扔进CyberChef<br><img src="/img/2024-12-31/1.png"></p><h2 id="who-am-i"><a href="#who-am-i" class="headerlink" title="who_am_i"></a>who_am_i</h2><p>切入点：<br>先pyinstxtractor+pycdc得到——<br>import dll<br>print(‘Who am i?Show me your flag to help me find my birth!!’)<br>gets &#x3D; input()<br>enc &#x3D; dll.init(gets)<br>dll.check(enc)</p><p>然后去文件夹里找dll.so</p><p>so分析：<br>全局字符串（通过”Oh no!You don’t understand me!” 定位）——<br>enc &#x3D; “2076d4307ecc47b66fde5bb71fbc2ffbac3e3e076b8ec187ecb208290152876aee26d05a”<br>key &#x3D; “1z_int3rest1ng_cyth0n”</p><p>check()——<br>使用encrypt_string()加密，<br>然后与enc比较</p><p>encrypt_string()——<br>使用xor()加密，<br>将Hex转为字符串后返回</p><p>xor()——<br>用’0’填充为偶数个字节<br>两个字节为一组处理<br>使用key初始化Sbox[255]<br>输出 [20 76 d4 30 7e cc 47 b6 6f de 5b b7 1f bc 2f fb ac 3e 3e 07 6b 8e c1 87 ec b2 08 29 01 52 87 6a ee 26 d0 5a]</p><p>然后就没思路了……</p><h2 id="让我康康"><a href="#让我康康" class="headerlink" title="让我康康"></a>让我康康</h2><p>先脚本去个平坦化</p><p>main分析：<br>大致就是input扔进 sub_402160处理，然后与cipher比较</p><p>sub_402160分析：<br>一个魔改RC4，最后异或时还多了个rand()<br>注意，key在.init_array里被异或过（如果没在调试状态）</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> bytes1[] = &#123;</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0xAC</span>, <span class="number">0x37</span>, <span class="number">0xA4</span>, <span class="number">0x6A</span>, <span class="number">0x0D</span>, <span class="number">0xAB</span>, <span class="number">0x4B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xFA</span>, <span class="number">0xD1</span>, <span class="number">0xA1</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x38</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xF4</span>, <span class="number">0x73</span>, <span class="number">0xE7</span>, <span class="number">0x29</span>, <span class="number">0x7E</span>, <span class="number">0x39</span>, <span class="number">0x33</span>, <span class="number">0x7E</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0xD7</span>, <span class="number">0xAA</span>, <span class="number">0x97</span>, <span class="number">0x2C</span>, <span class="number">0x5B</span>, <span class="number">0x29</span>, <span class="number">0xD9</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> bytes2[] = &#123;</span><br><span class="line">    <span class="number">0x21</span>, <span class="number">0xEE</span>, <span class="number">0x74</span>, <span class="number">0xF0</span>, <span class="number">0x2C</span>, <span class="number">0x76</span>, <span class="number">0xC4</span>, <span class="number">0x29</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x8F</span>, <span class="number">0xA2</span>, <span class="number">0xC2</span>, <span class="number">0x25</span>, <span class="number">0x18</span>, <span class="number">0x57</span>, <span class="number">0xA0</span>,</span><br><span class="line">    <span class="number">0xAB</span>, <span class="number">0x42</span>, <span class="number">0x94</span>, <span class="number">0x76</span>, <span class="number">0x4F</span>, <span class="number">0x57</span>, <span class="number">0x47</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0x58</span>, <span class="number">0xE4</span>, <span class="number">0xD9</span>, <span class="number">0xE3</span>, <span class="number">0x1D</span>, <span class="number">0x35</span>, <span class="number">0x4E</span>, <span class="number">0xA4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> length = <span class="keyword">sizeof</span>(bytes1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length != <span class="keyword">sizeof</span>(bytes2)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: Byte arrays must be of the same length.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> result[length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        result[i] = bytes1[i] ^ bytes2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;XOR Result: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, result[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CBCTF&#123;obfusc@tor_1s_1nter3st1ng&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ezHarmony"><a href="#ezHarmony" class="headerlink" title="ezHarmony"></a>ezHarmony</h2><p>需要用jadx-dev-all，先装个Java 17</p><p>abc文件分析：<br>核心逻辑在 Index.#~h1&gt;@0<em>^2</em>#()——<br>substring &#x3D; “CBCTF{“<br>substring2 &#x3D;”962410”（因为(“7a747160774b”, substring2) &#x3D;&#x3D; substring）</p><p>找不到 <em>lexenv_1_x</em>()这类函数的位置……</p><h2 id="in-inside"><a href="#in-inside" class="headerlink" title="in_inside"></a>in_inside</h2><p>查壳：<br>exeinfope显示没壳<br>PEID查出来是 yoda’s Protector，但扔进脱壳机 显示不是该壳——难道是其他壳的伪装？<br>DiE终于查出来是 VMP3.8</p><p>但现成脱壳机用不明白……</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="who-am-i-1"><a href="#who-am-i-1" class="headerlink" title="who_am_i"></a>who_am_i</h2><h2 id="ezHarmony-1"><a href="#ezHarmony-1" class="headerlink" title="ezHarmony"></a>ezHarmony</h2><h2 id="in-inside-1"><a href="#in-inside-1" class="headerlink" title="in_inside"></a>in_inside</h2><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>鸽鸽的礼物：Android、Kotlininside：Themida壳、魔改Base64（换表、输出前被^）who_am_i：Python（Pyinstaller）、Cython、RC4让我康康：代码混淆（控制流平坦化）、反调试（ptrace()）、魔改RC4（最后还^rand()）ezHarmony：HarmonyOS、代码混淆（名称混淆）、魔改XXTEAin_inside：VMP壳</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VenomCTF 2024</title>
      <link href="/2024/12/23/2024-12-23%20VenomCTF%202024/"/>
      <url>/2024/12/23/2024-12-23%20VenomCTF%202024/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="ezre"><a href="#ezre" class="headerlink" title="ezre"></a>ezre</h2><p>main分析：<br>魔改RC4 + Base64（动调可知未魔改）</p><p>解密：<br>先cipher进行 Base64解码，得到——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0f 3c 41 75 72 42 53 06 5d 4c 32 1d 2a 5c 49 26 22 4b 69 22</span><br></pre></td></tr></table></figure><p>动调至RC4前，将其填进input的内存处（20字节）；<br>再f8，即可在input处查看明文——诶，等等，为什么最后4字节出错了？</p><p>原来是动调一开始输入input时，我随便输了16字节进去，导致传入RC4的length是 0xF，害</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// flag&#123;Simple_rEvErse&#125;</span><br></pre></td></tr></table></figure><h2 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h2><p>自动脱壳：<br>然而，报错了……官方工具也脱不了——这是个魔改UPX？？</p><p>手动脱壳：<br>Linux中运行程序，gdb附加上后dump<br>dump出来的文件解析一下——UPX壳还在？？</p><p>那就IDA中动调——显示这是个动态库，不能直接跑？？<br>明明linux上可以执行的，file命令查出来也是个executable</p><p>那就IDA中attach——成功附加上了，但动调几步就退了</p><p>好吧，黔驴技穷了</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="ezvm-1"><a href="#ezvm-1" class="headerlink" title="ezvm"></a>ezvm</h2><p>哇，改个 overlay_offset字段，根本看不出来<br>不过有一说一，可以趁此机会熟悉一下 UPX壳的原理，以及各种魔改UPX的实现</p><p>脱完壳后，再以“初探”的视角，重新做做这题</p><p>VM_Init分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a1[<span class="number">4</span>*<span class="number">0</span>]：EAX</span><br><span class="line">a1[<span class="number">4</span>*<span class="number">1</span>]：EBX</span><br><span class="line">a1[<span class="number">4</span>*<span class="number">2</span>]：ECX</span><br><span class="line">a1[<span class="number">4</span>*<span class="number">3</span>]：EDX</span><br><span class="line">a1[<span class="number">16</span>]：ZF</span><br><span class="line">a1[<span class="number">24</span>]：EIP</span><br><span class="line"></span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">0</span>+<span class="number">2</span>)]：F0</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">0</span>+<span class="number">2</span>)+<span class="number">8</span>]：handler_0</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">1</span>+<span class="number">2</span>)]：F1</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">1</span>+<span class="number">2</span>)+<span class="number">8</span>]：handler_1</span><br><span class="line">……</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">7</span>+<span class="number">2</span>)]：F7</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">7</span>+<span class="number">2</span>)+<span class="number">8</span>]：handler_7</span><br><span class="line"></span><br><span class="line">s[<span class="number">512</span>]：input</span><br><span class="line"></span><br><span class="line">s[<span class="number">544</span>]：key0</span><br><span class="line">s[<span class="number">552</span>]：key1</span><br></pre></td></tr></table></figure><p>VM分析（32位、寄存器式、小端序）：<br>读取字节码，与每个handler的操作码相比较，然后执行相应的handler<br>总之是个RC4</p><p>handler分析：<br>注释写的非常抽象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//handler_0</span></span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *(IP + <span class="number">1LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">0xE0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(IP + <span class="number">4LL</span>) == <span class="number">0xE0</span> )                <span class="comment">// mov reg [s+reg]</span></span><br><span class="line">        v3 = *(s + *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">5LL</span>)));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v3 = *(s + ((*(IP + <span class="number">5LL</span>) &lt;&lt; <span class="number">8</span>) + *(IP + <span class="number">4LL</span>)));    <span class="comment">// mov reg [s+#numm]</span></span><br><span class="line">      *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v2 == <span class="number">0xE1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(s + *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">3LL</span>))) = *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">5LL</span>)); <span class="comment">// mov [s+reg] reg</span></span><br><span class="line">    &#125;</span><br><span class="line">    IP += <span class="number">6LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) = *(IP + <span class="number">3LL</span>);    <span class="comment">// mov reg #num</span></span><br><span class="line">    IP += <span class="number">4LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) = *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">4LL</span>));  <span class="comment">// mov reg reg</span></span><br><span class="line">    IP += <span class="number">5LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//handler_1</span></span><br><span class="line">  v3 = *(IP + <span class="number">2LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(IP + <span class="number">3LL</span>) == <span class="number">0xE0</span> )</span><br><span class="line">    v1 = *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">4LL</span>)) + *(a1 + <span class="number">4LL</span> * v3);  <span class="comment">// add reg reg</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = ((*(IP + <span class="number">4LL</span>) &lt;&lt; <span class="number">8</span>) + *(IP + <span class="number">3LL</span>)) + *(a1 + <span class="number">4LL</span> * v3); <span class="comment">//add  reg #numm</span></span><br><span class="line">  *(a1 + <span class="number">4LL</span> * v3) = v1;</span><br><span class="line">  IP += <span class="number">5LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_2</span></span><br><span class="line">  v3 = *(IP + <span class="number">2LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(IP + <span class="number">3LL</span>) == <span class="number">0xE0</span> )</span><br><span class="line">    v1 = *(a1 + <span class="number">4LL</span> * v3) % *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">4LL</span>));  <span class="comment">// mod reg reg</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = *(a1 + <span class="number">4LL</span> * v3) % ((*(IP + <span class="number">4LL</span>) &lt;&lt; <span class="number">8</span>) + *(IP + <span class="number">3LL</span>)); <span class="comment">// mod reg #numm</span></span><br><span class="line">  *(a1 + <span class="number">4LL</span> * v3) = v1;</span><br><span class="line">  IP += <span class="number">5LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_3</span></span><br><span class="line">  ++*(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>));  <span class="comment">// inc reg </span></span><br><span class="line">  IP += <span class="number">3LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_4</span></span><br><span class="line">  --*(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>));  <span class="comment">// dec reg</span></span><br><span class="line">  IP += <span class="number">3LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_5</span></span><br><span class="line">  *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) ^= *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">4LL</span>)); <span class="comment">// xor reg reg </span></span><br><span class="line">  IP += <span class="number">5LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_6</span></span><br><span class="line">  <span class="keyword">if</span> ( *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) &lt; ((*(IP + <span class="number">4LL</span>) &lt;&lt; <span class="number">8</span>) + *(IP + <span class="number">3LL</span>)) ) <span class="comment">// cmp reg #numm </span></span><br><span class="line">    ZF = <span class="number">1</span>;</span><br><span class="line">  IP += <span class="number">5LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_7</span></span><br><span class="line">  <span class="keyword">if</span> ( ZF )   <span class="comment">// jz #num</span></span><br><span class="line">  &#123;</span><br><span class="line">    IP = &amp;bytecode + *(IP + <span class="number">1LL</span>);</span><br><span class="line">    ZF = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    IP += <span class="number">2LL</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>bytecode+汇编分析：<br>可以看出，魔改的部分，是最后多异或了循环的索引</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">F0 E0 <span class="number">02</span> <span class="number">00</span>         mov ecx <span class="number">0</span></span><br><span class="line"><span class="comment">//4:</span></span><br><span class="line">F0 E0 <span class="number">00</span> E0 <span class="number">02</span>      mov eax ecx</span><br><span class="line">F0 E1 E0 <span class="number">02</span> E0 <span class="number">02</span>   mov [s+ecx] ecx</span><br><span class="line">F0 E0 <span class="number">01</span> <span class="number">10</span>         mov ebx <span class="number">16</span></span><br><span class="line">F2 E0 <span class="number">00</span> E0 <span class="number">01</span>      mod eax ebx</span><br><span class="line">F1 E0 <span class="number">00</span> <span class="number">20</span> <span class="number">02</span>      add eax <span class="number">544</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">00</span>   mov eax [s+eax]</span><br><span class="line">F0 E0 <span class="number">01</span> E0 <span class="number">02</span>      mov ebx ecx</span><br><span class="line">F1 E0 <span class="number">01</span> <span class="number">00</span> <span class="number">01</span>      add ebx <span class="number">256</span></span><br><span class="line">F0 E1 E0 <span class="number">01</span> E0 <span class="number">00</span>   mov [s+ebx] eax</span><br><span class="line">F3 E0 <span class="number">02</span>            inc ecx</span><br><span class="line">F6 E0 <span class="number">02</span> <span class="number">00</span> <span class="number">01</span>      cmp ecx <span class="number">256</span></span><br><span class="line">F7 <span class="number">04</span>               jz <span class="number">4</span></span><br><span class="line"></span><br><span class="line">——————————————————————————————————————————————</span><br><span class="line">F0 E0 <span class="number">02</span> <span class="number">00</span>         mov ecx <span class="number">0</span></span><br><span class="line">F0 E0 <span class="number">03</span> <span class="number">00</span>         mov edx <span class="number">0</span></span><br><span class="line"><span class="comment">//69:</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">02</span>   mov eax [s+ecx]</span><br><span class="line">F1 E0 <span class="number">03</span> E0 <span class="number">00</span>      add edx eax</span><br><span class="line">F0 E0 <span class="number">00</span> E1 <span class="number">02</span>      mov eax ecx</span><br><span class="line">F1 E0 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span>      add eax <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">00</span>   mov eax [s+eax]</span><br><span class="line">F1 E0 <span class="number">03</span> E0 <span class="number">00</span>      add edx eax</span><br><span class="line">F2 E0 <span class="number">03</span> <span class="number">00</span> <span class="number">01</span>      mod edx <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">02</span>   mov eax [s+ecx]</span><br><span class="line">F0 E0 <span class="number">01</span> E1 E0 <span class="number">03</span>   mov ebx [s+edx]</span><br><span class="line">F0 E1 E0 <span class="number">03</span> E0 <span class="number">00</span>   mov [s+edx] eax</span><br><span class="line">F0 E1 E0 <span class="number">02</span> E0 <span class="number">01</span>   mov [s+ecx] ebx</span><br><span class="line">F3 E0 <span class="number">02</span>            inc ecx</span><br><span class="line">F6 E0 <span class="number">02</span> <span class="number">00</span> <span class="number">01</span>      cmp ecx <span class="number">256</span></span><br><span class="line">F7 <span class="number">45</span>               jz <span class="number">69</span></span><br><span class="line"></span><br><span class="line">——————————————————————————————————————————————</span><br><span class="line">F0 E0 <span class="number">02</span> <span class="number">00</span>         mov ecx <span class="number">0</span></span><br><span class="line">F0 E0 <span class="number">03</span> <span class="number">00</span>         mov edx <span class="number">0</span></span><br><span class="line"><span class="comment">//148:</span></span><br><span class="line">F3 E0 <span class="number">02</span>            inc ecx</span><br><span class="line">F2 E0 <span class="number">02</span> <span class="number">00</span> <span class="number">01</span>      mod ecx <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">02</span>   mov eax [s+ecx]</span><br><span class="line">F1 E0 <span class="number">03</span> E0 <span class="number">00</span>      add edx eax</span><br><span class="line">F2 E0 <span class="number">03</span> <span class="number">00</span> <span class="number">01</span>      mod edx <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">02</span>   mov eax [s+ecx]</span><br><span class="line">F0 E0 <span class="number">01</span> E1 E0 <span class="number">03</span>   mov ebx [s+edx]</span><br><span class="line">F0 E1 E0 <span class="number">03</span> E0 <span class="number">00</span>   mov [s+edx] eax</span><br><span class="line">F0 E1 E0 <span class="number">02</span> E0 <span class="number">01</span>   mov [s+ecx] ebx</span><br><span class="line">F1 E0 <span class="number">00</span> E0 <span class="number">01</span>      add eax ebx</span><br><span class="line">F2 E0 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span>      mod eax <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">00</span>   mov eax [s+eax]</span><br><span class="line">F0 E0 <span class="number">01</span> E0 <span class="number">02</span>      mov ebx ecx</span><br><span class="line">F4 E0 <span class="number">01</span>            dec ebx</span><br><span class="line">F1 E0 <span class="number">01</span> <span class="number">00</span> <span class="number">02</span>      add ebx ecx</span><br><span class="line">F0 E0 <span class="number">01</span> E1 E0 <span class="number">01</span>   mov ebx [s+ebx]</span><br><span class="line">F5 E0 <span class="number">00</span> E0 <span class="number">01</span>      xor eax ebx</span><br><span class="line">F1 E0 <span class="number">00</span> E0 <span class="number">02</span>      add eax ecx</span><br><span class="line">F0 E0 <span class="number">01</span> E0 <span class="number">02</span>      mov ebx ecx</span><br><span class="line">F4 E0 <span class="number">01</span>            dec ebx</span><br><span class="line">F1 E0 <span class="number">01</span> <span class="number">00</span> <span class="number">02</span>      add ebx <span class="number">512</span></span><br><span class="line">F0 E1 E0 <span class="number">01</span> E0 <span class="number">00</span>   mov [s+ebx] eax</span><br><span class="line">F0 E0 <span class="number">01</span> E0 <span class="number">02</span>      mov ebx ecx</span><br><span class="line">F4 E0 <span class="number">01</span>            dec ebx</span><br><span class="line">F6 E0 <span class="number">01</span> <span class="number">20</span> <span class="number">00</span>      cmp ebx <span class="number">32</span></span><br><span class="line">F7 <span class="number">94</span>               jz <span class="number">148</span>       </span><br><span class="line"></span><br><span class="line">——————————————————————————————————————————————</span><br><span class="line">F8</span><br></pre></td></tr></table></figure><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>ezre：魔改RC4（Sbox小1/2）、魔改Base64（换表）ezvm：Linux、魔改UPX壳（改overlay_offset）、VM（寄存器式）、魔改RC4（最后^索引）</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethereum进阶技术</title>
      <link href="/2024/12/21/2024-12-21%20Ethereum%E8%BF%9B%E9%98%B6%E6%8A%80%E6%9C%AF/"/>
      <url>/2024/12/21/2024-12-21%20Ethereum%E8%BF%9B%E9%98%B6%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式&#x2F;Proxy"></a>代理模式&#x2F;Proxy</h1><p>机制：</p><ol><li>代理合约&#x2F;Proxy 使用内联汇编、delegatecall()，将调用委托给 逻辑合约&#x2F;Implementation</li><li>期间所有的状态修改，都仅限于 代理合约<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理合约，使用 delegatecall 将所有调用转发给实现合约。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">SimpleProxy</span> is <span class="title class_">Proxy</span> &#123;</span><br><span class="line">    <span class="comment">// 存储实现合约地址的存储槽位置</span></span><br><span class="line">    bytes32 private constant _IMPLEMENTATION_SLOT = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，设置初始实现合约地址</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address implementation</span>) &#123;</span><br><span class="line">        <span class="title function_">assert</span>(_IMPLEMENTATION_SLOT == <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>));</span><br><span class="line">        <span class="title function_">_setImplementation</span>(implementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回当前实现合约的地址</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementation</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_getImplementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置新的实现合约地址</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setImplementation</span>(<span class="params">address newImplementation</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == <span class="title function_">owner</span>(), <span class="string">&quot;仅合约所有者可以设置实现合约&quot;</span>);</span><br><span class="line">        <span class="title function_">_setImplementation</span>(newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取存储在 _IMPLEMENTATION_SLOT 中的实现合约地址</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_getImplementation</span>(<span class="params"></span>) internal view override <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置实现合约地址到 _IMPLEMENTATION_SLOT</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_setImplementation</span>(<span class="params">address newImplementation</span>) private &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title class_">Address</span>.<span class="title function_">isContract</span>(newImplementation), <span class="string">&quot;实现合约不是一个有效的合约&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span> = newImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 delegatecall 调用实现合约的方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_delegate</span>(<span class="params">address implementation</span>) internal virtual override &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// 拷贝 calldata 到内存中的临时位置</span></span><br><span class="line">            <span class="title function_">calldatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 delegatecall 调用实现合约</span></span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(<span class="title function_">gas</span>(), implementation, <span class="number">0</span>, <span class="title function_">calldatasize</span>(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拷贝返回数据回 calldata 的起始位置</span></span><br><span class="line">            <span class="title function_">returndatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据 delegatecall 的结果返回或抛出异常</span></span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="title function_">revert</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约，包含了一些简单的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContract</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置一个新的值，并触发事件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前值</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>合约升级：<br>使用升级函数，通过修改地址，更换代理合约对应的 逻辑合约</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理合约，使用 delegatecall 将所有调用转发给实现合约。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">SimpleUpgradeableProxy</span> is <span class="title class_">Proxy</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">// 存储实现合约地址的存储槽位置</span></span><br><span class="line">    bytes32 private constant _IMPLEMENTATION_SLOT = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，设置初始实现合约地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address implementation</span>) &#123;</span><br><span class="line">        <span class="title function_">assert</span>(_IMPLEMENTATION_SLOT == <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>));</span><br><span class="line">        <span class="title function_">_setImplementation</span>(implementation);</span><br><span class="line">        <span class="title function_">transferOwnership</span>(msg.<span class="property">sender</span>); <span class="comment">// 设置部署者为合约所有者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前实现合约的地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementation</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_getImplementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的实现合约地址，仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address newImplementation</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title class_">Address</span>.<span class="title function_">isContract</span>(newImplementation), <span class="string">&quot;新的实现合约不是一个有效的合约&quot;</span>);</span><br><span class="line">        <span class="title function_">_setImplementation</span>(newImplementation);</span><br><span class="line">        emit <span class="title class_">Upgraded</span>(newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取存储在 _IMPLEMENTATION_SLOT 中的实现合约地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_getImplementation</span>(<span class="params"></span>) internal view override <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置实现合约地址到 _IMPLEMENTATION_SLOT。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_setImplementation</span>(<span class="params">address newImplementation</span>) private &#123;</span><br><span class="line">        <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span> = newImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 delegatecall 调用实现合约的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_delegate</span>(<span class="params">address implementation</span>) internal virtual override &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="title function_">calldatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(<span class="title function_">gas</span>(), implementation, <span class="number">0</span>, <span class="title function_">calldatasize</span>(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="title function_">returndatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="title function_">revert</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Upgraded</span>(address indexed implementation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V1，包含了一些简单的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV1</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V2，在 V1 的基础上增加了新功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV2</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line">    string public message;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">    event <span class="title class_">MessageSet</span>(string newMessage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMessage</span>(<span class="params">string memory newMessage</span>) external &#123;</span><br><span class="line">        message = newMessage;</span><br><span class="line">        emit <span class="title class_">MessageSet</span>(newMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理模式下，合约升级时”选择器冲突“问题 解决方案：</p><ol><li>透明代理：<br>管理员变为工具人，仅能调用代理合约的可升级函数对合约升级；<br>其它用户不能调用可升级函数，但是可以调用逻辑合约的函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个透明代理合约使用 delegatecall 将所有调用转发给实现合约。</span></span><br><span class="line"><span class="comment"> * 管理员仅能调用代理合约的可升级函数对合约升级；</span></span><br><span class="line"><span class="comment"> * 其它用户不能调用可升级函数，但可以调用逻辑合约的函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">TransparentUpgradeableProxy</span> is <span class="title class_">Proxy</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">// 存储实现合约地址的存储槽位置</span></span><br><span class="line">    bytes32 private constant _IMPLEMENTATION_SLOT = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，设置初始实现合约地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address implementation</span>) &#123;</span><br><span class="line">        <span class="title function_">assert</span>(_IMPLEMENTATION_SLOT == <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>));</span><br><span class="line">        <span class="title function_">_setImplementation</span>(implementation);</span><br><span class="line">        <span class="title function_">transferOwnership</span>(msg.<span class="property">sender</span>); <span class="comment">// 设置部署者为合约所有者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前实现合约的地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementation</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_getImplementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的实现合约地址，仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address newImplementation</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title class_">Address</span>.<span class="title function_">isContract</span>(newImplementation), <span class="string">&quot;新的实现合约不是一个有效的合约&quot;</span>);</span><br><span class="line">        <span class="title function_">_setImplementation</span>(newImplementation);</span><br><span class="line">        emit <span class="title class_">Upgraded</span>(newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取存储在 _IMPLEMENTATION_SLOT 中的实现合约地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_getImplementation</span>(<span class="params"></span>) internal view override <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置实现合约地址到 _IMPLEMENTATION_SLOT。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_setImplementation</span>(<span class="params">address newImplementation</span>) private &#123;</span><br><span class="line">        <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span> = newImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 delegatecall 调用实现合约的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_delegate</span>(<span class="params">address implementation</span>) internal virtual override &#123;</span><br><span class="line">        <span class="comment">// 防止普通用户调用代理合约的内部管理函数（如 upgradeTo）</span></span><br><span class="line">        <span class="keyword">if</span> (msg.<span class="property">sig</span> == <span class="variable language_">this</span>.<span class="property">upgradeTo</span>.<span class="property">selector</span> || msg.<span class="property">sig</span> == <span class="variable language_">this</span>.<span class="property">getImplementation</span>.<span class="property">selector</span>) &#123;</span><br><span class="line">            <span class="built_in">require</span>(msg.<span class="property">sender</span> == <span class="title function_">owner</span>(), <span class="string">&quot;TransparentUpgradeableProxy: Unauthorized access&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="title function_">calldatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(<span class="title function_">gas</span>(), implementation, <span class="number">0</span>, <span class="title function_">calldatasize</span>(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="title function_">returndatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="title function_">revert</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Upgraded</span>(address indexed implementation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V1，包含了一些简单的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV1</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V2，在 V1 的基础上增加了新功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV2</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line">    string public message;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">    event <span class="title class_">MessageSet</span>(string newMessage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMessage</span>(<span class="params">string memory newMessage</span>) external &#123;</span><br><span class="line">        message = newMessage;</span><br><span class="line">        emit <span class="title class_">MessageSet</span>(newMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通用可升级代理&#x2F;UUPS：<br>将升级函数放在逻辑合约中；<br>这样一来，如果有其它函数与升级函数存在”选择器冲突”，编译时就会报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个通用可升级代理（UUPS）模式的逻辑合约。</span></span><br><span class="line"><span class="comment"> * 升级逻辑直接嵌入到逻辑合约中，以防止选择器冲突。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV1</span> is <span class="title class_">Initializable</span>, <span class="title class_">UUPSUpgradeable</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化函数，代替构造函数用于代理合约初始化</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) initializer public &#123;</span><br><span class="line">        <span class="title function_">__Ownable_init</span>(); <span class="comment">// 初始化 Ownable 的状态变量</span></span><br><span class="line">        <span class="title function_">__UUPSUpgradeable_init</span>(); <span class="comment">// 初始化 UUPSUpgradeable 的状态变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external onlyOwner &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的实现合约地址，仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_authorizeUpgrade</span>(<span class="params">address newImplementation</span>) internal override onlyOwner &#123;&#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V2，在 V1 的基础上增加了新功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV2</span> is <span class="title class_">Initializable</span>, <span class="title class_">UUPSUpgradeable</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line">    string public message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化函数，代替构造函数用于代理合约初始化</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) initializer public &#123;</span><br><span class="line">        <span class="title function_">__Ownable_init</span>(); <span class="comment">// 初始化 Ownable 的状态变量</span></span><br><span class="line">        <span class="title function_">__UUPSUpgradeable_init</span>(); <span class="comment">// 初始化 UUPSUpgradeable 的状态变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external onlyOwner &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMessage</span>(<span class="params">string memory newMessage</span>) external onlyOwner &#123;</span><br><span class="line">        message = newMessage;</span><br><span class="line">        emit <span class="title class_">MessageSet</span>(newMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的实现合约地址，仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_authorizeUpgrade</span>(<span class="params">address newImplementation</span>) internal override onlyOwner &#123;&#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">    event <span class="title class_">MessageSet</span>(string newMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="WETH"><a href="#WETH" class="headerlink" title="WETH"></a>WETH</h1><p>概述：<br>一种ERC20代币，可与ETH 1:1等价转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WETH 合约实现了 ERC-20 标准，并允许 ETH 和 WETH 之间进行 1:1 的转换。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="variable constant_">WETH</span> is <span class="title class_">ERC20</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化 WETH 合约。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ERC20</span>(<span class="string">&quot;Wrapped Ether&quot;</span>, <span class="string">&quot;WETH&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入 ETH 并铸造相应数量的 WETH。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params"></span>) external payable &#123;</span><br><span class="line">        <span class="title function_">_mint</span>(msg.<span class="property">sender</span>, msg.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁指定数量的 WETH 并提取相应的 ETH。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint256 amount</span>) external &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">balanceOf</span>(msg.<span class="property">sender</span>) &gt;= amount, <span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        <span class="title function_">_burn</span>(msg.<span class="property">sender</span>, amount);</span><br><span class="line">        <span class="title function_">payable</span>(msg.<span class="property">sender</span>).<span class="title function_">transfer</span>(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Merkle证明"><a href="#Merkle证明" class="headerlink" title="Merkle证明"></a>Merkle证明</h1><p>机制：</p><ol><li>将数组构建为 Merkle树</li><li>将待验证数据 传入Merkle树的叶子节点，自下而上计算哈希</li><li>若最终结果 与根哈希匹配，则证明该数据 存在于数组中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">MerkleTree</span> &#123;</span><br><span class="line">    bytes32 public merkleRoot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，用于初始化 Merkle 根哈希。</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">bytes32 _merkleRoot</span>) &#123;</span><br><span class="line">        merkleRoot = _merkleRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两个哈希值的组合哈希。</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hashPair</span>(<span class="params">bytes32 left, bytes32 right</span>) internal pure <span class="title function_">returns</span> (bytes32) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(left, right));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(right, left));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 Merkle 树的根哈希。</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMerkleRoot</span>(<span class="params">bytes32[] memory elements</span>) public pure <span class="title function_">returns</span> (bytes32) &#123;</span><br><span class="line">        uint256 len = elements.<span class="property">length</span>;</span><br><span class="line">        bytes32[] memory nodes = elements;</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>;) &#123;</span><br><span class="line">                nodes[i] = <span class="title function_">hashPair</span>(nodes[i * <span class="number">2</span>], nodes[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">                unchecked &#123; ++i; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                nodes[len / <span class="number">2</span>] = nodes[len - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            len = (len + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证给定的数据和证明路径是否属于 Merkle 树。</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">verifyProof</span>(<span class="params">bytes32 data, bytes32[] memory proof</span>) public view <span class="title function_">returns</span> (bool) &#123;</span><br><span class="line">        bytes32 computedHash = data;</span><br><span class="line">        <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; proof.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            bytes32 proofElement = proof[i];</span><br><span class="line">            <span class="keyword">if</span> (computedHash &lt; proofElement) &#123;</span><br><span class="line">                computedHash = <span class="title function_">hashPair</span>(computedHash, proofElement);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                computedHash = <span class="title function_">hashPair</span>(proofElement, computedHash);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> computedHash == merkleRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="元交易"><a href="#元交易" class="headerlink" title="元交易"></a>元交易</h1><p>机制：</p><ol><li>转发器&#x2F;Forwarder 实现EIP712标准，其中定义了待接收数据的结构</li><li>用户基于该结构 构建数据，签名后 发给转发器</li><li>转发器 验证签名有效性，通过后 基于数据中包含的交易信息，发送交易<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">Forwarder</span> is <span class="title class_">EIP712</span> &#123;</span><br><span class="line">    <span class="comment">// 定义待接收数据的结构体</span></span><br><span class="line">    struct <span class="title class_">MetaTransaction</span> &#123;</span><br><span class="line">        address <span class="keyword">from</span>;</span><br><span class="line">        uint256 nonce;</span><br><span class="line">        bytes functionSignature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事件用于记录成功执行的元交易</span></span><br><span class="line">    event <span class="title class_">MetaTransactionExecuted</span>(address userAddress, address relayerAddress, bytes functionSignature);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储用户的非重复使用计数器（nonce）</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) private nonces;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数初始化EIP712域分隔符</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">EIP712</span>(<span class="string">&quot;Forwarder&quot;</span>, <span class="string">&quot;1&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证并执行元交易。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">executeMetaTransaction</span>(<span class="params">MetaTransaction memory metaTx, bytes memory signature</span>) public <span class="title function_">returns</span> (bytes memory) &#123;</span><br><span class="line">        <span class="built_in">require</span>(nonces[metaTx.<span class="property">from</span>] == metaTx.<span class="property">nonce</span>, <span class="string">&quot;无效的nonce&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复签名者地址</span></span><br><span class="line">        bytes32 digest = <span class="title function_">_hashTypedDataV4</span>(<span class="title function_">keccak256</span>(abi.<span class="title function_">encode</span>(</span><br><span class="line">            <span class="title function_">keccak256</span>(<span class="string">&quot;MetaTransaction(address from,uint256 nonce,bytes functionSignature)&quot;</span>),</span><br><span class="line">            metaTx.<span class="property">from</span>,</span><br><span class="line">            metaTx.<span class="property">nonce</span>,</span><br><span class="line">            <span class="title function_">keccak256</span>(metaTx.<span class="property">functionSignature</span>)</span><br><span class="line">        )));</span><br><span class="line">        address signer = <span class="variable constant_">ECDSA</span>.<span class="title function_">recover</span>(digest, signature);</span><br><span class="line">        <span class="built_in">require</span>(signer == metaTx.<span class="property">from</span>, <span class="string">&quot;无效的签名&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新nonce防止重放攻击</span></span><br><span class="line">        nonces[metaTx.<span class="property">from</span>] = metaTx.<span class="property">nonce</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行交易</span></span><br><span class="line">        (bool success, bytes memory returnData) = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="title function_">call</span>(metaTx.<span class="property">functionSignature</span>);</span><br><span class="line">        <span class="built_in">require</span>(success, <span class="string">&quot;交易执行失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">MetaTransactionExecuted</span>(metaTx.<span class="property">from</span>, msg.<span class="property">sender</span>, metaTx.<span class="property">functionSignature</span>);</span><br><span class="line">        <span class="keyword">return</span> returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定地址的当前nonce值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getNonce</span>(<span class="params">address user</span>) public view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> nonces[user];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标合约，处理元交易</span></span><br><span class="line">contract <span class="title class_">TargetContract</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="variable constant_">ECDSA</span> <span class="keyword">for</span> bytes32;</span><br><span class="line"></span><br><span class="line">    address public forwarder;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyForwarder</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == forwarder, <span class="string">&quot;仅转发器可以调用&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _forwarder</span>) &#123;</span><br><span class="line">        forwarder = _forwarder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 value</span>) external onlyForwarder &#123;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>EIP-712标准：<br>类型化数据 签名校验，具体见此<a href="https://developer.baidu.com/article/details/2727890">文章</a></p><h1 id="多重调用-Multicall"><a href="#多重调用-Multicall" class="headerlink" title="多重调用&#x2F;Multicall"></a>多重调用&#x2F;Multicall</h1><p>机制：<br>多个调用视为同一交易，成功失败具有一致性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">Multicall</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行多个函数调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">multicall</span>(<span class="params">bytes[] calldata data</span>) external <span class="title function_">returns</span> (bytes[] memory results) &#123;</span><br><span class="line">        results = <span class="keyword">new</span> bytes[](data.<span class="property">length</span>);</span><br><span class="line">        <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 执行每个调用并捕获结果或错误</span></span><br><span class="line">            (bool success, bytes memory result) = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="title function_">delegatecall</span>(data[i]);</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                <span class="comment">// 如果任意调用失败，则回滚整个事务</span></span><br><span class="line">                assembly &#123;</span><br><span class="line">                    <span class="title function_">revert</span>(<span class="title function_">add</span>(result, <span class="number">32</span>), <span class="title function_">mload</span>(result))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            results[i] = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标合约，处理多重调用中的具体逻辑</span></span><br><span class="line">contract <span class="title class_">TargetContract</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMessage</span>(<span class="params">string memory message</span>) external &#123;</span><br><span class="line">        emit <span class="title class_">MessageSet</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) external pure <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;默认消息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">MessageSet</span>(string message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="预言机-Oracle"><a href="#预言机-Oracle" class="headerlink" title="预言机&#x2F;Oracle"></a>预言机&#x2F;Oracle</h1><p>概述：<br>一种外部服务，用于将真实世界的数据 引入区块链，使合约能够 基于这些数据执行特定逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">PriceConsumerV3</span> is <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="title class_">AggregatorV3Interface</span> internal priceFeed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，设置使用的 Chainlink 预言机地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _priceFeed</span>) &#123;</span><br><span class="line">        priceFeed = <span class="title class_">AggregatorV3Interface</span>(_priceFeed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最新价格。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLatestPrice</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (int) &#123;</span><br><span class="line">        (</span><br><span class="line">            int price,</span><br><span class="line">        ) = priceFeed.<span class="title function_">latestRoundData</span>();</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">executeBasedOnPrice</span>(<span class="params">int threshold</span>) external onlyOwner &#123;</span><br><span class="line">        int currentPrice = <span class="title function_">getLatestPrice</span>();</span><br><span class="line">        <span class="keyword">if</span> (currentPrice &gt; threshold) &#123;</span><br><span class="line">            emit <span class="title class_">PriceThresholdExceeded</span>(currentPrice, threshold);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">PriceThresholdExceeded</span>(int currentPrice, int threshold);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="去中心化交易所-DEX"><a href="#去中心化交易所-DEX" class="headerlink" title="去中心化交易所&#x2F;DEX"></a>去中心化交易所&#x2F;DEX</h1><h2 id="Uniswap-V1"><a href="#Uniswap-V1" class="headerlink" title="Uniswap V1"></a>Uniswap V1</h2><p>机制：</p><ol><li>工厂合约&#x2F;Factory：为每个新的ETH-token对 创建流动性池合约</li><li>流动性池合约&#x2F;Exchange：<br>addLiquidity()：允许用户将ETH-token 存入自身-对应ERC20代币合约中，同时铸造 自身管理的ERC20代币（份额）<br>removeLiquidity()<br>swap__()：允许用户存入ETH&#x2F;token 并取出token&#x2F;ETH，交换比率 基于两者当前储备量，遵循特定公式（CSAMM, PAMM）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">Factory</span> &#123;</span><br><span class="line">    address[] public exchangeContracts;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> address) public tokenToExchange;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ExchangeCreated</span>(address indexed token, address exchange);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的流动性池合约。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createExchange</span>(<span class="params">address token</span>) external <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="built_in">require</span>(token != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;无效的token地址&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保不会重复创建相同的交易对</span></span><br><span class="line">        <span class="built_in">require</span>(tokenToExchange[token] == <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;已存在该token的流动性池&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Exchange</span> exchange = <span class="keyword">new</span> <span class="title class_">Exchange</span>(token);</span><br><span class="line">        tokenToExchange[token] = <span class="title function_">address</span>(exchange);</span><br><span class="line">        exchangeContracts.<span class="title function_">push</span>(<span class="title function_">address</span>(exchange));</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">ExchangeCreated</span>(token, <span class="title function_">address</span>(exchange));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有流动性池合约的地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getExchangeContracts</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (address[] memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> exchangeContracts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exchange</span> is <span class="title class_">ERC20</span> &#123;</span><br><span class="line">    <span class="title class_">IERC20</span> public token; <span class="comment">// ERC20 代币</span></span><br><span class="line">    uint256 private constant <span class="variable constant_">PRECISION</span> = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _token</span>) <span class="title class_">ERC20</span>(<span class="string">&quot;UniswapV1 LP Token&quot;</span>, <span class="string">&quot;UNI-V1-LP&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(_token != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;无效的token地址&quot;</span>);</span><br><span class="line">        token = <span class="title class_">IERC20</span>(_token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加流动性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addLiquidity</span>(<span class="params">uint256 tokenAmount</span>) external payable <span class="title function_">returns</span> (uint256 liquidityMinted) &#123;</span><br><span class="line">        <span class="built_in">require</span>(tokenAmount &gt; <span class="number">0</span> &amp;&amp; msg.<span class="property">value</span> &gt; <span class="number">0</span>, <span class="string">&quot;需要同时提供ETH和token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 ethBalance = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> - msg.<span class="property">value</span>;</span><br><span class="line">        uint256 tokenReserve = token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint256 totalSupply = <span class="title function_">totalSupply</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (totalSupply == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 初始流动性添加</span></span><br><span class="line">            liquidityMinted = <span class="title function_">sqrt</span>(msg.<span class="property">value</span> * tokenAmount * <span class="variable constant_">PRECISION</span>) / <span class="variable constant_">PRECISION</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 后续流动性添加</span></span><br><span class="line">            uint256 ethReserve = ethBalance;</span><br><span class="line">            <span class="built_in">require</span>(msg.<span class="property">value</span> * tokenReserve &gt;= ethReserve * tokenAmount, <span class="string">&quot;添加比例不正确&quot;</span>);</span><br><span class="line">            liquidityMinted = (msg.<span class="property">value</span> * totalSupply) / ethReserve;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        token.<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), tokenAmount);</span><br><span class="line">        <span class="title function_">_mint</span>(msg.<span class="property">sender</span>, liquidityMinted);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> liquidityMinted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除流动性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeLiquidity</span>(<span class="params">uint256 liquidityAmount</span>) external <span class="title function_">returns</span> (uint256 ethAmount, uint256 tokenAmount) &#123;</span><br><span class="line">        <span class="built_in">require</span>(liquidityAmount &gt; <span class="number">0</span>, <span class="string">&quot;流动性份额必须大于0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 totalSupply = <span class="title function_">totalSupply</span>();</span><br><span class="line">        uint256 ethReserve = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line">        uint256 tokenReserve = token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line"></span><br><span class="line">        ethAmount = (ethReserve * liquidityAmount) / totalSupply;</span><br><span class="line">        tokenAmount = (tokenReserve * liquidityAmount) / totalSupply;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_burn</span>(msg.<span class="property">sender</span>, liquidityAmount);</span><br><span class="line">        <span class="title function_">payable</span>(msg.<span class="property">sender</span>).<span class="title function_">transfer</span>(ethAmount);</span><br><span class="line">        token.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, tokenAmount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (ethAmount, tokenAmount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换 ETH 或 ERC20 代币。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">uint256 inputAmount, bool inputIsEth</span>) external payable <span class="title function_">returns</span> (uint256 outputAmount) &#123;</span><br><span class="line">        uint256 inputReserve;</span><br><span class="line">        uint256 outputReserve;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inputIsEth) &#123;</span><br><span class="line">            <span class="built_in">require</span>(inputAmount == msg.<span class="property">value</span>, <span class="string">&quot;输入金额不匹配&quot;</span>);</span><br><span class="line">            inputReserve = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> - inputAmount;</span><br><span class="line">            outputReserve = token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            token.<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), inputAmount);</span><br><span class="line">            inputReserve = token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)) - inputAmount;</span><br><span class="line">            outputReserve = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用恒定乘积公式计算输出量</span></span><br><span class="line">        uint256 numerator = inputAmount * outputReserve;</span><br><span class="line">        uint256 denominator = inputReserve + inputAmount;</span><br><span class="line">        outputAmount = numerator / denominator;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inputIsEth) &#123;</span><br><span class="line">            token.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, outputAmount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">payable</span>(msg.<span class="property">sender</span>).<span class="title function_">transfer</span>(outputAmount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> outputAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算平方根。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sqrt</span>(<span class="params">uint256 x</span>) internal pure <span class="title function_">returns</span> (uint256 y) &#123;</span><br><span class="line">        uint256 z = (x + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">while</span> (z &lt; y) &#123;</span><br><span class="line">            y = z;</span><br><span class="line">            z = (x / z + z) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Uniswap-V2"><a href="#Uniswap-V2" class="headerlink" title="Uniswap V2"></a>Uniswap V2</h2><p>机制：</p><ol><li>工厂合约：为每个新的 ETH-token、token-token对 创建流动性池合约</li><li>流动性池合约&#x2F;Pair：外围合约中函数的 内部实现</li><li>路由器合约&#x2F;Router：核心合约中函数的 外部封装<br>addLiquidityETH(), addLiquidity()<br>removeLiquidityETH(), removeLiquidity()<br>swap__()：支持闪电交换，借入方需实现 uniswapV2Call()（类似于 IERC3156FlashBorrower.onFlashLoan()）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">Factory</span> &#123;</span><br><span class="line">    address public feeToSetter;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> address)) public getPair;</span><br><span class="line">    address[] public allPairs;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">PairCreated</span>(address indexed token0, address indexed token1, address pair, uint);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        feeToSetter = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createPair</span>(<span class="params">address tokenA, address tokenB</span>) external <span class="title function_">returns</span> (address pair) &#123;</span><br><span class="line">        <span class="built_in">require</span>(tokenA != tokenB, <span class="string">&#x27;UniswapV2: IDENTICAL_ADDRESSES&#x27;</span>);</span><br><span class="line">        (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">        <span class="built_in">require</span>(token0 != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&#x27;UniswapV2: ZERO_ADDRESS&#x27;</span>);</span><br><span class="line">        <span class="built_in">require</span>(getPair[token0][token1] == <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&#x27;UniswapV2: PAIR_EXISTS&#x27;</span>); <span class="comment">// single check is sufficient</span></span><br><span class="line"></span><br><span class="line">        bytes memory bytecode = <span class="title function_">type</span>(<span class="title class_">Pair</span>).<span class="property">creationCode</span>;</span><br><span class="line">        bytes32 salt = <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(token0, token1));</span><br><span class="line">        assembly &#123;</span><br><span class="line">            pair := <span class="title function_">create2</span>(<span class="number">0</span>, <span class="title function_">add</span>(bytecode, <span class="number">32</span>), <span class="title function_">mload</span>(bytecode), salt)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">IERC20</span>(token0).<span class="title function_">approve</span>(pair, <span class="title function_">type</span>(uint256).<span class="property">max</span>);</span><br><span class="line">        <span class="title class_">IERC20</span>(token1).<span class="title function_">approve</span>(pair, <span class="title function_">type</span>(uint256).<span class="property">max</span>);</span><br><span class="line"></span><br><span class="line">        getPair[token0][token1] = pair;</span><br><span class="line">        getPair[token1][token0] = pair; <span class="comment">// populate mapping in the reverse direction</span></span><br><span class="line">        allPairs.<span class="title function_">push</span>(pair);</span><br><span class="line">        emit <span class="title class_">PairCreated</span>(token0, token1, pair, allPairs.<span class="property">length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Pair</span> is <span class="title class_">ERC20</span> &#123;</span><br><span class="line">    <span class="title class_">IERC20</span> public token0;</span><br><span class="line">    <span class="title class_">IERC20</span> public token1;</span><br><span class="line">    uint112 private reserve0;           <span class="comment">// uses single storage slot, accessible via getReserves</span></span><br><span class="line">    uint112 private reserve1;           <span class="comment">// uses single storage slot, accessible via getReserves</span></span><br><span class="line">    uint32  private blockTimestampLast; <span class="comment">// uses single storage slot, accessible via getReserves</span></span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Mint</span>(address indexed sender, uint amount0, uint amount1);</span><br><span class="line">    event <span class="title class_">Burn</span>(address indexed sender, uint amount0, uint amount1, address indexed to);</span><br><span class="line">    event <span class="title class_">Swap</span>(</span><br><span class="line">        address indexed sender,</span><br><span class="line">        uint amount0In, uint amount1In,</span><br><span class="line">        uint amount0Out, uint amount1Out,</span><br><span class="line">        address indexed to</span><br><span class="line">    );</span><br><span class="line">    event <span class="title class_">Sync</span>(uint112 reserve0, uint112 reserve1);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _token0, address _token1</span>) <span class="title class_">ERC20</span>(<span class="string">&quot;Uniswap V2&quot;</span>, <span class="string">&quot;UNI-V2&quot;</span>) &#123;</span><br><span class="line">        token0 = <span class="title class_">IERC20</span>(_token0);</span><br><span class="line">        token1 = <span class="title class_">IERC20</span>(_token1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加流动性逻辑</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">address to</span>) external <span class="title function_">returns</span> (uint liquidity) &#123;</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = <span class="title function_">getReserves</span>(); <span class="comment">// gas savings</span></span><br><span class="line">        uint balance0 = token0.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint balance1 = token1.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint amount0 = balance0 - _reserve0;</span><br><span class="line">        uint amount1 = balance1 - _reserve1;</span><br><span class="line"></span><br><span class="line">        uint _totalSupply = <span class="title function_">totalSupply</span>(); <span class="comment">// gas savings, must be defined here since totalSupply can update in _mintFee</span></span><br><span class="line">        <span class="keyword">if</span> (_totalSupply == <span class="number">0</span>) &#123;</span><br><span class="line">            liquidity = <span class="title function_">sqrt</span>(amount0 * amount1) - <span class="variable constant_">MINIMUM_LIQUIDITY</span>;</span><br><span class="line">           <span class="title function_">_mint</span>(<span class="title function_">address</span>(<span class="number">0</span>), <span class="variable constant_">MINIMUM_LIQUIDITY</span>); <span class="comment">// permanently lock the first MINIMUM_LIQUIDITY tokens</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            liquidity = <span class="title function_">min</span>(amount0 * _totalSupply / _reserve0, amount1 * _totalSupply / _reserve1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">require</span>(liquidity &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED&#x27;</span>);</span><br><span class="line">        <span class="title function_">_mint</span>(to, liquidity);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_update</span>(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        emit <span class="title class_">Mint</span>(msg.<span class="property">sender</span>, amount0, amount1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除流动性逻辑</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">burn</span>(<span class="params">address to</span>) external <span class="title function_">returns</span> (uint amount0, uint amount1) &#123;</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = <span class="title function_">getReserves</span>(); <span class="comment">// gas savings</span></span><br><span class="line">        address _token0 = token0;                                <span class="comment">// gas savings</span></span><br><span class="line">        address _token1 = token1;                                <span class="comment">// gas savings</span></span><br><span class="line">        uint balance0 = <span class="title class_">IERC20</span>(_token0).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint balance1 = <span class="title class_">IERC20</span>(_token1).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint liquidity = balanceOf[<span class="title function_">address</span>(<span class="variable language_">this</span>)];</span><br><span class="line"></span><br><span class="line">        uint _totalSupply = <span class="title function_">totalSupply</span>(); <span class="comment">// gas savings, must be defined here since totalSupply can update in _mintFee</span></span><br><span class="line">        amount0 = liquidity * _reserve0 / _totalSupply; <span class="comment">// using balances ensures pro-rata distribution</span></span><br><span class="line">        amount1 = liquidity * _reserve1 / _totalSupply; <span class="comment">// using balances ensures pro-rata distribution</span></span><br><span class="line">        <span class="built_in">require</span>(amount0 &gt; <span class="number">0</span> &amp;&amp; amount1 &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED&#x27;</span>);</span><br><span class="line">        <span class="title function_">_burn</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), liquidity);</span><br><span class="line">        <span class="title function_">_safeTransfer</span>(_token0, to, amount0);</span><br><span class="line">        <span class="title function_">_safeTransfer</span>(_token1, to, amount1);</span><br><span class="line">        balance0 = <span class="title class_">IERC20</span>(_token0).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        balance1 = <span class="title class_">IERC20</span>(_token1).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_update</span>(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) <span class="title function_">_optionalSwapCall</span>(to, data);</span><br><span class="line">        emit <span class="title class_">Burn</span>(msg.<span class="property">sender</span>, amount0, amount1, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换逻辑</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">uint amount0Out, uint amount1Out, address to, bytes calldata data</span>) external &#123;</span><br><span class="line">        <span class="built_in">require</span>(amount0Out &gt; <span class="number">0</span> || amount1Out &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = <span class="title function_">getReserves</span>(); <span class="comment">// gas savings</span></span><br><span class="line">        <span class="built_in">require</span>(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, <span class="string">&#x27;UniswapV2: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        uint balance0;</span><br><span class="line">        uint balance1;</span><br><span class="line">        &#123; <span class="comment">// scope for _token&#123;0,1&#125;, avoids stack too deep errors</span></span><br><span class="line">        address _token0 = token0;</span><br><span class="line">        address _token1 = token1;</span><br><span class="line">        <span class="built_in">require</span>(to != _token0 &amp;&amp; to != _token1, <span class="string">&#x27;UniswapV2: INVALID_TO&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (amount0Out &gt; <span class="number">0</span>) <span class="title function_">_safeTransfer</span>(_token0, to, amount0Out); <span class="comment">// optimistically transfer tokens</span></span><br><span class="line">        <span class="keyword">if</span> (amount1Out &gt; <span class="number">0</span>) <span class="title function_">_safeTransfer</span>(_token1, to, amount1Out); <span class="comment">// optimistically transfer tokens</span></span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) <span class="title function_">_optionalSwapCall</span>(to, data);</span><br><span class="line">        balance0 = <span class="title class_">IERC20</span>(_token0).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        balance1 = <span class="title class_">IERC20</span>(_token1).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        uint amount0In = balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : <span class="number">0</span>;</span><br><span class="line">        uint amount1In = balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">require</span>(amount0In &gt; <span class="number">0</span> || amount1In &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INSUFFICIENT_INPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        &#123; <span class="comment">// scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span></span><br><span class="line">        uint balance0Adjusted = balance0 * <span class="number">1000</span> - amount0In * <span class="number">3</span>;</span><br><span class="line">        uint balance1Adjusted = balance1 * <span class="number">1000</span> - amount1In * <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">require</span>(balance0Adjusted * balance1Adjusted &gt;= <span class="title function_">uint</span>(_reserve0) * <span class="title function_">uint</span>(_reserve1) * <span class="number">1000</span>**<span class="number">2</span>, <span class="string">&#x27;UniswapV2: K&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_update</span>(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        emit <span class="title class_">Swap</span>(msg.<span class="property">sender</span>, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前储备</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getReserves</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) &#123;</span><br><span class="line">        _reserve0 = reserve0;</span><br><span class="line">        _reserve1 = reserve1;</span><br><span class="line">        _blockTimestampLast = blockTimestampLast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新储备</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_update</span>(<span class="params">uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1</span>) private &#123;</span><br><span class="line">        <span class="built_in">require</span>(balance0 &lt;= <span class="title function_">type</span>(uint112).<span class="property">max</span> &amp;&amp; balance1 &lt;= <span class="title function_">type</span>(uint112).<span class="property">max</span>, <span class="string">&#x27;UniswapV2: OVERFLOW&#x27;</span>);</span><br><span class="line">        uint32 blockTimestamp = <span class="title function_">uint32</span>(block.<span class="property">timestamp</span> % <span class="number">2</span>**<span class="number">32</span>);</span><br><span class="line">        uint32 timeElapsed = blockTimestamp - blockTimestampLast; <span class="comment">// overflow is desired</span></span><br><span class="line">        <span class="keyword">if</span> (timeElapsed &gt; <span class="number">0</span> &amp;&amp; _reserve0 != <span class="number">0</span> &amp;&amp; _reserve1 != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// * never overflows, and + overflow is desired</span></span><br><span class="line">            price0CumulativeLast += <span class="title function_">uint</span>(<span class="title class_">UQ112</span>x112.<span class="title function_">encode</span>(_reserve1).<span class="title function_">uqdiv</span>(_reserve0)) * timeElapsed;</span><br><span class="line">            price1CumulativeLast += <span class="title function_">uint</span>(<span class="title class_">UQ112</span>x112.<span class="title function_">encode</span>(_reserve0).<span class="title function_">uqdiv</span>(_reserve1)) * timeElapsed;</span><br><span class="line">        &#125;</span><br><span class="line">        reserve0 = <span class="title function_">uint112</span>(balance0);</span><br><span class="line">        reserve1 = <span class="title function_">uint112</span>(balance1);</span><br><span class="line">        blockTimestampLast = blockTimestamp;</span><br><span class="line">        emit <span class="title class_">Sync</span>(reserve0, reserve1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安全转账</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_safeTransfer</span>(<span class="params">address token, address to, uint value</span>) private &#123;</span><br><span class="line">        (bool success, bytes memory data) = token.<span class="title function_">call</span>(abi.<span class="title function_">encodeWithSelector</span>(<span class="title class_">IERC20</span>.<span class="property">transfer</span>.<span class="property">selector</span>, to, value));</span><br><span class="line">        <span class="built_in">require</span>(success &amp;&amp; (data.<span class="property">length</span> == <span class="number">0</span> || abi.<span class="title function_">decode</span>(data, (bool))), <span class="string">&#x27;UniswapV2: TRANSFER_FAILED&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可选的闪电交换回调</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_optionalSwapCall</span>(<span class="params">address to, bytes memory data</span>) private &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">require</span>(to.<span class="property">code</span>.<span class="property">length</span> &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INVALID_CALLBACK&#x27;</span>);</span><br><span class="line">            (bool success, bytes memory returndata) = to.<span class="title function_">delegatecall</span>(abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;uniswapV2Call(address,uint256,uint256,bytes)&quot;</span>, msg.<span class="property">sender</span>, amount0Out, amount1Out, data));</span><br><span class="line">            <span class="built_in">require</span>(success, <span class="string">&#x27;UniswapV2: CALL_FAILED&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sqrt</span>(<span class="params">uint y</span>) internal pure <span class="title function_">returns</span> (uint z) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            z = y;</span><br><span class="line">            uint x = y / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (x &lt; z) &#123;</span><br><span class="line">                z = x;</span><br><span class="line">                x = (y / x + x) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">            z = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">min</span>(<span class="params">uint x, uint y</span>) internal pure <span class="title function_">returns</span> (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt;= y ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Router</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="title class_">SafeERC20</span> <span class="keyword">for</span> <span class="title class_">IERC20</span>;</span><br><span class="line"></span><br><span class="line">    address public immutable factory;</span><br><span class="line">    address public immutable <span class="variable constant_">WETH</span>;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">ensure</span>(<span class="params">uint deadline</span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(deadline &gt;= block.<span class="property">timestamp</span>, <span class="string">&#x27;UniswapV2Router: EXPIRED&#x27;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _factory, address _WETH</span>) &#123;</span><br><span class="line">        factory = _factory;</span><br><span class="line">        <span class="variable constant_">WETH</span> = _WETH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;</span><br><span class="line">        <span class="title function_">assert</span>(msg.<span class="property">sender</span> == <span class="variable constant_">WETH</span>); <span class="comment">// only accept ETH via fallback from the WETH contract</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加流动性（ETH-token）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addLiquidityETH</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint amountTokenDesired,</span></span><br><span class="line"><span class="params">        uint amountTokenMin,</span></span><br><span class="line"><span class="params">        uint amountETHMin,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external payable <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint amountToken, uint amountETH, uint liquidity) &#123;</span><br><span class="line">        (amountToken, amountETH) = <span class="title class_">Pair</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>))).<span class="property">mint</span>&#123;<span class="attr">value</span>: msg.<span class="property">value</span>&#125;(to);</span><br><span class="line">        <span class="built_in">require</span>(amountToken &gt;= amountTokenMin &amp;&amp; amountETH &gt;= amountETHMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">        liquidity = <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>)).<span class="title function_">balanceOf</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加流动性（token-token）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addLiquidity</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address tokenA,</span></span><br><span class="line"><span class="params">        address tokenB,</span></span><br><span class="line"><span class="params">        uint amountADesired,</span></span><br><span class="line"><span class="params">        uint amountBDesired,</span></span><br><span class="line"><span class="params">        uint amountAMin,</span></span><br><span class="line"><span class="params">        uint amountBMin,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint amountA, uint amountB, uint liquidity) &#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(tokenA).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB)), amountADesired);</span><br><span class="line">        <span class="title class_">IERC20</span>(tokenB).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB)), amountBDesired);</span><br><span class="line">        (amountA, amountB) = <span class="title class_">Pair</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB))).<span class="title function_">mint</span>(to);</span><br><span class="line">        <span class="built_in">require</span>(amountA &gt;= amountAMin &amp;&amp; amountB &gt;= amountBMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">        liquidity = <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB)).<span class="title function_">balanceOf</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除流动性（ETH-token）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeLiquidityETH</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint liquidity,</span></span><br><span class="line"><span class="params">        uint amountTokenMin,</span></span><br><span class="line"><span class="params">        uint amountETHMin,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint amountToken, uint amountETH) &#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>))).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>)), liquidity);</span><br><span class="line">        (amountToken, amountETH) = <span class="title class_">Pair</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>))).<span class="title function_">burn</span>(to);</span><br><span class="line">        <span class="built_in">require</span>(amountToken &gt;= amountTokenMin &amp;&amp; amountETH &gt;= amountETHMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除流动性（token-token）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeLiquidity</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address tokenA,</span></span><br><span class="line"><span class="params">        address tokenB,</span></span><br><span class="line"><span class="params">        uint liquidity,</span></span><br><span class="line"><span class="params">        uint amountAMin,</span></span><br><span class="line"><span class="params">        uint amountBMin,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint amountA, uint amountB) &#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB))).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB)), liquidity);</span><br><span class="line">        (amountA, amountB) = <span class="title class_">Pair</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB))).<span class="title function_">burn</span>(to);</span><br><span class="line">        <span class="built_in">require</span>(amountA &gt;= amountAMin &amp;&amp; amountB &gt;= amountBMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换（支持闪电交换）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapExactTokensForTokens</span>(<span class="params"></span></span><br><span class="line"><span class="params">        uint amountIn,</span></span><br><span class="line"><span class="params">        uint amountOutMin,</span></span><br><span class="line"><span class="params">        address[] calldata path,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint[] memory amounts) &#123;</span><br><span class="line">        amounts = <span class="title function_">getAmountsOut</span>(amountIn, path);</span><br><span class="line">        <span class="built_in">require</span>(amounts[amounts.<span class="property">length</span> - <span class="number">1</span>] &gt;= amountOutMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        <span class="title class_">IERC20</span>(path[<span class="number">0</span>]).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(path[<span class="number">0</span>], path[<span class="number">1</span>])), amounts[<span class="number">0</span>]);</span><br><span class="line">        <span class="title function_">_swap</span>(amounts, path, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapExactETHForTokens</span>(<span class="params"></span></span><br><span class="line"><span class="params">        uint amountOutMin,</span></span><br><span class="line"><span class="params">        address[] calldata path,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external payable <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint[] memory amounts) &#123;</span><br><span class="line">        <span class="built_in">require</span>(path[<span class="number">0</span>] == <span class="variable constant_">WETH</span>, <span class="string">&#x27;UniswapV2Router: INVALID_PATH&#x27;</span>);</span><br><span class="line">        amounts = <span class="title function_">getAmountsOut</span>(msg.<span class="property">value</span>, path);</span><br><span class="line">        <span class="built_in">require</span>(amounts[amounts.<span class="property">length</span> - <span class="number">1</span>] &gt;= amountOutMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        <span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="property">deposit</span>&#123;<span class="attr">value</span>: amounts[<span class="number">0</span>]&#125;();</span><br><span class="line">        <span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="title function_">transfer</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(path[<span class="number">0</span>], path[<span class="number">1</span>])), amounts[<span class="number">0</span>]);</span><br><span class="line">        <span class="title function_">_swap</span>(amounts, path, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_swap</span>(<span class="params">uint[] memory amounts, address[] memory path, address _to</span>) internal virtual &#123;</span><br><span class="line">        <span class="keyword">for</span> (uint i; i &lt; path.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            (address input, address output) = (path[i], path[i + <span class="number">1</span>]);</span><br><span class="line">            (address token0,) = <span class="title class_">UniswapV2Library</span>.<span class="title function_">sortTokens</span>(input, output);</span><br><span class="line">            uint amountOut = amounts[i + <span class="number">1</span>];</span><br><span class="line">            (uint amount0Out, uint amount1Out) = input == token0 ? (<span class="title function_">uint</span>(<span class="number">0</span>), amountOut) : (amountOut, <span class="title function_">uint</span>(<span class="number">0</span>));</span><br><span class="line">            address to = i &lt; path.<span class="property">length</span> - <span class="number">2</span> ? <span class="title class_">UniswapV2Library</span>.<span class="title function_">pairFor</span>(factory, input, output) : _to;</span><br><span class="line">            <span class="title class_">Pair</span>(<span class="title class_">UniswapV2Library</span>.<span class="title function_">pairFor</span>(factory, input, output)).<span class="title function_">swap</span>(amount0Out, amount1Out, to, <span class="keyword">new</span> <span class="title function_">bytes</span>(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getAmountsOut</span>(<span class="params">uint amountIn, address[] memory path</span>) public view <span class="title function_">returns</span> (uint[] memory amounts) &#123;</span><br><span class="line">        <span class="built_in">require</span>(path.<span class="property">length</span> &gt;= <span class="number">2</span>, <span class="string">&#x27;UniswapV2Router: INVALID_PATH&#x27;</span>);</span><br><span class="line">        amounts = <span class="keyword">new</span> uint[](path.<span class="property">length</span>);</span><br><span class="line">        amounts[<span class="number">0</span>] = amountIn;</span><br><span class="line">        <span class="keyword">for</span> (uint i; i &lt; path.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            (uint reserveIn, uint reserveOut) = <span class="title class_">UniswapV2Library</span>.<span class="title function_">getReserves</span>(factory, path[i], path[i + <span class="number">1</span>]);</span><br><span class="line">            amounts[i + <span class="number">1</span>] = <span class="title class_">UniswapV2Library</span>.<span class="title function_">getAmountOut</span>(amounts[i], reserveIn, reserveOut);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">library <span class="title class_">UniswapV2Library</span> &#123;</span><br><span class="line">    <span class="comment">// Helper functions and logic used by the router and pair contracts</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sortTokens</span>(<span class="params">address tokenA, address tokenB</span>) internal pure <span class="title function_">returns</span> (address token0, address token1) &#123;</span><br><span class="line">        <span class="built_in">require</span>(tokenA != tokenB, <span class="string">&#x27;UniswapV2Library: IDENTICAL_ADDRESSES&#x27;</span>);</span><br><span class="line">        (token0, token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">        <span class="built_in">require</span>(token0 != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&#x27;UniswapV2Library: ZERO_ADDRESS&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pairFor</span>(<span class="params">address factory, address tokenA, address tokenB</span>) internal pure <span class="title function_">returns</span> (address pair) &#123;</span><br><span class="line">        (address token0, address token1) = <span class="title function_">sortTokens</span>(tokenA, tokenB);</span><br><span class="line">        pair = <span class="title function_">address</span>(<span class="title function_">uint160</span>(<span class="title function_">uint</span>(<span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(</span><br><span class="line">                hex<span class="string">&#x27;ff&#x27;</span>,</span><br><span class="line">                factory,</span><br><span class="line">                <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(token0, token1)),</span><br><span class="line">                hex<span class="string">&#x27;96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f&#x27;</span> <span class="comment">// init code hash</span></span><br><span class="line">            )))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getReserves</span>(<span class="params">address factory, address tokenA, address tokenB</span>) internal view <span class="title function_">returns</span> (uint reserveA, uint reserveB) &#123;</span><br><span class="line">        (address token0,) = <span class="title function_">sortTokens</span>(tokenA, tokenB);</span><br><span class="line">        (uint reserve0, uint reserve1,) = <span class="title class_">IPair</span>(<span class="title class_">IPair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB))).<span class="title function_">getReserves</span>();</span><br><span class="line">        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getAmountOut</span>(<span class="params">uint amountIn, uint reserveIn, uint reserveOut</span>) internal pure <span class="title function_">returns</span> (uint amountOut) &#123;</span><br><span class="line">        <span class="built_in">require</span>(amountIn &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        <span class="built_in">require</span>(reserveIn &gt; <span class="number">0</span> &amp;&amp; reserveOut &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">        uint amountInWithFee = amountIn * <span class="number">997</span>;</span><br><span class="line">        uint numerator = amountInWithFee * reserveOut;</span><br><span class="line">        uint denominator = reserveIn * <span class="number">1000</span> + amountInWithFee;</span><br><span class="line">        amountOut = numerator / denominator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.wtf.academy/docs/solidity-103/ProxyContract">https://www.wtf.academy/docs/solidity-103/ProxyContract</a><br><a href="https://developer.baidu.com/article/details/2727890">https://developer.baidu.com/article/details/2727890</a><br><a href="https://blog.csdn.net/llslinliansheng/article/details/129404672">https://blog.csdn.net/llslinliansheng/article/details/129404672</a><br><a href="https://ethereum.org/zh/developers/tutorials/uniswap-v2-annotated-code/#uniswapv2pair">https://ethereum.org/zh/developers/tutorials/uniswap-v2-annotated-code/#uniswapv2pair</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain 专题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2024</title>
      <link href="/2024/12/19/2024-12-19%20HGAME%202024/"/>
      <url>/2024/12/19/2024-12-19%20HGAME%202024/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="mystery"><a href="#mystery" class="headerlink" title="mystery"></a>mystery</h3><p>加密分析：<br>有代码混淆，但没想到给变量改名，会触发IDA重新生成伪代码，然后虚假控制流部分就被自动优化掉了，属实没绷住<br>加密部分又是个魔改RC4，但有小技俩<br>.init_array中第一次RC4，对第二次RC4的 sbox进行初始化，key进行修改<br>.fini_array中第二次RC4，读取输入，sbox重新初始化</p><p>解密：<br>dump一手Sbox，不过main里有ptrace()反调试，先patch一手<br>解密脚本甚至照搬用上一题的</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Sbox[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x77</span>, <span class="number">0xD3</span>, <span class="number">0x1C</span>, <span class="number">0x30</span>, <span class="number">0xEB</span>, <span class="number">0xDA</span>, <span class="number">0x44</span>, <span class="number">0x34</span>, <span class="number">0xCA</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x9A</span>, <span class="number">0x05</span>, <span class="number">0x99</span>, <span class="number">0xC8</span>, <span class="number">0xC1</span>, <span class="number">0x53</span>, <span class="number">0x1E</span>, <span class="number">0xA9</span>, <span class="number">0xF8</span>, </span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x27</span>, <span class="number">0x83</span>, <span class="number">0xA8</span>, <span class="number">0x28</span>, <span class="number">0x5B</span>, <span class="number">0x76</span>, <span class="number">0xB8</span>, <span class="number">0x88</span>, <span class="number">0x1F</span>, </span><br><span class="line">  <span class="number">0x94</span>, <span class="number">0x0A</span>, <span class="number">0x2D</span>, <span class="number">0xE1</span>, <span class="number">0x74</span>, <span class="number">0xD2</span>, <span class="number">0x0F</span>, <span class="number">0xAA</span>, <span class="number">0xB9</span>, <span class="number">0x0E</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x3A</span>, <span class="number">0xAB</span>, <span class="number">0x58</span>, <span class="number">0xD9</span>, <span class="number">0xDB</span>, <span class="number">0x43</span>, <span class="number">0xBC</span>, <span class="number">0x64</span>, <span class="number">0x1A</span>, </span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x0D</span>, <span class="number">0x4D</span>, <span class="number">0xEF</span>, <span class="number">0x65</span>, <span class="number">0x7D</span>, <span class="number">0x72</span>, <span class="number">0xCD</span>, <span class="number">0xA7</span>, <span class="number">0x4C</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0x2E</span>, <span class="number">0xCB</span>, <span class="number">0xA6</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0xAC</span>, <span class="number">0x37</span>, <span class="number">0x0C</span>, <span class="number">0x50</span>, </span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xC9</span>, <span class="number">0xD8</span>, <span class="number">0xBF</span>, <span class="number">0x19</span>, <span class="number">0x2A</span>, <span class="number">0xF6</span>, <span class="number">0x82</span>, <span class="number">0xFF</span>, <span class="number">0x1B</span>, </span><br><span class="line">  <span class="number">0x66</span>, <span class="number">0x39</span>, <span class="number">0x22</span>, <span class="number">0x36</span>, <span class="number">0xF9</span>, <span class="number">0xEE</span>, <span class="number">0x23</span>, <span class="number">0x56</span>, <span class="number">0x6D</span>, <span class="number">0x0B</span>, </span><br><span class="line">  <span class="number">0xFA</span>, <span class="number">0x3B</span>, <span class="number">0xCF</span>, <span class="number">0xD7</span>, <span class="number">0x9F</span>, <span class="number">0x33</span>, <span class="number">0xE5</span>, <span class="number">0x85</span>, <span class="number">0xDE</span>, <span class="number">0xC0</span>, </span><br><span class="line">  <span class="number">0xE6</span>, <span class="number">0x8E</span>, <span class="number">0x78</span>, <span class="number">0x03</span>, <span class="number">0xCC</span>, <span class="number">0xA0</span>, <span class="number">0x9D</span>, <span class="number">0x06</span>, <span class="number">0x9B</span>, <span class="number">0x45</span>, </span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x8C</span>, <span class="number">0xDC</span>, <span class="number">0x95</span>, <span class="number">0x02</span>, <span class="number">0x14</span>, <span class="number">0x90</span>, <span class="number">0x61</span>, </span><br><span class="line">  <span class="number">0xAF</span>, <span class="number">0x42</span>, <span class="number">0x2F</span>, <span class="number">0x3E</span>, <span class="number">0x81</span>, <span class="number">0x8B</span>, <span class="number">0xD4</span>, <span class="number">0xC6</span>, <span class="number">0x51</span>, <span class="number">0x17</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x4F</span>, <span class="number">0xE4</span>, <span class="number">0xFE</span>, <span class="number">0xC4</span>, <span class="number">0x5F</span>, <span class="number">0x52</span>, <span class="number">0x7F</span>, <span class="number">0xA3</span>, <span class="number">0xB6</span>, </span><br><span class="line">  <span class="number">0x6F</span>, <span class="number">0x24</span>, <span class="number">0xEA</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, <span class="number">0xF7</span>, <span class="number">0xAD</span>, <span class="number">0x2B</span>, <span class="number">0x29</span>, <span class="number">0xFB</span>, </span><br><span class="line">  <span class="number">0xAE</span>, <span class="number">0x79</span>, <span class="number">0xC2</span>, <span class="number">0x7A</span>, <span class="number">0x4B</span>, <span class="number">0x31</span>, <span class="number">0x71</span>, <span class="number">0x09</span>, <span class="number">0x69</span>, <span class="number">0xE2</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0xF5</span>, <span class="number">0xE7</span>, <span class="number">0x35</span>, <span class="number">0x5C</span>, <span class="number">0xD6</span>, <span class="number">0x6C</span>, <span class="number">0xE8</span>, <span class="number">0x4E</span>, <span class="number">0xC3</span>, </span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0xDD</span>, <span class="number">0xEC</span>, <span class="number">0x15</span>, <span class="number">0xB5</span>, <span class="number">0x6E</span>, <span class="number">0xC7</span>, <span class="number">0xD5</span>, <span class="number">0xB0</span>, <span class="number">0x2C</span>, </span><br><span class="line">  <span class="number">0x68</span>, <span class="number">0x5E</span>, <span class="number">0x59</span>, <span class="number">0x84</span>, <span class="number">0x5A</span>, <span class="number">0x40</span>, <span class="number">0x1D</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x5D</span>, </span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0xE3</span>, <span class="number">0x49</span>, <span class="number">0x6A</span>, <span class="number">0xFC</span>, <span class="number">0xED</span>, <span class="number">0x57</span>, <span class="number">0x54</span>, <span class="number">0x92</span>, <span class="number">0x10</span>, </span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0xFD</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x98</span>, <span class="number">0x46</span>, <span class="number">0xC5</span>, <span class="number">0x12</span>, <span class="number">0x41</span>, <span class="number">0x8F</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x13</span>, <span class="number">0xA2</span>, <span class="number">0x62</span>, <span class="number">0xD0</span>, <span class="number">0xA4</span>, <span class="number">0x18</span>, <span class="number">0xB7</span>, <span class="number">0x73</span>, <span class="number">0xF0</span>, </span><br><span class="line">  <span class="number">0xCE</span>, <span class="number">0x7E</span>, <span class="number">0x20</span>, <span class="number">0xF3</span>, <span class="number">0xBD</span>, <span class="number">0x9C</span>, <span class="number">0xDF</span>, <span class="number">0x86</span>, <span class="number">0xF4</span>, <span class="number">0x97</span>, </span><br><span class="line">  <span class="number">0xB2</span>, <span class="number">0x55</span>, <span class="number">0xF2</span>, <span class="number">0x63</span>, <span class="number">0x89</span>, <span class="number">0xBB</span>, <span class="number">0x25</span>, <span class="number">0x7B</span>, <span class="number">0xBE</span>, <span class="number">0x38</span>, </span><br><span class="line">  <span class="number">0x9E</span>, <span class="number">0x8D</span>, <span class="number">0xB4</span>, <span class="number">0x48</span>, <span class="number">0x4A</span>, <span class="number">0x16</span>, <span class="number">0x93</span>, <span class="number">0xBA</span>, <span class="number">0x60</span>, <span class="number">0x3C</span>, </span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0xD1</span>, <span class="number">0x21</span>, <span class="number">0x6B</span>, <span class="number">0x32</span>, <span class="number">0x26</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> cipher[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x42</span>, <span class="number">0x38</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0x54</span>, <span class="number">0x90</span>, <span class="number">0x6F</span>, <span class="number">0xFE</span>, <span class="number">0x6F</span>, </span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0x69</span>, <span class="number">0xB9</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x16</span>, <span class="number">0x8F</span>, <span class="number">0x44</span>, <span class="number">0x38</span>, <span class="number">0x4A</span>, </span><br><span class="line">  <span class="number">0xEF</span>, <span class="number">0x37</span>, <span class="number">0x43</span>, <span class="number">0xC0</span>, <span class="number">0xA2</span>, <span class="number">0xB6</span>, <span class="number">0x34</span>, <span class="number">0x2C</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">size_t</span> cipher_len = <span class="keyword">sizeof</span>(cipher) / <span class="keyword">sizeof</span>(cipher[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_like_algorithm</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">size_t</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *Sbox)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> v2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> v3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (v2 &lt; data_len) &#123;</span><br><span class="line">        v1 = (v1 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        <span class="type">uint8_t</span> v4 = Sbox[v1];</span><br><span class="line">        v3 = (v4 + v3) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">        Sbox[v1] = Sbox[v3];</span><br><span class="line">        Sbox[v3] = v4;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint8_t</span> result = Sbox[(v4 + Sbox[v1]) &amp; <span class="number">0xFF</span>];</span><br><span class="line"></span><br><span class="line">        data[v2] += result;</span><br><span class="line"></span><br><span class="line">        v2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    rc4_like_algorithm(cipher, cipher_len, Sbox);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后数据: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cipher_len; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, cipher[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;I826-2e904t-4t98-9i82&#125;</span></span><br></pre></td></tr></table></figure><h3 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h3><p>dump：<br>Buffer变量起始处藏了个PE<br>且每个原PE的byte被扩充了了dword，所以dump后提取一下</p><p>去花后分析：<br>打开发现还有花指令，所以还得patch一下<br>扔进IDA(32位)，看到是一个魔改RC4<br>因为input[]下标向前溢出（到Sbox[]），所以伪代码显示很奇怪，所以自行先还原一下</p><p>加密部分还原：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v1 = (v1 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v4 = Sbox[v1];</span><br><span class="line">v3 = (v4 + v3) % <span class="number">256</span>;</span><br><span class="line">Sbox[v1] = Sbox[v3];</span><br><span class="line">Sbox[v3] = v4;</span><br><span class="line">result = Sbox[<span class="number">256</span>-(<span class="type">unsigned</span> __int8)(v4 + Sbox[v1])];</span><br><span class="line">input[v2++] += result;</span><br><span class="line">&#125; <span class="keyword">while</span> ( v2 &lt; input );</span><br></pre></td></tr></table></figure><p>exp：<br>这里被一个小失误卡了一些时间————<br>获取Sbox时，dump了 RC4已加密了两个字节时 的Sbox，然而此时Sbox已改变，所以一直解不出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Sbox[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x12</span>, <span class="number">0xEF</span>, <span class="number">0xF8</span>, <span class="number">0x79</span>, <span class="number">0xF9</span>, <span class="number">0xE0</span>, <span class="number">0xEA</span>, <span class="number">0xBE</span>, <span class="number">0xA9</span>, <span class="number">0x26</span>, </span><br><span class="line">  <span class="number">0xED</span>, <span class="number">0x94</span>, <span class="number">0x3E</span>, <span class="number">0xE6</span>, <span class="number">0x8F</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0xBF</span>, <span class="number">0x2A</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0x49</span>, <span class="number">0xDF</span>, <span class="number">0x57</span>, <span class="number">0x5F</span>, <span class="number">0xCA</span>, <span class="number">0x33</span>, <span class="number">0x67</span>, <span class="number">0x6B</span>, <span class="number">0xCD</span>, </span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x97</span>, <span class="number">0xA7</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x7E</span>, <span class="number">0x1A</span>, <span class="number">0xB9</span>, <span class="number">0xE1</span>, <span class="number">0xEC</span>, </span><br><span class="line">  <span class="number">0xBD</span>, <span class="number">0xDD</span>, <span class="number">0x51</span>, <span class="number">0x2E</span>, <span class="number">0xA0</span>, <span class="number">0x28</span>, <span class="number">0xCE</span>, <span class="number">0x52</span>, <span class="number">0x1E</span>, <span class="number">0xD7</span>, </span><br><span class="line">  <span class="number">0xBB</span>, <span class="number">0x63</span>, <span class="number">0x5C</span>, <span class="number">0xFE</span>, <span class="number">0xDB</span>, <span class="number">0x0D</span>, <span class="number">0x8C</span>, <span class="number">0x60</span>, <span class="number">0x39</span>, <span class="number">0x10</span>, </span><br><span class="line">  <span class="number">0xCF</span>, <span class="number">0x9B</span>, <span class="number">0x9A</span>, <span class="number">0x73</span>, <span class="number">0x3C</span>, <span class="number">0x4E</span>, <span class="number">0xDC</span>, <span class="number">0x7A</span>, <span class="number">0x23</span>, <span class="number">0x87</span>, </span><br><span class="line">  <span class="number">0xFC</span>, <span class="number">0x25</span>, <span class="number">0x8A</span>, <span class="number">0xB4</span>, <span class="number">0x9D</span>, <span class="number">0xB6</span>, <span class="number">0x6C</span>, <span class="number">0x2B</span>, <span class="number">0x70</span>, <span class="number">0x78</span>, </span><br><span class="line">  <span class="number">0x1F</span>, <span class="number">0x92</span>, <span class="number">0x83</span>, <span class="number">0x72</span>, <span class="number">0x64</span>, <span class="number">0xCB</span>, <span class="number">0x07</span>, <span class="number">0x3D</span>, <span class="number">0x99</span>, <span class="number">0xC7</span>, </span><br><span class="line">  <span class="number">0xC8</span>, <span class="number">0x58</span>, <span class="number">0x4A</span>, <span class="number">0x65</span>, <span class="number">0x93</span>, <span class="number">0xD6</span>, <span class="number">0x0B</span>, <span class="number">0xAA</span>, <span class="number">0x5B</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0x1C</span>, <span class="number">0xB5</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x08</span>, <span class="number">0xC4</span>, <span class="number">0xAC</span>, <span class="number">0x31</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0x8E</span>, <span class="number">0x3F</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>, <span class="number">0x98</span>, <span class="number">0xD1</span>, <span class="number">0xC1</span>, <span class="number">0xBA</span>, <span class="number">0xAD</span>, <span class="number">0x11</span>, </span><br><span class="line">  <span class="number">0xB3</span>, <span class="number">0x81</span>, <span class="number">0x71</span>, <span class="number">0x35</span>, <span class="number">0xE2</span>, <span class="number">0xB2</span>, <span class="number">0xF6</span>, <span class="number">0xCC</span>, <span class="number">0x21</span>, <span class="number">0xA4</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x56</span>, <span class="number">0xA1</span>, <span class="number">0x61</span>, <span class="number">0x48</span>, <span class="number">0x55</span>, <span class="number">0x27</span>, <span class="number">0x13</span>, <span class="number">0xE3</span>, <span class="number">0x6D</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x6F</span>, <span class="number">0x5D</span>, <span class="number">0xD0</span>, <span class="number">0x14</span>, <span class="number">0x91</span>, <span class="number">0xC6</span>, <span class="number">0xFA</span>, <span class="number">0xBC</span>, <span class="number">0x15</span>, </span><br><span class="line">  <span class="number">0x68</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xA2</span>, <span class="number">0x43</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x06</span>, <span class="number">0x59</span>, </span><br><span class="line">  <span class="number">0x8B</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0xD4</span>, <span class="number">0x46</span>, <span class="number">0x0C</span>, <span class="number">0x20</span>, <span class="number">0x89</span>, <span class="number">0xAE</span>, <span class="number">0xAB</span>, </span><br><span class="line">  <span class="number">0x32</span>, <span class="number">0x69</span>, <span class="number">0xC2</span>, <span class="number">0xEB</span>, <span class="number">0xA8</span>, <span class="number">0xE5</span>, <span class="number">0x22</span>, <span class="number">0x4C</span>, <span class="number">0xE9</span>, <span class="number">0xAF</span>, </span><br><span class="line">  <span class="number">0x2F</span>, <span class="number">0xDA</span>, <span class="number">0x7D</span>, <span class="number">0x77</span>, <span class="number">0x6A</span>, <span class="number">0x36</span>, <span class="number">0x7B</span>, <span class="number">0x2C</span>, <span class="number">0x24</span>, <span class="number">0x42</span>, </span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0x90</span>, <span class="number">0x54</span>, <span class="number">0x05</span>, <span class="number">0xA6</span>, <span class="number">0x0F</span>, <span class="number">0xD8</span>, <span class="number">0x3A</span>, <span class="number">0x0E</span>, <span class="number">0x4F</span>, </span><br><span class="line">  <span class="number">0x7F</span>, <span class="number">0x1D</span>, <span class="number">0xB1</span>, <span class="number">0xA5</span>, <span class="number">0xE8</span>, <span class="number">0xB0</span>, <span class="number">0xC3</span>, <span class="number">0x88</span>, <span class="number">0x9C</span>, <span class="number">0x80</span>, </span><br><span class="line">  <span class="number">0x38</span>, <span class="number">0xF1</span>, <span class="number">0x19</span>, <span class="number">0x45</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0xF7</span>, <span class="number">0x09</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xD5</span>, <span class="number">0xFB</span>, <span class="number">0x9F</span>, <span class="number">0xC5</span>, <span class="number">0x4D</span>, <span class="number">0x62</span>, <span class="number">0x3B</span>, <span class="number">0x82</span>, <span class="number">0x5E</span>, <span class="number">0x1B</span>, </span><br><span class="line">  <span class="number">0x66</span>, <span class="number">0x9E</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0x18</span>, <span class="number">0xD2</span>, <span class="number">0xEE</span>, <span class="number">0x4B</span>, <span class="number">0x30</span>, <span class="number">0x7C</span>, </span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0xC9</span>, <span class="number">0xF5</span>, <span class="number">0xB8</span>, <span class="number">0x2D</span>, <span class="number">0xD9</span>, <span class="number">0xE7</span>, <span class="number">0x03</span>, <span class="number">0xF3</span>, <span class="number">0x86</span>, </span><br><span class="line">  <span class="number">0xF4</span>, <span class="number">0xD3</span>, <span class="number">0xA3</span>, <span class="number">0x44</span>, <span class="number">0xDE</span>, <span class="number">0x5A</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> cipher[] = &#123;</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0x2B</span>, <span class="number">0x43</span>, <span class="number">0xA9</span>, <span class="number">0xB9</span>, <span class="number">0x6B</span>, <span class="number">0x93</span>, <span class="number">0x2D</span>, </span><br><span class="line">    <span class="number">0x9A</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0x51</span>, <span class="number">0x59</span>, <span class="number">0xE9</span>, </span><br><span class="line">    <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x8A</span>, <span class="number">0x45</span>, <span class="number">0x6B</span>, <span class="number">0xBA</span>, <span class="number">0xA7</span>, <span class="number">0x16</span>, </span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0x10</span>, <span class="number">0x74</span>, <span class="number">0xD5</span>, <span class="number">0x41</span>, <span class="number">0x3C</span>, <span class="number">0x67</span>, <span class="number">0x7D</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">size_t</span> cipher_len = <span class="keyword">sizeof</span>(cipher) / <span class="keyword">sizeof</span>(cipher[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_like_algorithm</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">size_t</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *Sbox)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> v2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> v3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (v2 &lt; data_len) &#123;</span><br><span class="line">        v1 = (v1 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        <span class="type">uint8_t</span> v4 = Sbox[v1];</span><br><span class="line">        v3 = (v4 + v3) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">        Sbox[v1] = Sbox[v3];</span><br><span class="line">        Sbox[v3] = v4;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint8_t</span> result = Sbox[<span class="number">256</span> - (v4 + Sbox[v1]) &amp; <span class="number">0xFF</span>];</span><br><span class="line"></span><br><span class="line">        data[v2] -= result;</span><br><span class="line"></span><br><span class="line">        v2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    rc4_like_algorithm(cipher, cipher_len, Sbox);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后数据: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cipher_len; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, cipher[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;Fl0w3rs_Ar3_Very_fr4grant&#125;</span></span><br></pre></td></tr></table></figure><h3 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h3><p>main分析：<br>使用 Windows CryptoAPI 进行加密，优点很明显——标准化，无需面对魔改<br>静态分析，并基于此在关键API处下断点，可得知加密的如下信息——<br>算法：AES-128<br>模式：CBC<br>cipher：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A4 E1 0F 1C 53 BC 42 CD 8E 71 54 B7 F1 75 E3 50 97 20 71 97 A8 3B 77 61 40 69 68 C1 B4 7B 88 54 9F 19 03 44 70 78 24 25 F0 A9 65 35 91 3A 04 9C 4E 66 BE D2 8B 8B 20 73 CE A0 CB E9 39 BD 6D 83</span><br></pre></td></tr></table></figure><p>IV：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">93 6A F2 25 FA 68 10 B8 D0 7C 3E 5E 9E E8 EE 0D</span><br></pre></td></tr></table></figure><p>key获取：<br>非常恶心，这里的 phKey只是一个句柄，来来回回动调了十几次，都找不到 key的具体数据<br>就算在 各个API中下断点，甚至去微软社区看 API文档，还是看不出名堂<br>目前只能想到——自己使用 Windows CryptoAPI，传入题目中的 pbSecret，让其打印 生成的key<br>哦？好像可行？<br>key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4C 9D 7B 3E EC D0 66 1F A0 34 DC 86 3F 5F 1F E2</span><br></pre></td></tr></table></figure><p>AES解密：<br>扔进CyberChef，得到flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hgame&#123;rever5e_wind0ws_4P1_is_1nter3sting&#125;</span></span><br></pre></td></tr></table></figure><h3 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h3><p>main分析：<br>因为是C++，所以可读性差了不少<br>不过不妨碍看出，循环部分是在对（要传入XTEA的）两个int进行提取<br>但伪代码中没看到加密逻辑，因此直接打开 Graph view——查看C++异常处理的 catch部分<br>有一说一，这二维结构，看的还是有点乱，所以打开 Text view</p><p>异常处理逻辑：<br>try语句先后出现在 14000191C,140001942,140001968<br>所以catch语句也是按照如下顺序，在 1400051E1,14000522E,14000527E</p><p>加密逻辑修复：<br>直接把几个代码块的结尾 patch成 jmp，会在伪代码中得到一个比较丑陋的 循环加密逻辑<br><img src="/img/2024-12-19/1.png"><br>因此再nop掉几个和异常处理相关的语句，此时伪代码可读性高了许多<br><img src="/img/2024-12-19/2.png"><br>但因为堆栈不平衡的原因，变量名还是未修复，因此最后粘进VScode里 改几个名，这样和源码就大差不差了<br><img src="/img/2024-12-19/3.png"><br>基于此，粗略还原出完整正向加密逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">uint32 key[<span class="number">4</span>] = [<span class="number">0x4D2</span>, <span class="number">0x929</span>, <span class="number">0xD80</span>, <span class="number">0x11D7</span>]</span><br><span class="line">uint32 delta = <span class="number">0x33221155</span></span><br><span class="line">uint32 sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">uint32 input[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">  uint32 v0 = input[i]</span><br><span class="line">  uint32 v1 = input[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line">    v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    v1 += (((v0 &lt;&lt; <span class="number">5</span>) ^ (v0 &gt;&gt; <span class="number">6</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    sum ^= delta;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cipher[<span class="number">0</span>] = <span class="number">0x32FC31EA</span>;</span><br><span class="line">cipher[<span class="number">1</span>] = <span class="number">0xF0566F42</span>;</span><br><span class="line">cipher[<span class="number">2</span>] = <span class="number">0xF905B0B2</span>;</span><br><span class="line">cipher[<span class="number">3</span>] = <span class="number">0x5F4551BE</span>;</span><br><span class="line">cipher[<span class="number">4</span>] = <span class="number">0xFB3EFCBB</span>;</span><br><span class="line">cipher[<span class="number">5</span>] = <span class="number">0x6B6ADB30</span>;</span><br><span class="line">cipher[<span class="number">6</span>] = <span class="number">0x4839879</span>;</span><br><span class="line">cipher[<span class="number">7</span>] = <span class="number">0x2F4378DF</span>;</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123;<span class="number">0x4D2</span>, <span class="number">0x929</span>, <span class="number">0xD80</span>, <span class="number">0x11D7</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x33221155</span>;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> cipher[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x32FC31EA</span>, <span class="number">0xF0566F42</span>,</span><br><span class="line">        <span class="number">0xF905B0B2</span>, <span class="number">0x5F4551BE</span>,</span><br><span class="line">        <span class="number">0xFB3EFCBB</span>, <span class="number">0x6B6ADB30</span>,</span><br><span class="line">        <span class="number">0x4839879</span>,  <span class="number">0x2F4378DF</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> input[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v0 = cipher[i];</span><br><span class="line">        <span class="type">uint32_t</span> v1 = cipher[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">            sum ^= delta;</span><br><span class="line">            v1 -= (((v0 &lt;&lt; <span class="number">5</span>) ^ (v0 &gt;&gt; <span class="number">6</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">            v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            input[i] = v0;</span><br><span class="line">            input[i + <span class="number">1</span>] = v1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> output[<span class="number">33</span>]; </span><br><span class="line">    output[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> byte = <span class="number">0</span>; byte &lt; <span class="number">4</span>; ++byte) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> ch = (input[i] &gt;&gt; (byte * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">            <span class="type">char</span> printableChar = (ch &gt;= <span class="number">32</span> &amp;&amp; ch &lt;= <span class="number">126</span>) ? ch : <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="built_in">strncat</span>(output, &amp;printableChar, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;C_p1us_plus_exc3pti0n!!!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="crackme2"><a href="#crackme2" class="headerlink" title="crackme2"></a>crackme2</h3><p>main分析：<br>伪代码有个地方报红，看汇编发现 try-except语句<br>直接打开Graph view，右上角发现 except部分<br>然后patch报错位置的jmp，使其跳转到except，这样其逻辑就显示在伪代码中了——SMC<br>直接动调解码，接c+p+f5连招，就能看到逻辑——一堆约束 验证32字节输入<br>无需多言，上z3</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">a1 = [BitVec(<span class="string">f&#x27;a1_<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">known_prefix = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;hgame&#123;&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(known_prefix):</span><br><span class="line">    solver.add(a1[i] == val)</span><br><span class="line"></span><br><span class="line">v1 = a1[<span class="number">25</span>]</span><br><span class="line">v2 = a1[<span class="number">21</span>]</span><br><span class="line">v3 = a1[<span class="number">31</span>]</span><br><span class="line">v4 = a1[<span class="number">29</span>]</span><br><span class="line">v5 = a1[<span class="number">0</span>]</span><br><span class="line">v6 = a1[<span class="number">23</span>]</span><br><span class="line">v7 = a1[<span class="number">8</span>]</span><br><span class="line">v8 = a1[<span class="number">28</span>]</span><br><span class="line">v9 = a1[<span class="number">12</span>]</span><br><span class="line">v10 = a1[<span class="number">3</span>]</span><br><span class="line">v11 = a1[<span class="number">2</span>]</span><br><span class="line">v19 = a1[<span class="number">30</span>]</span><br><span class="line">v15 = a1[<span class="number">18</span>]</span><br><span class="line">v16 = a1[<span class="number">24</span>]</span><br><span class="line">v27 = a1[<span class="number">11</span>]</span><br><span class="line">v17 = a1[<span class="number">26</span>]</span><br><span class="line">v30 = a1[<span class="number">14</span>]</span><br><span class="line">v40 = a1[<span class="number">7</span>]</span><br><span class="line">v26 = a1[<span class="number">20</span>]</span><br><span class="line">v37 = <span class="number">2</span> * v26</span><br><span class="line">v42 = a1[<span class="number">22</span>]</span><br><span class="line">v28 = a1[<span class="number">1</span>]</span><br><span class="line">v25 = a1[<span class="number">27</span>]</span><br><span class="line">v21 = a1[<span class="number">19</span>]</span><br><span class="line">v23 = a1[<span class="number">16</span>]</span><br><span class="line">v31 = a1[<span class="number">13</span>]</span><br><span class="line">v29 = a1[<span class="number">10</span>]</span><br><span class="line">v41 = a1[<span class="number">5</span>]</span><br><span class="line">v24 = a1[<span class="number">4</span>]</span><br><span class="line">v20 = a1[<span class="number">15</span>]</span><br><span class="line">v39 = a1[<span class="number">17</span>]</span><br><span class="line">v22 = a1[<span class="number">6</span>]</span><br><span class="line">v18 = a1[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">expr1 = v18 + <span class="number">201</span> * v24 + <span class="number">194</span> * v10 + <span class="number">142</span> * v20 + <span class="number">114</span> * v39 + <span class="number">103</span> * v11 + <span class="number">52</span> * (v17 + v31) + ((v9 + v23) &lt;&lt; <span class="number">6</span>) + \</span><br><span class="line">        <span class="number">14</span> * (v21 + <span class="number">4</span> * v25 + v25) + <span class="number">9</span> * (v40 + <span class="number">23</span> * v27 + v2 + <span class="number">3</span> * v1 + <span class="number">4</span> * v2 + <span class="number">4</span> * v6) + \</span><br><span class="line">        <span class="number">5</span> * (v16 + <span class="number">23</span> * v30 + <span class="number">2</span> * (v3 + <span class="number">2</span> * v19) + <span class="number">5</span> * v5 + <span class="number">39</span> * v15 + <span class="number">51</span> * v4) + \</span><br><span class="line">        <span class="number">24</span> * (v8 + <span class="number">10</span> * v28 + <span class="number">4</span> * (v42 + v7 + <span class="number">2</span> * v26)) + <span class="number">62</span> * v22 + <span class="number">211</span> * v41 + <span class="number">212</span> * v29</span><br><span class="line">solver.add(expr1 == <span class="number">296473</span>)</span><br><span class="line">v38 = <span class="number">2</span> * v16</span><br><span class="line">expr2 = <span class="number">207</span> * v41 + <span class="number">195</span> * v22 + <span class="number">151</span> * v40 + <span class="number">57</span> * v5 + <span class="number">118</span> * v6 + <span class="number">222</span> * v42 + <span class="number">103</span> * v7 + <span class="number">181</span> * v8 + <span class="number">229</span> * v9 + \</span><br><span class="line">        <span class="number">142</span> * v31 + <span class="number">51</span> * v29 + <span class="number">122</span> * (v26 + v20) + <span class="number">91</span> * (v2 + <span class="number">2</span> * v16) + <span class="number">107</span> * (v27 + v25) + \</span><br><span class="line">        <span class="number">81</span> * (v17 + <span class="number">2</span> * v18 + v18) + <span class="number">45</span> * (v19 + <span class="number">2</span> * (v11 + v24) + v11 + v24) + \</span><br><span class="line">        <span class="number">4</span> * (<span class="number">3</span> * (v23 + a1[<span class="number">19</span>] + <span class="number">2</span> * v23 + <span class="number">5</span> * v4) + v39 + <span class="number">29</span> * (v10 + v1) + <span class="number">25</span> * v15) + \</span><br><span class="line">        <span class="number">26</span> * v28 + <span class="number">101</span> * v30 + <span class="number">154</span> * v3</span><br><span class="line">solver.add(expr2 == <span class="number">354358</span>)</span><br><span class="line">expr3 = <span class="number">177</span> * v40 + <span class="number">129</span> * v26 + <span class="number">117</span> * v42 + <span class="number">143</span> * v28 + <span class="number">65</span> * v8 + <span class="number">137</span> * v25 + <span class="number">215</span> * v21 + <span class="number">93</span> * v31 + <span class="number">235</span> * v39 + \</span><br><span class="line">        <span class="number">203</span> * v11 + <span class="number">15</span> * (v7 + <span class="number">17</span> * v30) + <span class="number">2</span> * (v24 + <span class="number">91</span> * v9 + <span class="number">95</span> * v29 + <span class="number">51</span> * v41 + <span class="number">81</span> * v20 + <span class="number">92</span> * v18 + \</span><br><span class="line">        <span class="number">112</span> * (v10 + v6) + <span class="number">32</span> * (v22 + <span class="number">2</span> * (v1 + v23)) + <span class="number">6</span> * (v2 + <span class="number">14</span> * v16 + <span class="number">19</span> * v15) + <span class="number">83</span> * v5 + <span class="number">53</span> * v4 + \</span><br><span class="line">        <span class="number">123</span> * v19) + v17 + <span class="number">175</span> * v27 + <span class="number">183</span> * v3</span><br><span class="line">solver.add(expr3 == <span class="number">448573</span>)</span><br><span class="line">expr4 = <span class="number">113</span> * v19 + <span class="number">74</span> * v3 + <span class="number">238</span> * v6 + <span class="number">140</span> * v2 + <span class="number">214</span> * v26 + <span class="number">242</span> * v8 + <span class="number">160</span> * v21 + <span class="number">136</span> * v23 + <span class="number">209</span> * v9 + \</span><br><span class="line">        <span class="number">220</span> * v31 + <span class="number">50</span> * v24 + <span class="number">125</span> * v10 + <span class="number">175</span> * v20 + <span class="number">23</span> * v39 + <span class="number">137</span> * v22 + <span class="number">149</span> * v18 + <span class="number">83</span> * (v4 + <span class="number">2</span> * v30) + \</span><br><span class="line">        <span class="number">21</span> * (<span class="number">9</span> * v29 + v16) + <span class="number">59</span> * (<span class="number">4</span> * v27 + v17) + <span class="number">41</span> * (v1 + v41) + <span class="number">13</span> * (v7 + <span class="number">11</span> * (v40 + v15) + <span class="number">6</span> * v42 + \</span><br><span class="line">        <span class="number">4</span> * (v28 + <span class="number">2</span> * v11) + v28 + <span class="number">2</span> * v11 + <span class="number">17</span> * v5) + <span class="number">36</span> * v25</span><br><span class="line">solver.add(expr4 == <span class="number">384306</span>)</span><br><span class="line">expr5 = <span class="number">229</span> * v21 + <span class="number">78</span> * v1 + v2 + v9 + <span class="number">133</span> * v27 + <span class="number">74</span> * v6 + <span class="number">69</span> * v26 + <span class="number">243</span> * v7 + <span class="number">98</span> * v28 + <span class="number">253</span> * v8 + \</span><br><span class="line">        <span class="number">142</span> * v25 + <span class="number">175</span> * v31 + <span class="number">105</span> * v41 + <span class="number">221</span> * v10 + <span class="number">121</span> * v39 + <span class="number">218</span> * (v19 + v29) + <span class="number">199</span> * (v24 + v30) + \</span><br><span class="line">        <span class="number">33</span> * (v40 + <span class="number">7</span> * v17) + <span class="number">4</span> * (<span class="number">27</span> * v20 + <span class="number">50</span> * v11 + <span class="number">45</span> * v18 + <span class="number">19</span> * (v3 + v42) + v16 + <span class="number">16</span> * v23 + <span class="number">52</span> * v4) + \</span><br><span class="line">        <span class="number">195</span> * v22 + <span class="number">211</span> * v5 + <span class="number">153</span> * v15</span><br><span class="line">solver.add(expr5 == <span class="number">424240</span>)</span><br><span class="line">expr6 = <span class="number">181</span> * v25 + <span class="number">61</span> * v2 + <span class="number">65</span> * v21 + <span class="number">58</span> * v31 + <span class="number">170</span> * v29 + <span class="number">143</span> * v24 + <span class="number">185</span> * v10 + <span class="number">86</span> * v11 + <span class="number">97</span> * v22 + \</span><br><span class="line">        <span class="number">235</span> * (v23 + v27) + <span class="number">3</span> * (<span class="number">53</span> * v41 + <span class="number">74</span> * (v8 + v3) + <span class="number">13</span> * (v42 + <span class="number">6</span> * v9) + <span class="number">11</span> * (v39 + <span class="number">7</span> * v20) + \</span><br><span class="line">        <span class="number">15</span> * (v18 + <span class="number">4</span> * v17) + v7 + <span class="number">35</span> * v1 + <span class="number">29</span> * v15) + <span class="number">4</span> * (<span class="number">57</span> * v6 + <span class="number">18</span> * (v5 + v37) + v28 + <span class="number">17</span> * v16 + \</span><br><span class="line">        <span class="number">55</span> * v30) + <span class="number">151</span> * v40 + <span class="number">230</span> * v4 + <span class="number">197</span> * v19</span><br><span class="line">solver.add(expr6 == <span class="number">421974</span>)</span><br><span class="line">v33 = <span class="number">2</span> * v41</span><br><span class="line">expr7 = <span class="number">209</span> * v21 + <span class="number">249</span> * v30 + <span class="number">195</span> * v2 + <span class="number">219</span> * v25 + <span class="number">201</span> * v39 + <span class="number">85</span> * v18 + <span class="number">213</span> * (v17 + v31) + <span class="number">119</span> * (v11 + <span class="number">2</span> * v41) + \</span><br><span class="line">        <span class="number">29</span> * (<span class="number">8</span> * v24 + v40 + <span class="number">4</span> * v27 + v27) + <span class="number">2</span> * (v8 + <span class="number">55</span> * (<span class="number">2</span> * v29 + v19) + <span class="number">3</span> * (v10 + <span class="number">39</span> * v9 + <span class="number">2</span> * (v6 + <span class="number">20</span> * v20) + \</span><br><span class="line">        <span class="number">35</span> * v7) + <span class="number">4</span> * (v5 + <span class="number">31</span> * v42 + <span class="number">28</span> * v3) + <span class="number">26</span> * v28 + <span class="number">46</span> * (v37 + v16) + <span class="number">98</span> * v1) + <span class="number">53</span> * v23 + <span class="number">171</span> * v15 + <span class="number">123</span> * v4</span><br><span class="line">solver.add(expr7 == <span class="number">442074</span>)</span><br><span class="line">v32 = <span class="number">2</span> * v18</span><br><span class="line">expr8 = <span class="number">162</span> * v19 + <span class="number">74</span> * v5 + <span class="number">28</span> * v27 + <span class="number">243</span> * v42 + <span class="number">123</span> * v28 + <span class="number">73</span> * v8 + <span class="number">166</span> * v23 + <span class="number">94</span> * v24 + <span class="number">113</span> * v11 + <span class="number">193</span> * v22 + \</span><br><span class="line">        <span class="number">122</span> * (v6 + <span class="number">2</span> * v7) + <span class="number">211</span> * (v10 + v25) + <span class="number">21</span> * (v17 + <span class="number">7</span> * v41) + <span class="number">11</span> * (v4 + <span class="number">23</span> * (v16 + v39) + <span class="number">2</span> * (v40 + <span class="number">5</span> * v30 + \</span><br><span class="line">        <span class="number">2</span> * (<span class="number">2</span> * v18 + v29) + <span class="number">2</span> * v18 + v29)) + <span class="number">5</span> * (<span class="number">46</span> * v9 + <span class="number">26</span> * v20 + <span class="number">4</span> * (v31 + <span class="number">2</span> * v21) + v15 + <span class="number">27</span> * v2 + <span class="number">10</span> * v1) + \</span><br><span class="line">        <span class="number">36</span> * (v3 + <span class="number">5</span> * v26)</span><br><span class="line">solver.add(expr8 == <span class="number">376007</span>)</span><br><span class="line">v35 = v25 + v30</span><br><span class="line">expr9 = <span class="number">63</span> * v19 + <span class="number">143</span> * v5 + <span class="number">250</span> * v6 + <span class="number">136</span> * v2 + <span class="number">214</span> * v40 + <span class="number">62</span> * v26 + <span class="number">221</span> * v42 + <span class="number">226</span> * v7 + <span class="number">171</span> * v28 + <span class="number">178</span> * v8 + \</span><br><span class="line">        <span class="number">244</span> * v23 + (v9 &lt;&lt; <span class="number">7</span>) + <span class="number">150</span> * v31 + <span class="number">109</span> * v29 + <span class="number">70</span> * v41 + <span class="number">127</span> * v20 + <span class="number">204</span> * v39 + <span class="number">121</span> * v22 + <span class="number">173</span> * v18 + \</span><br><span class="line">        <span class="number">69</span> * (v25 + v30 + v27) + <span class="number">74</span> * (v16 + <span class="number">2</span> * v15 + v15) + <span class="number">22</span> * (<span class="number">7</span> * v24 + v17 + <span class="number">10</span> * v11) + <span class="number">40</span> * (v1 + <span class="number">4</span> * v21 + v21) + \</span><br><span class="line">        <span class="number">81</span> * v10 + <span class="number">94</span> * v4 + <span class="number">84</span> * v3</span><br><span class="line">solver.add(expr9 == <span class="number">411252</span>)</span><br><span class="line">expr10 = <span class="number">229</span> * v15 + <span class="number">121</span> * v4 + <span class="number">28</span> * v30 + <span class="number">206</span> * v16 + <span class="number">145</span> * v27 + <span class="number">41</span> * v1 + <span class="number">247</span> * v6 + <span class="number">118</span> * v26 + <span class="number">241</span> * v28 + <span class="number">79</span> * v8 + \</span><br><span class="line">         <span class="number">102</span> * v25 + <span class="number">124</span> * v23 + <span class="number">65</span> * v9 + <span class="number">68</span> * v31 + <span class="number">239</span> * v17 + <span class="number">148</span> * v24 + <span class="number">245</span> * v39 + <span class="number">115</span> * v11 + <span class="number">163</span> * v22 + <span class="number">137</span> * v18 + \</span><br><span class="line">         <span class="number">53</span> * (v5 + <span class="number">2</span> * v29) + <span class="number">126</span> * (v40 + <span class="number">2</span> * v10) + <span class="number">38</span> * (v7 + v21 + <span class="number">4</span> * v7 + <span class="number">6</span> * v41) + <span class="number">12</span> * (v2 + <span class="number">16</span> * v42) + <span class="number">109</span> * v20 + \</span><br><span class="line">         <span class="number">232</span> * v3 + <span class="number">47</span> * v19</span><br><span class="line">solver.add(expr10 == <span class="number">435012</span>)</span><br><span class="line">expr11 = <span class="number">209</span> * v21 + <span class="number">233</span> * v40 + <span class="number">93</span> * v1 + <span class="number">241</span> * v2 + <span class="number">137</span> * v8 + <span class="number">249</span> * v17 + <span class="number">188</span> * v29 + <span class="number">86</span> * v24 + <span class="number">246</span> * v10 + <span class="number">149</span> * v20 + \</span><br><span class="line">         <span class="number">99</span> * v11 + <span class="number">37</span> * v22 + <span class="number">219</span> * v18 + <span class="number">17</span> * (v6 + <span class="number">10</span> * v25) + <span class="number">49</span> * (v5 + <span class="number">3</span> * v3 + <span class="number">4</span> * v28 + v28) + <span class="number">5</span> * (<span class="number">16</span> * v39 + \</span><br><span class="line">         <span class="number">11</span> * (v41 + <span class="number">2</span> * v27 + v27) + <span class="number">12</span> * v7 + v31 + <span class="number">30</span> * v16 + <span class="number">27</span> * v19) + <span class="number">18</span> * (v23 + <span class="number">2</span> * (v4 + v26 + <span class="number">2</span> * v4) + v4 + v26 + <span class="number">2</span> * v4) + \</span><br><span class="line">         <span class="number">24</span> * v9 + <span class="number">109</span> * v42 + <span class="number">183</span> * v30 + <span class="number">154</span> * v15</span><br><span class="line">solver.add(expr11 == <span class="number">392484</span>)</span><br><span class="line">v34 = <span class="number">2</span> * v31</span><br><span class="line">expr12 = <span class="number">155</span> * v15 + <span class="number">247</span> * v40 + <span class="number">157</span> * v28 + <span class="number">119</span> * v23 + <span class="number">161</span> * v17 + <span class="number">133</span> * v20 + <span class="number">85</span> * v22 + <span class="number">229</span> * (v7 + v24) + <span class="number">123</span> * (<span class="number">2</span> * v31 + v42) + \</span><br><span class="line">         <span class="number">21</span> * (v41 + <span class="number">12</span> * v30) + <span class="number">55</span> * (v9 + v5 + v18 + <span class="number">2</span> * v5) + <span class="number">15</span> * (v3 + <span class="number">16</span> * v10 + <span class="number">9</span> * v21) + <span class="number">2</span> * (v2 + <span class="number">115</span> * v29 + <span class="number">111</span> * v16 + \</span><br><span class="line">         <span class="number">26</span> * v6 + <span class="number">88</span> * v8 + <span class="number">73</span> * v39 + <span class="number">71</span> * v11 + <span class="number">28</span> * (v26 + <span class="number">2</span> * (v25 + <span class="number">2</span> * v1)) + <span class="number">51</span> * v27 + <span class="number">99</span> * v4 + <span class="number">125</span> * v19)</span><br><span class="line">solver.add(expr12 == <span class="number">437910</span>)</span><br><span class="line">expr13 = <span class="number">220</span> * v3 + <span class="number">200</span> * v4 + <span class="number">139</span> * v15 + <span class="number">33</span> * v5 + <span class="number">212</span> * v30 + <span class="number">191</span> * v16 + <span class="number">30</span> * v27 + <span class="number">233</span> * v1 + <span class="number">246</span> * v6 + <span class="number">89</span> * v2 + <span class="number">252</span> * v40 + \</span><br><span class="line">         <span class="number">223</span> * v42 + <span class="number">19</span> * v25 + <span class="number">141</span> * v21 + <span class="number">163</span> * v9 + <span class="number">185</span> * v17 + <span class="number">136</span> * v31 + <span class="number">46</span> * v24 + <span class="number">109</span> * v10 + <span class="number">217</span> * v39 + <span class="number">75</span> * v22 + <span class="number">157</span> * v18 + \</span><br><span class="line">         <span class="number">125</span> * (v11 + v19) + <span class="number">104</span> * (v33 + v20) + <span class="number">43</span> * (v28 + <span class="number">2</span> * v29 + v29) + <span class="number">32</span> * (v8 + v7 + <span class="number">2</span> * v8 + <span class="number">2</span> * (v23 + v26))</span><br><span class="line">solver.add(expr13 == <span class="number">421905</span>)</span><br><span class="line">expr14 = <span class="number">211</span> * v24 + <span class="number">63</span> * v15 + <span class="number">176</span> * v5 + <span class="number">169</span> * v16 + <span class="number">129</span> * v27 + <span class="number">146</span> * v40 + <span class="number">111</span> * v26 + <span class="number">68</span> * v42 + \</span><br><span class="line">         <span class="number">39</span> * v25 + <span class="number">188</span> * v23 + <span class="number">130</span> * v9 + (v31 &lt;&lt; <span class="number">6</span>) + <span class="number">91</span> * v41 + <span class="number">208</span> * v20 + <span class="number">145</span> * v39 + <span class="number">247</span> * v18 + \</span><br><span class="line">         <span class="number">93</span> * (v22 + v17) + <span class="number">71</span> * (v6 + <span class="number">2</span> * v11) + <span class="number">103</span> * (v8 + <span class="number">2</span> * v30) + \</span><br><span class="line">         <span class="number">6</span> * (v21 + <span class="number">10</span> * v28 + <span class="number">28</span> * v7 + <span class="number">9</span> * v29 + <span class="number">19</span> * v2 + <span class="number">24</span> * v1 + <span class="number">22</span> * v3) + \</span><br><span class="line">         <span class="number">81</span> * v10 + <span class="number">70</span> * v4 + <span class="number">23</span> * v19</span><br><span class="line">solver.add(expr14 == <span class="number">356282</span>)</span><br><span class="line">v12 = v10 + <span class="number">2</span> * (v31 + <span class="number">4</span> * (v29 + v17)) + v31 + <span class="number">4</span> * (v29 + v17)</span><br><span class="line">expr15 = <span class="number">94</span> * v42 + <span class="number">101</span> * v2 + <span class="number">152</span> * v40 + <span class="number">200</span> * v7 + <span class="number">226</span> * v8 + <span class="number">211</span> * v23 + <span class="number">121</span> * v24 + <span class="number">74</span> * v11 + \</span><br><span class="line">         <span class="number">166</span> * v18 + ((v6 + <span class="number">3</span> * v28) &lt;&lt; <span class="number">6</span>) + <span class="number">41</span> * (<span class="number">4</span> * v9 + v21) + <span class="number">23</span> * (v39 + <span class="number">11</span> * v41) + \</span><br><span class="line">         <span class="number">7</span> * (v20 + <span class="number">10</span> * v25 + <span class="number">2</span> * v12 + v12) + <span class="number">3</span> * (<span class="number">78</span> * v30 + <span class="number">81</span> * v16 + <span class="number">55</span> * v27 + <span class="number">73</span> * v1 + \</span><br><span class="line">         <span class="number">4</span> * v26 + v15 + <span class="number">85</span> * v3 + <span class="number">65</span> * v19) + <span class="number">62</span> * v22 + <span class="number">88</span> * v5 + <span class="number">110</span> * v4</span><br><span class="line">solver.add(expr15 == <span class="number">423091</span>)</span><br><span class="line">expr16 = <span class="number">133</span> * v22 + <span class="number">175</span> * v15 + <span class="number">181</span> * v30 + <span class="number">199</span> * v16 + <span class="number">123</span> * v27 + <span class="number">242</span> * v1 + <span class="number">75</span> * v6 + <span class="number">69</span> * v2 + \</span><br><span class="line">         <span class="number">153</span> * v40 + <span class="number">33</span> * v26 + <span class="number">100</span> * v42 + <span class="number">229</span> * v7 + <span class="number">177</span> * v8 + <span class="number">134</span> * v31 + <span class="number">179</span> * v29 + <span class="number">129</span> * v41 + \</span><br><span class="line">         <span class="number">14</span> * v10 + <span class="number">247</span> * v24 + <span class="number">228</span> * v20 + <span class="number">92</span> * v11 + <span class="number">86</span> * (v9 + v32) + <span class="number">94</span> * (v23 + v21) + \</span><br><span class="line">         <span class="number">37</span> * (v17 + <span class="number">4</span> * v3) + <span class="number">79</span> * (v25 + <span class="number">2</span> * v28) + <span class="number">72</span> * v5 + <span class="number">93</span> * v39 + <span class="number">152</span> * v4 + <span class="number">214</span> * v19</span><br><span class="line">solver.add(expr16 == <span class="number">391869</span>)</span><br><span class="line">expr17 = <span class="number">211</span> * v24 + <span class="number">213</span> * v18 + <span class="number">197</span> * v40 + <span class="number">159</span> * v25 + <span class="number">117</span> * v21 + <span class="number">119</span> * v9 + <span class="number">98</span> * v17 + <span class="number">218</span> * v41 + \</span><br><span class="line">         <span class="number">106</span> * v39 + <span class="number">69</span> * v11 + <span class="number">43</span> * (v2 + v29 + <span class="number">2</span> * v2) + <span class="number">116</span> * (v4 + v10 + v37) + \</span><br><span class="line">         <span class="number">5</span> * (v42 + <span class="number">9</span> * v23 + <span class="number">35</span> * v20 + <span class="number">37</span> * v31) + <span class="number">11</span> * (v16 + <span class="number">13</span> * v27 + <span class="number">5</span> * v5 + <span class="number">8</span> * v30) + \</span><br><span class="line">         <span class="number">6</span> * (<span class="number">29</span> * v28 + <span class="number">25</span> * v8 + <span class="number">38</span> * v22 + v15 + <span class="number">13</span> * v1 + <span class="number">10</span> * v3) + <span class="number">136</span> * v7 + <span class="number">142</span> * v6 + \</span><br><span class="line">         <span class="number">141</span> * v19</span><br><span class="line">solver.add(expr17 == <span class="number">376566</span>)</span><br><span class="line">expr18 = <span class="number">173</span> * v3 + <span class="number">109</span> * v15 + <span class="number">61</span> * v30 + <span class="number">187</span> * v1 + <span class="number">79</span> * v6 + <span class="number">53</span> * v40 + <span class="number">184</span> * v21 + <span class="number">43</span> * v23 + \</span><br><span class="line">         <span class="number">41</span> * v9 + <span class="number">166</span> * v31 + <span class="number">193</span> * v41 + <span class="number">58</span> * v24 + <span class="number">146</span> * v10 + (v20 &lt;&lt; <span class="number">6</span>) + <span class="number">89</span> * v39 + <span class="number">121</span> * v11 + \</span><br><span class="line">         <span class="number">5</span> * (v17 + <span class="number">23</span> * v8) + <span class="number">7</span> * (<span class="number">29</span> * v18 + v29 + <span class="number">4</span> * v7) + <span class="number">13</span> * (<span class="number">3</span> * v42 + v16 + <span class="number">7</span> * v26 + <span class="number">13</span> * v2) + \</span><br><span class="line">         <span class="number">3</span> * (v4 + <span class="number">83</span> * v5 + <span class="number">51</span> * v27 + <span class="number">33</span> * v22 + <span class="number">8</span> * (v19 + <span class="number">4</span> * v28) + <span class="number">18</span> * v25)</span><br><span class="line">solver.add(expr18 == <span class="number">300934</span>)</span><br><span class="line">v36 = <span class="number">3</span> * v21</span><br><span class="line">expr19 = <span class="number">78</span> * v1 + <span class="number">131</span> * v5 + <span class="number">185</span> * v16 + <span class="number">250</span> * v40 + <span class="number">90</span> * v26 + <span class="number">129</span> * v42 + <span class="number">255</span> * v28 + <span class="number">206</span> * v8 + \</span><br><span class="line">         <span class="number">239</span> * v25 + <span class="number">150</span> * v10 + <span class="number">253</span> * v39 + <span class="number">104</span> * v22 + <span class="number">58</span> * (v2 + <span class="number">2</span> * v7) + <span class="number">96</span> * (v15 + v31) + \</span><br><span class="line">         <span class="number">117</span> * (v9 + <span class="number">2</span> * v4) + <span class="number">27</span> * (v17 + <span class="number">8</span> * v18 + v18) + <span class="number">19</span> * (v23 + <span class="number">3</span> * v21 + <span class="number">4</span> * v29 + v29) + \</span><br><span class="line">         <span class="number">7</span> * (<span class="number">22</span> * v41 + <span class="number">3</span> * (v11 + <span class="number">11</span> * v24) + v3 + <span class="number">29</span> * v6 + <span class="number">14</span> * v27) + <span class="number">109</span> * v20 + <span class="number">102</span> * v30 + \</span><br><span class="line">         <span class="number">100</span> * v19</span><br><span class="line">solver.add(expr19 == <span class="number">401351</span>)</span><br><span class="line">expr20 = <span class="number">233</span> * v19 + <span class="number">71</span> * v5 + <span class="number">209</span> * v27 + <span class="number">82</span> * v6 + <span class="number">58</span> * v26 + <span class="number">53</span> * v25 + <span class="number">113</span> * v23 + <span class="number">206</span> * v31 + \</span><br><span class="line">         <span class="number">39</span> * v41 + <span class="number">163</span> * v20 + <span class="number">222</span> * v11 + <span class="number">191</span> * v18 + <span class="number">123</span> * (v7 + v40) + <span class="number">69</span> * (v9 + <span class="number">2</span> * v22 + v22) + \</span><br><span class="line">         <span class="number">9</span> * (v3 + <span class="number">8</span> * v24 + <span class="number">7</span> * (<span class="number">3</span> * v1 + v28) + <span class="number">5</span> * v16 + <span class="number">19</span> * v30) + <span class="number">4</span> * (v15 + <span class="number">26</span> * v17 + <span class="number">61</span> * v29 + \</span><br><span class="line">         <span class="number">43</span> * v42 + <span class="number">49</span> * v2 + <span class="number">32</span> * v4) + <span class="number">10</span> * (<span class="number">7</span> * (v8 + v36) + v39 + <span class="number">12</span> * v10)</span><br><span class="line">solver.add(expr20 == <span class="number">368427</span>)</span><br><span class="line">expr21 = <span class="number">139</span> * v30 + <span class="number">53</span> * v5 + <span class="number">158</span> * v16 + <span class="number">225</span> * v1 + <span class="number">119</span> * v6 + <span class="number">67</span> * v2 + <span class="number">213</span> * v40 + <span class="number">188</span> * v28 + \</span><br><span class="line">         <span class="number">152</span> * v8 + <span class="number">187</span> * v21 + <span class="number">129</span> * v23 + <span class="number">54</span> * v9 + <span class="number">125</span> * v17 + <span class="number">170</span> * v24 + <span class="number">184</span> * v11 + <span class="number">226</span> * v22 + \</span><br><span class="line">         <span class="number">253</span> * v18 + <span class="number">26</span> * (v29 + v41) + <span class="number">97</span> * (v4 + <span class="number">2</span> * v25) + <span class="number">39</span> * (<span class="number">5</span> * v26 + v27) + <span class="number">21</span> * (v39 + <span class="number">8</span> * v42) + \</span><br><span class="line">         <span class="number">12</span> * (<span class="number">17</span> * v10 + v31 + <span class="number">15</span> * v7 + <span class="number">12</span> * v19) + <span class="number">165</span> * v20 + <span class="number">88</span> * v15 + <span class="number">157</span> * v3</span><br><span class="line">solver.add(expr21 == <span class="number">403881</span>)</span><br><span class="line">expr22 = <span class="number">114</span> * v3 + <span class="number">61</span> * v27 + <span class="number">134</span> * v40 + <span class="number">62</span> * v42 + <span class="number">89</span> * v9 + <span class="number">211</span> * v17 + <span class="number">163</span> * v41 + <span class="number">66</span> * v24 + \</span><br><span class="line">         <span class="number">201</span> * (v7 + v18) + <span class="number">47</span> * (<span class="number">5</span> * v16 + v22) + <span class="number">74</span> * (v4 + v31) + <span class="number">142</span> * (v2 + v28) + <span class="number">35</span> * (v20 + <span class="number">6</span> * v26) + \</span><br><span class="line">         <span class="number">39</span> * (v15 + <span class="number">6</span> * v30) + <span class="number">27</span> * (v25 + <span class="number">9</span> * v23 + <span class="number">8</span> * v6) + <span class="number">4</span> * (v21 + <span class="number">63</span> * v19 + <span class="number">2</span> * (v1 + <span class="number">12</span> * (v10 + v5) + \</span><br><span class="line">         <span class="number">8</span> * v11 + <span class="number">26</span> * v29)) + <span class="number">10</span> * (v8 + <span class="number">4</span> * v39 + v39)</span><br><span class="line">solver.add(expr22 == <span class="number">382979</span>)</span><br><span class="line">expr23 = <span class="number">122</span> * v25 + <span class="number">225</span> * v21 + <span class="number">52</span> * v23 + <span class="number">253</span> * v9 + <span class="number">197</span> * v17 + <span class="number">187</span> * v31 + <span class="number">181</span> * v29 + <span class="number">183</span> * v41 + \</span><br><span class="line">         <span class="number">47</span> * v20 + <span class="number">229</span> * v39 + <span class="number">88</span> * v22 + <span class="number">127</span> * (v10 + v32) + <span class="number">37</span> * (v7 + <span class="number">3</span> * v3) + ((v11 + <span class="number">2</span> * v30 + v30) &lt;&lt; <span class="number">6</span>) + \</span><br><span class="line">         <span class="number">7</span> * (<span class="number">21</span> * v8 + v27 + <span class="number">18</span> * (v4 + v1 + v38)) + <span class="number">6</span> * (<span class="number">23</span> * v24 + v26 + <span class="number">17</span> * v2 + <span class="number">39</span> * v6) + \</span><br><span class="line">         <span class="number">10</span> * (v5 + <span class="number">11</span> * v28 + <span class="number">21</span> * v42) + <span class="number">149</span> * v19 + <span class="number">165</span> * v40 + <span class="number">121</span> * v15</span><br><span class="line">solver.add(expr23 == <span class="number">435695</span>)</span><br><span class="line">expr24 = <span class="number">165</span> * v20 + <span class="number">223</span> * v4 + <span class="number">249</span> * v5 + <span class="number">199</span> * v1 + <span class="number">135</span> * v2 + <span class="number">133</span> * v26 + <span class="number">254</span> * v42 + <span class="number">111</span> * v7 + \</span><br><span class="line">         <span class="number">189</span> * v28 + <span class="number">221</span> * v25 + <span class="number">115</span> * v21 + <span class="number">186</span> * v9 + <span class="number">79</span> * v41 + <span class="number">217</span> * v24 + <span class="number">122</span> * v11 + <span class="number">38</span> * v18 + \</span><br><span class="line">         <span class="number">109</span> * (v34 + v29) + <span class="number">14</span> * (v8 + <span class="number">17</span> * v40 + <span class="number">8</span> * (v6 + v38)) + <span class="number">4</span> * (<span class="number">11</span> * (<span class="number">5</span> * v30 + v39) + <span class="number">6</span> * (v10 + <span class="number">2</span> * v22) + \</span><br><span class="line">         v27 + <span class="number">52</span> * v17 + <span class="number">50</span> * v23) + <span class="number">229</span> * v15 + <span class="number">86</span> * v3 + <span class="number">234</span> * v19</span><br><span class="line">solver.add(expr24 == <span class="number">453748</span>)</span><br><span class="line">expr25 = <span class="number">181</span> * v25 + <span class="number">94</span> * v42 + <span class="number">125</span> * v1 + <span class="number">226</span> * v26 + <span class="number">155</span> * v7 + <span class="number">95</span> * v21 + <span class="number">212</span> * v17 + <span class="number">91</span> * v31 + \</span><br><span class="line">         <span class="number">194</span> * v29 + <span class="number">98</span> * v24 + <span class="number">166</span> * v11 + <span class="number">120</span> * v22 + <span class="number">59</span> * v18 + <span class="number">32</span> * (v9 + v8) + <span class="number">158</span> * (v6 + v5) + \</span><br><span class="line">         <span class="number">101</span> * (v41 + v19) + <span class="number">63</span> * (v4 + <span class="number">2</span> * v23) + <span class="number">67</span> * (v28 + <span class="number">2</span> * v20) + <span class="number">11</span> * (v39 + <span class="number">10</span> * v16 + <span class="number">11</span> * v10) + \</span><br><span class="line">         <span class="number">39</span> * (v30 + <span class="number">4</span> * (v2 + v15)) + <span class="number">233</span> * v40 + <span class="number">56</span> * v27 + <span class="number">225</span> * v3</span><br><span class="line">solver.add(expr25 == <span class="number">358321</span>)</span><br><span class="line">expr26 = <span class="number">229</span> * v21 + <span class="number">135</span> * v4 + <span class="number">197</span> * v15 + <span class="number">118</span> * v5 + <span class="number">143</span> * v16 + <span class="number">134</span> * v6 + <span class="number">204</span> * v40 + <span class="number">173</span> * v26 + \</span><br><span class="line">         <span class="number">81</span> * v7 + <span class="number">60</span> * v28 + <span class="number">58</span> * v8 + <span class="number">179</span> * v23 + <span class="number">142</span> * v9 + <span class="number">178</span> * v17 + <span class="number">230</span> * v31 + <span class="number">148</span> * v29 + \</span><br><span class="line">         <span class="number">224</span> * v41 + <span class="number">194</span> * v24 + <span class="number">223</span> * v10 + <span class="number">87</span> * v20 + <span class="number">200</span> * v39 + <span class="number">233</span> * v11 + <span class="number">49</span> * v22 + <span class="number">127</span> * v35 + \</span><br><span class="line">         <span class="number">31</span> * (<span class="number">4</span> * v27 + v18) + <span class="number">42</span> * (v1 + <span class="number">6</span> * v2) + <span class="number">109</span> * v42 + <span class="number">75</span> * v3 + <span class="number">165</span> * v19</span><br><span class="line">solver.add(expr26 == <span class="number">456073</span>)</span><br><span class="line">expr27 = <span class="number">41</span> * v4 + <span class="number">253</span> * v3 + <span class="number">163</span> * v15 + <span class="number">193</span> * v30 + <span class="number">155</span> * v16 + <span class="number">113</span> * v27 + <span class="number">131</span> * v6 + <span class="number">55</span> * v2 + \</span><br><span class="line">         <span class="number">21</span> * v40 + <span class="number">53</span> * v26 + <span class="number">13</span> * v8 + <span class="number">201</span> * v25 + <span class="number">237</span> * v9 + <span class="number">223</span> * v31 + <span class="number">95</span> * v24 + <span class="number">194</span> * v20 + \</span><br><span class="line">         <span class="number">62</span> * v39 + <span class="number">119</span> * v11 + <span class="number">171</span> * v22 + <span class="number">135</span> * v18 + <span class="number">69</span> * (v10 + <span class="number">3</span> * v28) + <span class="number">211</span> * (v1 + v29) + \</span><br><span class="line">         <span class="number">4</span> * (<span class="number">43</span> * v7 + v42 + <span class="number">40</span> * v17) + <span class="number">6</span> * (v5 + <span class="number">33</span> * v41 + <span class="number">20</span> * (<span class="number">2</span> * v19 + v21) + <span class="number">24</span> * v23)</span><br><span class="line">solver.add(expr27 == <span class="number">407135</span>)</span><br><span class="line">v13 = v6 + v1 + <span class="number">8</span> * v6 + <span class="number">4</span> * (v8 + <span class="number">2</span> * v27)</span><br><span class="line">expr28 = <span class="number">111</span> * v19 + <span class="number">190</span> * v3 + <span class="number">149</span> * v4 + <span class="number">173</span> * v28 + <span class="number">118</span> * v23 + <span class="number">146</span> * v29 + <span class="number">179</span> * v10 + \</span><br><span class="line">         <span class="number">51</span> * v20 + <span class="number">49</span> * v39 + <span class="number">61</span> * v11 + <span class="number">125</span> * v22 + <span class="number">162</span> * v18 + <span class="number">214</span> * v35 + <span class="number">14</span> * (v34 + v24) + \</span><br><span class="line">         <span class="number">178</span> * (v41 + v16) + <span class="number">11</span> * (<span class="number">4</span> * v9 + v21 + <span class="number">17</span> * v42) + <span class="number">65</span> * (v26 + v17 + <span class="number">2</span> * v26 + <span class="number">2</span> * v5) + \</span><br><span class="line">         <span class="number">4</span> * (v7 + <span class="number">38</span> * v15 + <span class="number">4</span> * v13 + v13 + <span class="number">8</span> * v40 + <span class="number">43</span> * v2)</span><br><span class="line">solver.add(expr28 == <span class="number">369835</span>)</span><br><span class="line">expr29 = <span class="number">27</span> * v27 + <span class="number">223</span> * v6 + <span class="number">147</span> * v26 + <span class="number">13</span> * v21 + <span class="number">35</span> * (v17 + <span class="number">7</span> * v4) + <span class="number">57</span> * (v19 + v32 + <span class="number">3</span> * v11) + \</span><br><span class="line">         <span class="number">11</span> * (v1 + <span class="number">17</span> * (v9 + v5) + <span class="number">10</span> * v16 + <span class="number">3</span> * v31) + <span class="number">2</span> * (<span class="number">53</span> * v23 + v25 + <span class="number">38</span> * v15 + <span class="number">43</span> * v42 + \</span><br><span class="line">         <span class="number">115</span> * v29 + <span class="number">61</span> * v22 + <span class="number">111</span> * (v10 + v40) + <span class="number">14</span> * (v20 + v7 + <span class="number">2</span> * v7 + <span class="number">8</span> * v28) + <span class="number">109</span> * v2 + \</span><br><span class="line">         <span class="number">100</span> * v41 + <span class="number">63</span> * v8) + <span class="number">93</span> * v39 + <span class="number">251</span> * v30 + <span class="number">131</span> * v3</span><br><span class="line">solver.add(expr29 == <span class="number">393303</span>)</span><br><span class="line">expr30 = <span class="number">116</span> * v9 + <span class="number">152</span> * v29 + <span class="number">235</span> * v20 + <span class="number">202</span> * v18 + <span class="number">85</span> * (v8 + <span class="number">3</span> * v11) + <span class="number">221</span> * (v16 + v40) + \</span><br><span class="line">         <span class="number">125</span> * (v33 + v24) + <span class="number">7</span> * (<span class="number">19</span> * v4 + <span class="number">9</span> * (v10 + <span class="number">2</span> * v25) + v2 + <span class="number">33</span> * v3 + <span class="number">32</span> * v19) + \</span><br><span class="line">         <span class="number">3</span> * (<span class="number">71</span> * v39 + <span class="number">43</span> * v22 + <span class="number">32</span> * (v17 + v26) + <span class="number">15</span> * (v5 + v6 + <span class="number">2</span> * v23) + v28 + <span class="number">74</span> * v31 + \</span><br><span class="line">         <span class="number">48</span> * v42) + <span class="number">10</span> * (v21 + <span class="number">11</span> * v30 + <span class="number">16</span> * v15) + <span class="number">136</span> * v7 + <span class="number">106</span> * v1 + <span class="number">41</span> * v27</span><br><span class="line">solver.add(expr30 == <span class="number">403661</span>)</span><br><span class="line">expr31 = <span class="number">127</span> * v4 + <span class="number">106</span> * v15 + <span class="number">182</span> * v30 + <span class="number">142</span> * v5 + <span class="number">159</span> * v16 + <span class="number">17</span> * v1 + <span class="number">211</span> * v6 + <span class="number">134</span> * v2 + \</span><br><span class="line">         <span class="number">199</span> * v7 + <span class="number">103</span> * v28 + <span class="number">247</span> * v23 + <span class="number">122</span> * v9 + <span class="number">95</span> * v41 + <span class="number">62</span> * v10 + <span class="number">203</span> * v39 + <span class="number">16</span> * v11 + \</span><br><span class="line">         <span class="number">41</span> * (<span class="number">6</span> * v42 + v25) + <span class="number">9</span> * (<span class="number">22</span> * v24 + v20 + <span class="number">27</span> * v31 + <span class="number">28</span> * v40) + <span class="number">10</span> * (v8 + v22 + v36 + \</span><br><span class="line">         <span class="number">8</span> * v17 + <span class="number">2</span> * (v22 + v36 + <span class="number">8</span> * v17) + <span class="number">13</span> * v29) + <span class="number">6</span> * (<span class="number">23</span> * v27 + v26) + <span class="number">213</span> * v18 + <span class="number">179</span> * v3 + \</span><br><span class="line">         <span class="number">43</span> * v19</span><br><span class="line">solver.add(expr31 == <span class="number">418596</span>)</span><br><span class="line">expr32 = <span class="number">149</span> * v19 + v1 + <span class="number">133</span> * v22 + <span class="number">207</span> * v41 + <span class="number">182</span> * v26 + <span class="number">234</span> * v7 + <span class="number">199</span> * v8 + <span class="number">168</span> * v21 + \</span><br><span class="line">         <span class="number">58</span> * v10 + <span class="number">108</span> * v20 + <span class="number">142</span> * v18 + <span class="number">156</span> * (v9 + v25) + <span class="number">16</span> * (v29 + <span class="number">6</span> * v31) + <span class="number">126</span> * (v17 + <span class="number">2</span> * v39) + \</span><br><span class="line">         <span class="number">127</span> * (v4 + <span class="number">2</span> * v27 + v40) + <span class="number">49</span> * (v30 + <span class="number">4</span> * v16) + <span class="number">11</span> * (v5 + <span class="number">22</span> * v11) + <span class="number">5</span> * (v15 + v42 + <span class="number">45</span> * v24 + \</span><br><span class="line">         <span class="number">50</span> * v28) + <span class="number">109</span> * v2 + <span class="number">124</span> * v6 + <span class="number">123</span> * v3</span><br><span class="line">solver.add(expr32 == <span class="number">418697</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    solution = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(model.evaluate(a1[i]).as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solution found:&quot;</span>, solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution exists&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;SMC_4nd_s0lv1ng_equ4t1Ons&#125;</span></span><br></pre></td></tr></table></figure><h3 id="change"><a href="#change" class="headerlink" title="change"></a>change</h3><p>main分析：<br>scanf()后的第一个函数 sub_7FF6C3AC29A0——<br>传入input；<br>循环中包含两个分支，根据i的奇偶性进入其中一个；<br>其中使用 函数指针调用  sub_7FF6C3AC3670&#x2F;sub_7FF6C3AC3650，对字节进行简单加密<br>然后开始密文校验——<br>共24字节</p><p>加密部分分析：<br>这部分有点小技俩，动调之后甚至都差点被骗<br>一开始看逻辑觉得是 input[i]^i，但解密出来不对；<br>动调看input前几个字节（’hgame{‘）的加密，观察到’h’^’a’，’g’^’m’，就又以为逻辑是 input[i]^input[i+2]；<br>但继续动调又观察到 ‘a’^0x32，’m’^0x71——什么情况？<br>这时候，注意到main中一开始有个奇怪的字符串 “am2qasl”（当作key）<br>这才意识到，逻辑是 input[i]^key[i%7]</p><p>题外话：<br>看flag的信息，说是这题涉及hook<br>嗯？这导入表中没有 VirtualProtect()，我倒是挺好奇这是怎么实现的</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> original_input[<span class="number">24</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> transformed_input[] = &#123;</span><br><span class="line">        <span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x5D</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x23</span>, <span class="number">0x06</span>,</span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x4B</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0x0D</span>, <span class="number">0x1C</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>,</span><br><span class="line">        <span class="number">0x66</span>, <span class="number">0x15</span>, <span class="number">0x48</span>, <span class="number">0x1B</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x4F</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *key = <span class="string">&quot;am2qasl&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">            original_input[i] = transformed_input[i] ^ key[i % <span class="number">7</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            original_input[i] = ((transformed_input[i] - <span class="number">10</span>) ^ key[i % <span class="number">7</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Original input as string: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(original_input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;ugly_Cpp_and_hook&#125;</span></span><br></pre></td></tr></table></figure><h3 id="again"><a href="#again" class="headerlink" title="again!"></a>again!</h3><p>反汇编：<br>现在pycdc不好使，已经是常态了，直接上反汇编<br>大致是取出 bin1.pyc前16字节，流加密后进行md5——有点摸不着头脑</p><p>其他切入点：<br>看看附件下的 bin2，里面频繁出现字符串 “a405b5d321e446459d8f9169d027bd92”</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="week4-1"><a href="#week4-1" class="headerlink" title="week4"></a>week4</h2><h3 id="change-1"><a href="#change-1" class="headerlink" title="change"></a>change</h3><p>我就说这题的Hook不简单吧————VFT Hook<br>C++虚函数表Hook 初体验捏</p><h3 id="again-1"><a href="#again-1" class="headerlink" title="again!"></a>again!</h3><p>真没想到，错在还原出的python代码……<br>怪不得执行后，输出的md5值不是 “a405b5d321e446459d8f9169d027bd92”</p><p>明明已经猜出这bin2原本是个exe了<br>当时看着 文件中间隔出现的一段段 “a405b5d321e446459d8f9169d027bd92”，就觉得很像是exe中 被0x00填充的 padding区域 </p><p>不过说实话，就算当时得出该值，我估计也想不到解密bin2的方法是——将 “a405b5d321e446459d8f9169d027bd92”循环与 bin2每个字节异或</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code># week3    crackme：伪代码缺失、C++（异常处理）、魔改XTEAencrypt：Windows（CryptoAPI）、SIMD | 动调（查看参数）findme：花指令、魔改RC4（最后^变+） | dump（PE）、动调（获取参数）mystery：反调试（ptrace()）、代码混淆（虚假控制流）、魔改RC4（动态修改key、最后^变-）# week4again!：Python（Pyinstaller）、XXTEA | 反汇编change：C++、Hook（VFT） | 动调crackme2：伪代码缺失、SEH、SMC、反调试（NtQueryInformationProcess）| 约束求解</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2023</title>
      <link href="/2024/12/14/2024-12-14%20HGAME%202023/"/>
      <url>/2024/12/14/2024-12-14%20HGAME%202023/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="patchme"><a href="#patchme" class="headerlink" title="patchme"></a>patchme</h3><p>loc_14C6处看到无法识别的机器码，sub_188C()看到内存修改，一眼SMC</p><p>动调修正SMC：<br>sub_188C()先在 &#x2F;proc&#x2F;self&#x2F;status 检测前下断点，断下绕过后，执行SMC<br>然后来到解码处，按以下流程操作生成汇编————<br>1.快捷键d，将前几个db 改为dd&#x2F;dq<br>2.以其为首个元素，将后续转换为Array<br>3.此时可正常 快捷键c</p><p>代码分析：<br>很具有Linux特色，pipe()+fork()<br>不过这都不重要，只需知道 父进程中打印了flag</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 80</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> v8[] = &#123;</span><br><span class="line">        <span class="number">0x5416D999808A28FAL</span>L,</span><br><span class="line">        <span class="number">0x588505094953B563L</span>L,</span><br><span class="line">        <span class="number">0xCE8CF3A0DC669097L</span>L,</span><br><span class="line">        <span class="number">0x4C5CF3E854F44CBDL</span>L,</span><br><span class="line">        <span class="number">0xD144E49916678331L</span>L</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int32_t</span> v9 = <span class="number">-631149652</span>;</span><br><span class="line">    <span class="type">int16_t</span> v10 = <span class="number">-17456</span>;</span><br><span class="line">    <span class="type">char</span> v11 = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> v12[] = &#123;</span><br><span class="line">        <span class="number">0x3B4FA2FCEDEB4F92L</span>L,</span><br><span class="line">        <span class="number">0x7E45A6C3B67EA16L</span>L,</span><br><span class="line">        <span class="number">0xAFE1ACC8BF12D0E7L</span>L,</span><br><span class="line">        <span class="number">0x132EC3B7269138CEL</span>L,</span><br><span class="line">        <span class="number">0x8E2197EB7311E643L</span>L</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int32_t</span> v13 = <span class="number">-1370223935</span>;</span><br><span class="line">    <span class="type">int16_t</span> v14 = <span class="number">-13899</span>;</span><br><span class="line">    <span class="type">char</span> v15 = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buffer1[<span class="keyword">sizeof</span>(v8) + <span class="keyword">sizeof</span>(v9) + <span class="keyword">sizeof</span>(v10) + <span class="keyword">sizeof</span>(v11)];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buffer2[<span class="keyword">sizeof</span>(v12) + <span class="keyword">sizeof</span>(v13) + <span class="keyword">sizeof</span>(v14) + <span class="keyword">sizeof</span>(v15)];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(buffer1, v8, <span class="keyword">sizeof</span>(v8));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer1 + <span class="keyword">sizeof</span>(v8), &amp;v9, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer1 + <span class="keyword">sizeof</span>(v8) + <span class="keyword">sizeof</span>(v9), &amp;v10, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer1 + <span class="keyword">sizeof</span>(v8) + <span class="keyword">sizeof</span>(v9) + <span class="keyword">sizeof</span>(v10), &amp;v11, <span class="keyword">sizeof</span>(v11));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(buffer2, v12, <span class="keyword">sizeof</span>(v12));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer2 + <span class="keyword">sizeof</span>(v12), &amp;v13, <span class="keyword">sizeof</span>(v13));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer2 + <span class="keyword">sizeof</span>(v12) + <span class="keyword">sizeof</span>(v13), &amp;v14, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer2 + <span class="keyword">sizeof</span>(v12) + <span class="keyword">sizeof</span>(v13) + <span class="keyword">sizeof</span>(v14), &amp;v15, <span class="keyword">sizeof</span>(v15));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> total_length = <span class="keyword">sizeof</span>(buffer1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; total_length; ++i) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> byte_from_buffer1 = buffer1[i];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> byte_from_buffer2 = buffer2[i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">putchar</span>(byte_from_buffer1 ^ byte_from_buffer2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;You_4re_a_p@tch_master_0r_reverse_ma5ter&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Kunmusic"><a href="#Kunmusic" class="headerlink" title="Kunmusic"></a>Kunmusic</h3><p>exe, dll各一个，<br>但前者64位，后者32位；前者用VC++，后者用.NET——这是怎么做到的？</p><p>exe分析：<br>IDA中查看，没啥重要逻辑，就是对dll进行各种操作</p><p>dll分析：<br>dnSpy中查看，Main()中有解密逻辑， Resources.data与 104异或<br>说是  Resources.data要去 Resources.resx中找——但是这个文件在哪啊？？<br>找了一圈真没找到<br>能否通过动调，让程序断在 kmusic.dll的解密逻辑处？</p><p>IDA动调：<br>win11上跑不起来，得仍及win10虚拟机中跑<br>然而扔进IDA后动调，不知为啥会抛异常（此时查看模块列表，没看到加载了kmusic.dll）<br>所以先跑起来后attach，这下断在ntdll.dll中（此时查看模块列表，已加载kmusic.dll）<br>（以下为节外生枝——<br>点击任务栏中的程序，界面弹不出来<br>单步几下，执行”call ntdll RtlExitUserThread“，这下界面能弹出来了<br>随便点击其中的按钮，可以从IDA“Output”窗口中得知，一个线程被开启后关闭）<br>不好使啊，此时Main()已执行，无法断在其中了<br>得另寻他法</p><p>x64dbg调试：<br>可以直接扔进x64dbg，然后f9<br>然而还是走前面IDA的老路，此时Main()已执行，无法断在其中了</p><p>x64dbg调试（基于JIT）：<br>先注册表设置一下JIT——<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft.NETFramework：“DbgManagedDebugger”子项，设置x64dbg路径<br>                    ”DbgJITDebugLaunchSetting“子项，值设为0x0<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AeDebug：”Debugger“子项，设置x64dbg路径<br>                            新建”Auto” DWORD子项，值设为0x1<br>然后修改 kmusic.dll，紧接解密逻辑后的语句patch成 0xCC，再替换原 kmusic.dll<br>最后执行exe——哎呦，没反应，我黔驴技穷了……</p><h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><p>最体现C++特性的一集</p><p>大致逻辑：<br>接收输入放到一个结构体里<br>然后把结构体的成员、encrypt1()指针、encrypt2()指针、两字符串、一参数，都存入一个对象的字段<br>最后以对象的字段作为参数，基于函数指针 先后调用上述函数</p><p>动调：<br>输入”hgame{aaaaabbbbbcccccdddddeeeeefffffggg}”<br>到最后三个函数指针处——<br>第一个，不是encrypt1()，而是 sub_7FF6F4721E30；<br>    且通过内存断点发现，先后用到了 ‘hgame{th1s_is_4_fake_fl4g_hahaha}’、0x12345678、’hgame{this_is_another_fake_flag}’<br>第二个，没看懂加密逻辑<br>第三个，sub_7FF6F4723080，看到密文比较逻辑（40字节）<br>又看了好一会，还是很懵逼</p><p>动调逃课：<br>上面sub_7FF6F4723080中 继续深入，断在memcmp()前，内存中查看两个参数——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//预期密文</span><br><span class="line">28 50 C1 23 98 A1 41 36 4C 31 CB 52 90 F1 AC CC 0F 6C 2A 89 7F DF 11 84 7F E6 A2 E0 59 C7 C5 46 5D 29 38 93 ED 15 7A FF </span><br><span class="line">//加密输入</span><br><span class="line">28 50 C1 23 98 A1 63 27 5D 0F 9B 43 AD FE BB CD 04 50 24 DA 6E 88 2A 84 77 E4 A1 B4 5F D7 CC 54 64 3B 36 C1 E4 2D 5E FF </span><br></pre></td></tr></table></figure><p>可以看出，前六个字节和最后一个字节是一致的，也就是“hgame{…}”的部分。由此确定，加密部分是流加密，可进行爆破</p><p>爆破：<br>不断传入hgame{…}，中间部分依次为33个 ‘a’-‘z’, ‘A’-‘Z’, ‘0’-‘9’, ‘_’, ‘!’，以下为每次从内存中dump出的密文——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">28 50 C1 23 98 A1 63 27 5D 0F 9B 40 AE FD B8 CE 06 52 26 D8 6C 8D 2F 81 72 E1 A5 B0 5B D3 C8 53 63 3C 31 C6 E2 2B 58 FF</span><br><span class="line">28 50 C1 23 98 A1 60 24 5E 0C 98 43 AD FE BB CD 05 51 25 DB 6F 8E 2C 82 71 E2 A6 B3 58 D0 CB 50 60 3F 32 C5 E1 28 5B FF</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>最后把这一坨作为字符串放入如下这么个脚本——<br>每次读取字符串的一行，转换为Hex数组，与预期密文的Hex数组 逐个元素比较；<br>对于元素相同的位置，记录其索引index，然后把此第i次循环所输入的字符（数组”abcd…!“的第i个字符）放入flag[index]；<br>遍历完数组”abcd…!“后，打印flag[]</p><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><p>初步分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dword_140005040[<span class="number">0</span>]：input</span><br><span class="line">dword_140005040[…]：para   </span><br><span class="line">dword_140005040[…]：cipher</span><br><span class="line">byte_140005360：bytecode</span><br><span class="line">dword_140005D40：<span class="built_in">stack</span></span><br><span class="line">a1[<span class="number">0</span>]：EAX</span><br><span class="line">a1[<span class="number">1</span>]：EBX</span><br><span class="line">a1[<span class="number">2</span>]：ECX</span><br><span class="line">a1[<span class="number">3</span>]：EDX</span><br><span class="line">a1[<span class="number">6</span>]：EIP</span><br><span class="line">a1[<span class="number">7</span>]：ESP</span><br><span class="line">a1[<span class="number">8</span>]：ZF</span><br></pre></td></tr></table></figure><p>字节码解释：<br>笑死了，来来回回倒腾几个小时写个解释器，跑起来各种毛病，最后发现还不如人工解释<br>不过有一说一，此时对着前面手写的解释器，人工解释起来省事了不少<br>接下来就是对着汇编 写出伪代码，发现加密逻辑很简单</p><p>汇编+伪代码分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> input_para[] = &#123;</span><br><span class="line">    <span class="comment">//input:</span></span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    </span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//51:</span></span><br><span class="line">    <span class="number">0x0000009B</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000002</span>, <span class="number">0x000000BC</span>, <span class="number">0x000000AC</span>, <span class="number">0x0000009C</span>, <span class="number">0x000000CE</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000002</span>, <span class="number">0x000000B9</span>, </span><br><span class="line">    <span class="number">0x000000FF</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000074</span>, <span class="number">0x00000048</span>, <span class="number">0x00000019</span>, <span class="number">0x00000069</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000003</span>, <span class="number">0x000000CB</span>, <span class="number">0x000000C9</span>, </span><br><span class="line">    <span class="number">0x000000FF</span>, <span class="number">0x000000FC</span>, <span class="number">0x00000080</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000D7</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x0000001D</span>, </span><br><span class="line">    <span class="number">0x0000003D</span>, <span class="number">0x00000099</span>, <span class="number">0x00000088</span>, <span class="number">0x00000099</span>, <span class="number">0x000000BF</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000096</span>, <span class="number">0x0000002E</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000057</span>, </span><br><span class="line"></span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//101: </span></span><br><span class="line">    <span class="number">0x000000C9</span>, <span class="number">0x000000A9</span>, <span class="number">0x000000BD</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000017</span>, <span class="number">0x000000C2</span>, <span class="number">0x0000006E</span>, <span class="number">0x000000F8</span>, <span class="number">0x000000F5</span>, <span class="number">0x0000006E</span>, </span><br><span class="line">    <span class="number">0x00000063</span>, <span class="number">0x00000063</span>, <span class="number">0x000000D5</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000016</span>, <span class="number">0x00000098</span>, <span class="number">0x00000038</span>, <span class="number">0x00000030</span>, <span class="number">0x00000073</span>, </span><br><span class="line">    <span class="number">0x00000038</span>, <span class="number">0x000000C1</span>, <span class="number">0x0000005E</span>, <span class="number">0x000000ED</span>, <span class="number">0x000000B0</span>, <span class="number">0x00000029</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000018</span>, <span class="number">0x00000040</span>, <span class="number">0x000000A7</span>, </span><br><span class="line">    <span class="number">0x000000FD</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000078</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000062</span>, <span class="number">0x000000DB</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000008F</span>, <span class="number">0x0000009C</span>, </span><br><span class="line"></span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment">//151:</span></span><br><span class="line">    <span class="number">0x00004800</span>, <span class="number">0x0000F100</span>, <span class="number">0x00004000</span>, <span class="number">0x00002100</span>, <span class="number">0x00003501</span>, <span class="number">0x00006400</span>, <span class="number">0x00007801</span>, <span class="number">0x0000F900</span>, <span class="number">0x00001801</span>, <span class="number">0x00005200</span>, </span><br><span class="line">    <span class="number">0x00002500</span>, <span class="number">0x00005D01</span>, <span class="number">0x00004700</span>, <span class="number">0x0000FD00</span>, <span class="number">0x00006901</span>, <span class="number">0x00005C00</span>, <span class="number">0x0000AF01</span>, <span class="number">0x0000B200</span>, <span class="number">0x0000EC01</span>, <span class="number">0x00005201</span>, </span><br><span class="line">    <span class="number">0x00004F01</span>, <span class="number">0x00001A01</span>, <span class="number">0x00005000</span>, <span class="number">0x00008501</span>, <span class="number">0x0000CD00</span>, <span class="number">0x00002300</span>, <span class="number">0x0000F800</span>, <span class="number">0x00000C00</span>, <span class="number">0x0000CF00</span>, <span class="number">0x00003D01</span>, </span><br><span class="line">    <span class="number">0x00004501</span>, <span class="number">0x00008200</span>, <span class="number">0x0000D201</span>, <span class="number">0x00002901</span>, <span class="number">0x0000D501</span>, <span class="number">0x00000601</span>, <span class="number">0x0000A201</span>, <span class="number">0x0000DE00</span>, <span class="number">0x0000A601</span>, <span class="number">0x0000CA01</span>, </span><br><span class="line"></span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*处理输入</span></span><br><span class="line"><span class="comment">for(i=0; i++; i&lt;40)&#123;</span></span><br><span class="line"><span class="comment">    m = (input_para[i] + input_para[i+50]) ^ input_para[i+100]</span></span><br><span class="line"><span class="comment">    stack[i] = (m &lt;&lt; 8) + (m &gt;&gt; 8)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,   mov ecx <span class="number">0</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,   add ecx edx  </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,   mov eax input_para[ecx]</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,   mov ebx eax</span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x32</span>,   mov ecx <span class="number">50</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,   add ecx edx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,   mov eax input_para[ecx]</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,   add ebx eax </span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x64</span>,   mov ecx <span class="number">100</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,   add ecx edx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,   mov eax input_para[ecx]</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,   xor ebx eax</span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x08</span>,   mov eax <span class="number">8</span></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>,   mov ecx ebx</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,   shl ebx eax</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,   shr ecx eax</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>,   add ebx ecx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,   mov eax ebx</span><br><span class="line"><span class="number">0x01</span>, <span class="number">0x00</span>,               push eax</span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,   mov eax <span class="number">1</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,   add edx eax </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>,   mov eax edx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x28</span>,   mov ebx <span class="number">40</span></span><br><span class="line"><span class="number">0x04</span>,                     cmp eax ebx</span><br><span class="line"><span class="number">0x06</span>, <span class="number">0x5F</span>,               jnz <span class="number">95</span></span><br><span class="line"><span class="number">0x05</span>, <span class="number">0x00</span>,               jmp <span class="number">0</span></span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————</span><br><span class="line"><span class="comment">/*校验</span></span><br><span class="line"><span class="comment">for(i=0; i++; i&lt;40)&#123;</span></span><br><span class="line"><span class="comment">    if(stack[39-i] != input_para[i+50])</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">95</span>:</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,   mov edx <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">99</span>:</span><br><span class="line"><span class="number">0x02</span>, <span class="number">0x01</span>,               pop ebx</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x96</span>,   mov ecx <span class="number">0</span> </span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,   add ecx edx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,   mov eax input_para[ecx]</span><br><span class="line"><span class="number">0x04</span>,                     cmp eax ebx</span><br><span class="line"><span class="number">0x07</span>, <span class="number">0x88</span>,               jz <span class="number">136</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,   mov eax <span class="number">1</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,   add edx eax </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>,   mov eax edx  </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x28</span>,   mov ebx <span class="number">40</span></span><br><span class="line"><span class="number">0x04</span>,                     cmp eax ebx</span><br><span class="line"><span class="number">0x07</span>, <span class="number">0x63</span>,               jz <span class="number">99</span></span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"><span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"><span class="number">136</span>:</span><br><span class="line"><span class="number">0xFF</span></span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uint32_array_to_ascii</span><span class="params">(<span class="type">const</span> <span class="type">uint32_t</span> input[], <span class="type">int</span> length, <span class="type">char</span> output[])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="type">uint8_t</span> byte = (<span class="type">uint8_t</span>)(input[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">        output[i] = (<span class="type">char</span>)byte;</span><br><span class="line">    &#125;</span><br><span class="line">    output[length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> input[<span class="number">40</span>];</span><br><span class="line">    <span class="type">uint32_t</span> para1[<span class="number">40</span>] = &#123;</span><br><span class="line">        <span class="number">0x0000009B</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000002</span>, <span class="number">0x000000BC</span>, <span class="number">0x000000AC</span>, <span class="number">0x0000009C</span>, <span class="number">0x000000CE</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000002</span>, <span class="number">0x000000B9</span>,</span><br><span class="line">        <span class="number">0x000000FF</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000074</span>, <span class="number">0x00000048</span>, <span class="number">0x00000019</span>, <span class="number">0x00000069</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000003</span>, <span class="number">0x000000CB</span>, <span class="number">0x000000C9</span>,</span><br><span class="line">        <span class="number">0x000000FF</span>, <span class="number">0x000000FC</span>, <span class="number">0x00000080</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000D7</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x0000001D</span>,</span><br><span class="line">        <span class="number">0x0000003D</span>, <span class="number">0x00000099</span>, <span class="number">0x00000088</span>, <span class="number">0x00000099</span>, <span class="number">0x000000BF</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000096</span>, <span class="number">0x0000002E</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000057</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> para2[<span class="number">40</span>] = &#123;</span><br><span class="line">        <span class="number">0x000000C9</span>, <span class="number">0x000000A9</span>, <span class="number">0x000000BD</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000017</span>, <span class="number">0x000000C2</span>, <span class="number">0x0000006E</span>, <span class="number">0x000000F8</span>, <span class="number">0x000000F5</span>, <span class="number">0x0000006E</span>,</span><br><span class="line">        <span class="number">0x00000063</span>, <span class="number">0x00000063</span>, <span class="number">0x000000D5</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000016</span>, <span class="number">0x00000098</span>, <span class="number">0x00000038</span>, <span class="number">0x00000030</span>, <span class="number">0x00000073</span>,</span><br><span class="line">        <span class="number">0x00000038</span>, <span class="number">0x000000C1</span>, <span class="number">0x0000005E</span>, <span class="number">0x000000ED</span>, <span class="number">0x000000B0</span>, <span class="number">0x00000029</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000018</span>, <span class="number">0x00000040</span>, <span class="number">0x000000A7</span>,</span><br><span class="line">        <span class="number">0x000000FD</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000078</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000062</span>, <span class="number">0x000000DB</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000008F</span>, <span class="number">0x0000009C</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> cipher[<span class="number">40</span>] = &#123;</span><br><span class="line">        <span class="number">0x00004800</span>, <span class="number">0x0000F100</span>, <span class="number">0x00004000</span>, <span class="number">0x00002100</span>, <span class="number">0x00003501</span>, <span class="number">0x00006400</span>, <span class="number">0x00007801</span>, <span class="number">0x0000F900</span>, <span class="number">0x00001801</span>, <span class="number">0x00005200</span>,</span><br><span class="line">        <span class="number">0x00002500</span>, <span class="number">0x00005D01</span>, <span class="number">0x00004700</span>, <span class="number">0x0000FD00</span>, <span class="number">0x00006901</span>, <span class="number">0x00005C00</span>, <span class="number">0x0000AF01</span>, <span class="number">0x0000B200</span>, <span class="number">0x0000EC01</span>, <span class="number">0x00005201</span>,</span><br><span class="line">        <span class="number">0x00004F01</span>, <span class="number">0x00001A01</span>, <span class="number">0x00005000</span>, <span class="number">0x00008501</span>, <span class="number">0x0000CD00</span>, <span class="number">0x00002300</span>, <span class="number">0x0000F800</span>, <span class="number">0x00000C00</span>, <span class="number">0x0000CF00</span>, <span class="number">0x00003D01</span>,</span><br><span class="line">        <span class="number">0x00004501</span>, <span class="number">0x00008200</span>, <span class="number">0x0000D201</span>, <span class="number">0x00002901</span>, <span class="number">0x0000D501</span>, <span class="number">0x00000601</span>, <span class="number">0x0000A201</span>, <span class="number">0x0000DE00</span>, <span class="number">0x0000A601</span>, <span class="number">0x0000CA01</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> swapped_cipher = (cipher[<span class="number">39</span> - i] &gt;&gt; <span class="number">8</span>) | (cipher[<span class="number">39</span> - i] &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0x0000FFFF</span>;</span><br><span class="line">        input[i] = (swapped_cipher ^ para2[i]) - para1[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> output[<span class="number">41</span>]; </span><br><span class="line">    uint32_array_to_ascii(input, <span class="number">40</span>, output);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Result: %s\n&quot;</span>, output);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;y0ur_rever5e_sk1ll_i5_very_g0od!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>main_main()：<br>从 inputdir读取，进行Base64解密<br>然后创建了两个实例，进行了一些syscall<br>最后写入 outputdir&#x2F;xxx.enc<br>不明所以，只能说一点头绪都没有，只能看着附件中的 flag.enc干瞪眼</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="week3-1"><a href="#week3-1" class="headerlink" title="week3"></a>week3</h2><h3 id="cpp-1"><a href="#cpp-1" class="headerlink" title="cpp"></a>cpp</h3><p>我勒个ChaCha20加密啊，根本看不出来<br>不过确实是流加密， 我那纯纯的非预期解 还是行得通的</p><h3 id="Kunmusic-1"><a href="#Kunmusic-1" class="headerlink" title="Kunmusic"></a>Kunmusic</h3><p>事后诸葛亮：<br>当时以为对 Resources.data进行异或解密后 就能获取flag，结果全程都在找数据，还没找到……<br>现在想想，其实当时可直接对整个 dll进行异或，扔进 010Editor直接找 “hgame”字符串，就不用费这么大劲了<br>不过话又说回来，这样还是搞不到flag，因为此处异或解密的是一个 PE</p><p>Resources.data获取：<br>参考<a href="https://equinox-shame.github.io/2023/02/01/HGAME2023%20RE%20KunMusic/">这篇文章</a><br>因此心心念念的 Resources.data其实就在“资源”目录下<br><img src="/img/2024-12-14/1.png"><br>右键dump即可</p><h2 id="week4-1"><a href="#week4-1" class="headerlink" title="week4"></a>week4</h2><h3 id="shellcode-1"><a href="#shellcode-1" class="headerlink" title="shellcode"></a>shellcode</h3><p>料到这题会有隐藏在程序中，需要dump后才能显形的逻辑；<br>但没料到是以 加密shellcode 的形式存在，运行时解密shellcode 并载入内存执行</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code># week3cpp：C++、ChaCha20 | 动调（获取传参）、爆破Kunmusic：C++、.NET | dump（PE）、约束求解patchme：Linux、IPC、SMC、反调试（/proc/self/status）# week4shellcode：Golang、Base64、TEA | dump（shellcode）vm：VM（寄存器式）</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Damn Vulnerable DeFi</title>
      <link href="/2024/12/09/2024-12-9%20Damn%20Vulnerable%20DeFi/"/>
      <url>/2024/12/09/2024-12-9%20Damn%20Vulnerable%20DeFi/</url>
      
        <content type="html"><![CDATA[<p>因为一开始是记录在本地Notepad上，本人较懒，故还未移植至博客。<br>这里暂时只放置 对各题目标签的总结</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>Unstoppable：闪电贷（ERC3156）、ERC4626 | 意外代币发送Naive receiver：闪电贷（ERC3156）、元交易（EIP712）、WETH | 多重调用Truster：闪电贷 | 意外函数调用（functionCall）Side Entrance：闪电贷 | 意外函数调用（interface）The Rewarder：Merkle证明Selfie：闪电贷、时间锁 | 发送方校验绕过（delegatecall()）Compromised：ERC721、预言机（NFT价格）、加密（Base64）| 账户创建（给定私钥）、预言机操纵Puppet：DEX（Uniswap V1）| 流动性池操纵Puppet V2：DEX（Uniswap V2）、WETH | 流动性池操纵Free Rider：ERC721、DEX（Uniswap V2）、WETH | 闪电交换Backdoor：Climber：Wallet Mining：Puppet V3：ABI Smuggling：Shards：Curvy Puppet：Withdrawal：</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2022</title>
      <link href="/2024/12/06/2024-12-6%20HGAME%202022/"/>
      <url>/2024/12/06/2024-12-6%20HGAME%202022/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="WOW"><a href="#WOW" class="headerlink" title="WOW"></a>WOW</h3><p>main:<br>输入先进行四轮 sub_401850+sub_401410+sub_4018D0 加密<br>然后sub_6319B0中处理<br>最后与 unk_404D4（32字节，但4个QWORD）进行比较</p><p>这之后还有四轮 sub_631850+suB_631630+sub_6318D0，动调发现是前面加密对应的解密逻辑</p><p>sub_6319B0处理逻辑：<br>sub_631D30中，CS变为33h，CPU模式切到x64<br>将每个QWORD的最低字节 ^0x20<br>sub_631D50中，CS变回23h，CPU模式切回x86</p><p>main动调：<br>46，下断点<br>55，下断点<br>59，下断点</p><p>46，断下后 将EIP设到52行处<br>55，断下后 将Buf2处的32字节替换成cipher<br>59，断下后 可查看内存中input处的flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// hgame&#123;WOWOW_h@ppy_n3w_ye4r_2022&#125;</span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>main_main()：<br>启动一个HTTP服务器</p><p>main_HttpHandleFunc()：<br>通过jmp到自身开头，实现循环执行</p><p>解析HTTP请求的表单数据，获取特定字段的值<br>检查该字段是否为”flag“，并将其中字符串进行格式化、拼接</p><p>main_encrypt()中加密<br>与 unk_69B9F0比较（这里是从cipher[1]开始的，cipher[0]藏在前面）</p><p>main_encrypt()：<br>先RSA，其输出的数转成字符串后 作为参数，和0x66一同参与循环异或运算（包含Golang的 panic-recovery异常处理机制）</p><p>RSA部分——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = &lt;a92582184765240&gt;</span><br><span class="line">q = &lt;a10731052865803&gt;</span><br><span class="line">e = &lt;a950501&gt;</span><br></pre></td></tr></table></figure><p>异或部分——</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RSA_cipher = <span class="string">&quot; &quot;</span>;      </span><br><span class="line">para = <span class="number">0x66L</span>L;</span><br><span class="line"></span><br><span class="line">j = <span class="number">0LL</span>;</span><br><span class="line"><span class="keyword">while</span> ( j &lt; <span class="number">153</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v22 = RSA_cipher[j];</span><br><span class="line">  AAAA[j] = v22 ^ para;</span><br><span class="line">  para = v22;</span><br><span class="line">  j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">153</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v24 = AAAA[i];</span><br><span class="line">  AAAA[i] = v24 ^ para;</span><br><span class="line">  para = v24;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密文部分——</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AAAA_final = [</span><br><span class="line">    ????,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x09</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x03</span>, <span class="number">0x0B</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x04</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>z3求解 RSA_cipher：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">RSA_cipher = [BitVec(<span class="string">f&#x27;p<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">153</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">153</span>):</span><br><span class="line">    solver.add(RSA_cipher[i] &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;1&#x27;</span>), RSA_cipher[i] &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>))</span><br><span class="line"></span><br><span class="line">AAAA_final = [</span><br><span class="line">    <span class="number">0xFF</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x09</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x03</span>, <span class="number">0x0B</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x04</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">solver.add(RSA_cipher[<span class="number">1</span>] ^ RSA_cipher[<span class="number">0</span>] ^ (RSA_cipher[<span class="number">0</span>] ^ <span class="number">0x66</span>) == AAAA_final[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">153</span>):</span><br><span class="line">    solver.add(RSA_cipher[i] ^ RSA_cipher[i-<span class="number">1</span>] ^ (RSA_cipher[i-<span class="number">1</span>] ^ RSA_cipher[i-<span class="number">2</span>]) == AAAA_final[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(model.evaluate(p).as_long()) <span class="keyword">for</span> p <span class="keyword">in</span> RSA_cipher])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;RSA_cipher found:&quot;</span>, result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br></pre></td></tr></table></figure><p>哎呦我服了，就是不对</p><h3 id="hardasm"><a href="#hardasm" class="headerlink" title="hardasm"></a>hardasm</h3><p>32字节输入，加密逻辑全main的在内联汇编中，六七千行AVX2指令<br>直接放弃了</p><h3 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h3><p>一个基于寄存器的VM</p><p>大致分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dword_49F020[<span class="number">0</span>]：EIP</span><br><span class="line">dword_49F020[<span class="number">1</span>]：ESP</span><br><span class="line">dword_49F020[<span class="number">3</span>]：input</span><br><span class="line">dword_49F020[<span class="number">9</span>]：<span class="built_in">stack</span></span><br><span class="line"></span><br><span class="line">dword_49F020[<span class="number">0x6D</span>]（<span class="number">0x49f1d4</span>…）：code</span><br><span class="line">dword_49F020[<span class="number">209</span>]（<span class="number">0x49F37C</span>…）：parameter</span><br><span class="line">dword_49F020[<span class="number">209</span>]（<span class="number">0x49F408</span>…）：cipher</span><br></pre></td></tr></table></figure><p>动调分析逻辑：<br>输入”ABCDEFGHIJKLMNOPQRSTUVWXYZ123456”</p><p>检查输入长度————<br>getchar<br>cmp ‘A’ 0Ah<br>getchar<br>cmp ‘B’ 0Ah<br>getchar<br>cmp ‘C’ 0Ah<br>…</p><p>加密操作————<br>mov<br>shl_input<br>xor input, parameter<br>…</p><p>逻辑就是先检查长度（32字节），然后逐字节加密（左移＋异或），最后逐字节与密文比较（不符合则直接退）</p><p>一开始以为parameter是cipher的，直到发现它被传入xor中<br>cipher一开始以为是从 ”0x15, 0x8E, 0x88, 0xA3…“ 开始算的，直到给他们下内存断点，发现从”0x8E“开始才会退，由此才断定”0x15“不属于cipher</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    unsigned char para[] = &#123;</span><br><span class="line">        <span class="number">0x5E</span>, <span class="number">0x46</span>, <span class="number">0x61</span>, <span class="number">0x43</span>, <span class="number">0x0E</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x1F</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x29</span>, <span class="number">0x41</span>, <span class="number">0x63</span>, <span class="number">0x3B</span>,</span><br><span class="line">        <span class="number">0x64</span>, <span class="number">0x3B</span>, <span class="number">0x15</span>, <span class="number">0x18</span>, <span class="number">0x5B</span>, <span class="number">0x3E</span>, <span class="number">0x22</span>, <span class="number">0x50</span>, <span class="number">0x46</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x4E</span>, <span class="number">0x43</span>, <span class="number">0x23</span>, <span class="number">0x60</span>, <span class="number">0x3B</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    unsigned char output[] = &#123;</span><br><span class="line">        <span class="number">0x8E</span>, <span class="number">0x88</span>, <span class="number">0xA3</span>, <span class="number">0x99</span>, <span class="number">0xC4</span>, <span class="number">0xA5</span>, <span class="number">0xC3</span>, <span class="number">0xDD</span>, <span class="number">0x19</span>, <span class="number">0xEC</span>, <span class="number">0x6C</span>, <span class="number">0x9B</span>, <span class="number">0xF3</span>, <span class="number">0x1B</span>, <span class="number">0x8B</span>, <span class="number">0x5B</span>,</span><br><span class="line">        <span class="number">0x3E</span>, <span class="number">0x9B</span>, <span class="number">0xF1</span>, <span class="number">0x86</span>, <span class="number">0xF3</span>, <span class="number">0xF4</span>, <span class="number">0xA4</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0xAB</span>, <span class="number">0x86</span>, <span class="number">0x89</span>, <span class="number">0x61</span>, <span class="number">0x22</span>, <span class="number">0xC1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> length = sizeof(output) / sizeof(output[<span class="number">0</span>]);</span><br><span class="line">    unsigned char <span class="built_in">input</span>[length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="built_in">input</span>[i] = (output[i] ^ para[i]) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        printf(<span class="string">&quot;%c&quot;</span>, <span class="built_in">input</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;Ea$Y-Vm-t0-PrOTeCT_cOde!!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="week4-1"><a href="#week4-1" class="headerlink" title="week4"></a>week4</h2><h3 id="hardasm-1"><a href="#hardasm-1" class="headerlink" title="hardasm"></a>hardasm</h3><p>事后诸葛亮：<br>我真傻，真的，<br>明知道这几千行AVX2指令可读性为0，本应该想到要使用非常规方法的<br>明知道最后这32字节 是逐字节校验，本应往流加密方向去猜，进而往逐字节爆破方面去切入的</p><p>wp思路：<br>不过有一说一，wp爆破的切入点确实nb，第一次见到这种思路</p><p>patch程序 print()前传入rcx的参数，从而打印 [rsp+70h+var_50]（使用0&#x2F;0xFF记录着每个字节正确与否）<br>这样爆破的目标就有了，即让程序执行后的输出为 32个 0xFF<br>（有点像安卓log插桩）</p><p>不过如果是我的话，估计想到的用unicorn<br>注册个回调，当执行到 print()前的传参逻辑时（0x00007FF73593804E），打印 [rsp+70h+var_50]</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code># week4ezvm：VM（寄存器式）| 动调hardasm：ASM、SIMD | 动调、patch（打印参数）、爆破server：Golang、RSA | 爆破WOW：天堂之门 | 动调（获取flag）</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ChainFlag</title>
      <link href="/2024/11/04/2024-11-4%20ChainFlag/"/>
      <url>/2024/11/04/2024-11-4%20ChainFlag/</url>
      
        <content type="html"><![CDATA[<p>因为一开始是记录在本地Notepad上，本人较懒，故还未移植至博客。<br>这里暂时只放置 对各题目标签的总结</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code># opcodesEasyAssembly：| 字节码编写BoxGame：虚假逻辑、沙盒 | 字节码编写、意外事件触发EasySandbox：沙盒 | storage任意写、字节码编写（CREATE2）StArNDBOX：发送方校验（tx.origin）、沙盒 | 字节码编写（CALL）AcoraidaMonica：虚假逻辑 | 交易查询、字节码反编译、地址爆破、JOP、calldata构造、意外函数调用（DELEGATECALL）Re-Montagy：加密（魔改TEA）| 哈希碰撞Creativity：| 同地址部署、意外事件触发# storageHappy_DOuble_Eleven：发送方校验（extcodesize()）| 字节码反编译、地址爆破、意外函数调用（interface）、storage任意写、薅羊毛攻击、重入攻击cow：未初始化storage指针 | 地址爆破、整数溢出rise：未初始化storage指针 | 薅羊毛攻击roiscoin：发送方校验（tx.origin）、未初始化storage指针 | 地址爆破、storage任意写Bank：未初始化storage指针 | storage任意写、JOP# reentrancybabybank： | 地址爆破、storage任意读、重入攻击、整数溢出h4ck：| 重入攻击、整数溢出# cryptoEVMEnc：加密（TEA）EthEnc：加密（XTEA）HappyTree：Merkle证明# integer overflowbet：| 整数溢出hf：未初始化storage指针 | 整数溢出# delegatecallcounter strike：发送方校验（extcodesize()、tx.origin）| storage任意读、calldata构造、意外状态修改、意外函数调用（delegatecall()）SafeDelegatecall：| Returndata构造、JOP# bad randomnessEOSGame：伪随机ZeroLottery：伪随机 | 回滚攻击# airdrop huntingCoinFlip：| 薅羊毛攻击Fake3D：发送方校验（extcodesize()、tx.origin）、虚假逻辑 | 字节码反编译、地址爆破babybet：babybet：伪随机 | 薅羊毛攻击</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut 22-31</title>
      <link href="/2024/10/13/2024-10-13%20Ethernaut%2022-31/"/>
      <url>/2024/10/13/2024-10-13%20Ethernaut%2022-31/</url>
      
        <content type="html"><![CDATA[<p>因为一开始是记录在本地Notepad上，本人较懒，故还未移植至博客。<br>这里暂时只放置 对各题目标签的总结</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>22_Dex：DEX | 流动性池操纵23_Dex-Two：DEX | 流动性池操纵（自定义代币）24_Puzzle-Wallet：代理模式（合约升级）| 意外状态修改25_Motorbike：代理模式（合约升级、UUPS、ERC1967）| 意外状态修改（逻辑合约）26_DoubleEntryPoint：27_Good-Samaritan：| 意外函数调用（interface）28_Gatekeeper-Three：发送方校验（tx.origin）| storage任意读、回滚攻击29_Switch：| calldata构造30_HigherOrder：| calldata构造31_Stake：WETH</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EVM基础</title>
      <link href="/2024/10/12/2024-10-12%20EVM%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/10/12/2024-10-12%20EVM%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="栈式架构"><a href="#栈式架构" class="headerlink" title="栈式架构"></a>栈式架构</h1><p>EVM本质上是一个栈式虚拟机，这里简单介绍一下栈机</p><p>机制：<br><img src="/img/2024-10-12/4.png"></p><p>演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StackVirtualMachine</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack.append(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Stack underflow&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not enough operands for addition&quot;</span>)</span><br><span class="line">        b = <span class="variable language_">self</span>.pop()</span><br><span class="line">        a = <span class="variable language_">self</span>.pop()</span><br><span class="line">        <span class="variable language_">self</span>.push(a + b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not enough operands for subtraction&quot;</span>)</span><br><span class="line">        b = <span class="variable language_">self</span>.pop()</span><br><span class="line">        a = <span class="variable language_">self</span>.pop()</span><br><span class="line">        <span class="variable language_">self</span>.push(a - b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not enough operands for multiplication&quot;</span>)</span><br><span class="line">        b = <span class="variable language_">self</span>.pop()</span><br><span class="line">        a = <span class="variable language_">self</span>.pop()</span><br><span class="line">        <span class="variable language_">self</span>.push(a * b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, instructions</span>):</span><br><span class="line">        <span class="keyword">for</span> instruction <span class="keyword">in</span> instructions:</span><br><span class="line">            op, *args = instruction</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.push(*args)</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.add()</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.sub()</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.mul()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown instruction: <span class="subst">&#123;op&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dump_stack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Stack: <span class="subst">&#123;self.stack&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vm = StackVirtualMachine()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一些指令来计算 A * (B - C) + (D + E)</span></span><br><span class="line">instructions = [</span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">5</span>),   <span class="comment"># A = 5</span></span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">3</span>),   <span class="comment"># B = 3</span></span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">2</span>),   <span class="comment"># C = 2</span></span><br><span class="line">    (<span class="string">&#x27;sub&#x27;</span>,),      <span class="comment"># B - C</span></span><br><span class="line">    (<span class="string">&#x27;mul&#x27;</span>,),      <span class="comment"># A * (B - C)</span></span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">4</span>),   <span class="comment"># D = 4</span></span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">1</span>),   <span class="comment"># E = 1</span></span><br><span class="line">    (<span class="string">&#x27;add&#x27;</span>,),      <span class="comment"># D + E</span></span><br><span class="line">    (<span class="string">&#x27;add&#x27;</span>,)       <span class="comment"># A * (B - C) + (D + E)</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行虚拟机</span></span><br><span class="line">vm.run(instructions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印栈状态</span></span><br><span class="line">vm.dump_stack()</span><br></pre></td></tr></table></figure><h1 id="数据存放位置"><a href="#数据存放位置" class="headerlink" title="数据存放位置"></a>数据存放位置</h1><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><p>数据布局：</p><ol><li>mapping<br><img src="/img/2024-10-12/1.jpg"></li><li>dynamic array<br><img src="/img/2024-10-12/2.jpg"></li><li>struct<br><img src="/img/2024-10-12/3.jpg"></li></ol><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>数据布局：<br>具体见此<a href="https://learnblockchain.cn/docs/solidity/internals/layout_in_memory.html">文章</a></p><p>注：Memory中前0x7f个字节被保留，因此使用 mstore()时，offset至少为0x80</p><h2 id="Calldata-Returndata"><a href="#Calldata-Returndata" class="headerlink" title="Calldata&#x2F;Returndata"></a>Calldata&#x2F;Returndata</h2><h3 id="Calldata"><a href="#Calldata" class="headerlink" title="Calldata"></a>Calldata</h3><p>数据布局&#x2F;ABI编码规范：</p><ol><li>函数选择器：4字节</li><li>静态类型：32字节（data）<br>动态类型(string, bytes, dynamic array, struct)：32+32+n*32字节（offset+length+data）</li></ol><p>具体见此<a href="https://hitcxy.com/2021/argument-encoding">文章</a></p><h3 id="Returndata"><a href="#Returndata" class="headerlink" title="Returndata"></a>Returndata</h3><p>数据布局：</p><ol><li>错误返回时：错误选择器+ABI编码数据（被try-catch视作异常捕获）</li><li>正常返回时：ABI编码数据</li></ol><p>运行时错误类型 与对应签名、选择器：<br>具体见此<a href="https://learnblockchain.cn/article/6251">文章</a></p><p>注：仅代表最近一次外部函数调用的Returndata</p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>合约字节码 构成：</p><ol><li>创建字节码&#x2F;Creation Code）：constructor逻辑 + codecopy()将运行时字节码存入Memory，return()返回该处数据</li><li>运行时字节码&#x2F;Runtime Code）：除 constructor以外的逻辑</li></ol><p>具体见此<a href="https://learnblockchain.cn/question/3052">文章</a></p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="数据移动"><a href="#数据移动" class="headerlink" title="数据移动"></a>数据移动</h2><p>&#x2F;&#x2F; store<br>sstore(offset, value)：…-&gt;Storage<br>mstore(offset, value)：…-&gt;Memory</p><p>&#x2F;&#x2F; load       <br>sload(offset)：Storage-&gt;Stack<br>mload(offset)：Memory-&gt;Stack<br>calldataload(offset)：Calldata-&gt;Stack</p><p>&#x2F;&#x2F; copy<br>calldatacopy(mem_offset, offset, length)：Calldata-&gt;Memory<br>returndatacopy(mem_offset, offset, length)： Returndata-&gt;Memory<br>codecopy(mem_offset, offset, length)：Code(Creation+Runtime)-&gt;Memory<br>extcodecopy(addr, mem_offset, offset, length)：Code(Runtime)-&gt;Memory</p><p>&#x2F;&#x2F; return<br>return&#x2F;revert(mem_offset, length)：Memory-&gt;Returndata</p><h2 id="合约创建"><a href="#合约创建" class="headerlink" title="合约创建"></a>合约创建</h2><p>create(value, offset, length)：Memory-&gt;…<br>注：<br>新合约地址基于创建者address、交易nonce；<br>address &#x3D; keccak256(rlp([sender_address,sender_nonce]))[12:]）</p><p>create2(value, offset, length, salt)：Memory-&gt;…<br>注：<br>新合约地址基于创建者address、盐值、字节码；<br>address &#x3D; keccak256( 0xff + sender_address + salt + keccak256(init_code))[12:]</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>jump(offset)：…-&gt;Code(Creation+Runtime)</p><h1 id="合约部署原理"><a href="#合约部署原理" class="headerlink" title="合约部署原理"></a>合约部署原理</h1><ol><li>账户 编译合约，生成字节码</li><li>账户 发送交易，其中to字段为空，data字段为 “字节码+constructor参数”</li><li>矿工节点 接收交易</li><li>运行其中的EVM 先基于from,nonce字段 生成新合约地址；<br>然后将data字段存入 Code，执行创建字节码，返回运行时字节码；<br>最后将两者相关联，存入区块链</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://learnblockchain.cn/article/4864">https://learnblockchain.cn/article/4864</a><br><a href="https://learnblockchain.cn/docs/solidity/internals/layout_in_memory.html">https://learnblockchain.cn/docs/solidity/internals/layout_in_memory.html</a><br><a href="https://hitcxy.com/2021/argument-encoding">https://hitcxy.com/2021/argument-encoding</a><br><a href="https://learnblockchain.cn/article/6251">https://learnblockchain.cn/article/6251</a><br><a href="https://learnblockchain.cn/question/3052">https://learnblockchain.cn/question/3052</a><br><a href="https://learnblockchain.cn/docs/foundry/i18n/zh/tutorials/create2-tutorial.html?search=">https://learnblockchain.cn/docs/foundry/i18n/zh/tutorials/create2-tutorial.html?search=</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain 专题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见ERC标准</title>
      <link href="/2024/10/01/2024-10-1%20%E5%B8%B8%E8%A7%81ERC%E6%A0%87%E5%87%86/"/>
      <url>/2024/10/01/2024-10-1%20%E5%B8%B8%E8%A7%81ERC%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<h1 id="ERC-20"><a href="#ERC-20" class="headerlink" title="ERC-20"></a>ERC-20</h1><p>同质化代币</p><p>机制：<br>继承后，可初始化某种代币，并成为此代币的管理合约；<br>其他合约想引入此代币，只需引入上述管理合约的实例</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">MyERC20</span> is <span class="title class_">Context</span>, <span class="title class_">IERC20</span> &#123;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) private _balances;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256)) private _allowances;</span><br><span class="line"></span><br><span class="line">    uint256 private _totalSupply;</span><br><span class="line">    string private _name;</span><br><span class="line">    string private _symbol;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 构造函数，初始化代币名称、符号和总供应量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory name_, string memory symbol_</span>) &#123;</span><br><span class="line">        _name = name_;</span><br><span class="line">        _symbol = symbol_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 查看账户余额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address account</span>) public view virtual override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> _balances[account];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 返回当前的总供应量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">totalSupply</span>(<span class="params"></span>) public view virtual override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> _totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 铸造新的代币并分配给指定账户。</span></span><br><span class="line"><span class="comment">     * 注意：此函数应由合约所有者或其他授权实体调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_mint</span>(<span class="params">address account, uint256 amount</span>) internal virtual &#123;</span><br><span class="line">        <span class="built_in">require</span>(account != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: mint to the zero address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_beforeTokenTransfer</span>(<span class="title function_">address</span>(<span class="number">0</span>), account, amount);</span><br><span class="line"></span><br><span class="line">        _totalSupply += amount;</span><br><span class="line">        _balances[account] += amount;</span><br><span class="line">        emit <span class="title class_">Transfer</span>(<span class="title function_">address</span>(<span class="number">0</span>), account, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 批准spender代表msg.sender转移一定数量的代币。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint256 amount</span>) public virtual override <span class="title function_">returns</span> (bool) &#123;</span><br><span class="line">        <span class="title function_">_approve</span>(<span class="title function_">_msgSender</span>(), spender, amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 设置或重置允许spender从owner那里转移的代币数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_approve</span>(<span class="params">address owner, address spender, uint256 amount</span>) internal virtual &#123;</span><br><span class="line">        <span class="built_in">require</span>(owner != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: approve from the zero address&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(spender != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: approve to the zero address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _allowances[owner][spender] = amount;</span><br><span class="line">        emit <span class="title class_">Approval</span>(owner, spender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 根据之前设置的批准额度，从一个地址转账到另一个地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address sender,</span></span><br><span class="line"><span class="params">        address recipient,</span></span><br><span class="line"><span class="params">        uint256 amount</span></span><br><span class="line"><span class="params">    </span>) public virtual override <span class="title function_">returns</span> (bool) &#123;</span><br><span class="line">        uint256 currentAllowance = _allowances[sender][<span class="title function_">_msgSender</span>()];</span><br><span class="line">        <span class="built_in">require</span>(currentAllowance &gt;= amount, <span class="string">&quot;ERC20: transfer amount exceeds allowance&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_transfer</span>(sender, recipient, amount);</span><br><span class="line">        <span class="title function_">_approve</span>(sender, <span class="title function_">_msgSender</span>(), currentAllowance - amount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 实际执行代币转移的内部函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_transfer</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address sender,</span></span><br><span class="line"><span class="params">        address recipient,</span></span><br><span class="line"><span class="params">        uint256 amount</span></span><br><span class="line"><span class="params">    </span>) internal virtual &#123;</span><br><span class="line">        <span class="built_in">require</span>(sender != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: transfer from the zero address&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(recipient != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: transfer to the zero address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 senderBalance = _balances[sender];</span><br><span class="line">        <span class="built_in">require</span>(senderBalance &gt;= amount, <span class="string">&quot;ERC20: transfer amount exceeds balance&quot;</span>);</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            _balances[sender] = senderBalance - amount;</span><br><span class="line">        &#125;</span><br><span class="line">        _balances[recipient] += amount;</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Transfer</span>(sender, recipient, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 在每次代币转移前调用的钩子函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_beforeTokenTransfer</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 amount</span></span><br><span class="line"><span class="params">    </span>) internal virtual &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-223"><a href="#ERC-223" class="headerlink" title="ERC-223"></a>ERC-223</h1><p>同质化代币<br>概述：<br>与ERC20相互兼容，安全性有所增加</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">ERC223</span> &#123;</span><br><span class="line">    string public name;</span><br><span class="line">    string public symbol;</span><br><span class="line">    uint8 public decimals;</span><br><span class="line">    uint256 private _totalSupply;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) private _balances;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Transfer</span>(address indexed <span class="keyword">from</span>, address indexed to, uint256 value, bytes data);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _name, string memory _symbol, uint8 _decimals, uint256 initialSupply</span>) &#123;</span><br><span class="line">        name = _name;</span><br><span class="line">        symbol = _symbol;</span><br><span class="line">        decimals = _decimals;</span><br><span class="line">        _totalSupply = initialSupply * (<span class="number">10</span> ** <span class="title function_">uint256</span>(decimals));</span><br><span class="line">        _balances[msg.<span class="property">sender</span>] = _totalSupply;</span><br><span class="line">        emit <span class="title class_">Transfer</span>(<span class="title function_">address</span>(<span class="number">0</span>), msg.<span class="property">sender</span>, _totalSupply, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> <span class="variable">IERC223Recipient</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 接收 ERC-223 代币的合约需要实现此接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">IERC223Recipient</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 当合约接收到 ERC-223 代币时调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tokenFallback</span>(<span class="params">address <span class="keyword">from</span>, uint256 value, bytes calldata data</span>) external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-721"><a href="#ERC-721" class="headerlink" title="ERC-721"></a>ERC-721</h1><p>非同质化代币&#x2F;NFT</p><p>机制：<br>允许在一个合约中创建和管理多个 NFT，每个NFT可以代表不同的资产。完全不同的物品，比如一个房产和一个艺术品，可以放在同一个ERC721合约中。<br>每个NFT都有一个唯一的 tokenId，这个tokenId可以用来区分不同的资产。<br>每个NFT可以通过其 tokenURI 指向不同的元数据文件，这些元数据文件可以包含不同的信息。例如，房产的元数据文件可以包含地址、面积等信息，而艺术品的元数据文件可以包含作者、创作年份等信息。</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">MyERC721</span> is <span class="title class_">ERC721</span>, <span class="title class_">ERC721URIStorage</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化合约并设置名称和符号。</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _name, string memory _symbol</span>) <span class="title class_">ERC721</span>(_name, _symbol) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 查询指定地址持有的NFT数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address owner</span>) public view virtual override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="built_in">require</span>(owner != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC721: 查询零地址的余额&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">balanceOf</span>(owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 获取给定token ID对应的持有者地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ownerOf</span>(<span class="params">uint256 tokenId</span>) public view virtual override <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">ownerOf</span>(tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 安全铸造一个新的NFT，并确保接收方可以处理该NFT（如果接收方是合约）。</span></span><br><span class="line"><span class="comment">     * 只有合约所有者能调用此方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">safeMint</span>(<span class="params">address to, uint256 tokenId</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_safeMint</span>(to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 铸造一个新的NFT。只有合约所有者能调用此方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">address to, uint256 tokenId</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_mint</span>(to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 设置或更新特定NFT的元数据URI。仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setTokenURI</span>(<span class="params">uint256 tokenId, string memory _tokenURI</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_setTokenURI</span>(tokenId, _tokenURI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 将NFT从一个地址转移到另一个地址。调用者必须是NFT的所有者或被授权者。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 tokenId</span></span><br><span class="line"><span class="params">    </span>) public virtual override &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">_isApprovedOrOwner</span>(<span class="title function_">_msgSender</span>(), tokenId), <span class="string">&quot;ERC721: 转移发起人不是所有者也不是授权方&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_transfer</span>(<span class="keyword">from</span>, to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 安全地转移NFT，并检查接收方是否可以安全接收（如果接收方是合约）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">safeTransferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 tokenId</span></span><br><span class="line"><span class="params">    </span>) public virtual override &#123;</span><br><span class="line">        <span class="title function_">safeTransferFrom</span>(<span class="keyword">from</span>, to, tokenId, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 与`safeTransferFrom`相同，但允许附加数据在转移时传递给接收方。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">safeTransferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 tokenId,</span></span><br><span class="line"><span class="params">        bytes memory _data</span></span><br><span class="line"><span class="params">    </span>) public virtual override &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">_isApprovedOrOwner</span>(<span class="title function_">_msgSender</span>(), tokenId), <span class="string">&quot;ERC721: 转移发起人不是所有者也不是授权方&quot;</span>);</span><br><span class="line">        <span class="title function_">_safeTransfer</span>(<span class="keyword">from</span>, to, tokenId, _data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 销毁指定ID的NFT，并同时删除其关联的元数据URI。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_burn</span>(<span class="params">uint256 tokenId</span>) internal virtual <span class="title function_">override</span>(<span class="params">ERC721, ERC721URIStorage</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">_burn</span>(tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 获取指定NFT的元数据URI。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tokenURI</span>(<span class="params">uint256 tokenId</span>) public view virtual <span class="title function_">override</span>(<span class="title class_">ERC721</span>, <span class="title class_">ERC721URIStorage</span>) <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">tokenURI</span>(tokenId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-1967"><a href="#ERC-1967" class="headerlink" title="ERC-1967"></a>ERC-1967</h1><p>通用可升级代理&#x2F;UUPS</p><p>机制：<br>继承后，逻辑合约的地址 一律存储在 slot[_IMPLEMENTATION_SLOT]<br>（ _IMPLEMENTATION_SLOT &#x3D; bytes32(uint256(keccak256(‘eip1967.proxy.implementation’))-1) ）</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">MyUUPSProxy</span> is <span class="title class_">Initializable</span>, <span class="title class_">UUPSUpgradeable</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">// 实现地址的存储槽。</span></span><br><span class="line">    bytes32 internal constant _IMPLEMENTATION_SLOT = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @custom:oz-upgrades-unsafe-allow constructor</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) initializer &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) initializer public &#123;</span><br><span class="line">        <span class="title function_">__Ownable_init</span>();</span><br><span class="line">        <span class="title function_">__UUPSUpgradeable_init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 升级代理的实现。</span></span><br><span class="line"><span class="comment">     * 只有合约所有者可以调用此函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address newImplementation</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_upgradeToAndCall</span>(newImplementation, <span class="title function_">bytes</span>(<span class="string">&quot;&quot;</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 内部函数，用于设置实现地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_authorizeUpgrade</span>(<span class="params">address</span>) internal override onlyOwner &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-3156"><a href="#ERC-3156" class="headerlink" title="ERC-3156"></a>ERC-3156</h1><p>闪电贷&#x2F;FlashLoan</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> <span class="variable">IERC3156FlashLender</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 闪电贷放款人接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">IERC3156FlashLender</span> is <span class="title class_">IERC165</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 查询可用于闪电贷的最大货币数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">maxFlashLoan</span>(<span class="params">address token</span>) external view <span class="title function_">returns</span> (uint256);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 获取给定贷款的费用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">flashFee</span>(<span class="params">address token, uint256 amount</span>) external view <span class="title function_">returns</span> (uint256);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 发起一笔闪电贷，允许在同一个交易中借款并在交易结束前还款。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">flashLoan</span>(<span class="params"></span></span><br><span class="line"><span class="params">        IERC3156FlashBorrower receiver,</span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint256 amount,</span></span><br><span class="line"><span class="params">        bytes calldata data</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">returns</span> (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> <span class="variable">IERC3156FlashBorrower</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 支持闪电贷的任何合约的接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">IERC3156FlashBorrower</span> is <span class="title class_">IERC165</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 接收闪电贷，并处理回调逻辑。</span></span><br><span class="line"><span class="comment">     * 实现此方法的合约必须返回特定的哈希值以确认操作成功。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onFlashLoan</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address initiator,</span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint256 amount,</span></span><br><span class="line"><span class="params">        uint256 fee,</span></span><br><span class="line"><span class="params">        bytes calldata data</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">returns</span> (bytes32);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-4626"><a href="#ERC-4626" class="headerlink" title="ERC-4626"></a>ERC-4626</h1><p>代币化金库&#x2F;Vault</p><p>机制：<br>继承后，可接收 用户的ERC20代币（资产&#x2F;assets），存入 对应ERC20代币合约中；<br>同时铸造 自身管理的ERC20代币（份额&#x2F;shares）</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">SimpleVault</span> is <span class="title class_">IERC4626</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="title class_">SafeERC20</span> <span class="keyword">for</span> <span class="title class_">IERC20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">IERC20</span> public immutable asset;</span><br><span class="line">    uint256 private _totalSupply;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) private _balances;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">IERC20 _asset</span>) &#123;</span><br><span class="line">        asset = _asset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 返回由本合约“管理”的基础资产的总数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">totalAssets</span>(<span class="params"></span>) public view override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> asset.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 将一定数量的基础资产转换为份额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">convertToShares</span>(<span class="params">uint256 assets</span>) public view override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_totalSupply == <span class="number">0</span> || <span class="title function_">totalAssets</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> assets;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> assets * _totalSupply / <span class="title function_">totalAssets</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 将一定数量的份额转换为基础资产。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">convertToAssets</span>(<span class="params">uint256 shares</span>) public view override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_totalSupply == <span class="number">0</span> || <span class="title function_">totalAssets</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> shares;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shares * <span class="title function_">totalAssets</span>() / _totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 将资产存入金库，并铸造份额给接收者。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params">uint256 assets, address receiver</span>) public override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="built_in">require</span>(assets &lt;= <span class="title function_">maxDeposit</span>(receiver), <span class="string">&quot;SimpleVault: 存款超过最大值&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 shares = <span class="title function_">previewDeposit</span>(assets);</span><br><span class="line">        <span class="title function_">_mint</span>(receiver, shares);</span><br><span class="line">        asset.<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), assets);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Deposit</span>(msg.<span class="property">sender</span>, receiver, assets, shares);</span><br><span class="line">        <span class="keyword">return</span> shares;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 从金库中提取资产并从所有者账户中销毁份额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint256 assets, address receiver, address owner</span>) public override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="built_in">require</span>(assets &lt;= <span class="title function_">maxWithdraw</span>(owner), <span class="string">&quot;SimpleVault: 提取超过最大值&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 shares = <span class="title function_">previewWithdraw</span>(assets);</span><br><span class="line">        <span class="title function_">_burn</span>(owner, shares);</span><br><span class="line">        asset.<span class="title function_">safeTransfer</span>(receiver, assets);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Withdraw</span>(msg.<span class="property">sender</span>, receiver, owner, assets, shares);</span><br><span class="line">        <span class="keyword">return</span> shares;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 铸造份额给接收者以换取一定数量的资产。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">uint256 shares, address receiver</span>) public override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="built_in">require</span>(shares &lt;= <span class="title function_">maxMint</span>(receiver), <span class="string">&quot;SimpleVault: 铸造超过最大值&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 assets = <span class="title function_">previewMint</span>(shares);</span><br><span class="line">        <span class="title function_">_mint</span>(receiver, shares);</span><br><span class="line">        asset.<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), assets);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Deposit</span>(msg.<span class="property">sender</span>, receiver, assets, shares);</span><br><span class="line">        <span class="keyword">return</span> assets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 内部函数用于铸造份额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_mint</span>(<span class="params">address account, uint256 amount</span>) internal &#123;</span><br><span class="line">        _totalSupply += amount;</span><br><span class="line">        _balances[account] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 返回某个账户持有的份额余额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address account</span>) public view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> _balances[account];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain 专题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut 01-21</title>
      <link href="/2024/09/13/2024-9-13%20Ethernaut%2001-21/"/>
      <url>/2024/09/13/2024-9-13%20Ethernaut%2001-21/</url>
      
        <content type="html"><![CDATA[<p>因为一开始是记录在本地Notepad上，本人较懒，故还未移植至博客。<br>这里暂时只放置 对各题目标签的总结</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>02_Fallout：constructor命名04_Telephone：发送方校验（tx.origin）05_Token：| 整数溢出07_Force：| 意外以太发送09_King：| 回滚攻击10_Re-entrancy：| 重入攻击11_Elevator：| 意外函数调用（interface）12_Privacy：| storage任意读13_Gatekeeper-One：发送方校验（tx.origin）14_Gatekeeper-Two：发送方校验（tx.origin、extcodesize()）15_Naught-Coin：时间锁16_Preservation：| 意外状态修改17_Recovery：返回值未接收 | 交易查询18_MagicNumber：| 字节码编写19_Alien-Codex：| storage任意写20_Denial：| DoS攻击（receive()耗尽gas）21_Shop：| 意外函数调用（interface）</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯游戏安全 2024 PC 决赛</title>
      <link href="/2024/09/09/2024-9-9%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20PC%20%E5%86%B3%E8%B5%9B/"/>
      <url>/2024/09/09/2024-9-9%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20PC%20%E5%86%B3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>决赛的题真的比初赛要复杂不少，踩了更多的坑，也遇到了更多难以解决的问题<br>鉴于本人当前能力有限，再加上课内学业原因，只搞到一半多的位置就鸽了<br>但还是想把整个过程记录下来，希望未来回过头来看时，知识体系更完善的自己 能够有新的思路</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/2024-9-9/4.jpg"></p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>题目运行逻辑：<br>1.C:\card.txt中，存放着”username-KEY”格式的数据<br>2.Loader.sys加载后，读取card.txt的内容，并通过检索”-“提取其中的username、KEY部分<br>3.username经过运算后，得到对应的KEY，并与card.txt内的KEY 比较<br>4.至此，实现用户KEY的校验</p><h2 id="题-1-2"><a href="#题-1-2" class="headerlink" title="题(1)(2)"></a>题(1)(2)</h2><p>就是一件事，找到Loader.sys在内存里的 注册机逻辑 </p><h3 id="Loader-sys加载"><a href="#Loader-sys加载" class="headerlink" title="Loader.sys加载"></a>Loader.sys加载</h3><p>先在普通模式下加载————</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create AAA binPath= <span class="string">&quot;C:\Users\12467\Desktop\Loader.sys&quot;</span> <span class="built_in">type</span>= kernel start= demand</span><br><span class="line">sc start AAA </span><br></pre></td></tr></table></figure><p>正常的返回了，且无事发生。</p><p>再在调试模式下加载————<br>发现会触发蓝屏（蓝屏代码0x00000ace），原来这里还有双击调试检测。</p><p>蓝屏分析：<br>此次的蓝屏代码，和初赛中 “加载ace.sys时候打开windbg” 跳出的蓝屏代码一致。<br>扔进windbg分析，发现原来是进程检测到被调试后，调用 nt!KeBugCheckEx()主动触发蓝屏，且参数”BugCheckCode”传入了”0x00000ace”</p><h3 id="内核hook"><a href="#内核hook" class="headerlink" title="内核hook"></a>内核hook</h3><p>因为有txt，必涉及文件操作，因此对NtCreateFile()、NtReadFile()进行hook。<br>hack1.sys实现上述内核函数被调用时，若传入参数满足某条件，则打印其参数，并触发调试器中断。</p><p>hack1.sys先在普通模式中加载————</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create BBB binPath= <span class="string">&quot;C:\Users\12467\Desktop\hack1.sys&quot;</span> <span class="built_in">type</span>= kernel start= demand</span><br><span class="line">sc start BBB</span><br></pre></td></tr></table></figure><p>结果直接蓝屏了，得到dmp文件。</p><p>hack1.sys蓝屏分析：<br>分析dmp文件，发现和初赛题加载hack2.sys时遇到的问题一样————<br>1.都有相同的异常码 0xc0000096<br>2.都是因为”mov cr0,rax”的执行</p><p>既然如此，能否试修改一手？<br>查阅帖子和评论，似乎找到一个无关紧要的修改方向————<br>1.近几代intel处理器中，CR0.WP位的设置，还与CR4.CET位的启用有关<br>2.作者的代码中，默认虚拟机没应用CR4.CET位，所以没写启用逻辑</p><p>所以初步得出代码修改方案————<br>1.WPOFFx64()中，在 CR0.WP位禁用前，启用 CR4.CET位<br>2.WPONx64()中，在 CR0.WP位重新启用后，重新禁用 CR4.CET位</p><p>以下为自行修改后的hack1.sys（据观察部分逻辑删去不影响程序功能，没明白作者的用途，因此注释起来了）————</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1916220-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MAX_BACKTRACE_DEPTH 20</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL <span class="string">L&quot;\\??\\xia0ji2333&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UINT64 BaseAddr=NULL, DLLSize=0;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">HANDLE FileHandler = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct _LDR_DATA_TABLE_ENTRY &#123;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY InLoadOrderLinks;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY InMemoryOrderLinks;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY InInitializationOrderLinks;</span></span><br><span class="line"><span class="comment">    PVOID DllBase;</span></span><br><span class="line"><span class="comment">    PVOID EntryPoint;           </span></span><br><span class="line"><span class="comment">    ULONG SizeOfImage;</span></span><br><span class="line"><span class="comment">    UNICODE_STRING FullDllName;  </span></span><br><span class="line"><span class="comment">    UNICODE_STRING BaseDllName;</span></span><br><span class="line"><span class="comment">    ULONG Flags;</span></span><br><span class="line"><span class="comment">    USHORT LoadCount;</span></span><br><span class="line"><span class="comment">    USHORT TlsIndex;</span></span><br><span class="line"><span class="comment">    union &#123;</span></span><br><span class="line"><span class="comment">        LIST_ENTRY HashLinks;</span></span><br><span class="line"><span class="comment">        struct &#123;</span></span><br><span class="line"><span class="comment">            PVOID SectionPointer;</span></span><br><span class="line"><span class="comment">            ULONG CheckSum;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    union &#123;</span></span><br><span class="line"><span class="comment">        struct &#123;</span></span><br><span class="line"><span class="comment">            ULONG TimeDateStamp;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        struct &#123;</span></span><br><span class="line"><span class="comment">            PVOID LoadedImports;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> newcode[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> newcode2[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode2[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* target;</span><br><span class="line"><span class="type">char</span>* target2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">KIRQL <span class="title function_">WPOFFx64</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    KIRQL irql = KeRaiseIrqlToDpcLevel(); </span><br><span class="line">    UINT64 cr0 = __readcr0();           </span><br><span class="line">    UINT64 cr4 = __readcr4();             </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(cr4 &amp; (<span class="number">1ULL</span> &lt;&lt; <span class="number">23</span>))) </span><br><span class="line">    &#123;</span><br><span class="line">        cr4 |= (<span class="number">1ULL</span> &lt;&lt; <span class="number">23</span>);  <span class="comment">// 启用 CR4.CET 位</span></span><br><span class="line">        __writecr4(cr4); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cr0 &amp;= <span class="number">0xfffffffffffeffff</span>;<span class="comment">// 禁用 CR0.WP 位</span></span><br><span class="line">    __writecr0(cr0);          </span><br><span class="line">    _disable();               </span><br><span class="line">    <span class="keyword">return</span> irql;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WPONx64</span><span class="params">(KIRQL irql)</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT64 cr0 = __readcr0(); </span><br><span class="line">    cr0 |= <span class="number">0x10000</span>;           <span class="comment">// 启用 CR0.WP 位</span></span><br><span class="line">    _enable();                </span><br><span class="line">    __writecr0(cr0);          </span><br><span class="line"></span><br><span class="line">    UINT64 cr4 = __readcr4(); </span><br><span class="line">    cr4 &amp;= ~(<span class="number">1ULL</span> &lt;&lt; <span class="number">23</span>);     <span class="comment">// 禁用 CR4.CET 位</span></span><br><span class="line">    __writecr4(cr4);         </span><br><span class="line"></span><br><span class="line">    KeLowerIrql(irql);       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = oldcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Unhook2</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode2); i++) &#123;</span><br><span class="line">        target2[i] = oldcode2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Hook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = newcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Hook2</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode2); i++) &#123;</span><br><span class="line">        target2[i] = newcode2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(* FuncPtr)</span> <span class="params">(</span></span><br><span class="line"><span class="params">    _Out_ PHANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="line"><span class="params">    _In_ ULONG FileAttributes,</span></span><br><span class="line"><span class="params">    _In_ ULONG ShareAccess,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateDisposition,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateOptions,</span></span><br><span class="line"><span class="params">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG EaLength</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(* FuncPtr2 )</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ HANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE Event,</span></span><br><span class="line"><span class="params">    _In_opt_ PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">    _In_opt_ PVOID ApcContext,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_(Length) PVOID Buffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG Length,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER ByteOffset,</span></span><br><span class="line"><span class="params">    _In_opt_ PULONG Key</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">ULONG  <span class="title function_">myCreateFile</span><span class="params">(_Out_ PHANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="line"><span class="params">    _In_ ULONG FileAttributes,</span></span><br><span class="line"><span class="params">    _In_ ULONG ShareAccess,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateDisposition,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateOptions,</span></span><br><span class="line"><span class="params">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG EaLength)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Unhook();</span><br><span class="line">    FuncPtr func = (FuncPtr)target;</span><br><span class="line"></span><br><span class="line">    NTSTATUS s = func(FileHandle,DesiredAccess,ObjectAttributes,IoStatusBlock,AllocationSize,FileAttributes,ShareAccess,CreateDisposition,CreateOptions,EaBuffer,EaLength);</span><br><span class="line">    <span class="keyword">if</span> (!wcscmp(ObjectAttributes-&gt;ObjectName-&gt;Buffer, <span class="string">L&quot;\\??\\C:\\card.txt&quot;</span>)) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;call NtCreateFile(%p,%p,%S,%p,%p,%p,%p,%p,%p,%p,%p)\n&quot;</span>), FileHandle,DesiredAccess,ObjectAttributes-&gt;ObjectName-&gt;Buffer,IoStatusBlock,AllocationSize,FileAttributes,ShareAccess,CreateDisposition,CreateOptions,EaBuffer,EaLength);</span><br><span class="line">        DbgBreakPoint();</span><br><span class="line">        FileHandler = *FileHandle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Hook();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ULONG <span class="title function_">myReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ HANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE Event,</span></span><br><span class="line"><span class="params">    _In_opt_ PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">    _In_opt_ PVOID ApcContext,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_(Length) PVOID Buffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG Length,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER ByteOffset,</span></span><br><span class="line"><span class="params">    _In_opt_ PULONG Key)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Unhook2();</span><br><span class="line">    FuncPtr2 func = (FuncPtr2)target2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FileHandler &amp;&amp; FileHandler == FileHandle) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;call NtReadFile(%p,%p,%p,%p,%p,%p,%p,%p,%p)\n&quot;</span>), FileHandle, Event, ApcRoutine, ApcContext, IoStatusBlock, Buffer, Length, ByteOffset, Key);</span><br><span class="line">        DbgBreakPoint();</span><br><span class="line">        FileHandler = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NTSTATUS s = func(FileHandle,Event,ApcRoutine,ApcContext,IoStatusBlock,Buffer,Length,ByteOffset,Key);</span><br><span class="line"></span><br><span class="line">    Hook2();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteDevice</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start delete device\n&quot;</span>), __LINE__);</span><br><span class="line">    <span class="keyword">if</span> (pDriver-&gt;DeviceObject) &#123;</span><br><span class="line">        UNICODE_STRING Sym;</span><br><span class="line">        RtlInitUnicodeString(&amp;Sym, SYMBOL);<span class="comment">//CreateFile </span></span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Symbol\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteSymbolicLink(&amp;Sym);</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Device\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">    &#125;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: end delete device\n&quot;</span>), __LINE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start unload\n&quot;</span>), __LINE__);</span><br><span class="line">    Unhook();</span><br><span class="line">    Unhook2();</span><br><span class="line">    DeleteDevice(pDriver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: RegistryPath = %S\n&quot;</span>), __LINE__, RegistryPath-&gt;Buffer);</span><br><span class="line">    target = NtCreateFile;</span><br><span class="line">    target2 = NtReadFile;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: NtCreateFile=%p NtReadFile=%p\n&quot;</span>), __LINE__, target,target2);</span><br><span class="line">    g_Object = DriverObject;</span><br><span class="line">    <span class="keyword">if</span> (target&amp;&amp;target2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(oldcode); i++) &#123;</span><br><span class="line">            oldcode[i] = target[i];</span><br><span class="line">            oldcode2[i] = target2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        *(UINT64*)(newcode + <span class="number">2</span>) = myCreateFile;</span><br><span class="line">        *(UINT64*)(newcode2 + <span class="number">2</span>) = myReadFile;</span><br><span class="line">        Hook();</span><br><span class="line">        Hook2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;xia0ji233:hahaha&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而还是失败，没办法，只能换个思路了</p><h3 id="内核调试"><a href="#内核调试" class="headerlink" title="内核调试"></a>内核调试</h3><p>在 NtCreateFile()、NtReadFile()处下断点如何呢？<br>然而，这两个API每刻都在被系统调用。每次系统一恢复运行，又立刻断下……</p><p>那就在NtCreateFile()处下条件断点，当传入的参数”ObjectAttributes”的”ObjectName”【3】的”Buffer”，指向的值为”??\C:\card.txt”时断下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bu nt!NtCreateFile <span class="string">&quot;.if (poi(poi(poi(@rcx+0x10)+0x8)) == \&quot;\\\\??\\\\C:\\\\card.txt\&quot;) &#123; .echo \&quot;Break!\&quot;; .if (0) &#123;&#125; else &#123; g &#125; &#125;&quot;</span></span><br></pre></td></tr></table></figure><p>然而，报错”Memory access erro”，只能再换个思路了</p><h3 id="内核callback"><a href="#内核callback" class="headerlink" title="内核callback"></a>内核callback</h3><p>hack4.sys大致逻辑————<br>注册文件对象的回调函数，监控文件操作，当检测到文件名为”\card.txt”时，打印Loader.sys基址，并触发断点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1916220-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define SystemModuleInformation 11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">PVOID obHandle;</span><br><span class="line">DRIVER_INITIALIZE DriverEntry;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct _CALLBACK_ENTRY</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY CallbackList;</span></span><br><span class="line"><span class="comment">    OB_OPERATION  Operations;</span></span><br><span class="line"><span class="comment">    ULONG Active;</span></span><br><span class="line"><span class="comment">    PVOID Handle;</span></span><br><span class="line"><span class="comment">    POBJECT_TYPE ObjectType;</span></span><br><span class="line"><span class="comment">    POB_PRE_OPERATION_CALLBACK  PreOperation;</span></span><br><span class="line"><span class="comment">    POB_POST_OPERATION_CALLBACK PostOperation;</span></span><br><span class="line"><span class="comment">    ULONG unknown;</span></span><br><span class="line"><span class="comment">&#125; CALLBACK_ENTRY, *PCALLBACK_ENTRY;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_PROCESS_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    ULONG NextEntryOffset;</span></span><br><span class="line"><span class="comment">    ULONG NumberOfThreads;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER Reserved[3];</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    UNICODE_STRING ImageName;</span></span><br><span class="line"><span class="comment">    ULONG BasePriority;</span></span><br><span class="line"><span class="comment">    HANDLE ProcessId;</span></span><br><span class="line"><span class="comment">    HANDLE InheritedFromProcessId;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_THREAD_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    ULONG WaitTime;</span></span><br><span class="line"><span class="comment">    PVOID StartAddress;</span></span><br><span class="line"><span class="comment">    CLIENT_ID ClientId;</span></span><br><span class="line"><span class="comment">    ULONG Priority;</span></span><br><span class="line"><span class="comment">    LONG BasePriority;</span></span><br><span class="line"><span class="comment">    ULONG ContextSwitchCount;</span></span><br><span class="line"><span class="comment">    LONG State;</span></span><br><span class="line"><span class="comment">    LONG WaitReason;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef enum _SYSTEM_INFORMATION_CLASS &#123;</span></span><br><span class="line"><span class="comment">    SystemProcessInformation = 5</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_INFORMATION_CLASS;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA</span>                         // 24 <span class="title">elements</span>, 0<span class="title">xE0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InLoadOrderLinks</span>;</span>                     <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x010*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InMemoryOrderLinks</span>;</span>                   <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x020*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InInitializationOrderLinks</span>;</span>           <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x030*/</span>     VOID*        DllBase;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     VOID*        EntryPoint;</span><br><span class="line">    <span class="comment">/*0x040*/</span>     ULONG32      SizeOfImage;</span><br><span class="line">    <span class="comment">/*0x044*/</span>     UINT8        _PADDING0_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x048*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">FullDllName</span>;</span>                      <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x058*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">BaseDllName</span>;</span>                      <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x068*/</span>     ULONG32      Flags;</span><br><span class="line">    <span class="comment">/*0x06C*/</span>     UINT16       LoadCount;</span><br><span class="line">    <span class="comment">/*0x06E*/</span>     UINT16       TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                    // 2 <span class="title">elements</span>, 0<span class="title">x10</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x070*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">HashLinks</span>;</span>                        <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                                               // 2 <span class="title">elements</span>, 0<span class="title">x10</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x070*/</span>             VOID*        SectionPointer;</span><br><span class="line">            <span class="comment">/*0x078*/</span>             ULONG32      CheckSum;</span><br><span class="line">            <span class="comment">/*0x07C*/</span>             UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                    // 2 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x080*/</span>         ULONG32      TimeDateStamp;</span><br><span class="line">        <span class="comment">/*0x080*/</span>         VOID*        LoadedImports;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*0x088*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ACTIVATION_CONTEXT</span>* <span class="title">EntryPointActivationContext</span>;</span></span><br><span class="line">    <span class="comment">/*0x090*/</span>     VOID*        PatchInformation;</span><br><span class="line">    <span class="comment">/*0x098*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ForwarderLinks</span>;</span>                       <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0A8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ServiceTagLinks</span>;</span>                      <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">StaticLinks</span>;</span>                          <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0C8*/</span>     VOID*        ContextInformation;</span><br><span class="line">    <span class="comment">/*0x0D0*/</span>     UINT64       OriginalBase;</span><br><span class="line">    <span class="comment">/*0x0D8*/</span>     <span class="class"><span class="keyword">union</span> _<span class="title">LARGE_INTEGER</span> <span class="title">LoadTime</span>;</span>                           <span class="comment">// 4 elements, 0x8 bytes (sizeof)</span></span><br><span class="line">&#125;LDR_DATA, *PLDR_DATA;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INITIALIZER</span>                                                                                                                                         // 25 <span class="title">elements</span>, 0<span class="title">x70</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     UINT16       Length;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                                                                                                                                       // 2 <span class="title">elements</span>, 0<span class="title">x1</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x002*/</span>         UINT8        ObjectTypeFlags;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                                                                                                                                                                  // 7 <span class="title">elements</span>, 0<span class="title">x1</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        CaseInsensitive : <span class="number">1</span>;                                                                                                                                   <span class="comment">// 0 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        UnnamedObjectsOnly : <span class="number">1</span>;                                                                                                                                <span class="comment">// 1 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        UseDefaultObject : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 2 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        SecurityRequired : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 3 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        MaintainHandleCount : <span class="number">1</span>;                                                                                                                               <span class="comment">// 4 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        MaintainTypeList : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 5 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        SupportsObjectCallbacks : <span class="number">1</span>;                                                                                                                           <span class="comment">// 6 BitPosition</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*0x004*/</span>     ULONG32      ObjectTypeCode;</span><br><span class="line">    <span class="comment">/*0x008*/</span>     ULONG32      InvalidAttributes;</span><br><span class="line">    <span class="comment">/*0x00C*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">GENERIC_MAPPING</span> <span class="title">GenericMapping</span>;</span>                                                                                                                                     <span class="comment">// 4 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x01C*/</span>     ULONG32      ValidAccessMask;</span><br><span class="line">    <span class="comment">/*0x020*/</span>     ULONG32      RetainAccess;</span><br><span class="line">    <span class="comment">/*0x024*/</span>     <span class="class"><span class="keyword">enum</span> _<span class="title">POOL_TYPE</span> <span class="title">PoolType</span>;</span></span><br><span class="line">    <span class="comment">/*0x028*/</span>     ULONG32      DefaultPagedPoolCharge;</span><br><span class="line">    <span class="comment">/*0x02C*/</span>     ULONG32      DefaultNonPagedPoolCharge;</span><br><span class="line">    <span class="comment">/*0x030*/</span>     PVOID DumpProcedure;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     PVOID OpenProcedure;</span><br><span class="line">    <span class="comment">/*0x040*/</span>     PVOID CloseProcedure;</span><br><span class="line">    <span class="comment">/*0x048*/</span>     PVOID DeleteProcedure;</span><br><span class="line">    <span class="comment">/*0x050*/</span>     PVOID ParseProcedure;</span><br><span class="line">    <span class="comment">/*0x058*/</span>     PVOID SecurityProcedure;</span><br><span class="line">    <span class="comment">/*0x060*/</span>     PVOID QueryNameProcedure;</span><br><span class="line">    <span class="comment">/*0x068*/</span>     PVOID OkayToCloseProcedure;</span><br><span class="line">&#125;OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span>                 // 7 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                    // 3 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                               // 5 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Locked : <span class="number">1</span>;         <span class="comment">// 0 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Waiting : <span class="number">1</span>;        <span class="comment">// 1 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Waking : <span class="number">1</span>;         <span class="comment">// 2 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       MultipleShared : <span class="number">1</span>; <span class="comment">// 3 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Shared : <span class="number">60</span>;        <span class="comment">// 4 BitPosition</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/*0x000*/</span>         UINT64       Value;</span><br><span class="line">        <span class="comment">/*0x000*/</span>         VOID*        Ptr;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MY_OBJECT_TYPE</span>                   // 12 <span class="title">elements</span>, 0<span class="title">xD0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">TypeList</span>;</span>              <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x010*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">Name</span>;</span>              <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x020*/</span>     VOID*        DefaultObject;</span><br><span class="line">    <span class="comment">/*0x028*/</span>     UINT8        Index;</span><br><span class="line">    <span class="comment">/*0x029*/</span>     UINT8        _PADDING0_[<span class="number">0x3</span>];</span><br><span class="line">    <span class="comment">/*0x02C*/</span>     ULONG32      TotalNumberOfObjects;</span><br><span class="line">    <span class="comment">/*0x030*/</span>     ULONG32      TotalNumberOfHandles;</span><br><span class="line">    <span class="comment">/*0x034*/</span>     ULONG32      HighWaterNumberOfObjects;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     ULONG32      HighWaterNumberOfHandles;</span><br><span class="line">    <span class="comment">/*0x03C*/</span>     UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x040*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INITIALIZER</span> <span class="title">TypeInfo</span>;</span> <span class="comment">// 25 elements, 0x70 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">TypeLock</span>;</span>            <span class="comment">// 7 elements, 0x8 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B8*/</span>     ULONG32      Key;</span><br><span class="line">    <span class="comment">/*0x0BC*/</span>     UINT8        _PADDING2_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x0C0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">CallbackList</span>;</span>          <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">&#125;MY_OBJECT_TYPE, *PMY_OBJECT_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">typedef NTSTATUS (*ZWQUERYSYSTEMINFORMATION)(ULONG, PVOID, ULONG, PULONG);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件回调</span></span><br><span class="line">OB_PREOP_CALLBACK_STATUS <span class="title function_">FileObjectpreCall</span><span class="params">(PVOID RegistrationContext, POB_PRE_OPERATION_INFORMATION OperationInformation)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNICODE_STRING DosName;</span><br><span class="line">    PFILE_OBJECT fileo = OperationInformation-&gt;Object;</span><br><span class="line">    HANDLE CurrentProcessId = PsGetCurrentProcessId();</span><br><span class="line">    UNREFERENCED_PARAMETER(RegistrationContext);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (OperationInformation-&gt;ObjectType != *IoFileObjectType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 过滤无效指针</span></span><br><span class="line">    <span class="keyword">if</span> (fileo-&gt;FileName.Buffer == <span class="literal">NULL</span> ||</span><br><span class="line">        !MmIsAddressValid(fileo-&gt;FileName.Buffer) ||</span><br><span class="line">        fileo-&gt;DeviceObject == <span class="literal">NULL</span> ||</span><br><span class="line">        !MmIsAddressValid(fileo-&gt;DeviceObject))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 过滤无效路径</span></span><br><span class="line">    <span class="keyword">if</span> (!_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\Endpoint&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;?&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\.\\.&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将对象转为DOS路径</span></span><br><span class="line">    RtlVolumeDeviceToDosName(fileo-&gt;DeviceObject, &amp;DosName);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (!wcscmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\card.txt&quot;</span>)) &#123;</span><br><span class="line">        PETHREAD pct=PsGetCurrentThread();</span><br><span class="line">        PVOID addr=*(ULONG64*)((<span class="type">char</span>*)pct + <span class="number">0x450</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        DbgBreakPoint();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">UnDriver</span><span class="params">(PDRIVER_OBJECT driver)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(driver);</span><br><span class="line">    ObUnRegisterCallbacks(obHandle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VOID UnloadDriver(PDRIVER_OBJECT DriverObject);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">EnableObType</span><span class="params">(POBJECT_TYPE ObjectType)</span></span><br><span class="line">&#123;</span><br><span class="line">    PMY_OBJECT_TYPE myobtype = (PMY_OBJECT_TYPE)ObjectType;</span><br><span class="line">    myobtype-&gt;TypeInfo.SupportsObjectCallbacks = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(IN PDRIVER_OBJECT Driver, PUNICODE_STRING RegistryPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line">    PLDR_DATA ldr;</span><br><span class="line"> </span><br><span class="line">    kprintf((<span class="string">&quot;hello xia0ji233\n&quot;</span>));</span><br><span class="line">    g_Object = Driver;</span><br><span class="line">    OB_CALLBACK_REGISTRATION obRegFileCallBack;</span><br><span class="line">    OB_OPERATION_REGISTRATION opRegFileCallBack;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// enable IoFileObjectType</span></span><br><span class="line">    EnableObType(*IoFileObjectType);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// bypass MmVerifyCallbackFunction</span></span><br><span class="line">    ldr = (PLDR_DATA)Driver-&gt;DriverSection;</span><br><span class="line">    ldr-&gt;Flags |= <span class="number">0x20</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化回调</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;obRegFileCallBack, <span class="number">0</span>, <span class="keyword">sizeof</span>(obRegFileCallBack));</span><br><span class="line">    obRegFileCallBack.Version = ObGetFilterVersion();</span><br><span class="line">    obRegFileCallBack.OperationRegistrationCount = <span class="number">1</span>;</span><br><span class="line">    obRegFileCallBack.RegistrationContext = <span class="literal">NULL</span>;</span><br><span class="line">    RtlInitUnicodeString(&amp;obRegFileCallBack.Altitude, <span class="string">L&quot;321000&quot;</span>);</span><br><span class="line">    obRegFileCallBack.OperationRegistration = &amp;opRegFileCallBack;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">memset</span>(&amp;opRegFileCallBack, <span class="number">0</span>, <span class="keyword">sizeof</span>(opRegFileCallBack));</span><br><span class="line">    opRegFileCallBack.ObjectType = IoFileObjectType;</span><br><span class="line">    opRegFileCallBack.Operations = OB_OPERATION_HANDLE_CREATE | OB_OPERATION_HANDLE_DUPLICATE;</span><br><span class="line">    opRegFileCallBack.PreOperation = (POB_PRE_OPERATION_CALLBACK)&amp;FileObjectpreCall;</span><br><span class="line"> </span><br><span class="line">    status = ObRegisterCallbacks(&amp;obRegFileCallBack, &amp;obHandle);</span><br><span class="line">    <span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">    &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;注册回调错误 \n&quot;</span>));</span><br><span class="line">        status = STATUS_UNSUCCESSFUL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    UNREFERENCED_PARAMETER(RegistryPath);</span><br><span class="line">    Driver-&gt;DriverUnload = &amp;UnDriver;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下可以通过打印出的Loader.sys基址，定位到其中的注册机逻辑</p><h2 id="题-3"><a href="#题-3" class="headerlink" title="题(3)"></a>题(3)</h2><p>要实现对任意username-key均能正常启动，得对内存进行patch<br>这里有两种方法</p><h3 id="内核hook-1"><a href="#内核hook-1" class="headerlink" title="内核hook"></a>内核hook</h3><p>第一种是通过内核hook，其在实现上和hack1.sys类似</p><p>hack2.sys大致逻辑————<br>在hack1.sys的基础上，实现 NtReadFile()被调用时，还会对Loader.sys指定偏移处进行patch。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1916220-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MAX_BACKTRACE_DEPTH 20</span></span><br><span class="line"><span class="comment">#define SystemModuleInformation 11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL <span class="string">L&quot;\\??\\xia0ji2333&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UINT64 BaseAddr=NULL, DLLSize=0;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">HANDLE FileHandler = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;</span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_PROCESS_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    ULONG NextEntryOffset;</span></span><br><span class="line"><span class="comment">    ULONG NumberOfThreads;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER Reserved[3];</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    UNICODE_STRING ImageName;</span></span><br><span class="line"><span class="comment">    ULONG BasePriority;</span></span><br><span class="line"><span class="comment">    HANDLE ProcessId;</span></span><br><span class="line"><span class="comment">    HANDLE InheritedFromProcessId;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_THREAD_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    ULONG WaitTime;</span></span><br><span class="line"><span class="comment">    PVOID StartAddress;</span></span><br><span class="line"><span class="comment">    CLIENT_ID ClientId;</span></span><br><span class="line"><span class="comment">    ULONG Priority;</span></span><br><span class="line"><span class="comment">    LONG BasePriority;</span></span><br><span class="line"><span class="comment">    ULONG ContextSwitchCount;</span></span><br><span class="line"><span class="comment">    LONG State;</span></span><br><span class="line"><span class="comment">    LONG WaitReason;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef enum _SYSTEM_INFORMATION_CLASS &#123;</span></span><br><span class="line"><span class="comment">    SystemProcessInformation = 5</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_INFORMATION_CLASS;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> newcode[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">char</span> newcode2[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode2[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">char</span>* target;</span><br><span class="line"><span class="type">char</span>* target2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">KIRQL <span class="title function_">WPOFFx64</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    KIRQL irql = KeRaiseIrqlToDpcLevel();</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 &amp;= <span class="number">0xfffffffffffeffff</span>;</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    _disable();</span><br><span class="line">    <span class="keyword">return</span> irql;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">WPONx64</span><span class="params">(KIRQL irql)</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 |= <span class="number">0x10000</span>;</span><br><span class="line">    _enable();</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    KeLowerIrql(irql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">Unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = oldcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">Unhook2</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode2); i++) &#123;</span><br><span class="line">        target2[i] = oldcode2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">Hook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = newcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">Hook2</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode2); i++) &#123;</span><br><span class="line">        target2[i] = newcode2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(* FuncPtr)</span> <span class="params">(</span></span><br><span class="line"><span class="params">    _Out_ PHANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="line"><span class="params">    _In_ ULONG FileAttributes,</span></span><br><span class="line"><span class="params">    _In_ ULONG ShareAccess,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateDisposition,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateOptions,</span></span><br><span class="line"><span class="params">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG EaLength</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(* FuncPtr2 )</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ HANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE Event,</span></span><br><span class="line"><span class="params">    _In_opt_ PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">    _In_opt_ PVOID ApcContext,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_(Length) PVOID Buffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG Length,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER ByteOffset,</span></span><br><span class="line"><span class="params">    _In_opt_ PULONG Key</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef NTSTATUS (*ZWQUERYSYSTEMINFORMATION)(ULONG, PVOID, ULONG, PULONG);</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">ULONG  <span class="title function_">myCreateFile</span><span class="params">(_Out_ PHANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="line"><span class="params">    _In_ ULONG FileAttributes,</span></span><br><span class="line"><span class="params">    _In_ ULONG ShareAccess,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateDisposition,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateOptions,</span></span><br><span class="line"><span class="params">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG EaLength)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    Unhook();</span><br><span class="line">    FuncPtr func = (FuncPtr)target;</span><br><span class="line"> </span><br><span class="line">    NTSTATUS s = func(FileHandle,DesiredAccess,ObjectAttributes,IoStatusBlock,AllocationSize,FileAttributes,ShareAccess,CreateDisposition,CreateOptions,EaBuffer,EaLength);</span><br><span class="line">    <span class="keyword">if</span> (!wcscmp(ObjectAttributes-&gt;ObjectName-&gt;Buffer, <span class="string">L&quot;\\??\\C:\\card.txt&quot;</span>)) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;call NtCreateFile(%p,%p,%S,%p,%p,%p,%p,%p,%p,%p,%p)\n&quot;</span>), FileHandle,DesiredAccess,ObjectAttributes-&gt;ObjectName-&gt;Buffer,IoStatusBlock,AllocationSize,FileAttributes,ShareAccess,CreateDisposition,CreateOptions,EaBuffer,EaLength);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        DbgBreakPoint();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        FileHandler = *FileHandle;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    Hook();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int Filter(ULONG Start)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    LDR_DATA_TABLE_ENTRY *TE, *Tmp;</span></span><br><span class="line"><span class="comment">    TE = (LDR_DATA_TABLE_ENTRY*)g_Object-&gt;DriverSection;</span></span><br><span class="line"><span class="comment">    PLIST_ENTRY LinkList;</span></span><br><span class="line"><span class="comment">    ;</span></span><br><span class="line"><span class="comment">    int i = 0;</span></span><br><span class="line"><span class="comment">    LinkList = TE-&gt;InLoadOrderLinks.Flink; </span></span><br><span class="line"><span class="comment">    while (LinkList != &amp;TE-&gt;InLoadOrderLinks)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        Tmp = (LDR_DATA_TABLE_ENTRY*)LinkList;</span></span><br><span class="line"><span class="comment">        ULONG BASE = Tmp-&gt;DllBase;</span></span><br><span class="line"><span class="comment">        ULONG Size = Tmp-&gt;SizeOfImage;</span></span><br><span class="line"><span class="comment">        if (Start &gt;= BASE &amp;&amp; Start &lt; BASE + Size) &#123;</span></span><br><span class="line"><span class="comment">            return 0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        LinkList = LinkList-&gt;Flink;</span></span><br><span class="line"><span class="comment">        i++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    return 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">MDLWriteMemory(PVOID pBaseAddress, PVOID pWriteData, SIZE_T writeDataSize)</span><br><span class="line">&#123;</span><br><span class="line">    PMDL pMdl = <span class="literal">NULL</span>;</span><br><span class="line">    PVOID pNewAddress = <span class="literal">NULL</span>;</span><br><span class="line">    pMdl = MmCreateMdl(<span class="literal">NULL</span>, pBaseAddress, writeDataSize);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pMdl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    MmBuildMdlForNonPagedPool(pMdl);</span><br><span class="line">    pNewAddress = MmMapLockedPages(pMdl, KernelMode);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pNewAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        IoFreeMdl(pMdl);</span><br><span class="line">    &#125;</span><br><span class="line">    RtlCopyMemory(pNewAddress, pWriteData, writeDataSize);</span><br><span class="line">    MmUnmapLockedPages(pNewAddress, pMdl);</span><br><span class="line">    IoFreeMdl(pMdl);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">VOID <span class="title function_">PatchInstr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LDR_DATA_TABLE_ENTRY *TE, *Tmp;</span><br><span class="line">    TE = (LDR_DATA_TABLE_ENTRY*)g_Object-&gt;DriverSection;</span><br><span class="line">    PLIST_ENTRY LinkList;</span><br><span class="line">    ;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList = TE-&gt;InLoadOrderLinks.Flink; </span><br><span class="line">    UNICODE_STRING name;</span><br><span class="line">    RtlInitUnicodeString(&amp;name,<span class="string">L&quot;Loader.sys&quot;</span>);</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">while</span> (LinkList != &amp;TE-&gt;InLoadOrderLinks)</span><br><span class="line">    &#123;</span><br><span class="line">        Tmp = (LDR_DATA_TABLE_ENTRY*)LinkList;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> (RtlEqualUnicodeString(&amp;Tmp-&gt;BaseDllName, &amp;name,FALSE)) &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;DLLname:%S DLLBase=%p nowcode=%p\n&quot;</span>), Tmp-&gt;BaseDllName.Buffer,Tmp-&gt;DllBase,(ULONG64)(Tmp-&gt;DllBase) + <span class="number">0xa27e</span>);</span><br><span class="line">            <span class="type">char</span> buffer[] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">            MDLWriteMemory((ULONG64)(Tmp-&gt;DllBase) + <span class="number">0xa27e</span>, buffer, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkList = LinkList-&gt;Flink;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ULONG <span class="title function_">myReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ HANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE Event,</span></span><br><span class="line"><span class="params">    _In_opt_ PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">    _In_opt_ PVOID ApcContext,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_(Length) PVOID Buffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG Length,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER ByteOffset,</span></span><br><span class="line"><span class="params">    _In_opt_ PULONG Key)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    Unhook2();</span><br><span class="line">    FuncPtr2 func = (FuncPtr2)target2;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (FileHandler &amp;&amp; FileHandler == FileHandle) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;call NtReadFile(%p,%p,%p,%p,%p,%p,%p,%p,%p)\n&quot;</span>), FileHandle, Event, ApcRoutine, ApcContext, IoStatusBlock, Buffer, Length, ByteOffset, Key);</span><br><span class="line">        kprintf((<span class="string">&quot;buffer in %p\n&quot;</span>), Buffer);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        DbgBreakPoint();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        PatchInstr();</span><br><span class="line">        FileHandler = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTSTATUS s = func(FileHandle,Event,ApcRoutine,ApcContext,IoStatusBlock,Buffer,Length,ByteOffset,Key);</span><br><span class="line">     </span><br><span class="line">    Hook2();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteDevice</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start delete device\n&quot;</span>), __LINE__);</span><br><span class="line">    <span class="keyword">if</span> (pDriver-&gt;DeviceObject) &#123;</span><br><span class="line">        UNICODE_STRING Sym;</span><br><span class="line">        RtlInitUnicodeString(&amp;Sym, SYMBOL);<span class="comment">//CreateFile</span></span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Symbol\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteSymbolicLink(&amp;Sym);</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Device\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">    &#125;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: end delete device\n&quot;</span>), __LINE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start unload\n&quot;</span>), __LINE__);</span><br><span class="line">    Unhook();</span><br><span class="line">    Unhook2();</span><br><span class="line">    DeleteDevice(pDriver);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: RegistryPath = %S\n&quot;</span>), __LINE__, RegistryPath-&gt;Buffer);</span><br><span class="line">    target = NtCreateFile;</span><br><span class="line">    target2 = NtReadFile;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: NtCreateFile=%p NtReadFile=%p\n&quot;</span>), __LINE__, target,target2);</span><br><span class="line">    g_Object = DriverObject;</span><br><span class="line">    <span class="keyword">if</span> (target&amp;&amp;target2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(oldcode); i++) &#123;</span><br><span class="line">            oldcode[i] = target[i];</span><br><span class="line">            oldcode2[i] = target2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        *(UINT64*)(newcode + <span class="number">2</span>) = myCreateFile;</span><br><span class="line">        *(UINT64*)(newcode2 + <span class="number">2</span>) = myReadFile;</span><br><span class="line">        Hook();</span><br><span class="line">        Hook2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;xia0ji233:hahaha&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而”mov cr0,rax”的报错，我无力回天</p><h3 id="内核callback-1"><a href="#内核callback-1" class="headerlink" title="内核callback"></a>内核callback</h3><p>第二种是通过内核回调的方式</p><p>hack3.sys大致逻辑————<br>注册文件对象的回调函数，监控文件操作，当检测到文件名为”\card.txt”时，会对Loader.sys指定偏移处进行patch，并触发断点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1916220-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define SystemModuleInformation 11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">PVOID obHandle;</span><br><span class="line">DRIVER_INITIALIZE DriverEntry;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName; </span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct _CALLBACK_ENTRY</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY CallbackList;</span></span><br><span class="line"><span class="comment">    OB_OPERATION  Operations;</span></span><br><span class="line"><span class="comment">    ULONG Active;</span></span><br><span class="line"><span class="comment">    PVOID Handle;</span></span><br><span class="line"><span class="comment">    POBJECT_TYPE ObjectType;</span></span><br><span class="line"><span class="comment">    POB_PRE_OPERATION_CALLBACK  PreOperation;</span></span><br><span class="line"><span class="comment">    POB_POST_OPERATION_CALLBACK PostOperation;</span></span><br><span class="line"><span class="comment">    ULONG unknown;</span></span><br><span class="line"><span class="comment">&#125; CALLBACK_ENTRY, *PCALLBACK_ENTRY;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_PROCESS_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    ULONG NextEntryOffset;</span></span><br><span class="line"><span class="comment">    ULONG NumberOfThreads;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER Reserved[3];</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    UNICODE_STRING ImageName;</span></span><br><span class="line"><span class="comment">    ULONG BasePriority;</span></span><br><span class="line"><span class="comment">    HANDLE ProcessId;</span></span><br><span class="line"><span class="comment">    HANDLE InheritedFromProcessId;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_THREAD_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    ULONG WaitTime;</span></span><br><span class="line"><span class="comment">    PVOID StartAddress;</span></span><br><span class="line"><span class="comment">    CLIENT_ID ClientId;</span></span><br><span class="line"><span class="comment">    ULONG Priority;</span></span><br><span class="line"><span class="comment">    LONG BasePriority;</span></span><br><span class="line"><span class="comment">    ULONG ContextSwitchCount;</span></span><br><span class="line"><span class="comment">    LONG State;</span></span><br><span class="line"><span class="comment">    LONG WaitReason;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef enum _SYSTEM_INFORMATION_CLASS &#123;</span></span><br><span class="line"><span class="comment">    SystemProcessInformation = 5</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_INFORMATION_CLASS;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA</span>                         // 24 <span class="title">elements</span>, 0<span class="title">xE0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InLoadOrderLinks</span>;</span>                     <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x010*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InMemoryOrderLinks</span>;</span>                   <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x020*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InInitializationOrderLinks</span>;</span>           <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x030*/</span>     VOID*        DllBase;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     VOID*        EntryPoint;</span><br><span class="line">    <span class="comment">/*0x040*/</span>     ULONG32      SizeOfImage;</span><br><span class="line">    <span class="comment">/*0x044*/</span>     UINT8        _PADDING0_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x048*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">FullDllName</span>;</span>                      <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x058*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">BaseDllName</span>;</span>                      <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x068*/</span>     ULONG32      Flags;</span><br><span class="line">    <span class="comment">/*0x06C*/</span>     UINT16       LoadCount;</span><br><span class="line">    <span class="comment">/*0x06E*/</span>     UINT16       TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                    // 2 <span class="title">elements</span>, 0<span class="title">x10</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x070*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">HashLinks</span>;</span>                        <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                                               // 2 <span class="title">elements</span>, 0<span class="title">x10</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x070*/</span>             VOID*        SectionPointer;</span><br><span class="line">            <span class="comment">/*0x078*/</span>             ULONG32      CheckSum;</span><br><span class="line">            <span class="comment">/*0x07C*/</span>             UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                    // 2 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x080*/</span>         ULONG32      TimeDateStamp;</span><br><span class="line">        <span class="comment">/*0x080*/</span>         VOID*        LoadedImports;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*0x088*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ACTIVATION_CONTEXT</span>* <span class="title">EntryPointActivationContext</span>;</span></span><br><span class="line">    <span class="comment">/*0x090*/</span>     VOID*        PatchInformation;</span><br><span class="line">    <span class="comment">/*0x098*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ForwarderLinks</span>;</span>                       <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0A8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ServiceTagLinks</span>;</span>                      <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">StaticLinks</span>;</span>                          <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0C8*/</span>     VOID*        ContextInformation;</span><br><span class="line">    <span class="comment">/*0x0D0*/</span>     UINT64       OriginalBase;</span><br><span class="line">    <span class="comment">/*0x0D8*/</span>     <span class="class"><span class="keyword">union</span> _<span class="title">LARGE_INTEGER</span> <span class="title">LoadTime</span>;</span>                           <span class="comment">// 4 elements, 0x8 bytes (sizeof)</span></span><br><span class="line">&#125;LDR_DATA, *PLDR_DATA;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INITIALIZER</span>                                                                                                                                         // 25 <span class="title">elements</span>, 0<span class="title">x70</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     UINT16       Length;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                                                                                                                                       // 2 <span class="title">elements</span>, 0<span class="title">x1</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x002*/</span>         UINT8        ObjectTypeFlags;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                                                                                                                                                                  // 7 <span class="title">elements</span>, 0<span class="title">x1</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        CaseInsensitive : <span class="number">1</span>;                                                                                                                                   <span class="comment">// 0 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        UnnamedObjectsOnly : <span class="number">1</span>;                                                                                                                                <span class="comment">// 1 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        UseDefaultObject : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 2 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        SecurityRequired : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 3 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        MaintainHandleCount : <span class="number">1</span>;                                                                                                                               <span class="comment">// 4 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        MaintainTypeList : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 5 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        SupportsObjectCallbacks : <span class="number">1</span>;                                                                                                                           <span class="comment">// 6 BitPosition</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*0x004*/</span>     ULONG32      ObjectTypeCode;</span><br><span class="line">    <span class="comment">/*0x008*/</span>     ULONG32      InvalidAttributes;</span><br><span class="line">    <span class="comment">/*0x00C*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">GENERIC_MAPPING</span> <span class="title">GenericMapping</span>;</span>                                                                                                                                     <span class="comment">// 4 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x01C*/</span>     ULONG32      ValidAccessMask;</span><br><span class="line">    <span class="comment">/*0x020*/</span>     ULONG32      RetainAccess;</span><br><span class="line">    <span class="comment">/*0x024*/</span>     <span class="class"><span class="keyword">enum</span> _<span class="title">POOL_TYPE</span> <span class="title">PoolType</span>;</span></span><br><span class="line">    <span class="comment">/*0x028*/</span>     ULONG32      DefaultPagedPoolCharge;</span><br><span class="line">    <span class="comment">/*0x02C*/</span>     ULONG32      DefaultNonPagedPoolCharge;</span><br><span class="line">    <span class="comment">/*0x030*/</span>     PVOID DumpProcedure;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     PVOID OpenProcedure;</span><br><span class="line">    <span class="comment">/*0x040*/</span>     PVOID CloseProcedure;</span><br><span class="line">    <span class="comment">/*0x048*/</span>     PVOID DeleteProcedure;</span><br><span class="line">    <span class="comment">/*0x050*/</span>     PVOID ParseProcedure;</span><br><span class="line">    <span class="comment">/*0x058*/</span>     PVOID SecurityProcedure;</span><br><span class="line">    <span class="comment">/*0x060*/</span>     PVOID QueryNameProcedure;</span><br><span class="line">    <span class="comment">/*0x068*/</span>     PVOID OkayToCloseProcedure;</span><br><span class="line">&#125;OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span>                 // 7 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                    // 3 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                               // 5 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Locked : <span class="number">1</span>;         <span class="comment">// 0 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Waiting : <span class="number">1</span>;        <span class="comment">// 1 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Waking : <span class="number">1</span>;         <span class="comment">// 2 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       MultipleShared : <span class="number">1</span>; <span class="comment">// 3 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Shared : <span class="number">60</span>;        <span class="comment">// 4 BitPosition</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/*0x000*/</span>         UINT64       Value;</span><br><span class="line">        <span class="comment">/*0x000*/</span>         VOID*        Ptr;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MY_OBJECT_TYPE</span>                   // 12 <span class="title">elements</span>, 0<span class="title">xD0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">TypeList</span>;</span>              <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x010*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">Name</span>;</span>              <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x020*/</span>     VOID*        DefaultObject;</span><br><span class="line">    <span class="comment">/*0x028*/</span>     UINT8        Index;</span><br><span class="line">    <span class="comment">/*0x029*/</span>     UINT8        _PADDING0_[<span class="number">0x3</span>];</span><br><span class="line">    <span class="comment">/*0x02C*/</span>     ULONG32      TotalNumberOfObjects;</span><br><span class="line">    <span class="comment">/*0x030*/</span>     ULONG32      TotalNumberOfHandles;</span><br><span class="line">    <span class="comment">/*0x034*/</span>     ULONG32      HighWaterNumberOfObjects;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     ULONG32      HighWaterNumberOfHandles;</span><br><span class="line">    <span class="comment">/*0x03C*/</span>     UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x040*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INITIALIZER</span> <span class="title">TypeInfo</span>;</span> <span class="comment">// 25 elements, 0x70 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">TypeLock</span>;</span>            <span class="comment">// 7 elements, 0x8 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B8*/</span>     ULONG32      Key;</span><br><span class="line">    <span class="comment">/*0x0BC*/</span>     UINT8        _PADDING2_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x0C0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">CallbackList</span>;</span>          <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">&#125;MY_OBJECT_TYPE, *PMY_OBJECT_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">typedef NTSTATUS (*ZWQUERYSYSTEMINFORMATION)(ULONG, PVOID, ULONG, PULONG);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"> </span><br><span class="line">MDLWriteMemory(PVOID pBaseAddress, PVOID pWriteData, SIZE_T writeDataSize)</span><br><span class="line">&#123;</span><br><span class="line">    PMDL pMdl = <span class="literal">NULL</span>;</span><br><span class="line">    PVOID pNewAddress = <span class="literal">NULL</span>;</span><br><span class="line">    pMdl = MmCreateMdl(<span class="literal">NULL</span>, pBaseAddress, writeDataSize);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pMdl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    MmBuildMdlForNonPagedPool(pMdl);</span><br><span class="line">    pNewAddress = MmMapLockedPages(pMdl, KernelMode);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pNewAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        IoFreeMdl(pMdl);</span><br><span class="line">    &#125;</span><br><span class="line">    RtlCopyMemory(pNewAddress, pWriteData, writeDataSize);</span><br><span class="line">    MmUnmapLockedPages(pNewAddress, pMdl);</span><br><span class="line">    IoFreeMdl(pMdl);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">VOID <span class="title function_">PatchInstr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LDR_DATA_TABLE_ENTRY *TE, *Tmp;</span><br><span class="line">    TE = (LDR_DATA_TABLE_ENTRY*)g_Object-&gt;DriverSection;</span><br><span class="line">    PLIST_ENTRY LinkList;</span><br><span class="line">    ;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList = TE-&gt;InLoadOrderLinks.Flink; </span><br><span class="line">    UNICODE_STRING name;</span><br><span class="line">    RtlInitUnicodeString(&amp;name,<span class="string">L&quot;Loader.sys&quot;</span>);</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">while</span> (LinkList != &amp;TE-&gt;InLoadOrderLinks)</span><br><span class="line">    &#123;</span><br><span class="line">        Tmp = (LDR_DATA_TABLE_ENTRY*)LinkList;</span><br><span class="line">        <span class="keyword">if</span> (RtlEqualUnicodeString(&amp;Tmp-&gt;BaseDllName, &amp;name,FALSE)) &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;DLLname:%S DLLBase=%p nowcode=%p\n&quot;</span>), Tmp-&gt;BaseDllName.Buffer,Tmp-&gt;DllBase,(ULONG64)(Tmp-&gt;DllBase) + <span class="number">0xa27e</span>);</span><br><span class="line">            <span class="type">char</span> buffer[] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">            MDLWriteMemory((ULONG64)(Tmp-&gt;DllBase) + <span class="number">0xa27e</span>, buffer, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkList = LinkList-&gt;Flink;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件回调</span></span><br><span class="line">OB_PREOP_CALLBACK_STATUS <span class="title function_">FileObjectpreCall</span><span class="params">(PVOID RegistrationContext, POB_PRE_OPERATION_INFORMATION OperationInformation)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNICODE_STRING DosName;</span><br><span class="line">    PFILE_OBJECT fileo = OperationInformation-&gt;Object;</span><br><span class="line">    HANDLE CurrentProcessId = PsGetCurrentProcessId();</span><br><span class="line">    UNREFERENCED_PARAMETER(RegistrationContext);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (OperationInformation-&gt;ObjectType != *IoFileObjectType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 过滤无效指针</span></span><br><span class="line">    <span class="keyword">if</span> (fileo-&gt;FileName.Buffer == <span class="literal">NULL</span> ||</span><br><span class="line">        !MmIsAddressValid(fileo-&gt;FileName.Buffer) ||</span><br><span class="line">        fileo-&gt;DeviceObject == <span class="literal">NULL</span> ||</span><br><span class="line">        !MmIsAddressValid(fileo-&gt;DeviceObject))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 过滤无效路径</span></span><br><span class="line">    <span class="keyword">if</span> (!_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\Endpoint&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;?&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\.\\.&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将对象转为DOS路径</span></span><br><span class="line">    RtlVolumeDeviceToDosName(fileo-&gt;DeviceObject, &amp;DosName);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (!wcscmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\card.txt&quot;</span>)) &#123;</span><br><span class="line">        PETHREAD pct=PsGetCurrentThread();</span><br><span class="line">        PVOID addr=*(ULONG64*)((<span class="type">char</span>*)pct + <span class="number">0x450</span>);</span><br><span class="line">        PatchInstr();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        DbgBreakPoint();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">UnDriver</span><span class="params">(PDRIVER_OBJECT driver)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(driver);</span><br><span class="line">    ObUnRegisterCallbacks(obHandle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VOID UnloadDriver(PDRIVER_OBJECT DriverObject);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">EnableObType</span><span class="params">(POBJECT_TYPE ObjectType)</span></span><br><span class="line">&#123;</span><br><span class="line">    PMY_OBJECT_TYPE myobtype = (PMY_OBJECT_TYPE)ObjectType;</span><br><span class="line">    myobtype-&gt;TypeInfo.SupportsObjectCallbacks = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(IN PDRIVER_OBJECT Driver, PUNICODE_STRING RegistryPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line">    PLDR_DATA ldr;</span><br><span class="line"> </span><br><span class="line">    kprintf((<span class="string">&quot;hello xia0ji233\n&quot;</span>));</span><br><span class="line">    g_Object = Driver;</span><br><span class="line">    OB_CALLBACK_REGISTRATION obRegFileCallBack;</span><br><span class="line">    OB_OPERATION_REGISTRATION opRegFileCallBack;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// enable IoFileObjectType</span></span><br><span class="line">    EnableObType(*IoFileObjectType);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// bypass MmVerifyCallbackFunction</span></span><br><span class="line">    ldr = (PLDR_DATA)Driver-&gt;DriverSection;</span><br><span class="line">    ldr-&gt;Flags |= <span class="number">0x20</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化回调</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;obRegFileCallBack, <span class="number">0</span>, <span class="keyword">sizeof</span>(obRegFileCallBack));</span><br><span class="line">    obRegFileCallBack.Version = ObGetFilterVersion();</span><br><span class="line">    obRegFileCallBack.OperationRegistrationCount = <span class="number">1</span>;</span><br><span class="line">    obRegFileCallBack.RegistrationContext = <span class="literal">NULL</span>;</span><br><span class="line">    RtlInitUnicodeString(&amp;obRegFileCallBack.Altitude, <span class="string">L&quot;321000&quot;</span>);</span><br><span class="line">    obRegFileCallBack.OperationRegistration = &amp;opRegFileCallBack;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">memset</span>(&amp;opRegFileCallBack, <span class="number">0</span>, <span class="keyword">sizeof</span>(opRegFileCallBack));</span><br><span class="line">    opRegFileCallBack.ObjectType = IoFileObjectType;</span><br><span class="line">    opRegFileCallBack.Operations = OB_OPERATION_HANDLE_CREATE | OB_OPERATION_HANDLE_DUPLICATE;</span><br><span class="line">    opRegFileCallBack.PreOperation = (POB_PRE_OPERATION_CALLBACK)&amp;FileObjectpreCall;</span><br><span class="line"> </span><br><span class="line">    status = ObRegisterCallbacks(&amp;obRegFileCallBack, &amp;obHandle);</span><br><span class="line">    <span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">    &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;注册回调错误 \n&quot;</span>));</span><br><span class="line">        status = STATUS_UNSUCCESSFUL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    UNREFERENCED_PARAMETER(RegistryPath);</span><br><span class="line">    Driver-&gt;DriverUnload = &amp;UnDriver;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先加载hack3.sys————</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create CCC binPath= <span class="string">&quot;C:\Users\12467\Desktop\hack3.sys&quot;</span> <span class="built_in">type</span>= kernel start= demand</span><br><span class="line">sc start CCC </span><br></pre></td></tr></table></figure><p>然后加载Loader.sys，可以看到断在了 hack3.sys中的 int3处，同时打印了 Loader.sys基址等信息<br><img src="/img/2024-9-9/1.png"><br>再查看”基址+0xa27e”处反汇编，可以看到，用于判断 “username是否校验成功”的jne指令，已经被patch了<br><img src="/img/2024-9-9/2.png"></p><h2 id="题-4"><a href="#题-4" class="headerlink" title="题(4)"></a>题(4)</h2><p>……</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.52pojie.cn/thread-1916220-1-1.html">https://www.52pojie.cn/thread-1916220-1-1.html</a><br><a href="https://bbs.kanxue.com/thread-281455.htm">https://bbs.kanxue.com/thread-281455.htm</a><br><a href="https://bbs.kanxue.com/thread-281452.htm">https://bbs.kanxue.com/thread-281452.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 腾讯游戏安全 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯游戏安全 2024 PC 初赛</title>
      <link href="/2024/09/01/2024-9-1%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20PC%20%E5%88%9D%E8%B5%9B/"/>
      <url>/2024/09/01/2024-9-1%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20PC%20%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>入这个坑的第一篇，只能说每一步都是初体验，每一步都觉得巨难，因此许多细枝末节的东西也一并记录下来了<br>尽管一边还看着大佬们的帖子，但每一步都会踩坑，每一步都要卡上好久<br>但没办法，智商有限，急不来只能蹒跚前行</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/2024-9-1/61.jpg"></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="win10虚拟机安装及激活"><a href="#win10虚拟机安装及激活" class="headerlink" title="win10虚拟机安装及激活"></a>win10虚拟机安装及激活</h2><p>装个win10虚拟机，给初始状态设个快照。</p><p>然后再激活一手，预备操作参考<a href="https://www.cnblogs.com/brf-test/p/16572521.html">这篇</a>；激活码获取参考<a href="https://www.bilibili.com/video/BV11z411v73c/?spm_id_from=333.337.search-card.all.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">这篇</a></p><h2 id="系统防护关闭"><a href="#系统防护关闭" class="headerlink" title="系统防护关闭"></a>系统防护关闭</h2><p>关闭 Windows防火墙和病毒防护，及其通知，给exe提供运行环境（不然放上去运行不了，然后被秒删）。<br><img src="/img/2024-9-1/3.jpg"></p><h2 id="WDK安装及使用"><a href="#WDK安装及使用" class="headerlink" title="WDK安装及使用"></a>WDK安装及使用</h2><p>引入头文件测试：<br>装完后，引入头文件测试一下，发现位于”C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0”目录下的 ntifs.h, ntddk.h却报错”编译器找不到”。</p><p>解决方案————在项目的包含路径中添上（要精确到”10.0.26100.0”下的子目录）<br><img src="/img/2024-9-1/11.png"></p><p>但还没完，接下来这次报错的来源还多了ntdef.h, wdm.h<br>看了看头文件中报错的代码，<br><img src="/img/2024-9-1/14.jpg"><br>再看看b站教程，知道问题所在了：装Visual Studio时下的”Windows 11 SDK (10.0.22621.0)”，和我后来下的”WDK - Windows 10.0.26100.1”，版本不兼容……<br>这也是为什么之前头文件引入时 会出现”编译器找不到”的错误————如果后下载的WDK，其版本和SDK一致的话，自然也会把头文件下载到”10.0.22621.0”的目录中，根本不需要在项目的包含路径上 添加”10.0.26100.0”目录。</p><p>解决方案————Visual Studio Installer中移除现有的WDK<br><img src="/img/2024-9-1/15.png"><br>然后在官网上下载版本正确的WDK<br><img src="/img/2024-9-1/16.png"><br>在项目的包含路径上删除之前的<br><img src="/img/2024-9-1/17.jpg"></p><p>但还没结束，又报错”缺少缓解Spectre漏洞的库”。<br>试了十多遍，终于找到完整的 解决方案————Visual Studio Installer中下载这些组件（”MSVC”那个一定要下）<br><img src="/img/2024-9-1/18.png"><br>再关闭所有警告（不然编译器一直把某些警告视为报错）<br><img src="/img/2024-9-1/19.jpg"></p><p>驱动模板选择：<br>创建项目时，选择”Kernel Mode Driver, Empty (KMDF)”模板<br><img src="/img/2024-9-1/10.jpg"></p><h2 id="工具下载及使用"><a href="#工具下载及使用" class="headerlink" title="工具下载及使用"></a>工具下载及使用</h2><p>KmdManager（驱动加载卸载）、Dbgview（驱动输出查看）、Winobj（内核对象查看）、Xenos（dll注入器）：<br>真是人给找麻了————一个看雪的，一个CSDN的，一个微软官网的，一个github的 </p><p>装WinDbg前，还要给Win10虚拟机磁盘 扩个容，不然装不下。</p><p>Dbgview使用：<br>使用前需先设置要捕获的范围，以下是每个选项的解释<br><img src="/img/2024-9-1/22.png"><br>所以使用前需要勾选这个两个选项<br><img src="/img/2024-9-1/12.jpg"><br>才可以尽可能多的捕获全部的内核输出。</p><p>还有一点很怪，每次开机，Dbgview只能打开一次且不能关闭（不然再次打开会报错，然后”Capture Kernel”会被关闭）；<br>使用前，”Capture Event”也要保证开启（不然工具没反应）</p><p>KmdManager使用：<br>需要以管理身份运行（不然一直显示 Register失败）<br>然后还要关闭 win10的驱动签名检测（不然就算Register了，也Run不起来），详细操作参考<a href="https://blog.csdn.net/sanqiuai/article/details/119452511">这篇</a>和<a href="https://jingyan.baidu.com/article/636f38bb14f05096b9461008.html">这篇</a>。</p><p>KmdManager之外：<br>据观察，KmdManager是以服务的形式加载驱动的<br>因此也可以不使用它，换个方式，在管理员cmd中 以服务形式注册、加载驱动<br><img src="/img/2024-9-1/20.jpg"></p><h2 id="双机调试搭建"><a href="#双机调试搭建" class="headerlink" title="双机调试搭建"></a>双机调试搭建</h2><p>参考<a href="https://zhuanlan.zhihu.com/p/620568244">这篇</a>，写的非常清楚。</p><p>首先是被调试方的设置这之后把此状态拍成 快照”snapshot3”了，所以接下来每次不需要重新设置了，直接启动该快照即可）<br><img src="/img/2024-9-1/29.jpg"><br>然后是调试方的设置<br><img src="/img/2024-9-1/32.jpg"></p><p>之后每次要进行 双击调试，只需先打开本机上的Windbg，按上图所示设置一下；<br>然后 Vmware中直接打开win10d的快照”Snapshot3”，然后重启即可。</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="题-1"><a href="#题-1" class="headerlink" title="题(1)"></a>题(1)</h2><h3 id="沙箱分析"><a href="#沙箱分析" class="headerlink" title="沙箱分析"></a>沙箱分析</h3><p>先使用云沙箱对 hack.exe进行初步分析，发现代码注入等行为<br><img src="/img/2024-9-1/1.png"></p><p>同时，发现某进程有 对C盘中某文件写入token1的行为<br><img src="/img/2024-9-1/2.jpg"><br>但C盘无该文件，因此自行创建 放到指定路径后，<br><img src="/img/2024-9-1/7.jpg"><br>运行 hack.exe，再读取此文件内容，就得到了token1<br><img src="/img/2024-9-1/8.png"></p><h3 id="用户态hook"><a href="#用户态hook" class="headerlink" title="用户态hook"></a>用户态hook</h3><p>既然题目中说是往内存中写了些东西，因此锁定一个关键API————WriteProcessMemory<br>然后使用如下hack.dll进行注入，hook实现API被调用时 打印传入参数和目标进程的名称。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Psapi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">FILE* fp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(*Func)</span><span class="params">(HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpBaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T nSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T* lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line">Func OriginFunc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BYTE HookCode[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>, <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                          <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line">BYTE OriginCode[<span class="number">0x50</span>];</span><br><span class="line">SIZE_T HookLen = <span class="built_in">sizeof</span>(HookCode);</span><br><span class="line">DWORD saved = <span class="number">0</span>;</span><br><span class="line">WCHAR FILENAME[MAX_PATH];</span><br><span class="line"><span class="function">BOOL <span class="title">HackWriteProcessMemory</span><span class="params">(HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpBaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T nSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T* lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">VirtualProtect</span>(OriginFunc, HookLen, PAGE_EXECUTE_READWRITE, &amp;saved);</span><br><span class="line">    <span class="built_in">memcpy</span>(OriginFunc, OriginCode, HookLen);    <span class="comment">// 脱钩</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Call WriteProcessMemory(%p,%p,%p,%d,%p)&quot;</span>, hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class="line">    <span class="built_in">GetModuleFileNameEx</span>(hProcess, <span class="literal">NULL</span>, FILENAME, MAX_PATH);</span><br><span class="line">    <span class="built_in">wprintf</span>(<span class="string">L&quot;ProcessName=%s\n&quot;</span>, FILENAME);</span><br><span class="line">    BOOL ret = <span class="built_in">OriginFunc</span>(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class="line">    <span class="built_in">memcpy</span>(OriginFunc, HookCode, HookLen);      <span class="comment">// 重新挂勾</span></span><br><span class="line">    <span class="built_in">VirtualProtect</span>(OriginFunc, HookLen, saved, &amp;saved);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OriginFunc = WriteProcessMemory;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(OriginFunc, HookLen, PAGE_EXECUTE_READWRITE, &amp;saved);</span><br><span class="line">    <span class="built_in">memcpy</span>(OriginCode, OriginFunc, HookLen);    <span class="comment">// 保存初始前几字节</span></span><br><span class="line">    *(__int64*)(HookCode + <span class="number">2</span>) = (__int64)HackWriteProcessMemory;    <span class="comment">//构造Inline hook</span></span><br><span class="line">    <span class="built_in">memcpy</span>(OriginFunc, HookCode, HookLen);      <span class="comment">// Inline hook</span></span><br><span class="line">    <span class="built_in">VirtualProtect</span>(OriginFunc, HookLen, saved, &amp;saved);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hook done\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH: &#123;</span><br><span class="line">        <span class="built_in">AllocConsole</span>();</span><br><span class="line">        <span class="type">errno_t</span> err = <span class="built_in">freopen_s</span>(&amp;fp, <span class="string">&quot;CONOUT$&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">        <span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Failed to redirect stdout to CONOUT$\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">hack</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Xenos直接注入，输出结果<br><img src="/img/2024-9-1/9.png"><br>但很可惜，目前来看没啥用</p><h3 id="内核hook"><a href="#内核hook" class="headerlink" title="内核hook"></a>内核hook</h3><p>用户态搞不定那就进内核，锁定内核函数————MmCopyMemory<br>然后使用如下 hack2.sys进行加载，hook实现当调用者为 ace.sys时，打印传入参数。<br>（不得不说，hook在内核态中的实现，真的比用户态要复杂太多了<br>别说手搓了，就让我看出个所以然也要费好大劲，这里只能按照自己粗浅的理解，将代码分为大致几块）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BACKTRACE_DEPTH 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL <span class="string">L&quot;\\??\\xia0ji2333&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">UINT64 BaseAddr=<span class="literal">NULL</span>, DLLSize=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;           <span class="comment">// 驱动DriverEntry  </span></span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName; <span class="comment">// 驱动全路径  </span></span><br><span class="line">    UNICODE_STRING BaseDllName; <span class="comment">// 驱动名字  </span></span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> newcode[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">KIRQL <span class="title function_">WPOFFx64</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    KIRQL irql = KeRaiseIrqlToDpcLevel();</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 &amp;= <span class="number">0xfffffffffffeffff</span>;</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    _disable();</span><br><span class="line">    <span class="keyword">return</span> irql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WPONx64</span><span class="params">(KIRQL irql)</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 |= <span class="number">0x10000</span>;</span><br><span class="line">    _enable();</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    KeLowerIrql(irql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = oldcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Hook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = newcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(*Copy)</span><span class="params">(PVOID, MM_COPY_ADDRESS, SIZE_T, ULONG, SIZE_T *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">bianliqudongmokuai</span><span class="params">(PUNICODE_STRING name, UINT64* pBaseAddr,UINT64* pSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    LDR_DATA_TABLE_ENTRY *TE, *Tmp;</span><br><span class="line">    TE = (LDR_DATA_TABLE_ENTRY*)g_Object-&gt;DriverSection;</span><br><span class="line">    PLIST_ENTRY LinkList;</span><br><span class="line">    ;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList = TE-&gt;InLoadOrderLinks.Flink;  </span><br><span class="line">    <span class="keyword">while</span> (LinkList != &amp;TE-&gt;InLoadOrderLinks)</span><br><span class="line">    &#123;</span><br><span class="line">        Tmp = (LDR_DATA_TABLE_ENTRY*)LinkList;</span><br><span class="line">        <span class="keyword">if</span> (RtlCompareUnicodeString(&amp;Tmp-&gt;BaseDllName, name, FALSE))</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;Found Module!\n&quot;</span>));</span><br><span class="line">            *pBaseAddr = (UINT64)(Tmp-&gt;DllBase);</span><br><span class="line">            *pSize = (UINT64)(Tmp-&gt;SizeOfImage);</span><br><span class="line">        &#125;</span><br><span class="line">        LinkList = LinkList-&gt;Flink;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS</span><br><span class="line">    <span class="title function_">myMmCopyMemory</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PVOID TargetAddress,</span></span><br><span class="line"><span class="params">    _In_ MM_COPY_ADDRESS SourceAddress,</span></span><br><span class="line"><span class="params">    _In_ SIZE_T NumberOfBytes,</span></span><br><span class="line"><span class="params">    _In_ ULONG Flags,</span></span><br><span class="line"><span class="params">    _Out_ PSIZE_T NumberOfBytesTransferred</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!BaseAddr) &#123;</span><br><span class="line">        UNICODE_STRING name;</span><br><span class="line">        RtlInitUnicodeString(&amp;name, <span class="string">L&quot;ace.sys&quot;</span>);</span><br><span class="line">        bianliqudongmokuai(&amp;name,&amp;BaseAddr,&amp;DLLSize);</span><br><span class="line">        <span class="keyword">if</span> (!BaseAddr) &#123;</span><br><span class="line">            <span class="keyword">goto</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PVOID backtrace[MAX_BACKTRACE_DEPTH];</span><br><span class="line">    USHORT capturedFrames = RtlCaptureStackBackTrace(<span class="number">0</span>, MAX_BACKTRACE_DEPTH, backtrace, <span class="literal">NULL</span>);</span><br><span class="line">    UINT64 addr = BaseAddr;</span><br><span class="line">    UINT64 size = DLLSize;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (USHORT i = <span class="number">0</span>; i &lt; capturedFrames; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (backtrace[i] &gt;= addr &amp;&amp; backtrace[i] &lt;= addr + size) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;xia0ji233: calls MmCopyMemory(%p,%p,%d,%p,%p)\n&quot;</span>), TargetAddress, SourceAddress, NumberOfBytes, Flags, NumberOfBytesTransferred);</span><br><span class="line">        kprintf((<span class="string">&quot;Here is data: &quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (INT64 i = <span class="number">0</span>; i &lt; NumberOfBytes; i++) &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;%02x &quot;</span>), *((<span class="type">unsigned</span> <span class="type">char</span>*)SourceAddress.VirtualAddress + i));</span><br><span class="line">        &#125;</span><br><span class="line">        kprintf((<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end:</span><br><span class="line">    Unhook();</span><br><span class="line">    Copy func = (Copy)target;</span><br><span class="line">    NTSTATUS s = func(TargetAddress, SourceAddress, NumberOfBytes, Flags, NumberOfBytesTransferred);</span><br><span class="line">    Hook();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteDevice</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start delete device\n&quot;</span>), __LINE__);</span><br><span class="line">    <span class="keyword">if</span> (pDriver-&gt;DeviceObject) &#123;</span><br><span class="line">        UNICODE_STRING Sym;</span><br><span class="line">        RtlInitUnicodeString(&amp;Sym, SYMBOL);</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Symbol\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteSymbolicLink(&amp;Sym);</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Device\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">    &#125;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: end delete device\n&quot;</span>), __LINE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start unload\n&quot;</span>), __LINE__);</span><br><span class="line">    Unhook();</span><br><span class="line">    DeleteDevice(pDriver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">CreateDevice</span><span class="params">(PDEVICE_OBJECT driver)</span> &#123;</span><br><span class="line">    NTSTATUS status;</span><br><span class="line">    UNICODE_STRING MyDriver;</span><br><span class="line">    PDEVICE_OBJECT device = <span class="literal">NULL</span>;</span><br><span class="line">    RtlInitUnicodeString(&amp;MyDriver, <span class="string">L&quot;\\DEVICE\\xia0ji233&quot;</span>);</span><br><span class="line">    status = IoCreateDevice(</span><br><span class="line">        driver,</span><br><span class="line">        <span class="keyword">sizeof</span>(driver-&gt;DeviceExtension),</span><br><span class="line">        &amp;MyDriver,</span><br><span class="line">        FILE_DEVICE_UNKNOWN,</span><br><span class="line">        FILE_DEVICE_SECURE_OPEN,</span><br><span class="line">        FALSE,</span><br><span class="line">        &amp;device</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (status == STATUS_SUCCESS) &#123;</span><br><span class="line">        UNICODE_STRING Sym;</span><br><span class="line">        RtlInitUnicodeString(&amp;Sym, SYMBOL);</span><br><span class="line">        status = IoCreateSymbolicLink(&amp;Sym, &amp;MyDriver);</span><br><span class="line">        <span class="keyword">if</span> (status == STATUS_SUCCESS) &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;Line %d:xia0ji233: symbol linked success\n&quot;</span>), __LINE__);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;Line %d:xia0ji233: symbol linked failed status=%x\n&quot;</span>), __LINE__, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: create device fail status=%x\n&quot;</span>), __LINE__, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    CreateDevice(DriverObject);</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: RegistryPath = %S\n&quot;</span>), __LINE__, RegistryPath-&gt;Buffer);</span><br><span class="line">    target = MmCopyMemory;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: MmCopyMemory=%p\n&quot;</span>), __LINE__, target);</span><br><span class="line">    g_Object = DriverObject;</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(oldcode); i++) &#123;</span><br><span class="line">            oldcode[i] = target[i];</span><br><span class="line">        &#125;</span><br><span class="line">        *(UINT64*)(newcode + <span class="number">2</span>) = myMmCopyMemory;</span><br><span class="line">        Hook();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;xia0ji233:hahaha&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而情况总是那么不尽人意，加载就蓝屏了……<br><img src="/img/2024-9-1/21.jpg"></p><p>蓝屏分析：<br>windbg中分析dmp文件可知，为异常码 0xc0000096（执行特权指令），原因是执行了“mov cr0,rax”<br>但不晓得如何解决……</p><h3 id="ace-sys加载"><a href="#ace-sys加载" class="headerlink" title="ace.sys加载"></a>ace.sys加载</h3><p>换个思路，目光先移回题目文件，看看能不能把从输出内容入手。<br>先打开 Dbgview，然后运行 hack.exe，最后加载 ace.sys（因为加了VMP，所以载的很慢），然后惊奇发现：Dbgview中 捕获并一直输出 token2<br><img src="/img/2024-9-1/25.jpg"><br>然后还注意到，返回了 Windows错误代码31<br><img src="/img/2024-9-1/26.png"></p><p>那么至此，题(1)所有token，就都到手了。</p><h2 id="题-1-其他思路"><a href="#题-1-其他思路" class="headerlink" title="题(1)其他思路"></a>题(1)其他思路</h2><p>虽说此时已经没题(1)啥事了，但是在看其他几位大佬的帖子时，注意到其找到token2的方式如下————<br>加载完 ace.sys后，打开 WinDbg会非预期地触发蓝屏（蓝屏代码0x00000ace），然后由此为切入点</p><h3 id="内核调试-一"><a href="#内核调试-一" class="headerlink" title="内核调试 一"></a>内核调试 一</h3><p>存在调试工具检测手段，其很可能来自于一个后续被创建的内核线程，因此锁定内核函数————nt!PsCreateSystemThread()</p><p>将目光转向本机上的WinDbg，开始操作————<br>“bp nt!PsCreateSystemThread”，给nt!PsCreateSystemThread()下断点<br>“g”&#x2F;f5，继续运行，加载一下ace.sys。此时 win10卡停在加载ace.sys的界面（未返回 Windows错误代码31），windbg中显示已断在 nt!PsCreateSystemThread()<br>“k”，查看调用堆栈，发现过于正常了，说明此时调用根本不来自ace.sys<br><img src="/img/2024-9-1/37.png"></p><p>那接下来咋整？只能 “g””k””g””k”…… 直到调用栈中显示 nt!PsCreateSystemThread()的调用者不再来自系统的内核函数<br>参考别人的帖子来看，大致到这样？<br><img src="/img/2024-9-1/39.jpg"></p><p>这一直傻愣愣地”g””k”，感觉有点折磨，想到可以用windbg脚本，循环执行”g””k”，每次去检查调用堆栈，直到匹配到如上图所示的情况后 再断下<br>但很无奈，网上我能搜到的教程，绝大部分讲的都只限于windbg每条命令的用法，鲜有提及脚本编写<br>就算有涉及，也难以实现我上述需求</p><h3 id="内核调试-二"><a href="#内核调试-二" class="headerlink" title="内核调试 二"></a>内核调试 二</h3><p>浅浅换个思路————<br>“bp nt!DbgPrintEx”，给nt!DbgPrintEx()下断点；<br>“g”；<br>“kv”，发现 nt!DbgPrintEx()被一个奇怪的地方调用，说明此时位于 ace.sys的逻辑中了；<br><img src="/img/2024-9-1/40.png"><br>“r”，查看rcx,rdx,r8,r9，获取 nt!DbgPrintEx()的参数，其中r8存着token2地址，rdx存着参数”Level”（调试级别，用于指定输出信息的详细程度）<br><img src="/img/2024-9-1/41.png"><br><img src="/img/2024-9-1/42.png"><br>“r rdx&#x3D;0”，把Level改为0，使得其输出 能在Windbg中显示<br>“gu”，Step Out，执行到 nt!DbgPrintEx()刚返回处，可以看到此时已成功输出 “token:”<br><img src="/img/2024-9-1/43.png"></p><p>“g””gu””g””gu”……，但为什么接下来都没见到输出了？原来每次调用 nt!DbgPrintEx()时，其传入rdx的值，即level的值都是5，所以上面的改法治标不治本<br>“uf rip”，反汇编 返回处附近的代码，进而找到调用 nt!DbgPrintEx()前，rdx被赋值的逻辑处，即 ffffd608-f0013e64<br><img src="/img/2024-9-1/44.jpg"><br>“eb ffffd608-f0013e65 00”，把此处”05”改成”00”<br><img src="/img/2024-9-1/45.png"><br>“uf rip”，再次查看反汇编，这下 改过来了<br><img src="/img/2024-9-1/46.jpg"><br>“bl”，在其中禁用断点<br>“g”，此时，token2源源不断的输出啦！<br><img src="/img/2024-9-1/47.png"></p><h2 id="题-2"><a href="#题-2" class="headerlink" title="题(2)"></a>题(2)</h2><h3 id="用户态调试"><a href="#用户态调试" class="headerlink" title="用户态调试"></a>用户态调试</h3><p>题(2)要求通过程序让 token1成功输出。在此之前，需先动调查看token1输出机制</p><p>思路整理：<br>最初云沙箱分析时，发现对 C:\2024GameSafeRace.token1有”文件写入”的行为。<br>但该路径下一开始是没有此文件的，所以在此之前肯定还存在”文件创建”的行为。<br>然而，实际运行hack.exe后，发现 该路径下甚至没有出现此文件。<br>所以可以判断，程序的”文件创建”过程出了问题，因此锁定API————CreateFileA()。</p><p>动调目标确认：<br>使用如下powershell脚本，实现 运行指定进程后，列举出该进程创建的新进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$before</span> = <span class="built_in">Get-Process</span></span><br><span class="line"><span class="built_in">Start-Process</span> <span class="string">&quot;C:\Users\12467\Desktop\...&quot;</span></span><br><span class="line"><span class="built_in">Start-Sleep</span> <span class="literal">-Seconds</span> <span class="number">5</span></span><br><span class="line"><span class="variable">$after</span> = <span class="built_in">Get-Process</span></span><br><span class="line"><span class="variable">$newProcesses</span> = <span class="built_in">Compare-Object</span> <span class="literal">-ReferenceObject</span> <span class="variable">$before</span> <span class="literal">-DifferenceObject</span> <span class="variable">$after</span> <span class="literal">-Property</span> Id, Name | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.SideIndicator <span class="operator">-eq</span> <span class="string">&quot;=&gt;&quot;</span> &#125;</span><br><span class="line"><span class="variable">$newProcesses</span> | <span class="built_in">ForEach-Object</span> &#123; <span class="built_in">Write-Output</span> <span class="variable">$_</span>.Name &#125;</span><br></pre></td></tr></table></figure><p>可以看到成功输出了<br><img src="/img/2024-9-1/59.png"><br>很显然，“文件创建”行为不会来自前几个进程，因此由此确认接下来动调的目标————Taskmgr.exe了。</p><p>附加进程调试：<br>别忘了调试器检测，因此先要给x64dbg改个名，然后启动 hack.exe，让x64dbg附加到 Taskmgr.exe，开始操作————<br>在 CreateFileA()处下断点，一直f9，直到断在该处；<br>rcx等 查看传递参数，其中[rsp+28]处 存着参数”dwCreationDisposition”，其值为3，可以从下图得知其含义<br><img src="/img/2024-9-1/52.jpg"><br>ctrl+f9运行到返回，然后再单步，从而来到刚调用完 CreateFileA()处；<br>rax 查看返回值，发现是 “FFFFFFFFFFFFFFFF（-1）”，说明调用失败</p><p>再来一次————<br>这次在程序刚断在 CreateFileA()时，把[rsp+28]处的值改为1；<br>接下来再运行，会发现 rax中的返回值已改，C:\2024GameSafeRace.token1中也已有文件<br><img src="/img/2024-9-1/54.png"></p><p>这样一来，后续程序的思路便有了————修改 调用CreateFileA()前 参数传递的逻辑，把”mov xxx 3”改为”mov xxx 1”.<br><img src="/img/2024-9-1/53.png"></p><h3 id="用户态patch"><a href="#用户态patch" class="headerlink" title="用户态patch"></a>用户态patch</h3><p>dll大致逻辑：<br>遍历所有线程，获取其入口地址处 前几个字节；<br>将遍历所得的 前几个字节，与目标的前几字节 比较，定位到调用 CreateFileA()的线程；<br><img src="/img/2024-9-1/55.jpg"><br>最后通过偏移，定位到该线程中的”mov xxx,3”语句，把 “03”改成”01”<br><img src="/img/2024-9-1/56.png"></p><p>hack4.dll如下————</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">_THREADINFOCLASS</span>&#123;</span><br><span class="line">    ThreadBasicInformation,</span><br><span class="line">    ThreadTimes,</span><br><span class="line">    ThreadPriority,</span><br><span class="line">    ThreadBasePriority,</span><br><span class="line">    ThreadAffinityMask,</span><br><span class="line">    ThreadImpersonationToken,</span><br><span class="line">    ThreadDescriptorTableEntry,</span><br><span class="line">    ThreadEnableAlignmentFaultFixup,</span><br><span class="line">    ThreadEventPair_Reusable,</span><br><span class="line">    ThreadQuerySetWin32StartAddress,</span><br><span class="line">    ThreadZeroTlsCell,</span><br><span class="line">    ThreadPerformanceCount,</span><br><span class="line">    ThreadAmILastThread,</span><br><span class="line">    ThreadIdealProcessor,</span><br><span class="line">    ThreadPriorityBoost,</span><br><span class="line">    ThreadSetTlsArrayAddress,</span><br><span class="line">    ThreadIsIoPending,</span><br><span class="line">    ThreadHideFromDebugger,</span><br><span class="line">    ThreadBreakOnTermination,</span><br><span class="line">    MaxThreadInfoClass</span><br><span class="line">&#125;THREADINFOCLASS;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CLIENT_ID</span>&#123;</span><br><span class="line">    HANDLE UniqueProcess;</span><br><span class="line">    HANDLE UniqueThread;</span><br><span class="line">&#125;CLIENT_ID;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_THREAD_BASIC_INFORMATION</span>&#123;</span><br><span class="line">    LONG ExitStatus;</span><br><span class="line">    PVOID TebBaseAddress;</span><br><span class="line">    CLIENT_ID ClientId;</span><br><span class="line">    LONG AffinityMask;</span><br><span class="line">    LONG Priority;</span><br><span class="line">    LONG BasePriority;</span><br><span class="line">&#125;THREAD_BASIC_INFORMATION,*PTHREAD_BASIC_INFORMATION;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="built_in">LONG</span> (__stdcall *ZwQueryInformationThread)(</span><br><span class="line">    IN HANDLE ThreadHandle,</span><br><span class="line">    IN THREADINFOCLASS ThreadInformationClass,</span><br><span class="line">    OUT PVOID ThreadInformation,</span><br><span class="line">    IN ULONG ThreadInformationLength,</span><br><span class="line">    OUT PULONG ReturnLength OPTIONAL</span><br><span class="line">    ) = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BYTE CODE[] = &#123;</span><br><span class="line">    <span class="number">0x40</span>,<span class="number">0x53</span>,<span class="number">0x48</span>,<span class="number">0x83</span>,<span class="number">0xEC</span>,<span class="number">0x20</span>,<span class="number">0x48</span>,<span class="number">0x8B</span>,<span class="number">0xD9</span>,<span class="number">0x48</span>,<span class="number">0x85</span>,<span class="number">0xC9</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BOOL <span class="title">hack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HANDLE hThreadSnap = INVALID_HANDLE_VALUE; </span><br><span class="line">    THREADENTRY32 te32; </span><br><span class="line">    DWORD dwOwnerPID = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">    hThreadSnap = <span class="built_in">CreateToolhelp32Snapshot</span>( TH32CS_SNAPTHREAD, <span class="number">0</span> ); </span><br><span class="line">    <span class="keyword">if</span>( hThreadSnap == INVALID_HANDLE_VALUE ) </span><br><span class="line">    <span class="keyword">return</span>( FALSE ); </span><br><span class="line"></span><br><span class="line">    te<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(THREADENTRY32 ); </span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">Thread32First</span>( hThreadSnap, &amp;te32 ) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>( hThreadSnap );    </span><br><span class="line">        <span class="keyword">return</span>( FALSE );</span><br><span class="line">    &#125;</span><br><span class="line">    ULONG64 StartAddress;</span><br><span class="line">    DWORD dwReturnLength;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>( te<span class="number">32.</span>th32OwnerProcessID == dwOwnerPID )</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (te<span class="number">32.</span>th32OwnerProcessID) &#123;</span><br><span class="line">                HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_QUERY_INFORMATION, FALSE, te<span class="number">32.</span>th32ThreadID);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    HINSTANCE hNTDLL = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;ntdll&quot;</span>);</span><br><span class="line">                    (FARPROC&amp;)ZwQueryInformationThread  = ::<span class="built_in">GetProcAddress</span>(hNTDLL,<span class="string">&quot;ZwQueryInformationThread&quot;</span>);</span><br><span class="line">                    PVOID startaddr;                                               </span><br><span class="line">                                        <span class="built_in">ZwQueryInformationThread</span>(</span><br><span class="line">                                                hThread,                                                 </span><br><span class="line">                                                ThreadQuerySetWin32StartAddress,       </span><br><span class="line">                                                &amp;startaddr,                                                       </span><br><span class="line">                                                <span class="built_in">sizeof</span>(startaddr),                                       </span><br><span class="line">                                                <span class="literal">NULL</span>                                                                </span><br><span class="line">                                                );</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">memcmp</span>(startaddr,CODE,<span class="built_in">sizeof</span>(CODE))) &#123;</span><br><span class="line">                        <span class="type">char</span> msg[<span class="number">0x50</span>];</span><br><span class="line">                        <span class="built_in">sprintf_s</span>(msg, <span class="built_in">sizeof</span>(msg), <span class="string">&quot;Found the Shellcode in address:%p&quot;</span>, startaddr);</span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, msg, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        <span class="built_in">sprintf_s</span>(msg, <span class="built_in">sizeof</span>(msg), <span class="string">&quot;Replace The byte %02x to 0x01 in addr %p\n&quot;</span>, *((BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>), (BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>);</span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, msg, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        *((BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">return</span> TRUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>( <span class="built_in">Thread32Next</span>(hThreadSnap, &amp;te32 ) );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>( hThreadSnap );</span><br><span class="line">    <span class="keyword">return</span>( FALSE );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">hack</span>()) &#123;</span><br><span class="line">            <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Fail&quot;</span>, <span class="string">&quot;FAIL&quot;</span>, MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Success&quot;</span>, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来运行hack.exe，Xenos中找到 Taskmgr.exe，直接注入 hack4.dll。<br>可以看到此时，C:\2024GameSafeRace.token1 成功被创建<br><img src="/img/2024-9-1/57.png"></p><h3 id="内核patch"><a href="#内核patch" class="headerlink" title="内核patch"></a>内核patch</h3><p>要通过程序（而非内核调试）的方式，让 token2成功输出。<br>换句话说，要通过驱动去修改 nt!DbgPrintEx()调用前的 rdx赋值逻辑</p><p>hack3.sys大致逻辑：<br>遍历所有内核线程，获取其入口地址处 前几个字节；<br>将遍历所得的 前几个字节，与目标的前几字节 比较，定位到调用 nt!DbgPrintEx()的内核线程；<br>通过偏移，定位到该线程中的”mov edx,5”语句，把 “05”改成”00”。</p><p>不过这里大佬的代码不能直接拿来用，有两个点需要修改————<br>1.大佬帖子里调用 nt!DbgPrintEx()的内核线程，其入口地址是”0xFFFFBB__________”；<br>而我这里通过 多次查看ETHREAD结构体，会发现入口地址不一样<br><img src="/img/2024-9-1/50.jpg"><br>2.我这里入口地址处前几个字节，与帖子里也不一样<br><img src="/img/2024-9-1/51.png"></p><p>以下为修改后的————</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span>;</span><br><span class="line">VOID <span class="title function_">UnloadDriver</span><span class="params">(PDRIVER_OBJECT DriverObject)</span>;</span><br><span class="line">NTSTATUS <span class="title function_">EnumerateKernelThreads</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(*ZWQUERYSYSTEMINFORMATION)</span><span class="params">(ULONG, PVOID, ULONG, PULONG)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SYSTEM_PROCESS_INFORMATION</span> &#123;</span></span><br><span class="line">    ULONG NextEntryOffset;</span><br><span class="line">    ULONG NumberOfThreads;</span><br><span class="line">    LARGE_INTEGER Reserved[<span class="number">3</span>];</span><br><span class="line">    LARGE_INTEGER CreateTime;</span><br><span class="line">    LARGE_INTEGER UserTime;</span><br><span class="line">    LARGE_INTEGER KernelTime;</span><br><span class="line">    UNICODE_STRING ImageName;</span><br><span class="line">    ULONG BasePriority;</span><br><span class="line">    HANDLE ProcessId;</span><br><span class="line">    HANDLE InheritedFromProcessId;</span><br><span class="line">&#125; SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SYSTEM_THREAD_INFORMATION</span> &#123;</span></span><br><span class="line">    LARGE_INTEGER KernelTime;</span><br><span class="line">    LARGE_INTEGER UserTime;</span><br><span class="line">    LARGE_INTEGER CreateTime;</span><br><span class="line">    ULONG WaitTime;</span><br><span class="line">    PVOID StartAddress;</span><br><span class="line">    CLIENT_ID ClientId;</span><br><span class="line">    ULONG Priority;</span><br><span class="line">    LONG BasePriority;</span><br><span class="line">    ULONG ContextSwitchCount;</span><br><span class="line">    LONG State;</span><br><span class="line">    LONG WaitReason;</span><br><span class="line">&#125; SYSTEM_THREAD_INFORMATION, * PSYSTEM_THREAD_INFORMATION;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">SYSTEM_INFORMATION_CLASS</span> &#123;</span></span><br><span class="line">    SystemProcessInformation = <span class="number">5</span></span><br><span class="line">&#125; SYSTEM_INFORMATION_CLASS;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SystemModuleInformation 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> CODE[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x08</span>, <span class="number">0x58</span>, <span class="number">0x89</span>, <span class="number">0x48</span>, <span class="number">0xC4</span>, <span class="number">0x8B</span>, <span class="number">0x48</span>, <span class="number">0x55</span>, <span class="number">0x20</span>, <span class="number">0x70</span>, <span class="number">0x89</span>, <span class="number">0x4C</span>, <span class="number">0x18</span>, <span class="number">0x78</span>, <span class="number">0x89</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">KIRQL <span class="title function_">WPOFFx64</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    KIRQL irql = KeRaiseIrqlToDpcLevel();</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 &amp;= <span class="number">0xfffffffffffeffff</span>;</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    _disable();</span><br><span class="line">    <span class="keyword">return</span> irql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WPONx64</span><span class="params">(KIRQL irql)</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 |= <span class="number">0x10000</span>;</span><br><span class="line">    _enable();</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    KeLowerIrql(irql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">MDLWriteMemory(PVOID pBaseAddress, PVOID pWriteData, SIZE_T writeDataSize)</span><br><span class="line">&#123;</span><br><span class="line">    PMDL pMdl = <span class="literal">NULL</span>;</span><br><span class="line">    PVOID pNewAddress = <span class="literal">NULL</span>;</span><br><span class="line">    pMdl = IoAllocateMdl(pBaseAddress, writeDataSize, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pMdl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    MmBuildMdlForNonPagedPool(pMdl);</span><br><span class="line">    pNewAddress = MmMapLockedPagesSpecifyCache(pMdl, KernelMode, MmNonCached, <span class="literal">NULL</span>, FALSE, NormalPagePriority);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pNewAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        IoFreeMdl(pMdl);</span><br><span class="line">    &#125;</span><br><span class="line">    RtlCopyMemory(pNewAddress, pWriteData, writeDataSize);</span><br><span class="line">    MmUnmapLockedPages(pNewAddress, pMdl);</span><br><span class="line">    IoFreeMdl(pMdl);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">EnumerateKernelThreads</span><span class="params">()</span> &#123;</span><br><span class="line">    UNICODE_STRING routineName;</span><br><span class="line">    RtlInitUnicodeString(&amp;routineName, <span class="string">L&quot;ZwQuerySystemInformation&quot;</span>);</span><br><span class="line">    ZWQUERYSYSTEMINFORMATION ZwQuerySystemInformation = (ZWQUERYSYSTEMINFORMATION)MmGetSystemRoutineAddress(&amp;routineName);</span><br><span class="line">    <span class="keyword">if</span> (!ZwQuerySystemInformation) &#123;</span><br><span class="line">        <span class="keyword">return</span> STATUS_UNSUCCESSFUL;</span><br><span class="line">    &#125;</span><br><span class="line">    ULONG returnLength = <span class="number">0</span>;</span><br><span class="line">    ZwQuerySystemInformation(SystemProcessInformation, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;returnLength);</span><br><span class="line">    PVOID buffer = ExAllocatePool2(POOL_FLAG_NON_PAGED, returnLength, <span class="string">&#x27;MyTa&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="keyword">return</span> STATUS_INSUFFICIENT_RESOURCES;</span><br><span class="line">    &#125;</span><br><span class="line">    NTSTATUS status = ZwQuerySystemInformation(SystemProcessInformation, buffer, returnLength, &amp;returnLength);</span><br><span class="line">    <span class="keyword">if</span> (!NT_SUCCESS(status)) &#123;</span><br><span class="line">        ExFreePool(buffer);</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span>; k++) &#123;</span><br><span class="line">        PSYSTEM_PROCESS_INFORMATION current = (PSYSTEM_PROCESS_INFORMATION)buffer;</span><br><span class="line">        <span class="keyword">while</span> (TRUE) &#123;</span><br><span class="line">            PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(current + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (ULONG i = <span class="number">0</span>; i &lt; current-&gt;NumberOfThreads; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (((UINT64)(threadInfo-&gt;StartAddress) &amp; <span class="number">0xFFFF000000000000</span>) == <span class="number">0xFFFF000000000000</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (MmIsAddressValid(threadInfo-&gt;StartAddress) &amp;&amp; RtlEqualMemory(threadInfo-&gt;StartAddress, CODE, <span class="keyword">sizeof</span>(CODE))) &#123;</span><br><span class="line">                        kprintf((<span class="string">&quot;Shellcode Found in %p\n&quot;</span>), threadInfo-&gt;StartAddress);</span><br><span class="line">                        <span class="type">char</span>* shellcode = threadInfo-&gt;StartAddress;</span><br><span class="line">                        MDLWriteMemory(shellcode + <span class="number">0x51</span> + <span class="number">1</span>, <span class="string">&quot;\x00&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                        MDLWriteMemory(shellcode + <span class="number">0xb4</span> + <span class="number">1</span>, <span class="string">&quot;\x00&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                        MDLWriteMemory(shellcode + <span class="number">0x124</span> + <span class="number">1</span>, <span class="string">&quot;\x00&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                threadInfo++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (current-&gt;NextEntryOffset == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            current = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)current + current-&gt;NextEntryOffset);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExFreePool(buffer);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">UnloadDriver</span><span class="params">(PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(DriverObject);</span><br><span class="line">    kprintf((<span class="string">&quot;Driver Unloaded\n&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span> &#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(RegistryPath);</span><br><span class="line">    DriverObject-&gt;DriverUnload = UnloadDriver;</span><br><span class="line">    kprintf((<span class="string">&quot;Driver Loaded\n&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> EnumerateKernelThreads();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载后难得没有返回Windows错误代码，说明可以正常运行。</p><p>接下来，加载ace.sys后，再多加载几次该驱动<br>好消息，可以看到输出了部分内容<br><img src="/img/2024-9-1/49.png"><br>坏消息，除此之外啥都没输出，不知道问题出在哪里……这里算是个存疑</p><h2 id="题-3"><a href="#题-3" class="headerlink" title="题(3)"></a>题(3)</h2><h2 id="用户态patch-1"><a href="#用户态patch-1" class="headerlink" title="用户态patch"></a>用户态patch</h2><p>题(3)要求让 token1往指定的位置写入。简单来讲，就是修改 CreateFileA()的参数”lpFileName”。<br>所以和前面一个dll的思路差不多</p><p>dll大致逻辑————<br>内存中分配一块区域，用于存储 自定义路径，获取其指针；<br>通过偏移定位到该线程中的”mov rax,A727C0574231D098”语句，把操作数（原路径的指针）改为 自定义路径的指针</p><p>hack5.dll如下————</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NewDest <span class="string">&quot;E:\\MyOwnPath.token1&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">_THREADINFOCLASS</span>&#123;</span><br><span class="line">    ThreadBasicInformation,</span><br><span class="line">    ThreadTimes,</span><br><span class="line">    ThreadPriority,</span><br><span class="line">    ThreadBasePriority,</span><br><span class="line">    ThreadAffinityMask,</span><br><span class="line">    ThreadImpersonationToken,</span><br><span class="line">    ThreadDescriptorTableEntry,</span><br><span class="line">    ThreadEnableAlignmentFaultFixup,</span><br><span class="line">    ThreadEventPair_Reusable,</span><br><span class="line">    ThreadQuerySetWin32StartAddress,</span><br><span class="line">    ThreadZeroTlsCell,</span><br><span class="line">    ThreadPerformanceCount,</span><br><span class="line">    ThreadAmILastThread,</span><br><span class="line">    ThreadIdealProcessor,</span><br><span class="line">    ThreadPriorityBoost,</span><br><span class="line">    ThreadSetTlsArrayAddress,</span><br><span class="line">    ThreadIsIoPending,</span><br><span class="line">    ThreadHideFromDebugger,</span><br><span class="line">    ThreadBreakOnTermination,</span><br><span class="line">    MaxThreadInfoClass</span><br><span class="line">&#125;THREADINFOCLASS;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CLIENT_ID</span>&#123;</span><br><span class="line">    HANDLE UniqueProcess;</span><br><span class="line">    HANDLE UniqueThread;</span><br><span class="line">&#125;CLIENT_ID;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_THREAD_BASIC_INFORMATION</span>&#123;</span><br><span class="line">    LONG ExitStatus;</span><br><span class="line">    PVOID TebBaseAddress;</span><br><span class="line">    CLIENT_ID ClientId;</span><br><span class="line">    LONG AffinityMask;</span><br><span class="line">    LONG Priority;</span><br><span class="line">    LONG BasePriority;</span><br><span class="line">&#125;THREAD_BASIC_INFORMATION,*PTHREAD_BASIC_INFORMATION;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="built_in">LONG</span> (__stdcall *ZwQueryInformationThread)(</span><br><span class="line">    IN HANDLE ThreadHandle,</span><br><span class="line">    IN THREADINFOCLASS ThreadInformationClass,</span><br><span class="line">    OUT PVOID ThreadInformation,</span><br><span class="line">    IN ULONG ThreadInformationLength,</span><br><span class="line">    OUT PULONG ReturnLength OPTIONAL</span><br><span class="line">    ) = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BYTE CODE[] = &#123;</span><br><span class="line">    <span class="number">0x40</span>,<span class="number">0x53</span>,<span class="number">0x48</span>,<span class="number">0x83</span>,<span class="number">0xEC</span>,<span class="number">0x20</span>,<span class="number">0x48</span>,<span class="number">0x8B</span>,<span class="number">0xD9</span>,<span class="number">0x48</span>,<span class="number">0x85</span>,<span class="number">0xC9</span></span><br><span class="line">&#125;;</span><br><span class="line">BYTE HACKCODE[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB9</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>   <span class="comment">//mov rcx,xxx</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BOOL <span class="title">hack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HANDLE hThreadSnap = INVALID_HANDLE_VALUE; </span><br><span class="line">    THREADENTRY32 te32; </span><br><span class="line">    DWORD dwOwnerPID = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">    hThreadSnap = <span class="built_in">CreateToolhelp32Snapshot</span>( TH32CS_SNAPTHREAD, <span class="number">0</span> ); </span><br><span class="line">    <span class="keyword">if</span>( hThreadSnap == INVALID_HANDLE_VALUE ) </span><br><span class="line">    <span class="keyword">return</span>( FALSE ); </span><br><span class="line"></span><br><span class="line">    te<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(THREADENTRY32 ); </span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">Thread32First</span>( hThreadSnap, &amp;te32 ) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>( hThreadSnap );    </span><br><span class="line">        <span class="keyword">return</span>( FALSE );</span><br><span class="line">    &#125;</span><br><span class="line">    ULONG64 StartAddress;</span><br><span class="line">    DWORD dwReturnLength;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>( te<span class="number">32.</span>th32OwnerProcessID == dwOwnerPID )</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (te<span class="number">32.</span>th32OwnerProcessID) &#123;</span><br><span class="line">                HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_QUERY_INFORMATION, FALSE, te<span class="number">32.</span>th32ThreadID);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    HINSTANCE hNTDLL = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;ntdll&quot;</span>);</span><br><span class="line">                    (FARPROC&amp;)ZwQueryInformationThread  = ::<span class="built_in">GetProcAddress</span>(hNTDLL,<span class="string">&quot;ZwQueryInformationThread&quot;</span>);</span><br><span class="line">                    PVOID startaddr;                                            </span><br><span class="line">                                        <span class="built_in">ZwQueryInformationThread</span>(</span><br><span class="line">                                                hThread,                                                      </span><br><span class="line">                                                ThreadQuerySetWin32StartAddress,        </span><br><span class="line">                                                &amp;startaddr,                                                   </span><br><span class="line">                                                <span class="built_in">sizeof</span>(startaddr),                                      </span><br><span class="line">                                                <span class="literal">NULL</span>                                                                </span><br><span class="line">                                                );</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">memcmp</span>(startaddr,CODE,<span class="built_in">sizeof</span>(CODE))) &#123;</span><br><span class="line">                        <span class="type">char</span> msg[<span class="number">0x50</span>];</span><br><span class="line">                        <span class="built_in">sprintf_s</span>(msg, <span class="built_in">sizeof</span>(msg), <span class="string">&quot;Found the Shellcode in address:%p&quot;</span>, startaddr);</span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, msg, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        <span class="built_in">sprintf_s</span>(msg, <span class="built_in">sizeof</span>(msg), <span class="string">&quot;Replace The byte %02x to 0x01 in addr %p\n&quot;</span>, *((BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>), (BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>);</span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, msg, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        *((BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 新添加逻辑</span></span><br><span class="line">                        LPVOID buffer=<span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="number">0x1000</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">                        <span class="built_in">memcpy</span>(buffer, NewDest, <span class="built_in">sizeof</span>(NewDest));</span><br><span class="line">                        *(ULONG64*)(HACKCODE + <span class="number">2</span>) = (ULONG64)buffer;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">memcpy</span>((BYTE*)startaddr - <span class="number">0x5ddb</span> - <span class="number">0x67</span>, HACKCODE, <span class="built_in">sizeof</span>(HACKCODE));</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;PATH replace to &quot;</span> NewDest, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        <span class="keyword">return</span> TRUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>( <span class="built_in">Thread32Next</span>(hThreadSnap, &amp;te32 ) );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>( hThreadSnap );</span><br><span class="line">    <span class="keyword">return</span>( FALSE );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">hack</span>()) &#123;</span><br><span class="line">            <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Fail&quot;</span>, <span class="string">&quot;FAIL&quot;</span>, MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Success&quot;</span>, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入后，看样子是成功了<br><img src="/img/2024-9-1/58.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.52pojie.cn/thread-1913623-1-1.html">https://www.52pojie.cn/thread-1913623-1-1.html</a><br><a href="https://bbs.kanxue.com/thread-281351.htm">https://bbs.kanxue.com/thread-281351.htm</a><br><a href="https://bbs.kanxue.com/homepage-878559.htm">https://bbs.kanxue.com/homepage-878559.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 腾讯游戏安全 做题记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊程序逆向</title>
      <link href="/2024/06/23/2024-6-23%20%E7%89%B9%E6%AE%8A%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/"/>
      <url>/2024/06/23/2024-6-23%20%E7%89%B9%E6%AE%8A%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>逆向过程中，常常会遇到一些所使用的 语言、框架、平台较为特殊的程序<br>对其逆向手段与常规途径有所不同，故在此汇总</p><h1 id="特殊语言"><a href="#特殊语言" class="headerlink" title="特殊语言"></a>特殊语言</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>作为解释型语言，逃脱不了暴露源码的共性，因此一般要面对的是经过Pyinstaller打包后的exe<br>不过逆向也比较清晰，先pyinstxtractor解包得到pyc字节码文件，而后pycdc反编译</p><p>但由于反编译代码可读性过分高了，因此存在一些反pycdc手段：</p><ol><li>基于pyc文件结构进行加花，如更改Magic Number<br><img src="/img/2024-6-23/2.jpg"><br>这就需要去查看 Python各版本的<a href="https://www.cnblogs.com/Here-is-SG/p/15885799.html">Magic Number对照表</a>，进行pyc修复</li><li>通过添加错误字节码，造成反编译失败<br>此时就得放弃反编译，转而用pydisasm等工具进行反汇编，从python反汇编代码入手</li><li>引入Cython，将逻辑放入平台原生机器码中（有点像Android native层防护），而后以模块的形式import，具体见下方</li></ol><h2 id="Cython"><a href="#Cython" class="headerlink" title="Cython"></a>Cython</h2><p>作为python的扩展模块和超集，引入了OOP原则，拥有十分特殊的编译流程<br><img src="/img/2024-6-23/1.png"><br>一般出现于 pyinstxtractor解包出来的so、pyd文件，但由于Cython本身的特性，其反编译后的形态与常规ELF有很大不同</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>在C的基础上多了不少特性：</p><ol><li>面向对象（OOP）</li></ol><p>引入的class与传统struct在存储上存在不小差异————<br>struct：值类型，实例直接存放数据的值；<br>        数据在哪 看实例申明位置，一般在栈中<br>class：引用类型，实例存放数据的指针；<br>       数据在堆中，实例在哪 看申明位置</p><ol start="2"><li>STL库</li></ol><p>作为C++标准库的一部分，提供了许多通用的数据结构和算法，包括以下重要组件————<br>容器（Containers）：用于存储和管理数据的数据结构。常见容器有 std::vector（动态数组）、std::list（双向链表）<br>算法（Algorithms）：用于操作容器中数据的通用算法。常见算法有 std::sort（排序算法）、std::find（查找算法）</p><ol start="3"><li>异常处理机制</li></ol><p>核心在于理解栈展开的过程<br><img src="/img/2024-6-23/28.jpg"><br>要注意，虽然C++下的的 try、catch，与 Windows SEH下的 __try、__except有几分相似，但本质上具有不同结构</p><ol start="4"><li>虚函数</li></ol><p>内存布局如下图所示<br><img src="/img/2024-6-23/29.jpg"></p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>Go的函数调用约定与 C&#x2F;C++有所不同，反编译后在可读性上会稍有降低<br>不过重点还是在于函数名的恢复，可使用IDA自带插件进行</p><h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><p>作为解释型语言，可使用unluac工具对其字节码文件进行反编译</p><h1 id="特殊框架"><a href="#特殊框架" class="headerlink" title="特殊框架"></a>特殊框架</h1><h2 id="QuickJS"><a href="#QuickJS" class="headerlink" title="QuickJS"></a>QuickJS</h2><p>概述：<br>QuickJS引擎有较为独特的运行机制，首先将js源码转换成为C，不过此时的C源码本质上是一个解释器（js字节码存储在数组中被解释），然后C被编译为机器码</p><p>逆向：</p><ol><li>dump出程序中的 JS字节码</li><li>使用qjsc（需要修改源码，添加反汇编打印功能） 将任意 example.js编译为 example.c</li><li>example.c中 替换qjsc_hello[]为上述字节码</li><li>编译 example.c，运行后查看打印出的 反汇编代码</li></ol><h2 id="eBPF"><a href="#eBPF" class="headerlink" title="eBPF"></a>eBPF</h2><p>见此<a href="https://tttang.com/archive/1550/#toc_0x00-bpf">文章</a></p><h2 id="Ruby-Packer"><a href="#Ruby-Packer" class="headerlink" title="Ruby Packer"></a>Ruby Packer</h2><p>概述：<br>本质上是一个打包工具，将ruby源码文件 打包成squashfs文件系统，放入Ruby解释器<br>因此逆向的关键在于解包</p><p>逆向（解包）：<br>使用 binwalk进行文件提取，生成 extracted文件夹<br><img src="/img/2024-6-23/3.png"><br>其中“\squashfs-root\enclose_io_memfs\local\out.rb” 为主程序</p><h2 id="Unicorn"><a href="#Unicorn" class="headerlink" title="Unicorn"></a>Unicorn</h2><p>概述：<br>一个基于QEMU的CPU仿真框架，其在逆向过程中常用于模拟执行、代码追踪，这里通过一个简单的脚本展示一下常用API</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> addressof</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 各地址值，可以通过动调得到 </span></span><br><span class="line">ADDRESS = <span class="number">0xE51000</span>          <span class="comment"># 程序.text段加载的基址，可以通过ctrl+s查看</span></span><br><span class="line">INPUT_ADDRESS = <span class="number">0xE5701D</span>    <span class="comment"># input的存放地址</span></span><br><span class="line">KEY_ADDRESS = <span class="number">0xE5705C</span>      <span class="comment"># key的存放地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;...&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.seek(<span class="number">0x400</span>)                <span class="comment"># 来到文件.text节的偏移处</span></span><br><span class="line">    X64_CODE = file.read(<span class="number">0x4400</span>)    <span class="comment"># 读取整个.text节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Unidbg</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, flag</span>):</span><br><span class="line">        <span class="comment"># 初始化Unicorn模拟器实例，设置架构和位数</span></span><br><span class="line">        mu = Uc(UC_ARCH_X86, UC_MODE_64)</span><br><span class="line">        <span class="comment"># 在加载基址处分配内存</span></span><br><span class="line">        mu.mem_map(ADDRESS, <span class="number">0x1000000</span>)</span><br><span class="line">        <span class="comment"># 初始化内存</span></span><br><span class="line">        mu.mem_write(ADDRESS, X64_CODE)</span><br><span class="line">        mu.mem_write(INPUT_ADDRESS, flag)     </span><br><span class="line">        mu.mem_write(KEY_ADDRESS, <span class="string">b&#x27;\x90\xF0\x70\x7C\x52\x05\x91\x90\xAA\xDA\x8F\xFA\x7B\xBC\x79\x4D&#x27;</span>)</span><br><span class="line">        <span class="comment"># 初始化寄存器</span></span><br><span class="line">        mu.reg_write(UC_X86_REG_RAX, <span class="number">0x00000000</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RBX, <span class="number">0x0107102D</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RCX, <span class="number">0x5F55E617</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RDX, <span class="number">0x00000001</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RSI, INPUT_ADDRESS)  <span class="comment"># 指向flag</span></span><br><span class="line">        mu.reg_write(UC_X86_REG_RDI, KEY_ADDRESS)    <span class="comment"># 指向key</span></span><br><span class="line">        mu.reg_write(UC_X86_REG_RBP, <span class="number">0x00F5FF38</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RSP, <span class="number">0x00F5FF28</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, <span class="number">0x00E55310</span>)</span><br><span class="line">        <span class="comment"># 添加代码执行钩子，特定事件下触发回调函数</span></span><br><span class="line">        mu.hook_add(UC_HOOK_CODE, <span class="variable language_">self</span>.trace)               <span class="comment"># 发生指令执行事件</span></span><br><span class="line">        mu.hook_add(UC_HOOK_MEM_READ, <span class="variable language_">self</span>.hook_mem_read)   <span class="comment"># 发生内存读取事件  </span></span><br><span class="line">        <span class="comment"># 初始化代码追踪过程中所需的参数</span></span><br><span class="line">        <span class="variable language_">self</span>.mu = mu</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        self.except_addr = 0</span></span><br><span class="line"><span class="string">        self.path = []        # 用来保存代码的跳转轨迹</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 初始化Capstone反汇编实例，设置架构和位数</span></span><br><span class="line">        <span class="variable language_">self</span>.md = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 回调函数1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trace</span>(<span class="params">self, mu, address, size, data</span>):</span><br><span class="line">        <span class="comment"># 追踪cmp或test指令，并打印其地址</span></span><br><span class="line">        disasm = <span class="variable language_">self</span>.md.disasm(mu.mem_read(address, size), address)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> disasm:</span><br><span class="line">            mnemonic = i.mnemonic</span><br><span class="line">            <span class="keyword">if</span> mnemonic == <span class="string">&#x27;cmp&#x27;</span> <span class="keyword">or</span> mnemonic == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;Instruction <span class="subst">&#123;mnemonic&#125;</span> at <span class="subst">&#123;<span class="built_in">hex</span>(address)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        # 判断是否发生了代码跳转，并记录跳转轨迹</span></span><br><span class="line"><span class="string">        if address != self.except_addr:</span></span><br><span class="line"><span class="string">            self.path.append(address)</span></span><br><span class="line"><span class="string">        self.except_addr = address + size</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 回调函数2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hook_mem_read</span>(<span class="params">self, mu, access, address, size, value, data</span>):</span><br><span class="line">        <span class="comment"># 追踪访问input或key的指令，并打印其地址</span></span><br><span class="line">        <span class="keyword">if</span> address &gt;= INPUT_ADDRESS <span class="keyword">and</span> address &lt;= INPUT_ADDRESS + <span class="number">41</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Read input[<span class="subst">&#123;address - INPUT_ADDRESS&#125;</span>] at <span class="subst">&#123;<span class="built_in">hex</span>(mu.reg_read(UC_X86_REG_RIP))&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> address &gt;= KEY_ADDRESS <span class="keyword">and</span> address &lt;= KEY_ADDRESS + <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Read key[<span class="subst">&#123;address - KEY_ADDRESS&#125;</span>] at <span class="subst">&#123;<span class="built_in">hex</span>(mu.reg_read(UC_X86_REG_RIP))&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 虚拟机启动函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.mu.emu_start(<span class="number">0x00E55310</span>, -<span class="number">1</span>)     <span class="comment"># 从RIP处启动</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        print([hex(addr)for addr in self.path])</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口点，传入flag</span></span><br><span class="line">unidbg_obj = Unidbg(<span class="string">b&#x27;...&#x27;</span>)</span><br><span class="line">unidbg_obj.start()</span><br></pre></td></tr></table></figure><p>接下来主要关注如何对使用Unicorn框架的程序进行分析</p><p>逆向（符号还原）：</p><ol><li>将Unicorn库文件（如unicorn.dll）拖入IDA，得到其IDA数据库文件（unicorn.dll.i64）</li><li>使用IDA的BinDiff插件，将当前程序与其比较，然后导入符号进前者<br><img src="/img/2024-6-23/27.jpg"></li></ol><p>逆向（获取参数含义）：<br>重点在于获取程序初始化Uc实例时，传入的参数的含义<br>可直接从Unicorn源码中获取该信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.\ANACONDA\Lib\site-packages\unicorn\include\unicorn</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Architecture type</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">uc_arch</span> &#123;</span></span><br><span class="line">UC_ARCH_ARM = <span class="number">1</span>, <span class="comment">// ARM architecture (including Thumb, Thumb-2)</span></span><br><span class="line">UC_ARCH_ARM64,   <span class="comment">// ARM-64, also called AArch64</span></span><br><span class="line">UC_ARCH_MIPS,    <span class="comment">// Mips architecture</span></span><br><span class="line">UC_ARCH_X86,     <span class="comment">// X86 architecture (including x86 &amp; x86-64)</span></span><br><span class="line">UC_ARCH_PPC,     <span class="comment">// PowerPC architecture</span></span><br><span class="line">UC_ARCH_SPARC,   <span class="comment">// Sparc architecture</span></span><br><span class="line">UC_ARCH_M68K,    <span class="comment">// M68K architecture</span></span><br><span class="line">UC_ARCH_RISCV,   <span class="comment">// RISCV architecture</span></span><br><span class="line">UC_ARCH_S390X,   <span class="comment">// S390X architecture</span></span><br><span class="line">UC_ARCH_TRICORE, <span class="comment">// TriCore architecture</span></span><br><span class="line">UC_ARCH_MAX,</span><br><span class="line">&#125; uc_arch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mode type</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">uc_mode</span> &#123;</span></span><br><span class="line">    UC_MODE_LITTLE_ENDIAN = <span class="number">0</span>,    <span class="comment">// little-endian mode (default mode)</span></span><br><span class="line">    UC_MODE_BIG_ENDIAN = <span class="number">1</span> &lt;&lt; <span class="number">30</span>, <span class="comment">// big-endian mode</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// arm / arm64</span></span><br><span class="line">    UC_MODE_ARM = <span class="number">0</span>,        <span class="comment">// ARM mode</span></span><br><span class="line">    UC_MODE_THUMB = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">// THUMB mode (including Thumb-2)</span></span><br><span class="line">    <span class="comment">// Depreciated, use UC_ARM_CPU_* with uc_ctl instead.</span></span><br><span class="line">    UC_MODE_MCLASS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,  <span class="comment">// ARM&#x27;s Cortex-M series.</span></span><br><span class="line">    UC_MODE_V8 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,      <span class="comment">// ARMv8 A32 encodings for ARM</span></span><br><span class="line">    UC_MODE_ARMBE8 = <span class="number">1</span> &lt;&lt; <span class="number">10</span>, <span class="comment">// Big-endian data and Little-endian code.</span></span><br><span class="line">                              <span class="comment">// Legacy support for UC1 only.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// arm (32bit) cpu types</span></span><br><span class="line">    <span class="comment">// Depreciated, use UC_ARM_CPU_* with uc_ctl instead.</span></span><br><span class="line">    UC_MODE_ARM926 = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,  <span class="comment">// ARM926 CPU type</span></span><br><span class="line">    UC_MODE_ARM946 = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,  <span class="comment">// ARM946 CPU type</span></span><br><span class="line">    UC_MODE_ARM1176 = <span class="number">1</span> &lt;&lt; <span class="number">9</span>, <span class="comment">// ARM1176 CPU type</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mips</span></span><br><span class="line">    UC_MODE_MICRO = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,    <span class="comment">// MicroMips mode (currently unsupported)</span></span><br><span class="line">    UC_MODE_MIPS3 = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,    <span class="comment">// Mips III ISA (currently unsupported)</span></span><br><span class="line">    UC_MODE_MIPS32R6 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>, <span class="comment">// Mips32r6 ISA (currently unsupported)</span></span><br><span class="line">    UC_MODE_MIPS32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,   <span class="comment">// Mips32 ISA</span></span><br><span class="line">    UC_MODE_MIPS64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,   <span class="comment">// Mips64 ISA</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ppc</span></span><br><span class="line">    UC_MODE_PPC32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// 32-bit mode</span></span><br><span class="line">    UC_MODE_PPC64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 64-bit mode (currently unsupported)</span></span><br><span class="line">    UC_MODE_QPX =</span><br><span class="line">        <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">// Quad Processing eXtensions mode (currently unsupported)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// riscv</span></span><br><span class="line">    UC_MODE_RISCV32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// 32-bit mode</span></span><br><span class="line">    UC_MODE_RISCV64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 64-bit mode</span></span><br><span class="line">&#125; uc_mode;</span><br></pre></td></tr></table></figure><h2 id="Intel-VT-x"><a href="#Intel-VT-x" class="headerlink" title="Intel VT-x"></a>Intel VT-x</h2><p>概述：<br>intel处理器的硬件虚拟化技术 简单拉来讲遵循如下运行逻辑：</p><ol><li>Guest OS每执行特殊指令、触发异常……等行为时，会产生 VM-Exit事件</li><li>Guest OS此时会将控制权转移给 Host OS</li><li>Guest OS中针对不同 Eixt-Reasons（退出码），转交给不同 VM-Exit Handler处理<br><img src="/img/2024-6-23/9.jpg"><br>对于进一步的细节实现，可以去翻阅intel白皮书的”Volume 3C”部分</li></ol><p>逆向：<br>和常规VM的分析比较类似，关键还是在于分析Guest OS中基于switch-case结构的退出码处理逻辑，<br>分析出各退出码所使用的Handler</p><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><p>概述：<br>一个跨平台的UI开发工具包，这里主要涉及其在Android平台下的逆向<br>通过查看apk如下部分，可以看出使用了Flutter<br><img src="/img/2024-6-23/7.jpg"></p><p>逆向（静态方法）：</p><ol><li>从apk中提取 ”&#x2F;lib&#x2F;arm64-v8a“文件夹</li><li>使用 Blutter，从libapp.so中解析 Dart虚拟机快照<br><img src="/img/2024-6-23/8.png"></li><li>IDA中，使用输出文件下的 “\ida_script\addNames.py”，对 libapp.so进行符号还原</li><li>libapp.so中，查看常用 事件处理回调函数，如 onSubmitted(),onTap()</li></ol><p>逆向（动态方法）：</p><ol><li>使用 reFlutter，编译修改过的 libflutter.so</li><li>重打包进apk，启动后 自动获取快照</li></ol><h1 id="特殊平台"><a href="#特殊平台" class="headerlink" title="特殊平台"></a>特殊平台</h1><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>有一说一，以Android的体量，完全可以单开一个系列来讲，而不是被贯以“特殊”的名号归并在这篇文章中<br>但鉴于CTF环境下的Android逆向，远没有实际场景中来的复杂，因此也就一并记录在这了<br>这里简单记录了仅在CTF环境下涉及的操作</p><h3 id="java层"><a href="#java层" class="headerlink" title="java层"></a>java层</h3><p>smali修改：</p><ol><li>jadx下，“Smali”面板中找到对应逻辑<br><img src="/img/2024-6-23/12.jpg"></li><li>apktool反编译apk</li><li>smali目录中找到 类的对应smali文件，<br><img src="/img/2024-6-23/13.png"><br>修改smali语句<br><img src="/img/2024-6-23/14.jpg"></li><li>apktool重打包文件夹，而后MT管理器重签名apk</li></ol><p>动调：</p><ol><li>adb连上模拟器<br><img src="/img/2024-6-23/15.png"></li><li>修改apk配置文件，将debuggable属性改为true（流程与修改smali类似）</li><li>模拟器上运行apk</li><li>jadx中选择要用的 adb，以及要附加的 模拟器上进程<br><img src="/img/2024-6-23/16.jpg"></li><li>此时可在Code界面选中要下断点的Java语句，<br><img src="/img/2024-6-23/17.png"><br>然后在Smali界面 查看其对应的Smali语句<br><img src="/img/2024-6-23/18.png"></li></ol><p>hook（native也通用）：</p><ol><li>adb连上模拟器</li><li>进入adb的shell，启动 frida-server</li><li>模拟器上运行apk</li><li>编写实现hook功能的js脚本<br><img src="/img/2024-6-23/23.jpg"></li><li>使用frida（Attach模式）对指定进程注入js脚本<br>此时进入frida交互式控制台，可在模拟器上与apk交互，本地cmd中查看输出<br><img src="/img/2024-6-23/24.png"></li></ol><p>脱一代落地壳：</p><ol><li>adb连上模拟器</li><li>进入adb的shell，启动 frida-server<br><img src="/img/2024-6-23/19.jpg"></li><li>模拟器上运行apk</li><li>使用frida-dexdump脱壳，<br><img src="/img/2024-6-23/20.png"></li></ol><h3 id="native层"><a href="#native层" class="headerlink" title="native层"></a>native层</h3><p>JNI方法分析：</p><ol><li>静态注册的：可以在IDA函数窗口中直接找到<br><img src="/img/2024-6-23/25.jpg"></li><li>动态注册的：需分析JNI_Onload()<br><img src="/img/2024-6-23/26.jpg"></li></ol><p>JNI方法名还原：<br>选中目标变量，修改类型为 JNIEnv*</p><p>动调（x86架构下的so）：</p><ol><li>adb连上模拟器</li><li>进入adb的shell，root启动 android_x64_server</li><li>设置 本地端口到模拟器端口的转发</li><li>模拟器上运行apk</li><li>IDA中，“Debugger-&gt;Switch debugger”窗口，选择 “Remote Linux debugger”<br>“Debugger-&gt;Process options”窗口，配置 Application,Hostname,Port<br><img src="/img/2024-6-23/22.jpg"><br>“Debugger-&gt;Attach to process”窗口，附加到模拟器上目标进程</li></ol><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>拿到的ipa和apk较为相似，本质上都是一个压缩包，要先对其解包<br>解包后就是与传统PE、ELF类似的逆向流程，无非此时的可执行格式是Mach-O</p><h2 id="HarmonyOS"><a href="#HarmonyOS" class="headerlink" title="HarmonyOS"></a>HarmonyOS</h2><p>近几年的新玩意，逆向需求相对较少，也因此目前市面上的逆向工具也相对稀少<br>目前还是使用基于jadx的 abc-decompiler，然后分析解包出来的abc文件</p><h2 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h2><p>.NET拥有自己独特的一套生态，其托管代码经编译器处理后，也以exe, dll的格式存在，但内部是 IL代码+元数据（这也是为什么.NET程序无法被IDA反编译）；接着IL代码在CLR（.NET运行时环境）中被即时编译为 Windows平台的机器码<br>综上，逆向过程主要面向IL代码，围绕dnSpy展开</p><h3 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h3><p>先从正向开发的角度，Unity有两种项目构建脚本：<br><img src="/img/2024-6-23/30.jpg"></p><ol><li>Mono2x：<br>将源码编译为IL代码，从而在运行时环境中执行；<br>构建生成 Assembly-CSharp.dll</li><li>IL2CPP：<br>将源码先编译为IL代码，然后转换成等效C++代码，最后编译为各平台机器码，从而直接执行；<br>构建不生成 Assembly-CSharp.dll，但会生成 GameAssembly.dll &#x2F; libil2cpp.so（Windows&#x2F;Android），以及 global-metadata.dat</li></ol><p>逆向（使用Mono2x构建）<br>直接从 Assembly-CSharp.dll入手</p><p>逆向（使用IL2CPP构建）：<br>从 GameAssembly.dll &#x2F; libil2cpp.so入手，但需先进行符号还原</p><ol><li>使用 Il2CppDumper，传入 GameAssembly.dll &#x2F; libil2cpp.so, global-metadata.dat，输出dump.cs, DummyDll, script.json, il2cpp.h 等文件<br>（global-metadata.dat等文件可能会存在被加密的情况，此时需要从内存中dump出解密后的）<br><img src="/img/2024-6-23/11.png"></li><li>IDA中，使用ida_with_struct_py3.py脚本，选择script.json, il2cpp.h，对GameAssembly.dll &#x2F; libil2cpp.so 进行符号还原</li></ol><h1 id="特殊架构"><a href="#特殊架构" class="headerlink" title="特殊架构"></a>特殊架构</h1><p>除了常规x86外，逆向过程中不免还要阅读ARM等架构下汇编</p><h2 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h2><h3 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h3><p>其实照理来说应该是IoT方向的事，但既然逆向过程中遇到了，就也一并记录下来了</p><p>逆向（识别）：</p><ol><li>bin文件扔进IDA，在跳出窗口“Processor type”栏中，指定基于 ARM架构进行反汇编</li><li>暂时跳过 RAM, ROM , Input file的基址和大小的填写<br><img src="/img/2024-6-23/4.jpg"></li><li>快捷键d 先后改动0x0, 0x4处数据 被识别的位数。此时0x0, 0x4处的四字节，分别是程序的栈基址、程序载入基址&#x2F;代码段基址<br><img src="/img/2024-6-23/5.png"></li><li>根据这两个四字节数据，大胆猜测RAM, ROM的基址</li><li>bin文件重新把扔进IDA。此时填入 前面猜测的基址信息<br><img src="/img/2024-6-23/6.jpg"></li><li>快捷键shift+end*3，选中从光标处到末尾的内容（全选），生成反汇编代码</li></ol><h3 id="Android-native"><a href="#Android-native" class="headerlink" title="Android native"></a>Android native</h3><p>见上方”Android”一栏</p><h2 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/Here-is-SG/p/15885799.html">https://www.cnblogs.com/Here-is-SG/p/15885799.html</a><br><a href="https://mrwq.github.io/aggregate-paper/butian/quickjs%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/">https://mrwq.github.io/aggregate-paper/butian/quickjs%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/</a><br><a href="https://tttang.com/archive/1550/#toc_0x00-bpf">https://tttang.com/archive/1550/#toc_0x00-bpf</a><br><a href="https://bbs.kanxue.com/thread-282785.htm#msg_header_h2_3">https://bbs.kanxue.com/thread-282785.htm#msg_header_h2_3</a><br><a href="https://blog.csdn.net/linxinfa/article/details/116572369">https://blog.csdn.net/linxinfa/article/details/116572369</a><br><a href="https://curz0n.github.io/2021/05/10/android-so-reverse/">https://curz0n.github.io/2021/05/10/android-so-reverse/</a><br><a href="https://s1lenc3-chenmo.github.io/2021/07/25/unicorn%E5%85%A5%E9%97%A8%E5%8F%8A%E5%BC%BA%E7%BD%91%E6%9D%AFunicorn-like-a-pro%E5%A4%8D%E7%8E%B0/">https://s1lenc3-chenmo.github.io/2021/07/25/unicorn%E5%85%A5%E9%97%A8%E5%8F%8A%E5%BC%BA%E7%BD%91%E6%9D%AFunicorn-like-a-pro%E5%A4%8D%E7%8E%B0/</a><br><a href="https://blog.csdn.net/jrl137824675/article/details/102616684">https://blog.csdn.net/jrl137824675/article/details/102616684</a><br><a href="https://www.52pojie.cn/thread-618515-1-1.html">https://www.52pojie.cn/thread-618515-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 专题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见保护手段</title>
      <link href="/2024/05/01/2024-5-1%20%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%89%8B%E6%AE%B5/"/>
      <url>/2024/05/01/2024-5-1%20%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%89%8B%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>这里对做题过程中遇到的保护手段 进行汇总，<br>旨在未来逆向过程中，可以更快速准确识别出特定保护手段，并为对抗提供思路</p><h1 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h1><p>原理：<br>源码中通过内联汇编添加”E8”等脏字节，干扰反汇编引擎</p><p>表现：</p><ol><li><p>jz+jnz：等效于jmp<br><img src="/img/2024-5-1/15.png"></p></li><li><p>add esp：用于破坏堆栈平衡</p></li><li><p>call $+n：用于获取EIP值</p></li></ol><h1 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h1><p>原理：</p><ol><li>使用VirtualProtect()等API，对内存页面进行操作</li><li>为其定义函数指针，再到程序里通过解密后函数指针的方式进行调用</li></ol><p>对抗：<br>动调后自行解码；或基于原程序解码逻辑，编写脚本自行解码</p><h1 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h1><h2 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h2><p>魔改原理:</p><ol><li>修改标识“UPX”</li><li>修改区段名“UPX1”“UPX2”……</li><li>修改ELF的overlay_offset字段值<br><img src="/img/2024-5-1/18.jpg"></li><li>去特征码，具体见此<a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=326995">文章</a>的(2)</li></ol><p>对抗：<br>恢复魔改部分，然后正常脱壳</p><h2 id="Nspack"><a href="#Nspack" class="headerlink" title="Nspack"></a>Nspack</h2><p>原理：</p><ol><li>初始化时保存各寄存器的值<br><img src="/img/2024-5-1/21.jpg"></li><li>对原程序各区块进行解密</li><li>恢复各寄存器值<br><img src="/img/2024-5-1/36.jpg"></li><li>跳转到原程序OEP<br><img src="/img/2024-5-1/20.jpg"></li></ol><p>对抗（动调寻找OEP）：</p><ol><li>单步分析法：单步执行，直到遇到“跳转到原程序OEP”的逻辑</li><li>ESP定律法：在程序进行“初始化时保存各寄存器的值”的逻辑时，对ESP指向的位置下硬件断点<br><img src="/img/2024-5-1/22.png"></li><li>一步直达法：直接搜索匹配“popad”指令，直到遇到“跳转到原程序OEP”的逻辑</li></ol><h2 id="Themida"><a href="#Themida" class="headerlink" title="Themida"></a>Themida</h2><p>对抗：<br>使用 unlicense脱壳</p><h1 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h1><h2 id="名称混淆"><a href="#名称混淆" class="headerlink" title="名称混淆"></a>名称混淆</h2><p>原理：<br>源码级别的混淆，通过更换函数名、变量名降低代码可读性</p><h2 id="OLLVM"><a href="#OLLVM" class="headerlink" title="OLLVM"></a>OLLVM</h2><p>原理：<br>基于LLVM编译器框架（将源码转换为中间表示IR，使用一系列Pass对其优化，而后在解释器中执行），<br>通过编写Pass对IR进行混淆，进而间接对最后生成的目标代码进行混淆</p><h3 id="控制流平坦化"><a href="#控制流平坦化" class="headerlink" title="控制流平坦化"></a>控制流平坦化</h3><p>表现：<br>IDA的 Graph view下，呈现如图所示的结构<br><img src="/img/2024-5-1/14.jpg"></p><p>对抗：<br>人工分析，或使用deflat.py脚本进行去平坦化</p><h3 id="指令替换"><a href="#指令替换" class="headerlink" title="指令替换"></a>指令替换</h3><h3 id="虚假控制流"><a href="#虚假控制流" class="headerlink" title="虚假控制流"></a>虚假控制流</h3><p>对抗：<br>人工分析，或使用debogus.py脚本去虚假控制流</p><h2 id="movfuscator"><a href="#movfuscator" class="headerlink" title="movfuscator"></a>movfuscator</h2><p>表现：<br>所有指令被等效替换为 mov指令<br><img src="/img/2024-5-1/19.jpg"></p><p>对抗：<br>虽然市面上有 demovfuscator解混淆器，但效果微乎其微<br>因此一般不会直接对汇编逻辑进行分析，而是从字符串、爆破等角度切入</p><h1 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h1><h2 id="INT3断点检测"><a href="#INT3断点检测" class="headerlink" title="INT3断点检测"></a>INT3断点检测</h2><h2 id="系统信息检测"><a href="#系统信息检测" class="headerlink" title="系统信息检测"></a>系统信息检测</h2><p>原理：<br>针对进程、文件、窗口等系统信息进行检测</p><h2 id="系统API"><a href="#系统API" class="headerlink" title="系统API"></a>系统API</h2><p>Windows下————</p><ol><li>NtQueryInformationProcess()</li><li>IsDebuggerPresent()</li><li>CheckRemoteDebuggerPresent()</li></ol><p>Linux————</p><ol><li>ptrace(PTRACE_TRACEME)</li><li>&#x2F;proc&#x2F;self&#x2F;status</li></ol><h2 id="自我创建"><a href="#自我创建" class="headerlink" title="自我创建"></a>自我创建</h2><p>原理：</p><ol><li>获取当前可执行文件的路径</li><li>以挂起的模式（4u: CREATE_SUSPENDED）创建子进程</li><li>修改子进程的主线程 的上下文</li><li>恢复子进程，从而让其执行</li><li>等待子进程结束</li><li>关闭子进程，以及其主线程<br><img src="/img/2024-5-1/10.jpg"></li></ol><p>对抗（跟踪子进程调试）：</p><ol><li>IDA中，先找到子进程开始的位置，获取其Hex值，然后在文件中 通过Hex定位到该处<br><img src="/img/2024-5-1/1.png"></li><li>将其首个Hex改为“CC”，用于后续 触发异常<br><img src="/img/2024-5-1/2.png"></li><li>将调试器设置为 JIT调试器<br>对于Ollydbg————<br><img src="/img/2024-5-1/3.jpg"><br>对于x64dbg————<br><img src="/img/2024-5-1/4.jpg"></li><li>程序扔进调试器，运行至 ResumeThread()，单步步过。此时异常触发，当前调试器 作为JIT调试器，被系统自动调用，附加到子进程上</li><li>将”CC“处复原</li></ol><h2 id="天堂之门"><a href="#天堂之门" class="headerlink" title="天堂之门"></a>天堂之门</h2><p>原理：</p><ol><li>Windows机制————WoW64子系统<br>WoW64下，32位程序在加载32位dll的同时，也加载64位dll；64位dll中，wow64.dll，wow64win.dll，wow64cpu.dll负责环境转换，ntdll.dll负责最终与内核交互。可以说，x86环境是WoW64”模拟”出来的.对于x86程序，woW64就相当于其内核</li><li>CPU工作模式————长模式<br><img src="/img/2024-5-1/37.png"><br>因此在汇编层面通常会具有如下表现<br><img src="/img/2024-5-1/5.jpg"></li></ol><p>对抗：<br>dump出异架构下的机器码，单独分析逻辑<br>可使用Capstone等工具查看反汇编</p><h2 id="Debug-Blocker"><a href="#Debug-Blocker" class="headerlink" title="Debug Blocker"></a>Debug Blocker</h2><p>原理：<br>Windows下————</p><ol><li>使用Mutex区分父子进程<br><img src="/img/2024-5-1/8.jpg"></li><li>子进程在被调试过程中抛出异常</li><li>父进程在循环中不断接收调试事件，并基于异常码 对子进程进行特定处理<br><img src="/img/2024-5-1/9.jpg"></li></ol><p>Linux下————<br><img src="/img/2024-5-1/11.png"></p><h1 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h1><p>原理：<br>循环读取bytecode，并基于其中的opcode，调用指定的Handler进行处理<br><img src="/img/2024-5-1/13.jpg"></p><p>对抗：<br>分析出各Handler实现的功能，并手写解释器，打印出字节码对应的汇编指令</p><h2 id="寄存器式"><a href="#寄存器式" class="headerlink" title="寄存器式"></a>寄存器式</h2><h2 id="栈式"><a href="#栈式" class="headerlink" title="栈式"></a>栈式</h2><h1 id="逻辑隐藏"><a href="#逻辑隐藏" class="headerlink" title="逻辑隐藏"></a>逻辑隐藏</h1><p>这块严格来讲不算保护手段，但介于部分逻辑所在位置较为隐蔽，对逆向过程产生了一定干扰，因此也一并记录在这了</p><h2 id="文件机制"><a href="#文件机制" class="headerlink" title="文件机制"></a>文件机制</h2><h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><h3 id="init-array"><a href="#init-array" class="headerlink" title=".init_array"></a>.init_array</h3><p>原理：<br>一个存储初始化函数的指针 的数组，程序启动时被自动调用，先于main()执行，用于执行一些初始化操作，如全局变量的初始化<br><img src="/img/2024-5-1/32.jpg"></p><h3 id="data-rsrc"><a href="#data-rsrc" class="headerlink" title=".data&#x2F;.rsrc"></a>.data&#x2F;.rsrc</h3><p>原理：<br>将可执行文件嵌在程序的 数据段、资源段，而后释放出来</p><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><h3 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h3><p>原理：</p><ol><li>构造 跳转至钩子函数的 jmp语句（构造操作码、计算操作数）<br><img src="/img/2024-5-1/24.png"></li><li>使用VirtualProtectEx(), WriteProcessMemory()，将目标函数 内存区域的最前端 用jmp语句覆盖<br><img src="/img/2024-5-1/25.png"></li><li>保存 目标函数内存区域 最前端的数据<br><img src="/img/2024-5-1/26.png"></li><li>钩子函数内，使用VirtualProtectEx(), WriteProcessMemory()，将目标函数的内存区域复原（脱钩）<br><img src="/img/2024-5-1/27.png"></li></ol><h3 id="IAT-Hook"><a href="#IAT-Hook" class="headerlink" title="IAT Hook"></a>IAT Hook</h3><p>原理：</p><ol><li>获取当前进程的句柄<br><img src="/img/2024-5-1/28.png"></li><li>将目标dll载入内存，并获取目标API的地址<br><img src="/img/2024-5-1/29.png"></li><li>找到IAT中 存储着目标API地址 的位置，用Hook函数的地址 覆盖掉<br><img src="/img/2024-5-1/30.jpg"></li></ol><h3 id="GOT-Hook"><a href="#GOT-Hook" class="headerlink" title="GOT Hook"></a>GOT Hook</h3><h3 id="VFT-Hook"><a href="#VFT-Hook" class="headerlink" title="VFT Hook"></a>VFT Hook</h3><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h3><p>原理：</p><ol><li>__try{}</li><li>__except filter：检查异常码，并根据检查结果设置返回值<br>__except：包含具体异常处理程序，逻辑被隐藏于此</li><li>__finally<br><img src="/img/2024-5-1/35.jpg"></li></ol><p>对抗（伪代码下显示__except逻辑）：        </p><ol><li>__try{}中会触发异常的语句，patch成 jmp到__except的语句<br><img src="/img/2024-5-1/33.png"></li><li>__except中首个语句，patch成 nop<br><img src="/img/2024-5-1/34.png"></li></ol><h3 id="VEH"><a href="#VEH" class="headerlink" title="VEH"></a>VEH</h3><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>原理：</p><ol><li>抛出异常时，将会读取ELF .eh_frame段中的异常处理信息（DWARF格式，也属于调试信息），从而进行栈展开</li><li>此时会执行隐藏在 DWARF Expression中的代码<br><img src="/img/2024-5-1/31.png"><br>具体见此篇<a href="https://bbs.kanxue.com/thread-271891.htm">文章</a></li></ol><h2 id="傀儡进程"><a href="#傀儡进程" class="headerlink" title="傀儡进程"></a>傀儡进程</h2><p>原理：</p><ol><li>CreateProcess()以挂起形式创建一个进程</li><li>GetThreadContext()获取进程CONTEXT</li><li>ZwUnmapViewOfSection()卸载进程内存映像</li><li>VirtualAlloc()分配内存空间</li><li>WriteProcessMemory()将恶意代码写入分配的内存</li><li>SetThreadContext()设置进程CONTEXT</li><li>ResumeThread()唤醒进程，在新内存映像下运行</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/14625?time__1311=GqAhYK0KBKAK7KDsD7+vPiIuqmunhli7oD">https://xz.aliyun.com/t/14625?time__1311=GqAhYK0KBKAK7KDsD7%2BvPiIuqmunhli7oD</a><br><a href="https://mabin004.github.io/2018/08/23/ollvm%E5%AD%A6%E4%B9%A0/">https://mabin004.github.io/2018/08/23/ollvm%E5%AD%A6%E4%B9%A0/</a><br><a href="https://www.cnblogs.com/Un1corn/p/18442445">https://www.cnblogs.com/Un1corn/p/18442445</a><br><a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=326995">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=326995</a><br><a href="https://bbs.kanxue.com/thread-272871.htm">https://bbs.kanxue.com/thread-272871.htm</a><br><a href="https://bbs.kanxue.com/thread-270153.htm">https://bbs.kanxue.com/thread-270153.htm</a><br><a href="https://blog.csdn.net/hurricane_0x01/article/details/52184318?locationNum=13&fps=1">https://blog.csdn.net/hurricane_0x01/article/details/52184318?locationNum=13&amp;fps=1</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 专题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见加密算法</title>
      <link href="/2024/04/17/2024-4-17%20%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2024/04/17/2024-4-17%20%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这里对做题过程中遇到的常见算法 进行汇总，<br>从其参数特征、大致原理、代码实现等方面进行粗略总结，<br>旨在未来逆向过程中，可以更快速准确识别出特定算法（及其魔改），并为解密提供思路</p><h1 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h1><h2 id="流加密"><a href="#流加密" class="headerlink" title="流加密"></a>流加密</h2><h3 id="ROT"><a href="#ROT" class="headerlink" title="ROT"></a>ROT</h3><p>大致原理：字母回转替换式<br>类型：ROT5、ROT13、ROT18、ROT47</p><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><p>大致原理：</p><ol><li>KSA&#x2F;初始化S盒<br><img src="/img/2024-4-17/2.jpg"></li><li>PRGA&#x2F;生成密文<br><img src="/img/2024-4-17/3.jpg"></li></ol><p>参数特征：</p><ol><li>key（长度不限）、S盒（256字节）</li><li>明文（长度不限）</li></ol><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_encrypt</span>(<span class="params">key, data</span>):</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        out.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(char) ^ k))  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;SecretKey&quot;</span></span><br><span class="line">data = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">encrypted_data = rc4_encrypt(<span class="built_in">bytes</span>(key, <span class="string">&#x27;utf-8&#x27;</span>), data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted Data:&quot;</span>, encrypted_data)</span><br></pre></td></tr></table></figure><p>解密实现：<br>解密逻辑与加密逻辑相同，因此将密文扔进行加密逻辑 即可获取明文</p><h3 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h3><p>参数特征：</p><ol><li>明文（长度不限）</li><li>key（16字节）</li></ol><h3 id="ChaCha20"><a href="#ChaCha20" class="headerlink" title="ChaCha20"></a>ChaCha20</h3><h2 id="块加密"><a href="#块加密" class="headerlink" title="块加密"></a>块加密</h2><h3 id="TEA-XTEA"><a href="#TEA-XTEA" class="headerlink" title="TEA &amp; XTEA"></a>TEA &amp; XTEA</h3><p>代码实现：<br>见此<a href="https://blog.csdn.net/zhuguanlin121/article/details/122829415?ops_request_misc=&request_id=&biz_id=102&utm_term=TEA%E8%A7%A3%E5%AF%86&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-122829415.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">文章</a></p><h3 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h3><p>大致原理：<br><img src="/img/2024-4-17/4.jpg"></p><p>参数特征：</p><ol><li>明文（int数组，长度不限）</li><li>key（int数组，长度为4）</li></ol><p>代码实现：<br>见此<a href="https://blog.csdn.net/zhuguanlin121/article/details/122829415?ops_request_misc=&request_id=&biz_id=102&utm_term=TEA%E8%A7%A3%E5%AF%86&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-122829415.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">文章</a></p><h3 id="AES-128"><a href="#AES-128" class="headerlink" title="AES-128"></a>AES-128</h3><p>大致原理：<br><img src="/img/2024-4-17/5.jpg"></p><ol><li>涉及sbox的 密钥扩展</li><li>9+1轮的 加密主体<br><img src="/img/2024-4-17/6.jpg"></li></ol><p>参数特征：</p><ol><li>key（16字节）</li><li>明文块（16字节）、扩展key（44字节）</li></ol><p>代码实现：<br>见此<a href="https://blog.csdn.net/weixin_51732593/article/details/128516206?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-128516206-blog-121461373.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-128516206-blog-121461373.235%5Ev43%5Econtrol&utm_relevant_index=5">文章</a></p><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><p>大致原理：<br><img src="/img/2024-4-17/22.jpg"></p><p>参数特征：</p><ol><li>明文块（8字节）</li><li>key（8字节）</li></ol><p>代码实现：<br>见此<a href="https://blog.csdn.net/Sciurdae/article/details/134031995">文章</a></p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>大致原理：<br><img src="/img/2024-4-17/23.jpg"></p><p>解密实现：</p><ol><li>找到加密运算中的指数，即为公钥E</li><li>找到加密运算中的模数，即为质数乘积N</li><li>找到加密运算中的密文C</li><li>使用yafu工具，找到生成N的两个质数p, q<br><img src="/img/2024-4-17/7.png"></li><li>通过公式(p-1)(q-1)，算出欧拉函数值T</li><li>使用gmpy2库，通过T, E找到私钥D</li><li>使用gmpy2库，通过D, N将C转换为明文M<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥</span></span><br><span class="line">E = </span><br><span class="line"></span><br><span class="line"><span class="comment"># 质数乘积N</span></span><br><span class="line">N = </span><br><span class="line"></span><br><span class="line"><span class="comment">#密文(Hex/Decimal)</span></span><br><span class="line">C = </span><br><span class="line"></span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">T = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">D = gmpy2.invert(E, T)</span><br><span class="line"></span><br><span class="line">M = gmpy2.powmod(C, D, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(M)[<span class="number">2</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><h3 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h3><p>大致原理：</p><ol><li>传入key，<br><img src="/img/2024-4-17/8.png"><br>先后使用FK,CK 进行密钥扩展<br><img src="/img/2024-4-17/9.png"></li><li>传入明文块，<br><img src="/img/2024-4-17/10.png"><br>进行加密，<br><img src="/img/2024-4-17/11.png"><br>其中————<br>先是 S盒替换（非线性变换）<br><img src="/img/2024-4-17/12.jpg"><br>然后是 移位和异或（线性变换）<br><img src="/img/2024-4-17/13.jpg"><br>最后是 轮密钥加（当前轮密钥与中间结果异或）<br><img src="/img/2024-4-17/14.png"></li></ol><p>参数特征：</p><ol><li>key（16字节）</li><li>明文块（16字节）</li></ol><p>轮次特征：</p><ol><li>4+32</li><li>4+32+4</li></ol><p>代码实现：<br>见此<a href="https://www.cnblogs.com/kentle/p/14135865.html">文章</a></p><h3 id="Blowfish"><a href="#Blowfish" class="headerlink" title="Blowfish"></a>Blowfish</h3><p>大致原理：</p><ol><li>基于key，生成子密钥sbox, pbox<br><img src="/img/2024-4-17/15.png"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 16</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">BLOWFISH_CTX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> pbox[N + <span class="number">2</span>];  </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sbox[<span class="number">4</span>][<span class="number">256</span>];</span><br><span class="line">&#125;BLOWFISH_CTX,*PBLOWFISH_CTX;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">BlowFishInit</span><span class="params">(BLOWFISH_CTX* blowCtx, <span class="type">unsigned</span> <span class="type">char</span> * key, <span class="type">unsigned</span> <span class="type">int</span> keylen)</span></span><br><span class="line">&#123;                                            </span><br><span class="line">    <span class="comment">//1.初始化S盒</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> Row = <span class="number">0</span>; Row &lt; <span class="number">4</span>; Row++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> Col = <span class="number">0</span>; Col &lt; <span class="number">256</span>; Col++)</span><br><span class="line">        &#123;</span><br><span class="line">            blowCtx-&gt;sbox[Row][Col] = ORIG_S[Row][Col];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化P盒：</span></span><br><span class="line">    <span class="type">int</span> KeyIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt; N + <span class="number">2</span>; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            data = (data &lt;&lt; <span class="number">8</span>) | key[KeyIndex];</span><br><span class="line">            KeyIndex++;</span><br><span class="line">            <span class="keyword">if</span> (KeyIndex &gt;= keylen)</span><br><span class="line">                KeyIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        blowCtx-&gt;pbox[index] = ORIG_P[index] ^ data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.加密P盒</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Data1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Data2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N + <span class="number">2</span>; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BlowFish_Encry(blowCtx, &amp;Data1, &amp;Data2);</span><br><span class="line">        blowCtx-&gt;pbox[i] = Data1;</span><br><span class="line">        blowCtx-&gt;pbox[i+<span class="number">1</span>] = Data2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.加密S盒</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BlowFish_Encry(blowCtx, &amp;Data1, &amp;Data2);</span><br><span class="line">            blowCtx-&gt;sbox[i][j] = Data1;</span><br><span class="line">            blowCtx-&gt;sbox[i][j + <span class="number">1</span>] = Data2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>环读取每个明文块，进行加密<br><img src="/img/2024-4-17/16.jpg"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BlowFish_Encry</span><span class="params">(PBLOWFISH_CTX blowCtx, <span class="type">unsigned</span> <span class="type">int</span>* left, <span class="type">unsigned</span> <span class="type">int</span>* right)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>  Xl;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>  Xr;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>  temp;</span><br><span class="line">    <span class="type">short</span>       i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入数据的前4字节、后4字节</span></span><br><span class="line">    Xl = *left;</span><br><span class="line">    Xr = *right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始置换的16轮加密</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        Xl = Xl ^ blowCtx-&gt;pbox[i];</span><br><span class="line">        Xr = F(blowCtx, Xl) ^ Xr;</span><br><span class="line"></span><br><span class="line">        temp = Xl;</span><br><span class="line">        Xl = Xr;</span><br><span class="line">        Xr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终置换</span></span><br><span class="line">    temp = Xl;</span><br><span class="line">    Xl = Xr;                         </span><br><span class="line">    Xr = temp;</span><br><span class="line"></span><br><span class="line">    Xr = Xr ^ blowCtx-&gt;pbox[N];             </span><br><span class="line">    Xl = Xl ^ blowCtx-&gt;pbox[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    *left = Xl;</span><br><span class="line">    *right = Xr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中的F函数<br><img src="/img/2024-4-17/17.png"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">F</span><span class="params">(BLOWFISH_CTX* ctx, <span class="type">unsigned</span> <span class="type">long</span> x)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> a, b, c, d;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>  y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分割输入</span></span><br><span class="line">    a = (x &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    b = (x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    c = (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFf</span>;</span><br><span class="line">    d = x &amp; <span class="number">0xFF</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//替换c操作</span></span><br><span class="line">    y = ctx-&gt;sbox[<span class="number">0</span>][a] + ctx-&gt;sbox[<span class="number">1</span>][b];</span><br><span class="line">    y = y ^ ctx-&gt;sbox[<span class="number">2</span>][c];</span><br><span class="line">    y = y + ctx-&gt;sbox[<span class="number">3</span>][d];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>参数特征：</p><ol><li>key（16字节）</li><li>明文块（8字节）</li></ol><p>轮次特征：</p><ol><li>18 + 4*256</li><li>16</li></ol><h1 id="编码算法"><a href="#编码算法" class="headerlink" title="编码算法"></a>编码算法</h1><h2 id="Base8"><a href="#Base8" class="headerlink" title="Base8"></a>Base8</h2><p>大致原理：<br>每3位（3&#x2F;8字节）转换为 1字节</p><h2 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h2><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>大致原理：<br><img src="/img/2024-4-17/18.jpg"></p><h2 id="Base85"><a href="#Base85" class="headerlink" title="Base85"></a>Base85</h2><h1 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h1><h2 id="MD2"><a href="#MD2" class="headerlink" title="MD2"></a>MD2</h2><p>轮次特征：<br>16 + 18*48</p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>大致原理：<br><img src="/img/2024-4-17/24.jpg"></p><ol><li>开头 初始化四个32位变量（0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476）</li><li>结尾 输出128位的哈希值&#x2F;Hex<br><img src="/img/2024-4-17/19.jpg"></li></ol><p>解密实现（在线解密网站）：<br><a href="https://www.somd5.com/">https://www.somd5.com/</a><br><a href="https://www.cmd5.com/">https://www.cmd5.com</a><br><a href="https://hashes.com/zh/decrypt/hash">https://hashes.com/zh/decrypt/hash</a></p><h2 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h2><p>大致原理：<br><img src="/img/2024-4-17/25.jpg"></p><ol><li>开头 初始化五个32位哈希值（0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0）</li><li>中间 共四阶段的处理（每阶段使用一个32位常量K，循环20次）</li><li>结尾 更新五个32位哈希值<br><img src="/img/2024-4-17/20.png"></li></ol><h2 id="SHA-256"><a href="#SHA-256" class="headerlink" title="SHA-256"></a>SHA-256</h2><p>大致原理：</p><ol><li>开头 初始化八个32位哈希值（0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19）</li><li>结尾 更新八个32位哈希值</li></ol><h2 id="CRC32"><a href="#CRC32" class="headerlink" title="CRC32"></a>CRC32</h2><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_crc_table</span>():</span><br><span class="line">    poly = <span class="number">0xEDB88320</span></span><br><span class="line">    crc_table = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        crc = i</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> crc &amp; <span class="number">1</span>:</span><br><span class="line">                crc = (crc &gt;&gt; <span class="number">1</span>) ^ poly</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                crc &gt;&gt;= <span class="number">1</span></span><br><span class="line">        crc_table.append(crc)</span><br><span class="line">    <span class="keyword">return</span> crc_table</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc32</span>(<span class="params">data</span>):</span><br><span class="line">    crc_table = generate_crc_table()</span><br><span class="line">    crc = <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        crc = (crc &gt;&gt; <span class="number">8</span>) ^ crc_table[(crc &amp; <span class="number">0xFF</span>) ^ byte]</span><br><span class="line">    <span class="keyword">return</span> crc ^ <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;Hello, World!&quot;</span></span><br><span class="line">crc32_value = crc32(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;CRC32 Value: <span class="subst">&#123;crc32_value:08X&#125;</span>&quot;</span>) </span><br></pre></td></tr></table></figure><h1 id="压缩算法"><a href="#压缩算法" class="headerlink" title="压缩算法"></a>压缩算法</h1><h2 id="Huffman"><a href="#Huffman" class="headerlink" title="Huffman"></a>Huffman</h2><p>大致原理：<br><a href="https://www.bilibili.com/video/BV1qu411F7Zs/?spm_id_from=333.337.search-card.all.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">见此视频</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 专题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向工具使用</title>
      <link href="/2024/03/17/2024-3-17%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/03/17/2024-3-17%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>说来惭愧，逆向过程中经常打断我思路的一点，莫过于一下想不起来逆向工具中 某个功能、某个操作在哪里使用、怎么使用。然后要么一个个点过去尝试，要么网上的帖子一篇篇找过去，实在是有点麻烦。<br>虽说这和使用熟练度脱不开干系，不过既然想到了，那就干脆一劳永逸地汇总到一篇去，用到的时候方便查看</p><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="快捷键类"><a href="#快捷键类" class="headerlink" title="快捷键类"></a>快捷键类</h2><ol><li><p>c：生成汇编<br><img src="/img/2024-3-17/4.jpg"><br>对于无法生成的情况————<br>1）快捷键d，将前几个db 改为dd&#x2F;dq<br>2）以其为首个元素，将后续转换为Array<br>3）此时可正常生成汇编</p></li><li><p>g：跳到指定地址查看</p></li><li><p>n：重命名</p></li><li><p>p：定义为函数<br><img src="/img/2024-3-17/5.png"></p></li><li><p>r：以char类型显示数据</p></li><li><p>space：Text view、Graph view间切换</p></li><li><p>u：取消原先定义的汇编<br><img src="/img/2024-3-17/3.jpg"></p></li><li><p>x：查看交叉引用</p></li><li><p>y：更改变量类型</p></li><li><p>alt+t：文本搜索<br><img src="/img/2024-3-17/6.png"></p></li><li><p>alt+b：二进制搜索<br><img src="/img/2024-3-17/7.png"></p></li><li><p>ctrl+e：查看所有入口点</p></li><li><p>ctrl+s：查看所有段信息</p></li><li><p>shift+e：dump<br><img src="/img/2024-3-17/1.png"></p></li></ol><h2 id="非快捷键类"><a href="#非快捷键类" class="headerlink" title="非快捷键类"></a>非快捷键类</h2><ol><li>ELF动调：<br>1）kali上启动 linux_server<br>2）ELF放入kali<br>3）选择“Remote Linux debugger”连接 linux_server<br><img src="/img/2024-3-17/8.png"></li><li>下特殊断点：<br>1）选中汇编语句，先f2下软件断点<br>2）右键选择“Edit breakpoint…”，在“Breakpoint settings”中进行编辑<br>3）硬件断点：勾选“Hardware”<br>条件断点：“Condition”栏中输入<br>内存断点（基于硬件断点）：勾选“Read”&#x2F;“Write”</li><li>加载新的类型库：“View-&gt;Open subviews-&gt;Type libraries”窗口中，右键打开 ”Load type library…“</li><li>数据块转换为数组<br><img src="/img/2024-3-17/9.png"></li><li>基于汇编进行patch<br><img src="/img/2024-3-17/10.jpg"></li><li>开启代码追踪，<br><img src="/img/2024-3-17/11.jpg"><br>并导出追踪结果<br><img src="/img/2024-3-17/12.png"></li><li>设置调试器对于各异常的处理方式<br><img src="/img/2024-3-17/13.png"></li><li>对于dump出的x64机器码，以x64格式解析<br>1）将字符串转换为Hex（”E8”-&gt; 0xE8）<br>2）扔进IDA，以“Binary file”载入，以“64-bit mode”反汇编<br><img src="/img/2024-3-17/14.png"></li><li>动调时Text view下显示机器码<br><img src="/img/2024-3-17/16.jpg"></li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>“align”指令：用于指示内存对齐</li><li>BYTE,WORD提取宏：<br>1）BYTEn()：提取第n个BYTE（从右到左，从低地址到高地址）<br>LOBYTE() -&gt; BYTE0()<br>HIBYTE() -&gt; BYTE1()<br>2）WORDn() 提取第n个WORD<br>LOWORD() -&gt; WORD0()<br>HIWORD() -&gt; WORD1()</li><li>“retaddr”指针变量：指向此函数的返回处<br><img src="/img/2024-3-17/15.jpg"></li><li>交叉引用窗口Type列：<br>1）w：Write<br>2）r：Read<br>3）p：Procedure call<br>4）o：Other<br><img src="/img/2024-3-17/27.jpg"></li></ol><h1 id="OllyDbg"><a href="#OllyDbg" class="headerlink" title="OllyDbg"></a>OllyDbg</h1><h2 id="快捷键类-1"><a href="#快捷键类-1" class="headerlink" title="快捷键类"></a>快捷键类</h2><ol><li><p>f2：下软件断点</p></li><li><p>ctrl+f2：重新运行程序</p></li><li><p>f9：运行到断点处</p></li><li><p>f7：单步步入</p></li><li><p>f8：单步步过</p></li><li><p>alt+t：打开内存镜像</p></li><li><p>ctrl+g：查看指定地址处的汇编</p></li></ol><h2 id="非快捷键类-1"><a href="#非快捷键类-1" class="headerlink" title="非快捷键类"></a>非快捷键类</h2><ol><li>查找字符串：右键-&gt;中文搜索引擎-&gt;搜索ASCII-&gt;ctrl+f-&gt;双击</li></ol><h1 id="x64dbg"><a href="#x64dbg" class="headerlink" title="x64dbg"></a>x64dbg</h1><h2 id="快捷键类-2"><a href="#快捷键类-2" class="headerlink" title="快捷键类"></a>快捷键类</h2><ol><li>ctrl+p：补丁功能，生成patch后的文件</li><li>ctrl+g：查看指定API</li></ol><h2 id="非快捷键类-2"><a href="#非快捷键类-2" class="headerlink" title="非快捷键类"></a>非快捷键类</h2><ol><li>dump<br><img src="/img/2024-3-17/17.jpg"></li><li>ScyllaHide插件<br><img src="/img/2024-3-17/21.png"><br>1）r3层反调试绕过<br><img src="/img/2024-3-17/22.jpg"><br>2）dll注入<br>3）附进程调试</li><li>运行到某API刚调用完它的位置：<br>1）ctrl+g定位该函数入口处，下断点<br>2）f9运行到该处<br>3）ctrl+f9运行到返回（ret指令）<br>4）继续单步，即可来到 刚调用完该API的位置<br><img src="/img/2024-3-17/26.png"></li></ol><h1 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h1><h2 id="命令类"><a href="#命令类" class="headerlink" title="命令类"></a>命令类</h2><ol><li>b&#x2F;break：<br><img src="/img/2024-3-17/25.jpg"></li></ol><h2 id="非命令类"><a href="#非命令类" class="headerlink" title="非命令类"></a>非命令类</h2><ol><li>跟踪子进程调试 实现<br><img src="/img/2024-3-17/23.png"></li><li>dump：<br>1）“pgrep -x <ELF>”<br>2）“cat &#x2F;proc&#x2F;<pid>&#x2F;maps”<br>3）“gdb attach <pid>”<br>4）“dump memory &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;memory.dump <start_address> <end_address>” </li><li>修改寄存器值<br><img src="/img/2024-3-17/24.png"></li></ol><h1 id="dnSpy"><a href="#dnSpy" class="headerlink" title="dnSpy"></a>dnSpy</h1><h2 id="非快捷键类-3"><a href="#非快捷键类-3" class="headerlink" title="非快捷键类"></a>非快捷键类</h2><ol><li>打开“程序集资源管理器”<br><img src="/img/2024-3-17/18.jpg"></li><li>全局查找字符串<br><img src="/img/2024-3-17/19.png"></li><li>获取资源数据(Resources.xxx)<br><img src="/img/2024-3-17/20.jpg"></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse 专题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 汇编语言程序</title>
      <link href="/2023/11/09/2023-11-9%20%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/11/09/2023-11-9%20%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>本系列为《汇编语言（第3版）》的个人阅读笔记，<br>期间使用的图片摘自b站视频<a href="https://www.bilibili.com/video/BV1Wu411B72F/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">《通俗易懂的汇编语言（王爽老师的书）》</a></p><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><p>•介绍<br><img src="/img/2023-11-9/1.jpg"><br>•包含<br>&#x2F;&#x2F;控制权返还，内存释放<br><img src="/img/2023-11-9/2.jpg"></p><h2 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h2><p>•介绍<br><img src="/img/2023-11-9/3.jpg"><br>•包含<br>&#x2F;&#x2F;段定义<br><img src="/img/2023-11-9/4.jpg"><br>&#x2F;&#x2F;段与段寄存器关联建立：assume<br><img src="/img/2023-11-9/5.jpg"><br>&#x2F;&#x2F;程序结束标记：end<br><img src="/img/2023-11-9/6.jpg"><br>&#x2F;&#x2F;段内数据定义<br><img src="/img/2023-11-9/7.jpg"></p><h1 id="从编写到执行"><a href="#从编写到执行" class="headerlink" title="从编写到执行"></a>从编写到执行</h1><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><h2 id="编译与链接"><a href="#编译与链接" class="headerlink" title="编译与链接"></a>编译与链接</h2><p><img src="/img/2023-11-9/8.jpg"></p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>•DOS正常执行<br>&#x2F;&#x2F;介绍<br><img src="/img/2023-11-9/9.jpg"><br>&#x2F;&#x2F;演示<br><img src="/img/2023-11-9/10.jpg"></p><p>•Debug跟踪<br>&#x2F;&#x2F;介绍<br><img src="/img/2023-11-9/11.jpg"><br>&#x2F;&#x2F;演示<br>1＞将程序加载入内存中，并查看其在内存中的具体位置<br><img src="/img/2023-11-9/12.jpg"><br>2＞单步执行程序，查看每次过后寄存器的情况<br><img src="/img/2023-11-9/13.jpg"></p><h1 id="段的使用"><a href="#段的使用" class="headerlink" title="段的使用"></a>段的使用</h1><p>对于段本身的位置：<br>在汇编语言中，各类段的段地址通常由系统自动分配和确定，用户无需手动指定段地址</p><h2 id="基础使用方式"><a href="#基础使用方式" class="headerlink" title="基础使用方式"></a>基础使用方式</h2><h3 id="一般框架下"><a href="#一般框架下" class="headerlink" title="一般框架下"></a>一般框架下</h3><p>•概述<br><img src="/img/2023-11-9/14.jpg"><br>注：有时候，数据、代码和栈并非会严格分开存储，代码段中也可以有数据、栈</p><p>•演示<br>&#x2F;&#x2F;代码段中使用数据<br><img src="/img/2023-11-9/15.jpg"><br>注：<br>1.这里的代码段分为数据部分和代码部分。数据部分用于数据定义，是从该代码段的[0]处开始存储；<br>代码部分存储在其下方。<br><img src="/img/2023-11-9/16.jpg"><br>2.在代码部分的前后添加“start:”“start”，是为了指明代码开始位置(程序入口)，<br>使系统在识别时，CS:IP指向正确地址，从而不会把数据部分当作代码<br><img src="/img/2023-11-9/17.jpg"></p><p>&#x2F;&#x2F;代码段中使用栈<br><img src="/img/2023-11-9/18.jpg"></p><h3 id="复杂框架下"><a href="#复杂框架下" class="headerlink" title="复杂框架下"></a>复杂框架下</h3><p>•概述<br>注：在大部分复杂情况下，为了程序结构更清晰,数据、代码和栈还是选择分开存放在数据段、代码段和栈段中</p><p>•演示<br>&#x2F;&#x2F;数据, 代码, 栈放入各自的段<br><img src="/img/2023-11-9/19.jpg"><br>注：<br>1.代码段开始出现了 包含栈段名“stack”、数据段名“data” 的赋值语句，其含义特殊<br><img src="/img/2023-11-9/20.jpg"><br>2.“stack”会被解析为栈段的段地址，然后被存入SS中；同理，“data”会被解析为数据段的段地址，被存入DS中<br>3.这可理解为是一个 在代码段中初始化各个段寄存器 的操作。<br>接下来，用户需要在内存中定位信息时，无需知道其具体段地址，只用引用段前缀即可</p><h2 id="在模块化程序下"><a href="#在模块化程序下" class="headerlink" title="在模块化程序下"></a>在模块化程序下</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="/img/2023-11-9/21.jpg"></p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>•使用数据段<br><img src="/img/2023-11-9/22.jpg"><br>•使用栈段<br><img src="/img/2023-11-9/23.jpg"><br>注：<br>1.这里子程序开头的“push bp”，把BP的旧值临时放入栈中 的操作，<br>既为子程序中 数据的寄存 暂腾出空间，避免寄存器冲突问题<br>2.同时BP的旧值也没丢失。在子程序最后，通过“pop bp”，旧值又恢复到BP中</p><h1 id="操作符与标号"><a href="#操作符与标号" class="headerlink" title="操作符与标号"></a>操作符与标号</h1><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="seg-offset"><a href="#seg-offset" class="headerlink" title="seg; offset"></a>seg; offset</h3><p>•介绍<br>后跟标号，用于获取标有该标号的数据或指令在代码段中的 段地址&#x2F;偏移地址</p><p>•演示<br>&#x2F;&#x2F;获取数据的地址信息<br> <img src="/img/2023-11-9/24.jpg"><br>&#x2F;&#x2F;获取指令的地址信息<br> <img src="/img/2023-11-9/25.jpg"></p><h2 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h2><h3 id="地址标号"><a href="#地址标号" class="headerlink" title="地址标号"></a>地址标号</h3><p>•介绍<br>1.只可标记指令和代码段中的数据<br>2.标记时，会带上“:”<br>3.使用时，与操作符配合<br>4.本身包含 被标记数据或指令的地址信息，</p><p>•演示<br>&#x2F;&#x2F;标记指令<br><img src="/img/2023-11-9/26.jpg"><br>&#x2F;&#x2F;标记代码段中的数据<br><img src="/img/2023-11-9/27.jpg"></p><h3 id="数据标号"><a href="#数据标号" class="headerlink" title="数据标号"></a>数据标号</h3><p>•介绍<br>1.只可标记数据，但代码段数据段中的均可<br>2.标记时，不带上“:”<br>3.使用时，单独出现<br>4.本身 既包含被标记数据的地址信息，又包含单元长度信息<br><img src="/img/2023-11-9/28.jpg"><br>注：<br>使用数据标号后，对数据访问操作的指令 会更加简易直观。<br>虽然底层实现还是通过内存寻址，但看起来就像高级语言中的表示一样，直接面向变量或数组</p><p>•演示<br>&#x2F;&#x2F;标记代码段中的数据<br><img src="/img/2023-11-9/29.jpg"><br>&#x2F;&#x2F;标记数据段中的数据<br><img src="/img/2023-11-9/30.jpg"></p><h1 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h1><h2 id="系统自带"><a href="#系统自带" class="headerlink" title="系统自带"></a>系统自带</h2><p>注：当触发内中断（软件中断）时执行<br>•类型<br>&#x2F;&#x2F;BIOS类（与硬件设备相关）<br><img src="/img/2023-11-9/31.jpg"><br>&#x2F;&#x2F;DOS类<br><img src="/img/2023-11-9/32.jpg"><br>•安装过程<br><img src="/img/2023-11-9/33.jpg"></p><h2 id="用户编写"><a href="#用户编写" class="headerlink" title="用户编写"></a>用户编写</h2><p>•背景<br>有时，对于用户想进行的操作控制，没有对应的中断处理程序可满足具体需求此时，<br>用户可在原有基础之上，对中断处理程序进行改写，或重新自定义</p><p>•演示<br>&#x2F;&#x2F;改写<br><img src="/img/2023-11-9/34.jpg"><br>&#x2F;&#x2F;自定义<br><img src="/img/2023-11-9/35.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 汇编指令</title>
      <link href="/2023/11/02/2023-11-2%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/11/02/2023-11-2%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本系列为《汇编语言（第3版）》的个人阅读笔记，<br>期间使用的图片摘自b站视频<a href="https://www.bilibili.com/video/BV1Wu411B72F/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">《通俗易懂的汇编语言（王爽老师的书）》</a></p><h1 id="指令种类"><a href="#指令种类" class="headerlink" title="指令种类"></a>指令种类</h1><h2 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h2><h3 id="数据移动"><a href="#数据移动" class="headerlink" title="数据移动"></a>数据移动</h3><p>mov</p><h3 id="数据串移动"><a href="#数据串移动" class="headerlink" title="数据串移动"></a>数据串移动</h3><p>movsb&#x2F;movsw; PSW.DF&#x2F;SI&#x2F;DI</p><h3 id="加减"><a href="#加减" class="headerlink" title="加减"></a>加减</h3><p>add&#x2F;sub</p><h3 id="乘除"><a href="#乘除" class="headerlink" title="乘除"></a>乘除</h3><p>mul&#x2F;div; AX&#x2F;DX</p><h3 id="进位加减"><a href="#进位加减" class="headerlink" title="进位加减"></a>进位加减</h3><p>adc(sbb); PSW.CF</p><h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><p>sxx&#x2F;rxx; PSW.CF</p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>cmp</p><h2 id="流程转移"><a href="#流程转移" class="headerlink" title="流程转移"></a>流程转移</h2><p>•背景 &amp; 本质<br><img src="/img/2023-11-2/15.jpg"><br>•分类<br><img src="/img/2023-11-2/16.jpg"></p><h3 id="指令地址表示"><a href="#指令地址表示" class="headerlink" title="指令地址表示"></a>指令地址表示</h3><p>CS:offset标号<br>•介绍<br>注：“offset 标号”，在这里代表着标有该标号的指令在代码段中的偏移地址<br><img src="/img/2023-11-2/30.jpg"><br>•演示<br><img src="/img/2023-11-2/31.jpg"></p><h3 id="无条件跳转"><a href="#无条件跳转" class="headerlink" title="无条件跳转"></a>无条件跳转</h3><p>jmp</p><h3 id="条件跳转（基于CX）"><a href="#条件跳转（基于CX）" class="headerlink" title="条件跳转（基于CX）"></a>条件跳转（基于CX）</h3><p>jcxz; CX</p><h3 id="条件跳转（基于PSW）"><a href="#条件跳转（基于PSW）" class="headerlink" title="条件跳转（基于PSW）"></a>条件跳转（基于PSW）</h3><p>jxxx; PSW</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>loop; CX</p><h3 id="指令重复"><a href="#指令重复" class="headerlink" title="指令重复"></a>指令重复</h3><p>rep; CX</p><h3 id="子程序调用"><a href="#子程序调用" class="headerlink" title="子程序调用"></a>子程序调用</h3><p>call</p><h3 id="子程序返回"><a href="#子程序返回" class="headerlink" title="子程序返回"></a>子程序返回</h3><p>ret&#x2F;retf</p><h2 id="访问内存"><a href="#访问内存" class="headerlink" title="访问内存"></a>访问内存</h2><h3 id="访问数据段"><a href="#访问数据段" class="headerlink" title="访问数据段"></a>访问数据段</h3><p>move; DS:[…]<br>•背景 &amp; 介绍<br><img src="/img/2023-11-2/21.jpg"><br>•演示<br>&#x2F;&#x2F;读写<br><img src="/img/2023-11-2/22.jpg"><br><img src="/img/2023-11-2/23.jpg"></p><h3 id="访问栈段"><a href="#访问栈段" class="headerlink" title="访问栈段"></a>访问栈段</h3><p>push&#x2F;pop&#x2F;mov; SS:SP&#x2F;SS:[…]<br>•介绍<br><img src="/img/2023-11-2/24.jpg"></p><p>•演示<br>&#x2F;&#x2F;栈顶确定：SS:SP<br>注：栈底默认是在SS:[0]处<br><img src="/img/2023-11-2/25.jpg"></p><p>&#x2F;&#x2F;入栈与出栈<br>注：每次操作过后，栈顶位置都会相应调整；<br>CPU不知道栈空间大小，因此超界问题要自己注意避免<br>1＞push, pop<br><img src="/img/2023-11-2/26.jpg"><br>2＞move; SS:[…]<br><img src="/img/2023-11-2/27.jpg"></p><h3 id="访问代码段（指令跳转）"><a href="#访问代码段（指令跳转）" class="headerlink" title="访问代码段（指令跳转）"></a>访问代码段（指令跳转）</h3><p>jump; CS:IP<br>•背景 &amp; 介绍<br><img src="/img/2023-11-2/28.jpg"><br>•演示<br><img src="/img/2023-11-2/29.jpg"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>•关于CPU对各类段的访问<br>1.对于数据段或栈段的访问，需要用户使用具体的指令进行控制<br>2.对于代码段，CPU会在程序运行时自行访问，一般情况下，无需用户使用具体的指令进行控制。<br>（除非用户想更改CPU访问代码段的顺序，即要进行指令跳转）</p><p>•对于上述操作和各寄存器的关系<br>1.CPU要进行上述各操作 有个前提，就是要事先知道相关信息 在内存中的地址<br>2.因此，需要先把地址存入各寄存器，然后对寄存器进行引用，从而让CPU能够从中读取地址信息</p><p>•段寄存器的数据送入方式<br>无法直接将数据送入DS，因为电路设计，数据要先送入通用寄存器，再送入DS<br><img src="/img/2023-11-2/17.jpg"></p><p>•段寄存器的引用<br>1.段前缀 显式使用<br><img src="/img/2023-11-2/18.jpg"><br>2.段前缀 隐式省略（单独使用[…]）<br>[idata]——默认段地址放在DS中<br><img src="/img/2023-11-2/19.jpg"><br>[bx]之类的——默认段地址放在DS中；[bp]之类的——默认段地址放在SS中<br><img src="/img/2023-11-2/20.jpg"></p><h1 id="内存寻址方式"><a href="#内存寻址方式" class="headerlink" title="内存寻址方式"></a>内存寻址方式</h1><p><img src="/img/2023-11-2/5.jpg"></p><h2 id="idata"><a href="#idata" class="headerlink" title="[idata]"></a>[idata]</h2><h2 id="bx"><a href="#bx" class="headerlink" title="[bx]"></a>[bx]</h2><h2 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx+idata]"></a>[bx+idata]</h2><p>•介绍<br><img src="/img/2023-11-2/12.jpg"><br>&#x2F;&#x2F;其他写法<br><img src="/img/2023-11-2/13.jpg"><br>•演示<br><img src="/img/2023-11-2/14.jpg"></p><h2 id="bx-si"><a href="#bx-si" class="headerlink" title="[bx+si]"></a>[bx+si]</h2><p>•介绍<br><img src="/img/2023-11-2/9.jpg"><br>&#x2F;&#x2F;其他写法<br><img src="/img/2023-11-2/10.jpg"><br>•演示<br><img src="/img/2023-11-2/11.jpg"></p><h2 id="bx-si-idata"><a href="#bx-si-idata" class="headerlink" title="[bx+si+idata]"></a>[bx+si+idata]</h2><p>•介绍<br><img src="/img/2023-11-2/6.jpg"><br>&#x2F;&#x2F;其他写法<br><img src="/img/2023-11-2/7.jpg"><br>•演示<br><img src="/img/2023-11-2/8.jpg"></p><h1 id="操作与数据长度"><a href="#操作与数据长度" class="headerlink" title="操作与数据长度"></a>操作与数据长度</h1><h2 id="字节操作"><a href="#字节操作" class="headerlink" title="字节操作"></a>字节操作</h2><p>•隐式<br>指令中涉及8位寄存器，所以无须指明，CPU便知道要访问应是内存的字节单元<br><img src="/img/2023-11-2/1.jpg"><br>•显式<br>在没有寄存器参与的内存单元访问指令中，用byte ptr指明所要访问内存单元的长度，CPU由此得知要访问的是字节单元<br><img src="/img/2023-11-2/2.jpg"></p><h2 id="字操作"><a href="#字操作" class="headerlink" title="字操作"></a>字操作</h2><p>•隐式<br>指令中涉及16位寄存器，所以无须指明，CPU便知道要访问是内存的字单元<br><img src="/img/2023-11-2/3.jpg"><br>•显示<br>在没有寄存器参与的内存单元访问指令中，用word ptr指明所要访问内存单元的长度，CPU由此得知要访问的是字单元<br><img src="/img/2023-11-2/4.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 硬件原理</title>
      <link href="/2023/11/01/2023-11-1%20%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%E7%A1%AC%E4%BB%B6%E5%8E%9F%E7%90%86/"/>
      <url>/2023/11/01/2023-11-1%20%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%E7%A1%AC%E4%BB%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本系列为《汇编语言（第3版）》的个人阅读笔记，<br>期间使用的图片摘自b站视频<a href="https://www.bilibili.com/video/BV1Wu411B72F/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">《通俗易懂的汇编语言（王爽老师的书）》</a></p><h1 id="CPU-内部结构"><a href="#CPU-内部结构" class="headerlink" title="CPU 内部结构"></a>CPU 内部结构</h1><p><img src="/img/2023-11-1/1.jpg"></p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>•存储共性<br>8086CPU所有的寄存器都是16位的，可以存放两个字节<br>•类型<br><img src="/img/2023-11-1/3.jpg"></p><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>AX, BX, CX, DX<br>•作用<br>&#x2F;&#x2F;BX<br>在各类内存寻址方式中，用于存储偏移地址 或 偏移地址的基地址;<br>与BP相比，其通常用于 在内存的数据段中 的寻址<br>&#x2F;&#x2F;CX<br>常与各类转移指令配合使用，<br>CPU通过检测其中的值 来判断是·否进行跳转</p><p>•特性<br>&#x2F;&#x2F;高低位独立存储<br><img src="/img/2023-11-1/4.jpg"></p><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>CS, DS, SS, ES<br>•作用<br>注：CPU通过读取在段寄存器中的地址，就可以快速定位到内存中的信息<br><img src="/img/2023-11-1/5.jpg"><br>•更改方式<br><img src="/img/2023-11-1/6.jpg"></p><h3 id="指令指针寄存器"><a href="#指令指针寄存器" class="headerlink" title="指令指针寄存器"></a>指令指针寄存器</h3><p>IP<br>•作用<br>IP中存储的是下一要执行指令的偏移地址，通常与CS代码段寄存器配合使用。<br>CS中存储的是下一要执行指令的段地址，两者的地址经过地址加法器运算后，所得即为下一要执行指令的物理地址</p><h3 id="指针寄存器"><a href="#指针寄存器" class="headerlink" title="指针寄存器"></a>指针寄存器</h3><p>SP, BP<br>•作用<br>&#x2F;&#x2F;SP<br>SP中存储的是栈顶的偏移地址，通常与 SS栈段寄存器配合使用。<br>SS中存储的是栈顶的段地址，两者的地址经过地址加法器运算后，所得即为栈顶的物理地址<br>&#x2F;&#x2F;BP<br>在各类内存寻址方式中，用于存储偏移地址 或 偏移地址的基地址；<br>与BX相比，其通常用于 在内存的栈段中 的寻址</p><h3 id="变址寄存器"><a href="#变址寄存器" class="headerlink" title="变址寄存器"></a>变址寄存器</h3><p>SI, DI<br>•作用<br>注：在变址寻址方式中用于存储 偏移量，与存储在BX或BP中的基地址配合使用，联合构成偏移地址<br>&#x2F;&#x2F;SI<br>source index，源变址寄存器<br>&#x2F;&#x2F;DI：<br>destination index，目标变址寄存器<br>•特性<br>&#x2F;&#x2F;单独使用时 与BX类似<br><img src="/img/2023-11-1/8.jpg"><br><img src="/img/2023-11-1/9.jpg"><br>&#x2F;&#x2F;不支持高低位独立存储<br>SI和DI不能分成两个8位寄存器来使用</p><h3 id="标志寄存器-PSW"><a href="#标志寄存器-PSW" class="headerlink" title="标志寄存器&#x2F;PSW"></a>标志寄存器&#x2F;PSW</h3><p>•作用<br>注：<br>1.用来存储相关指令的某些执行结果<br>2.用来为CPU执行相关指令提供行为依据<br>3.用来控制CPU的相关工作方式<br>&#x2F;&#x2F;OF, DF, SF, ZF, PF, CF<br><img src="/img/2023-11-1/12.jpg"><br>&#x2F;&#x2F;IF, TF<br><img src="/img/2023-11-1/13.jpg"></p><p>•更改方式<br><img src="/img/2023-11-1/14.jpg"><br>&#x2F;&#x2F;DF<br><img src="/img/2023-11-1/15.jpg"><br>&#x2F;&#x2F;IF<br><img src="/img/2023-11-1/16.jpg"></p><h2 id="地址加法器"><a href="#地址加法器" class="headerlink" title="地址加法器"></a>地址加法器</h2><p>•背景<br>注：简单来讲就是，20位的物理地址与16位的CPU不匹配<br><img src="/img/2023-11-1/17.jpg"></p><p>•工作流程<br><img src="/img/2023-11-1/18.jpg"></p><h1 id="CPU-数据访问"><a href="#CPU-数据访问" class="headerlink" title="CPU 数据访问"></a>CPU 数据访问</h1><p><img src="/img/2023-11-1/19.jpg"></p><h2 id="访问内存"><a href="#访问内存" class="headerlink" title="访问内存"></a>访问内存</h2><p>•与内存连接<br>&#x2F;&#x2F;媒介：三类总线<br><img src="/img/2023-11-1/20.jpg"></p><p>•从内存读取<br>&#x2F;&#x2F;具备：三类信息<br><img src="/img/2023-11-1/21.jpg"></p><p>&#x2F;&#x2F;过程简单示意<br>＞数据读取<br><img src="/img/2023-11-1/22.jpg"><br>＞指令读取与执行<br><img src="/img/2023-11-1/23.jpg"></p><h2 id="访问I-O端口"><a href="#访问I-O端口" class="headerlink" title="访问I&#x2F;O端口"></a>访问I&#x2F;O端口</h2><p>•与端口连接<br>&#x2F;&#x2F;端口原理<br><img src="/img/2023-11-1/24.jpg"><br>&#x2F;&#x2F;媒介<br><img src="/img/2023-11-1/25.jpg"></p><p>•从端口读取<br><img src="/img/2023-11-1/26.jpg"></p><h1 id="CPU-中断处理"><a href="#CPU-中断处理" class="headerlink" title="CPU 中断处理"></a>CPU 中断处理</h1><p>对于“中断”的理解：<br>1.中断不完全是由 异常 引发的<br>2.它可以是由于 用户想实现某些操作控制，<br>    而主动引发的</p><p>对于“中断处理”的理解：<br>1.中断处理不仅仅表示 处理异常<br>2.它也可以理解为 CPU对用户的某些<br>    操作控制 进行响应</p><p>对于“中断处理程序”的理解：<br>中断处理程序更像是一个库，<br>1.出现异常时，库内程序会被自行调用执行<br>2.用户想要进行某些操作控制时，<br>   也可以使用特定手段 主动调用库内程序</p><h2 id="内中断-软件中断"><a href="#内中断-软件中断" class="headerlink" title="内中断&#x2F;软件中断"></a>内中断&#x2F;软件中断</h2><p>•介绍<br>由CPU内部发生的事件而引起的中断<br>•引发原因<br>&#x2F;&#x2F;出现除法错误<br>&#x2F;&#x2F;设置了单步执行<br><img src="/img/2023-11-1/28.jpg"><br>&#x2F;&#x2F;执行into指令<br>&#x2F;&#x2F;执行int指令<br><img src="/img/2023-11-1/29.jpg"><br>•处理过程<br>注：整个过程由CPU自行完成<br><img src="/img/2023-11-1/30.jpg"></p><h2 id="外中断-硬件中断"><a href="#外中断-硬件中断" class="headerlink" title="外中断&#x2F;硬件中断"></a>外中断&#x2F;硬件中断</h2><p>•介绍<br>由外部设备发生的事件引起的中断<br>•引发原因<br>&#x2F;&#x2F;键盘输入<br>&#x2F;&#x2F;打印机请求<br>&#x2F;&#x2F;……</p><p>•处理过程<br>（与内中断类似）</p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h2><p>&#x2F;&#x2F;地址空间<br><img src="/img/2023-11-1/31.jpg"><br>&#x2F;&#x2F; 8位存储单元(字节单元)<br><img src="/img/2023-11-1/32.jpg"></p><h2 id="程序装入及扩充"><a href="#程序装入及扩充" class="headerlink" title="程序装入及扩充"></a>程序装入及扩充</h2><p>•程序装入<br><img src="/img/2023-11-1/33.jpg"><br>•扩充<br>&#x2F;&#x2F;覆盖<br>&#x2F;&#x2F;交换</p><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><p>•类型：RAM</p><p>•所存储信息<br>&#x2F;&#x2F; 16位字单元<br><img src="/img/2023-11-1/34.jpg"><br>&#x2F;&#x2F;二进制信息<br>进行读取时，一段二进制信息是被用作数据还是指令，要看指向该地址的寄存器的类型<br><img src="/img/2023-11-1/35.jpg"><br>•显存<br>&#x2F;&#x2F;介绍<br>显存空间是从内存空问中划分出来的，同样执行存储功能，但其存储对象是显卡输出到显示器上的每个像素的信息<br>&#x2F;&#x2F;内部结构<br><img src="/img/2023-11-1/36.jpg"></p><h2 id="中断向量表-中断描述符表"><a href="#中断向量表-中断描述符表" class="headerlink" title="中断向量表&#x2F;中断描述符表"></a>中断向量表&#x2F;中断描述符表</h2><p>•名称区别<br>&#x2F;&#x2F;中断向量表<br>用于intel 8086，每个表项占4字节</p><p>&#x2F;&#x2F;中断描述符表（IDT）<br>用于x86，每个表项占4字节；<br>用于x64，每个表项占8字节</p><p>•原理（以前者为例）<br>注：中断处理程序的中断类型码与其CS, IP的存储地址 的换算关系——(CS)&#x3D;(N<em>4+2); (IP)&#x3D;(N</em>4)<br><img src="/img/2023-11-1/37.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
