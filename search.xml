<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>反抓包及对抗</title>
      <link href="/2025/04/10/2025-4-10%20%E5%8F%8D%E6%8A%93%E5%8C%85%E5%8F%8A%E5%AF%B9%E6%8A%97/"/>
      <url>/2025/04/10/2025-4-10%20%E5%8F%8D%E6%8A%93%E5%8C%85%E5%8F%8A%E5%AF%B9%E6%8A%97/</url>
      
        <content type="html"><![CDATA[<p>注：<br>对抗过程中涉及的hook逻辑 只针对原始类名方法名。若存在混淆，则需额外分析</p><h1 id="字段加密"><a href="#字段加密" class="headerlink" title="字段加密"></a>字段加密</h1><h1 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/img/2025-4-10/2.jpg"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>URLConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">urlObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span>)); </span><br><span class="line">        <span class="type">HttpsURLConnection</span> <span class="variable">httpsURLConnection</span> <span class="operator">=</span> (HttpsURLConnection) urlObj.openConnection();</span><br><span class="line"></span><br><span class="line">        httpsURLConnection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        httpsURLConnection.setSSLSocketFactory((SSLSocketFactory) SSLSocketFactory.getDefault());</span><br><span class="line">        </span><br><span class="line">        inputStream = httpsURLConnection.getInputStream();</span><br><span class="line">        <span class="keyword">if</span> (httpsURLConnection.getResponseCode() == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(buf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> e.toString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        close(inputStream);</span><br><span class="line">        close(byteArrayOutputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> byteArrayOutputStream.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>OkHttp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(url.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span>)) </span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute()) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> e.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="对抗"><a href="#对抗" class="headerlink" title="对抗"></a>对抗</h2><ul><li>安装伪造证书至系统目录（中间人攻击）</li></ul><h1 id="系统代理检测"><a href="#系统代理检测" class="headerlink" title="系统代理检测"></a>系统代理检测</h1><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isWifiProxy</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">proxyAddress</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;http.proxyHost&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">portStr</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;http.proxyPort&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">proxyPort</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        proxyPort = Integer.parseInt(portStr != <span class="literal">null</span> ? portStr : <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        proxyPort = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (!TextUtils.isEmpty(proxyAddress)) &amp;&amp; (proxyPort != -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对抗-1"><a href="#对抗-1" class="headerlink" title="对抗"></a>对抗</h2><ul><li>拦截关键方法</li></ul><h1 id="系统代理禁用"><a href="#系统代理禁用" class="headerlink" title="系统代理禁用"></a>系统代理禁用</h1><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><ul><li><p>URLConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">(String url)</span>&#123;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);</span><br><span class="line">        httpURLConnection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        inputStream = httpURLConnection.getInputStream();</span><br><span class="line">        <span class="keyword">if</span>(httpURLConnection.getResponseCode() == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(buf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">return</span> e.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        close(inputStream);</span><br><span class="line">        close(byteArrayOutputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> byteArrayOutputStream.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>OkHttp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">(String url)</span>  &#123;</span><br><span class="line">    OkHttpClient.<span class="type">Builder</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line">    <span class="comment">// 方式一</span></span><br><span class="line">    <span class="comment">// client.proxy(Proxy.NO_PROXY);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式二</span></span><br><span class="line">    <span class="type">ProxySelector</span> <span class="variable">proxySelector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxySelector</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;Proxy&gt; <span class="title function_">select</span><span class="params">(URI uri)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectFailed</span><span class="params">(URI uri, SocketAddress sa, IOException ioe)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    client.proxySelector(proxySelector);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(url)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.build().newCall(request).execute()) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">return</span> e.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="对抗-2"><a href="#对抗-2" class="headerlink" title="对抗"></a>对抗</h2><ul><li><p>拦截关键方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">disableProxyAndLogConnections</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Java</span>.<span class="property">available</span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// URLConnection</span></span><br><span class="line">            <span class="keyword">var</span> <span class="variable constant_">URL</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.URL&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> openConnection1 = <span class="variable constant_">URL</span>.<span class="property">openConnection</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.net.Proxy&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> openConnection2 = <span class="variable constant_">URL</span>.<span class="property">openConnection</span>.<span class="title function_">overload</span>()</span><br><span class="line">            openConnection1.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">proxy</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;openConnection() proxy = &quot;</span> + proxy)</span><br><span class="line">                <span class="keyword">return</span> openConnection2.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// OkHttp</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">OkHttpClientBuilder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;okhttp3.OkHttpClient$Builder&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> proxy = <span class="title class_">OkHttpClientBuilder</span>.<span class="property">proxy</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.net.Proxy&quot;</span>)</span><br><span class="line">            proxy.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">proxy</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;proxy() prxoy = &quot;</span> + proxy)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> proxySelector = <span class="title class_">OkHttpClientBuilder</span>.<span class="property">proxySelector</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.net.ProxySelector&quot;</span>)</span><br><span class="line">            proxySelector.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">proxySelector</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;proxySelector() proxySelector = &quot;</span> + proxySelector)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>VPN全局代理抓包</p></li></ul><p>具体见此项目 <a href="">Postern</a></p><h1 id="VPN检测"><a href="#VPN检测" class="headerlink" title="VPN检测"></a>VPN检测</h1><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><ul><li><p>检测网络接口名（tun0&#x2F;ppp0）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isVpnActiveByInterface</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;NetworkInterface&gt; interfaces = Collections.list(NetworkInterface.getNetworkInterfaces());</span><br><span class="line">        <span class="keyword">for</span> (NetworkInterface nif : interfaces) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> nif.getName().toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (name.equals(<span class="string">&quot;tun0&quot;</span>) || name.equals(<span class="string">&quot;ppp0&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;VPNCheck&quot;</span>, <span class="string">&quot;Interface check failed&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检测网络传输类型（TRANSPORT_VPN）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isVpnActiveByNetworkCapabilities</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ConnectivityManager</span> <span class="variable">cm</span> <span class="operator">=</span> (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">        <span class="type">NetworkCapabilities</span> <span class="variable">caps</span> <span class="operator">=</span> cm.getNetworkCapabilities(cm.getActiveNetwork());</span><br><span class="line">        <span class="keyword">return</span> caps != <span class="literal">null</span> &amp;&amp; caps.hasTransport(NetworkCapabilities.TRANSPORT_VPN);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;VPNCheck&quot;</span>, <span class="string">&quot;NetworkCapabilities check failed&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">javascript</span><br></pre></td></tr></table></figure></li><li><p>检测网络类型（TYPE_VPN）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isVpnActiveLegacy</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="type">ConnectivityManager</span> <span class="variable">cm</span> <span class="operator">=</span> (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">    <span class="keyword">return</span> cm.getNetworkInfo(ConnectivityManager.TYPE_VPN).isConnected();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="对抗-3"><a href="#对抗-3" class="headerlink" title="对抗"></a>对抗</h2><ul><li>拦截关键方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bypassVpnDetection</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 绕过网络接口名检测</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NetworkInterface</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.NetworkInterface&quot;</span>);</span><br><span class="line">        <span class="title class_">NetworkInterface</span>.<span class="property">getAll</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> nis = <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Hiding tun0/ppp0 network interfaces&quot;</span>);</span><br><span class="line">            nis.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">ni</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ni.<span class="property">name</span>.<span class="property">value</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;tun0&quot;</span>) &gt;= <span class="number">0</span> || ni.<span class="property">name</span>.<span class="property">value</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;ppp0&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ni.<span class="property">name</span>.<span class="property">value</span> = <span class="string">&quot;eth0&quot;</span>;</span><br><span class="line">                    ni.<span class="property">displayName</span>.<span class="property">value</span> = <span class="string">&quot;eth0&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> nis;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绕过网络传输类型检测</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span> &amp;&amp; <span class="title class_">Java</span>.<span class="property">androidVersion</span> &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">NetworkCapabilities</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.net.NetworkCapabilities&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="title class_">NetworkCapabilities</span>.<span class="property">hasTransport</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">transportType</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (transportType === <span class="number">4</span>) &#123; <span class="comment">// TRANSPORT_VPN</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Bypassing NetworkCapabilities.TRANSPORT_VPN check&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">hasTransport</span>(transportType);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="title class_">NetworkCapabilities</span>.<span class="property">transportNameOf</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">transportType</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> ret = <span class="variable language_">this</span>.<span class="title function_">transportNameOf</span>(transportType);</span><br><span class="line">                <span class="keyword">if</span> (ret.<span class="title function_">indexOf</span>(<span class="string">&quot;VPN&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Replacing &#x27;VPN&#x27; transport name with &#x27;WIFI&#x27;&quot;</span>);</span><br><span class="line">                    ret = <span class="string">&quot;WIFI&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绕过网络类型检测</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ConnectivityManager</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.net.ConnectivityManager&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> can_hook = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">ConnectivityManager</span>.<span class="property">getNetworkInfo</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type === <span class="number">17</span>) &#123; <span class="comment">// TYPE_VPN</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Bypassing ConnectivityManager.TYPE_VPN check&quot;</span>);</span><br><span class="line">                can_hook = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getNetworkInfo</span>(type);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NetworkInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.net.NetworkInfo&quot;</span>);</span><br><span class="line">        <span class="title class_">NetworkInfo</span>.<span class="property">isConnected</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> ret = <span class="variable language_">this</span>.<span class="title function_">isConnected</span>();</span><br><span class="line">            <span class="keyword">if</span> (can_hook) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Forcing NetworkInfo.isConnected() to return false for VPN&quot;</span>);</span><br><span class="line">                ret = <span class="literal">false</span>;</span><br><span class="line">                can_hook = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] VPN detection bypass complete!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="SSL-pinning"><a href="#SSL-pinning" class="headerlink" title="SSL pinning"></a>SSL pinning</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>HTTPS只验证了证书的合法性，并没有当前连接的服务器就是目标服务器，所以需要客户端去验证服务端证书的合法性。<br>通过将服务端证书内置到移动端中。当建立HTTPS连接时，客户端将内置的服务端证书 和服务端返回的证书进行比较<br><img src="/img/2025-4-10/3.jpg"></p><p>其中，<br>公钥锁定 仅锁定证书中的公钥。只要公钥不变，允许证书更换；<br>证书锁定 直接锁定完整证书。证书更换时，必须更新客户端代码</p><h2 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h2><h3 id="公钥锁定"><a href="#公钥锁定" class="headerlink" title="公钥锁定"></a>公钥锁定</h3><ul><li>OkHttp<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CA_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;sha256/kO7OP94daK9P8+X52s00RvJLU0SiCXA9KAg9PelfwIw=&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CA_DOMAIN</span> <span class="operator">=</span> <span class="string">&quot;www.52pojie.cn&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置证书锁定</span></span><br><span class="line">    <span class="type">CertificatePinner</span> <span class="variable">certPinner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CertificatePinner</span>.Builder()</span><br><span class="line">            .add(CA_DOMAIN, CA_PUBLIC_KEY)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建OkHttpClient</span></span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">            .certificatePinner(certPinner)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建请求</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(url)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> okHttpClient.newCall(request).execute()) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.code();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="证书锁定"><a href="#证书锁定" class="headerlink" title="证书锁定"></a>证书锁定</h3><ul><li>OkHttp<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(String url, <span class="meta">@RawRes</span> <span class="type">int</span> certResourceId)</span> <span class="keyword">throws</span> IOException, CertificateException &#123;</span><br><span class="line">    <span class="comment">// 创建自定义TrustManager</span></span><br><span class="line">    <span class="type">X509TrustManager</span> <span class="variable">trustManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509TrustManager</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> &#123;</span><br><span class="line">            <span class="comment">// 不验证客户端证书</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> </span><br><span class="line">                <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">            <span class="comment">// 获取服务器证书公钥</span></span><br><span class="line">            <span class="type">X509Certificate</span> <span class="variable">serverCert</span> <span class="operator">=</span> chain[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">serverPubKey</span> <span class="operator">=</span> Base64.encodeToString(</span><br><span class="line">                serverCert.getPublicKey().getEncoded(), </span><br><span class="line">                Base64.NO_WRAP</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取预置证书</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getSystem().openRawResource(certResourceId)) &#123;</span><br><span class="line">                <span class="type">CertificateFactory</span> <span class="variable">cf</span> <span class="operator">=</span> CertificateFactory.getInstance(<span class="string">&quot;X.509&quot;</span>);</span><br><span class="line">                <span class="type">X509Certificate</span> <span class="variable">localCert</span> <span class="operator">=</span> (X509Certificate) cf.generateCertificate(is);</span><br><span class="line">                <span class="type">String</span> <span class="variable">localPubKey</span> <span class="operator">=</span> Base64.encodeToString(</span><br><span class="line">                    localCert.getPublicKey().getEncoded(), </span><br><span class="line">                    Base64.NO_WRAP</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 验证证书有效性</span></span><br><span class="line">                serverCert.checkValidity();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 比较公钥</span></span><br><span class="line">                <span class="keyword">if</span> (!localPubKey.equalsIgnoreCase(serverPubKey)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CertificateException</span>(<span class="string">&quot;证书公钥不匹配&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CertificateException</span>(<span class="string">&quot;读取预置证书失败&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">X509Certificate</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SSLContext</span></span><br><span class="line">    SSLContext sslContext;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sslContext = SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">        sslContext.init(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;trustManager&#125;, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SSLException</span>(<span class="string">&quot;SSL上下文初始化失败&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建OkHttpClient</span></span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">            .sslSocketFactory(sslContext.getSocketFactory(), trustManager)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建请求</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(url)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute()) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.code();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="对抗-4"><a href="#对抗-4" class="headerlink" title="对抗"></a>对抗</h2><ul><li>拦截关键方法</li></ul><p>具体见此项目 <a href="https://github.com/Fuzion24/JustTrustMe">JustTrustMe</a>, <a href="https://github.com/WooyunDota/DroidSSLUnpinning/blob/master/ObjectionUnpinningPlus/hooks.js">DroidSSLUnpinning</a></p><h1 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>单向认证的基础上，服务端 校验客户端的证书.<br><img src="/img/2025-4-10/1.jpg"></p><h2 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h2><ol><li>分别生成服务端、客户端的自签名证书</li><li>对于客户端<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li>对于服务端<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="对抗-5"><a href="#对抗-5" class="headerlink" title="对抗"></a>对抗</h2><ul><li>dump客户端证书（而后在抓包工具中配置）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uuid</span>(<span class="params">len, radix</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> chars = <span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> uuid = [], i;</span><br><span class="line">    radix = radix || chars.<span class="property">length</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (len) &#123;</span><br><span class="line">      <span class="comment">// Compact form</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) uuid[i] = chars[<span class="number">0</span> | <span class="title class_">Math</span>.<span class="title function_">random</span>() * radix];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// rfc4122, version 4 form</span></span><br><span class="line">      <span class="keyword">var</span> r;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// rfc4122 requires these characters</span></span><br><span class="line">      uuid[<span class="number">8</span>] = uuid[<span class="number">13</span>] = uuid[<span class="number">18</span>] = uuid[<span class="number">23</span>] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">      uuid[<span class="number">14</span>] = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// Fill in random data. At i==19 set the high bits of clock sequence as</span></span><br><span class="line">      <span class="comment">// per rfc4122, sec. 4.1.5</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!uuid[i]) &#123;</span><br><span class="line">          r = <span class="number">0</span> | <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span>;</span><br><span class="line">          uuid[i] = chars[(i == <span class="number">19</span>) ? (r &amp; <span class="number">0x3</span>) | <span class="number">0x8</span> : r];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> uuid.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">storeP12</span>(<span class="params">pri, p7, p12Path, p12Password</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> X509Certificate = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> p7X509 = <span class="title class_">Java</span>.<span class="title function_">cast</span>(p7, X509Certificate);</span><br><span class="line">            <span class="keyword">var</span> chain = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>, [p7X509])</span><br><span class="line">            <span class="keyword">var</span> ks = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>).<span class="title function_">getInstance</span>(<span class="string">&quot;PKCS12&quot;</span>, <span class="string">&quot;BC&quot;</span>);</span><br><span class="line">            ks.<span class="title function_">load</span>(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            ks.<span class="title function_">setKeyEntry</span>(<span class="string">&quot;client&quot;</span>, pri, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(p12Password).<span class="title function_">toCharArray</span>(), chain);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> out = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(p12Path);</span><br><span class="line">              ks.<span class="title function_">store</span>(out, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(p12Password).<span class="title function_">toCharArray</span>())</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dump success!&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exp) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(exp)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore$PrivateKeyEntry&quot;</span>).<span class="property">getPrivateKey</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>()</span><br><span class="line">            <span class="keyword">var</span> packageName = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>().<span class="title function_">getPackageName</span>();</span><br><span class="line">            <span class="title function_">storeP12</span>(<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>(), <span class="variable language_">this</span>.<span class="title function_">getCertificate</span>(), <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName + <span class="title function_">uuid</span>(<span class="number">10</span>, <span class="number">16</span>) + <span class="string">&#x27;.p12&#x27;</span>, <span class="string">&#x27;LuoHun&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore$PrivateKeyEntry&quot;</span>).<span class="property">getCertificateChain</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getCertificateChain</span>()</span><br><span class="line">            <span class="keyword">var</span> packageName = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>().<span class="title function_">getPackageName</span>();</span><br><span class="line">            <span class="title function_">storeP12</span>(<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>(), <span class="variable language_">this</span>.<span class="title function_">getCertificate</span>(), <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName + <span class="title function_">uuid</span>(<span class="number">10</span>, <span class="number">16</span>) + <span class="string">&#x27;.p12&#x27;</span>, <span class="string">&#x27;LuoHun&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>具体见此项目 <a href="https://github.com/r0ysue/r0capture">r0capture</a></li></ul><h1 id="私有协议"><a href="#私有协议" class="headerlink" title="私有协议"></a>私有协议</h1><h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><h3 id="QUIC"><a href="#QUIC" class="headerlink" title="QUIC"></a>QUIC</h3><h3 id="SPDY"><a href="#SPDY" class="headerlink" title="SPDY"></a>SPDY</h3><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>系统代理禁用<br><a href="https://www.cnblogs.com/luoyesiqiu/p/packet_capture.html">抓包，反抓包，反反抓包</a><br><a href="https://www.cnblogs.com/MaoheLaoXu/p/17175524.html#_label2">App防抓包的四种绕过方法 - 代理屏蔽</a></p></li><li><p>VPN检测<br><a href="https://www.cnblogs.com/gradyblog/p/17201082.html">【Android 抓包对抗】代理检查绕过</a></p></li><li><p>SSL pinning<br><a href="https://bbs.kanxue.com/thread-278142.htm#msg_header_h1_3">炒冷饭汇总抓包姿势-上 - SSLPinning环境下如何抓包</a><br><a href="https://www.cnblogs.com/revercc/p/16901272.html#ssl-pinning">android平台的http&#x2F;https抓包 - SSL pinning</a><br><a href="https://www.cnblogs.com/MaoheLaoXu/p/17175524.html#_label3">App防抓包的四种绕过方法 - SSL pinning</a><br><a href="https://xialuohun.top/posts/android/android%E6%8A%93%E5%8C%85/ssl-pinning%E6%A1%88%E4%BE%8B/">SSL Pinning案例</a></p></li><li><p>双向认证<br><a href="https://oacia.dev/two-way-SSL/#https%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86">https双向认证</a><br><a href="https://xialuohun.top/posts/android/android%E6%8A%93%E5%8C%85/%E5%8F%8C%E5%90%91%E6%A0%A1%E9%AA%8C%E6%A1%88%E4%BE%8B">双向校验案例</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 保护与对抗 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SoFixer重定位修复改动</title>
      <link href="/2025/04/03/2025-4-3%20SoFixer%E9%87%8D%E5%AE%9A%E4%BD%8D%E4%BF%AE%E5%A4%8D%E6%94%B9%E5%8A%A8/"/>
      <url>/2025/04/03/2025-4-3%20SoFixer%E9%87%8D%E5%AE%9A%E4%BD%8D%E4%BF%AE%E5%A4%8D%E6%94%B9%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>对标题补充说明一下，准确来讲是 修复导入函数的重定位信息</p><p>起因是在x64模拟器下dump出一个so，扔进SoFixer里修复，结果发现一系列重定位信息都未修复<br>于是想着从SoFixer源码入手，对其中重定位修复逻辑 进行改动，从而解决该问题</p><h1 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h1><p>阅读SoFixer源码可知，其只支持对如下重定位类型的处理<br>其中 0x402, 0x403 分别代表 R_AARCH64_JUMP_SLOT, R_AARCH64_RELATIVE<br><img src="/img/2025-3-25/46.png"><br>这也是当前 R_X86_64_JUMP_SLOT, R_X86_64_RELATIVE类型的重定位信息 还未修复的原因<br><img src="/img/2025-3-25/52.png"></p><h1 id="阶段二"><a href="#阶段二" class="headerlink" title="阶段二"></a>阶段二</h1><p>因此在源码中加上 R_X86_64_JUMP_SLOT, R_X86_64_RELATIVE的 case<br>再重新编译<br><img src="/img/2025-3-25/48.png"><br>这下SoFixer确实是支持x64下的重定位修复了，但此时又出现符号顺序无法对应的情况了<br><img src="/img/2025-3-25/49.png"></p><h1 id="阶段三"><a href="#阶段三" class="headerlink" title="阶段三"></a>阶段三</h1><p>一筹莫展之际，意外读到此<a href="https://bbs.kanxue.com/thread-282221-1.htm">文章</a><br>这位大佬对SoFixer重定位修复逻辑中 存在的问题进行了记录与修改，并新增如下逻辑————<br>1.RebuildRelocs()开头，通过 SaveImportsymNames()将所有导入函数符号按序存入 mImports数组<br><img src="/img/2025-3-25/68.jpg"><br>2.进入 relocate()后，通过 GetIndexOfImports()取出 每个导入函数符号 在mImports中的索引<br><img src="/img/2025-3-25/69.jpg"><br>3.通过此索引，定位到需要修复重定位信息的地址<br><img src="/img/2025-3-25/70.jpg"></p><p>这里参照阶段一，在源码中加上 R_X86_64_GLOB_DAT, R_X86_64_JUMP_SLOT, R_X86_64_RELATIVE的 case<br>这下确实能看到修复效果了，然而却发现只修复了 两个导入函数的？<br><img src="/img/2025-3-25/53.png"></p><h1 id="阶段四"><a href="#阶段四" class="headerlink" title="阶段四"></a>阶段四</h1><p>通过添加控制台输出，发现在保存导入函数符号时 只存入了两个<br><img src="/img/2025-3-25/55.png"><br>由此仔细阅读大佬源码中的 SaveImportsymNames()<br>可以看到在读取.dynsym节期间，一旦遇到非导入函数符号，即刻退出<br><img src="/img/2025-3-25/71.jpg"></p><p>然而经本人观察发现，各类符号在.dynsym节中的排布，并非一定存在先后顺序<br>（除了未定义符号一定在最前面，剩余的排布规则 暂且不知……）<br><img src="/img/2025-3-25/56.png"></p><p>换句话说，源码中的读取逻辑，会导致未读取完所有导入函数符号 就提前退出<br>由此对 SaveImportsymNames()做出如下修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ElfRebuilder::SaveImportsymNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Elf_Sym* symtab = si.symtab;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* strtab = si.strtab;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算.dynsym节总条目数</span></span><br><span class="line">    <span class="type">size_t</span> sym_count = <span class="number">0</span>;</span><br><span class="line">    sym_count = shdrs[sDYNSYM].sh_size / shdrs[sDYNSYM].sh_entsize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> nIndex = <span class="number">0</span>; nIndex &lt; sym_count; nIndex++) &#123;</span><br><span class="line">        Elf_Sym sym = symtab[nIndex];</span><br><span class="line">        <span class="keyword">if</span> (sym.st_name == <span class="number">0</span>) &#123;     <span class="comment">// 略过最前面的未定义符号</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sym.st_value != <span class="number">0</span>) &#123;    <span class="comment">// 略过之后的非导入表符号</span></span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* symname = strtab + sym.st_name;</span><br><span class="line">        mImports.<span class="built_in">push_back</span>(symname);</span><br><span class="line"><span class="comment">//        FLOGD(&quot;NO:%zu %s \r\n&quot;, nIndex, symname);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下总算是完全修复 导入函数的重定位信息了<br><img src="/img/2025-3-25/54.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>360加固免费版分析（上）</title>
      <link href="/2025/03/25/2025-3-25%20360%E5%8A%A0%E5%9B%BA%E5%85%8D%E8%B4%B9%E7%89%88%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89/"/>
      <url>/2025/03/25/2025-3-25%20360%E5%8A%A0%E5%9B%BA%E5%85%8D%E8%B4%B9%E7%89%88%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<!-- 小白久闻360加固之名，却从未亲眼见过，可以说对其中的运作机制一直是一头雾水这里紧跟[这位大佬](https://oacia.dev/360-jiagu)的思路，一步一个脚印去复现希望能逐步走进企业级加固，揭开其神秘面纱，也为未来面对时提供一定参考 --><p>环境如下：</p><ol><li>系统：Android 9</li><li>架构：x64</li></ol><h1 id="壳程序分析"><a href="#壳程序分析" class="headerlink" title="壳程序分析"></a>壳程序分析</h1><h2 id="壳dex"><a href="#壳dex" class="headerlink" title="壳dex"></a>壳dex</h2><p>原dex已不见踪影，会在后续过程中被释放加载<br><img src="/img/2025-3-25/14.png"></p><h3 id="com-stub-StubApp"><a href="#com-stub-StubApp" class="headerlink" title="com.stub.StubApp"></a>com.stub.StubApp</h3><p>attachBaseContext, onCreate 存在<code>字符串混淆</code><br><img src="/img/2025-3-25/1.png"><br>解密逻辑在 com.qihoo.util.a<br><img src="/img/2025-3-25/2.png"><br>直接手动修复了<br><img src="/img/2025-3-25/3.png"></p><p>继续看 attachBaseContext<br>其中<code>主动加载 assets/libjiagu.so</code>，并<code>触发 com.qihoo.util.DtcLoader 的加载</code><br><img src="/img/2025-3-25/4.png"></p><p>来到 com.qihoo.util.DtcLoader<br>其静态初始块中<code>主动加载 libjgdtc.so</code><br><img src="/img/2025-3-25/5.png"></p><h2 id="libjiagu-so"><a href="#libjiagu-so" class="headerlink" title="libjiagu.so"></a>libjiagu.so</h2><p>这里选择分析 libjiagu_x64.so</p><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><p><code>节头表信息没了，Imports, Outputs表也是</code><br><img src="/img/2025-3-25/6.png"><br>因此直接从内存dump，时机选在刚被 android_dlopen_ext 加载后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span>  </span><br><span class="line">    <span class="keyword">var</span> package_name = <span class="string">&quot;com.oacia.apk_protect&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">dump_so</span>(so_name, package_name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dump_so</span>(<span class="params">so_name, package_name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libso = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">var</span> file_path =  <span class="string">&quot;/data/data/&quot;</span> + package_name + <span class="string">&quot;/&quot;</span> + libso.<span class="property">name</span> + <span class="string">&quot;_&quot;</span> + libso.<span class="property">base</span> + <span class="string">&quot;_&quot;</span> + <span class="title function_">ptr</span>(libso.<span class="property">size</span>) + <span class="string">&quot;.so&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(file_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (file_handle &amp;&amp; file_handle !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(libso.<span class="property">base</span>), libso.<span class="property">size</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> libso_buffer = <span class="title function_">ptr</span>(libso.<span class="property">base</span>).<span class="title function_">readByteArray</span>(libso.<span class="property">size</span>);</span><br><span class="line">        file_handle.<span class="title function_">write</span>(libso_buffer);</span><br><span class="line">        file_handle.<span class="title function_">flush</span>();</span><br><span class="line">        file_handle.<span class="title function_">close</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]:&quot;</span>, file_path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]: Failed to create file handle for &quot;</span> + file_path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>这里有一点要注意，就是 <code>assets/中so与内存中so名称不同</code><br>查看应用 私有数据目录，可以看到没有所谓的 libjiagu_x64.so, libjiagu_a64.so，64位统一为 libjiagu_64.so<br><img src="/img/2025-3-25/9.png"></p><p>dump出so，可以看到 Imports, Outputs表有内容了<br><img src="/img/2025-3-25/11.png"><br>不过发现此时程序退出<br><img src="/img/2025-3-25/23.png"><br>应用也卡在如下空白界面，由此推断<code>存在frida检测</code><br><img src="/img/2025-3-25/7.png"></p><h3 id="frida检测绕过-I"><a href="#frida检测绕过-I" class="headerlink" title="frida检测绕过 I"></a>frida检测绕过 I</h3><p>先定位检测逻辑的大致位置<br>通过hook android_dlopen_ext，打印加载的so<br>一旦加载某so后程序退出，则说明检测逻辑位于该so中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print_loaded_so</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">print_loaded_so</span>();</span><br></pre></td></tr></table></figure><p>意料之中，检测逻辑在libjiagu_64.so<br><img src="/img/2025-3-25/12.png"></p><p>接下来就是搞清检测手段<br>在hook open时发现<code>打开/proc/self/maps</code>的行为（但是暂且没看到打开原dex的行为）<br><img src="/img/2025-3-25/13.png"></p><p>由此通过hook 劫持&#x2F;proc&#x2F;self&#x2F;maps的读取操作，将其重定位至伪造路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span>  <span class="comment">// 目标so</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">relocate_proc_self_maps</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">relocate_proc_self_maps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> openPtr = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="literal">null</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> open = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> fakePath = <span class="string">&quot;not/existent/path&quot;</span>;  <span class="comment">// 伪造路径</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(openPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">pathnameptr, flag</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> pathname = pathnameptr.<span class="title function_">readCString</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[open] <span class="subst">$&#123;pathname&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pathname === <span class="string">&quot;/proc/self/maps&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Redirect to: <span class="subst">$&#123;fakePath&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">open</span>(<span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(fakePath), flag);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">open</span>(pathnameptr, flag);</span><br><span class="line">    &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>可以看到对 &#x2F;proc&#x2F;self&#x2F;maps的访问已悉数被重定位，且此时已能看到<code>打开原dex</code>的行为<br><img src="/img/2025-3-25/15.png"><br>此时应用 私有数据目录可以看到释放的dex<br><img src="/img/2025-3-25/16.png"></p><h3 id="open上下文分析-I"><a href="#open上下文分析-I" class="headerlink" title="open上下文分析 I"></a>open上下文分析 I</h3><p>然而只有第一个dex有内容，甚至还是<code>处于加密状态</code>的<br><img src="/img/2025-3-25/17.png"><br>所以接下来得研究 open打开dex时的上下文逻辑</p><p>在前面重定位脚本的基础上，加上调用栈打印功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">relocate_proc_self_maps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> openPtr = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="literal">null</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> open = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> fakePath = <span class="string">&quot;not/existent/path&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(openPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">pathnameptr, flag</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> pathname = pathnameptr.<span class="title function_">readCString</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[open] <span class="subst">$&#123;pathname&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pathname === <span class="string">&quot;/proc/self/maps&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Redirect to: <span class="subst">$&#123;fakePath&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">open</span>(<span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(fakePath), flag);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pathname.<span class="title function_">endsWith</span>(<span class="string">&quot;.dex&quot;</span>)) &#123;   <span class="comment">// 新增</span></span><br><span class="line">            <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">FUZZY</span>).<span class="title function_">forEach</span>(addr_in_so);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">open</span>(pathnameptr, flag);</span><br><span class="line">    &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addr_in_so</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title class_">Process</span>.<span class="title function_">enumerateModules</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (addr &gt;= <span class="variable language_">module</span>.<span class="property">base</span> &amp;&amp; addr &lt; <span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="variable language_">module</span>.<span class="property">size</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`0x<span class="subst">$&#123;addr.toString(<span class="number">16</span>)&#125;</span> in <span class="subst">$&#123;<span class="variable language_">module</span>.name&#125;</span>!0x<span class="subst">$&#123;addr.sub(<span class="variable language_">module</span>.base).toString(<span class="number">16</span>)&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到open在 libjiagu_64.so中被调用的位置基本都是一致的<br>说明各dex是在同一处逻辑中 被逐个打开解密的<br><img src="/img/2025-3-25/18.png"><br>来到 libjiagu.so中特定偏移处，发现是一片空白，由此猜测<code>该区域是在运行时动态填充</code>的<br><img src="/img/2025-3-25/19.png"></p><p>接下来尝试如下思路，IDA附加进程动调libjiagu_64.so，通过基址加偏移的方式 查看其内存区域<br>能看到该区域有内容了<br><img src="/img/2025-3-25/20.png"><br>顺着往上找，还发现了ELF魔数<br><img src="/img/2025-3-25/21.png"><br>由此可以确定，前面提到的“运行时动态填充”，即是一个<code>自实现linker</code><br>而<code>dex解密与加载</code>逻辑正位于其加载的so中（称其为loaded.so）</p><p>idapython把该so dump下来<br>dump大小此时无法确定，但是发现过大时IDA控制台会报错，所以边尝试边缩小范围，最后划到了0x170000左右</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">length = <span class="number">0x170000</span></span><br><span class="line">start_address = <span class="number">0x00007FFF5A78C000</span></span><br><span class="line">output_path = <span class="string">r&quot;D:\loaded.so&quot;</span></span><br><span class="line"></span><br><span class="line">os.makedirs(os.path.dirname(output_path), exist_ok=<span class="literal">True</span>)</span><br><span class="line">data = idaapi.dbg_read_memory(start_address, length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[dump] <span class="subst">&#123;output_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果发现<code>程序头表处于加密状态</code><br><img src="/img/2025-3-25/22.png"></p><h3 id="自实现linker分析-I"><a href="#自实现linker分析-I" class="headerlink" title="自实现linker分析 I"></a>自实现linker分析 I</h3><p>这下没办法了，只能往前倒，研究自实现linker</p><p>与Android中so装载链接过程相似，自实现linker会在加载自身依赖库时 调用dlopen<br>可以通过这个切入点，定位到自实现linker逻辑<br><img src="/img/2025-3-25/24.png"><br>该函数中可以看到大量case分支，推断 sub_4120对应Android源码中<code>prelink_image阶段</code><br>其中参数a1为 soinfo结构体指针<br><img src="/img/2025-3-25/25.png"></p><p>沿着调用链往上一级<br>看到 prelink_image之前存在大量if嵌套逻辑，推断 sub_5B50对应源码中<code>read, load阶段</code><br><img src="/img/2025-3-25/26.png"><br>prelink_image之后，还看到一些case分支，推断 sub_4500对应源码中<code>relocate阶段</code><br>进一步推断其调用者 sub_4EF0对应源码中<code>link_image阶段</code><br><img src="/img/2025-3-25/27.png"></p><p>其中relocate阶段后，还发现一个关键函数<br>其中出现了0x38这个步长，这正好等于 <em>dump</em> 中所得so的 ELF头的 e_phentsize（程序头表项大小）<br><img src="/img/2025-3-25/28.png"><br>由此可确定，参数a1为 程序头表指针，a2为 e_phnum（程序头表项数量）</p><h3 id="loaded-so解密-I"><a href="#loaded-so解密-I" class="headerlink" title="loaded.so解密 I"></a>loaded.so解密 I</h3><p>基于上一步的分析，可以hook该关键函数，dump出解密的程序头表<br>其中大小用 e_phentsize * e_phnum 计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">dump_phdr</span>();    <span class="comment">// 新增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dump_phdr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> target_offset = <span class="number">0x67D0</span>;</span><br><span class="line">    <span class="keyword">const</span> dump_size = <span class="number">0x38</span> * <span class="number">7</span>;     <span class="comment">// e_phentsize * e_phnum </span></span><br><span class="line">    <span class="keyword">const</span> output_dir = <span class="string">&quot;/data/data/com.oacia.apk_protect/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> libjiagu = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">const</span> target_addr = libjiagu.<span class="property">base</span>.<span class="title function_">add</span>(target_offset);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(target_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> dump_path = output_dir + <span class="string">`phdr.bin`</span>;</span><br><span class="line">            <span class="keyword">const</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(dump_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">            <span class="keyword">const</span> dump_data = <span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">readByteArray</span>(dump_size);</span><br><span class="line">            file_handle.<span class="title function_">write</span>(dump_data);</span><br><span class="line">            file_handle.<span class="title function_">flush</span>();</span><br><span class="line">            file_handle.<span class="title function_">close</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]:&quot;</span>, dump_path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>dump出数据复制到loaded.so<br><img src="/img/2025-3-25/29.png"><br>这下能看到程序头表的数据了<br><img src="/img/2025-3-25/30.png"></p><p>不过Imports表还是空的，得Sofixer修复<br>然而修复后扔进IDA，发现还是空空如也<br><img src="/img/2025-3-25/31.png"><br>010Editor中一看，发现 .dynsym, .dynstr, .rela.dyn, .rela.plt 等节的 节头表项都未成功重建<br><img src="/img/2025-3-25/32.png"><br><code>.dynamic节也是处于加密状态</code><br><img src="/img/2025-3-25/33.png"><br>看来 loaded.so中需要解密的，不仅仅是程序头表</p><p>这里提一嘴，SoFixer修复会把ELF头的 e_machine字段改成AARCH64，记得改回<br><img src="/img/2025-3-25/50.png"><br>不然扔进IDA默认会以”ARM Little-endian”格式被解析（可手动改成”MetaPC (disassemble all opcodes)”）<br>同时也会影响后续的识别，比如重定位类型<br><img src="/img/2025-3-25/44.png"></p><h3 id="自实现linker分析-II"><a href="#自实现linker分析-II" class="headerlink" title="自实现linker分析 II"></a>自实现linker分析 II</h3><p>使用IDA插件 <a href="https://github.com/oacia/stalker_trace_so">stalker_trace_so</a>生成追踪逻辑<br>将其添加进先前脚本中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">relocate_proc_self_maps</span>();</span><br><span class="line">                <span class="title function_">trace_so</span>();    <span class="comment">// 新增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">relocate_proc_self_maps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func_addr = [<span class="number">0x2bc1</span>, <span class="number">0x2bd1</span>, <span class="number">0x2be1</span>, <span class="number">0x2bf1</span>, <span class="number">0x2c01</span>, <span class="number">0x2c11</span>, <span class="number">0x2c21</span>, <span class="number">0x2c31</span>, <span class="number">0x2c41</span>, <span class="number">0x2c51</span>, <span class="number">0x2c61</span>, <span class="number">0x2c71</span>, <span class="number">0x2c81</span>, <span class="number">0x2c91</span>, <span class="number">0x2ca1</span>, <span class="number">0x2cb1</span>, <span class="number">0x2cc1</span>, <span class="number">0x2cd1</span>, <span class="number">0x2ce1</span>, <span class="number">0x2cf1</span>, <span class="number">0x2d01</span>, <span class="number">0x2d11</span>, <span class="number">0x2d21</span>, <span class="number">0x2d31</span>, <span class="number">0x2d41</span>, <span class="number">0x2d51</span>, <span class="number">0x2d61</span>, <span class="number">0x2d71</span>, <span class="number">0x2d81</span>, <span class="number">0x2d91</span>, <span class="number">0x2db1</span>, <span class="number">0x2dc1</span>, <span class="number">0x2dd1</span>, <span class="number">0x2df1</span>, <span class="number">0x2e11</span>, <span class="number">0x2e21</span>, <span class="number">0x2e31</span>, <span class="number">0x2e41</span>, <span class="number">0x2e51</span>, <span class="number">0x2e61</span>, <span class="number">0x2e71</span>, <span class="number">0x2e81</span>, <span class="number">0x2e91</span>, <span class="number">0x2ea1</span>, <span class="number">0x2eb1</span>, <span class="number">0x2ec1</span>, <span class="number">0x2ed1</span>, <span class="number">0x2ee1</span>, <span class="number">0x2ef1</span>, <span class="number">0x2f01</span>, <span class="number">0x2f11</span>, <span class="number">0x2f21</span>, <span class="number">0x2f31</span>, <span class="number">0x2f41</span>, <span class="number">0x2f51</span>, <span class="number">0x2f61</span>, <span class="number">0x2f71</span>, <span class="number">0x2f81</span>, <span class="number">0x2f91</span>, <span class="number">0x2fa1</span>, <span class="number">0x2fb1</span>, <span class="number">0x2fc1</span>, <span class="number">0x2fd1</span>, <span class="number">0x2fe1</span>, <span class="number">0x2ff1</span>, <span class="number">0x3011</span>, <span class="number">0x3021</span>, <span class="number">0x3031</span>, <span class="number">0x3041</span>, <span class="number">0x3051</span>, <span class="number">0x3061</span>, <span class="number">0x3071</span>, <span class="number">0x3081</span>, <span class="number">0x3091</span>, <span class="number">0x30a1</span>, <span class="number">0x30b1</span>, <span class="number">0x30c1</span>, <span class="number">0x30d1</span>, <span class="number">0x30e1</span>, <span class="number">0x3401</span>, <span class="number">0x36b1</span>, <span class="number">0x3961</span>, <span class="number">0x3991</span>, <span class="number">0x39d1</span>, <span class="number">0x3aa1</span>, <span class="number">0x3ad1</span>, <span class="number">0x3b51</span>, <span class="number">0x3b81</span>, <span class="number">0x3dd1</span>, <span class="number">0x3f91</span>, <span class="number">0x3fc1</span>, <span class="number">0x4071</span>, <span class="number">0x4121</span>, <span class="number">0x4501</span>, <span class="number">0x4671</span>, <span class="number">0x4ef1</span>, <span class="number">0x4ff1</span>, <span class="number">0x51b1</span>, <span class="number">0x52e1</span>, <span class="number">0x5341</span>, <span class="number">0x5521</span>, <span class="number">0x5731</span>, <span class="number">0x5971</span>, <span class="number">0x5a11</span>, <span class="number">0x5ae1</span>, <span class="number">0x5b21</span>, <span class="number">0x5b51</span>, <span class="number">0x5d51</span>, <span class="number">0x5f31</span>, <span class="number">0x6111</span>, <span class="number">0x6201</span>, <span class="number">0x6761</span>, <span class="number">0x67d1</span>, <span class="number">0x6881</span>, <span class="number">0x69d1</span>, <span class="number">0x6a81</span>, <span class="number">0x6ac1</span>, <span class="number">0x6b01</span>, <span class="number">0x6b31</span>, <span class="number">0x6b41</span>, <span class="number">0x6ba1</span>, <span class="number">0x6c01</span>, <span class="number">0x6c31</span>, <span class="number">0x6cd1</span>, <span class="number">0x6d31</span>, <span class="number">0x6d91</span>, <span class="number">0x6dc1</span>, <span class="number">0x6e11</span>, <span class="number">0x6ec1</span>, <span class="number">0x6f01</span>, <span class="number">0x7011</span>, <span class="number">0x7061</span>, <span class="number">0x7151</span>, <span class="number">0x7181</span>, <span class="number">0x71b1</span>, <span class="number">0x71e1</span>, <span class="number">0x7211</span>, <span class="number">0x7241</span>, <span class="number">0x7271</span>, <span class="number">0x72a1</span>, <span class="number">0x7301</span>, <span class="number">0x7331</span>, <span class="number">0x7361</span>, <span class="number">0x7391</span>, <span class="number">0x73f1</span>, <span class="number">0x7501</span>, <span class="number">0x7611</span>, <span class="number">0x7671</span>, <span class="number">0x76d1</span>, <span class="number">0x7701</span>, <span class="number">0x7751</span>, <span class="number">0x77b1</span>, <span class="number">0x78d1</span>, <span class="number">0x7e31</span>, <span class="number">0x7ea1</span>, <span class="number">0x7f01</span>, <span class="number">0x7fb1</span>, <span class="number">0x7ff1</span>, <span class="number">0x8141</span>, <span class="number">0x82d1</span>, <span class="number">0x8461</span>, <span class="number">0x8491</span>, <span class="number">0x84c1</span>, <span class="number">0x8741</span>, <span class="number">0x8be1</span>, <span class="number">0x8c21</span>, <span class="number">0x8c51</span>, <span class="number">0x9791</span>, <span class="number">0x9e41</span>, <span class="number">0x9f31</span>, <span class="number">0x9fb1</span>, <span class="number">0xa011</span>, <span class="number">0xa081</span>, <span class="number">0xa211</span>, <span class="number">0xa2c1</span>, <span class="number">0xa2f1</span>, <span class="number">0xa421</span>, <span class="number">0xa831</span>, <span class="number">0xa881</span>, <span class="number">0xa8d1</span>, <span class="number">0xa9a1</span>, <span class="number">0xabc1</span>, <span class="number">0xaca1</span>, <span class="number">0xae91</span>, <span class="number">0xaf51</span>, <span class="number">0xb151</span>, <span class="number">0xb331</span>, <span class="number">0xb361</span>, <span class="number">0xb4d1</span>, <span class="number">0xb531</span>, <span class="number">0xb581</span>, <span class="number">0xb5b1</span>, <span class="number">0xb5c1</span>, <span class="number">0xb5d1</span>, <span class="number">0xb5f1</span>, <span class="number">0xb611</span>, <span class="number">0xb631</span>, <span class="number">0xb641</span>, <span class="number">0xb661</span>, <span class="number">0xb671</span>, <span class="number">0xb681</span>, <span class="number">0xb691</span>, <span class="number">0xb6a1</span>, <span class="number">0xb6b1</span>, <span class="number">0xb6c1</span>, <span class="number">0xb6d1</span>, <span class="number">0xb6e1</span>, <span class="number">0xb6f1</span>, <span class="number">0xb701</span>, <span class="number">0xb721</span>, <span class="number">0xb751</span>, <span class="number">0xb821</span>, <span class="number">0xb841</span>, <span class="number">0xb891</span>, <span class="number">0xb8d1</span>, <span class="number">0xb921</span>, <span class="number">0xb961</span>, <span class="number">0xb9b1</span>, <span class="number">0xba01</span>, <span class="number">0xba61</span>, <span class="number">0xbbb1</span>, <span class="number">0xbbf1</span>, <span class="number">0xbf51</span>, <span class="number">0xbfa1</span>, <span class="number">0xc0a1</span>, <span class="number">0xc3c1</span>, <span class="number">0xc6e1</span>, <span class="number">0xc8e1</span>, <span class="number">0xd621</span>, <span class="number">0x10431</span>, <span class="number">0x10721</span>, <span class="number">0x13851</span>, <span class="number">0x18531</span>, <span class="number">0x18661</span>, <span class="number">0x18791</span>, <span class="number">0x188c1</span>, <span class="number">0x18951</span>, <span class="number">0x189f1</span>, <span class="number">0x18a91</span>, <span class="number">0x19401</span>, <span class="number">0x194e1</span>, <span class="number">0x19a91</span>, <span class="number">0x19b31</span>, <span class="number">0x19d51</span>, <span class="number">0x1a161</span>, <span class="number">0x1a1c1</span>, <span class="number">0x1a53d</span>, <span class="number">0x1a6ab</span>, <span class="number">0x1a7f1</span>, <span class="number">0x1a8c1</span>, <span class="number">0x1a971</span>, <span class="number">0x1a991</span>, <span class="number">0x1a9c1</span>, <span class="number">0x1a9c9</span>, <span class="number">0x1a9d1</span>, <span class="number">0x1b431</span>, <span class="number">0x23cd29</span>, <span class="number">0x23cd31</span>, <span class="number">0x23cd39</span>, <span class="number">0x23cd41</span>, <span class="number">0x23cd49</span>, <span class="number">0x23cd51</span>, <span class="number">0x23cd59</span>, <span class="number">0x23cd61</span>, <span class="number">0x23cd69</span>, <span class="number">0x23cd71</span>, <span class="number">0x23cd79</span>, <span class="number">0x23cd81</span>, <span class="number">0x23cd89</span>, <span class="number">0x23cd91</span>, <span class="number">0x23cd99</span>, <span class="number">0x23cda1</span>, <span class="number">0x23cda9</span>, <span class="number">0x23cdb1</span>, <span class="number">0x23cdb9</span>, <span class="number">0x23cdc1</span>, <span class="number">0x23cdc9</span>, <span class="number">0x23cdd1</span>, <span class="number">0x23cdd9</span>, <span class="number">0x23cde1</span>, <span class="number">0x23cde9</span>, <span class="number">0x23cdf1</span>, <span class="number">0x23cdf9</span>, <span class="number">0x23ce01</span>, <span class="number">0x23ce09</span>, <span class="number">0x23ce11</span>, <span class="number">0x23ce19</span>, <span class="number">0x23ce21</span>, <span class="number">0x23ce29</span>, <span class="number">0x23ce31</span>, <span class="number">0x23ce39</span>, <span class="number">0x23ce41</span>, <span class="number">0x23ce49</span>, <span class="number">0x23ce51</span>, <span class="number">0x23ce59</span>, <span class="number">0x23ce61</span>, <span class="number">0x23ce69</span>, <span class="number">0x23ce71</span>, <span class="number">0x23ce79</span>, <span class="number">0x23ce81</span>, <span class="number">0x23ce89</span>, <span class="number">0x23ce91</span>, <span class="number">0x23ce99</span>, <span class="number">0x23cea1</span>, <span class="number">0x23cea9</span>, <span class="number">0x23ceb1</span>, <span class="number">0x23ceb9</span>, <span class="number">0x23cec1</span>, <span class="number">0x23cec9</span>, <span class="number">0x23ced1</span>, <span class="number">0x23ced9</span>, <span class="number">0x23cee1</span>, <span class="number">0x23cee9</span>, <span class="number">0x23cef1</span>, <span class="number">0x23cef9</span>, <span class="number">0x23cf01</span>, <span class="number">0x23cf09</span>, <span class="number">0x23cf11</span>, <span class="number">0x23cf19</span>, <span class="number">0x23cf21</span>, <span class="number">0x23cf29</span>, <span class="number">0x23cf31</span>, <span class="number">0x23cf39</span>, <span class="number">0x23cf41</span>, <span class="number">0x23cf49</span>, <span class="number">0x23cf51</span>, <span class="number">0x23cf61</span>, <span class="number">0x23cf69</span>, <span class="number">0x23cf71</span>, <span class="number">0x23cf79</span>];</span><br><span class="line"><span class="keyword">var</span> func_name = [<span class="string">&quot;.__cxa_finalize&quot;</span>, <span class="string">&quot;.memset&quot;</span>, <span class="string">&quot;.fopen&quot;</span>, <span class="string">&quot;.fgets&quot;</span>, <span class="string">&quot;.strstr&quot;</span>, <span class="string">&quot;.strncpy&quot;</span>, <span class="string">&quot;.fclose&quot;</span>, <span class="string">&quot;.__stack_chk_fail&quot;</span>, <span class="string">&quot;.open&quot;</span>, <span class="string">&quot;.lseek&quot;</span>, <span class="string">&quot;.mmap&quot;</span>, <span class="string">&quot;.munmap&quot;</span>, <span class="string">&quot;.close&quot;</span>, <span class="string">&quot;.uncompress&quot;</span>, <span class="string">&quot;.dlsym&quot;</span>, <span class="string">&quot;.dl_iterate_phdr&quot;</span>, <span class="string">&quot;.dladdr&quot;</span>, <span class="string">&quot;.calloc&quot;</span>, <span class="string">&quot;.strlen&quot;</span>, <span class="string">&quot;.dlopen&quot;</span>, <span class="string">&quot;.mprotect&quot;</span>, <span class="string">&quot;.strcmp&quot;</span>, <span class="string">&quot;.__errno&quot;</span>, <span class="string">&quot;.strerror&quot;</span>, <span class="string">&quot;._Znwm&quot;</span>, <span class="string">&quot;.sscanf&quot;</span>, <span class="string">&quot;.isspace&quot;</span>, <span class="string">&quot;.strncmp&quot;</span>, <span class="string">&quot;.sigaction&quot;</span>, <span class="string">&quot;.memcpy&quot;</span>, <span class="string">&quot;.free&quot;</span>, <span class="string">&quot;._ZdlPv&quot;</span>, <span class="string">&quot;.interpreter_wrap_int64_t&quot;</span>, <span class="string">&quot;._Znam&quot;</span>, <span class="string">&quot;.getpid&quot;</span>, <span class="string">&quot;.snprintf&quot;</span>, <span class="string">&quot;.read&quot;</span>, <span class="string">&quot;.malloc&quot;</span>, <span class="string">&quot;.opendir&quot;</span>, <span class="string">&quot;.readdir&quot;</span>, <span class="string">&quot;.strtol&quot;</span>, <span class="string">&quot;.closedir&quot;</span>, <span class="string">&quot;.inotify_init&quot;</span>, <span class="string">&quot;.inotify_add_watch&quot;</span>, <span class="string">&quot;.select&quot;</span>, <span class="string">&quot;.atoi&quot;</span>, <span class="string">&quot;.kill&quot;</span>, <span class="string">&quot;.prctl&quot;</span>, <span class="string">&quot;.pthread_create&quot;</span>, <span class="string">&quot;.pthread_detach&quot;</span>, <span class="string">&quot;.time&quot;</span>, <span class="string">&quot;.feof&quot;</span>, <span class="string">&quot;.raise&quot;</span>, <span class="string">&quot;.sprintf&quot;</span>, <span class="string">&quot;.syslog&quot;</span>, <span class="string">&quot;.getpagesize&quot;</span>, <span class="string">&quot;.__clear_cache&quot;</span>, <span class="string">&quot;.strdup&quot;</span>, <span class="string">&quot;.strcpy&quot;</span>, <span class="string">&quot;.isalpha&quot;</span>, <span class="string">&quot;.setenv&quot;</span>, <span class="string">&quot;.strtok&quot;</span>, <span class="string">&quot;._ZdaPv&quot;</span>, <span class="string">&quot;.getenv&quot;</span>, <span class="string">&quot;._Z10__arm_a_20v&quot;</span>, <span class="string">&quot;.abort&quot;</span>, <span class="string">&quot;.ffi_prep_cif_var&quot;</span>, <span class="string">&quot;.ffi_prep_cif&quot;</span>, <span class="string">&quot;.puts&quot;</span>, <span class="string">&quot;.ffi_call&quot;</span>, <span class="string">&quot;.fmodf&quot;</span>, <span class="string">&quot;.fmod&quot;</span>, <span class="string">&quot;.vsnprintf&quot;</span>, <span class="string">&quot;.ffi_call_unix64&quot;</span>, <span class="string">&quot;.ffi_closure_unix64_inner&quot;</span>, <span class="string">&quot;.ffi_prep_cif_machdep&quot;</span>, <span class="string">&quot;.ffi_prep_closure_loc&quot;</span>, <span class="string">&quot;sub_30D0&quot;</span>, <span class="string">&quot;sub_30E0&quot;</span>, <span class="string">&quot;sub_3400&quot;</span>, <span class="string">&quot;sub_36B0&quot;</span>, <span class="string">&quot;sub_3960&quot;</span>, <span class="string">&quot;sub_3990&quot;</span>, <span class="string">&quot;sub_39D0&quot;</span>, <span class="string">&quot;sub_3AA0&quot;</span>, <span class="string">&quot;sub_3AD0&quot;</span>, <span class="string">&quot;sub_3B50&quot;</span>, <span class="string">&quot;sub_3B80&quot;</span>, <span class="string">&quot;sub_3DD0&quot;</span>, <span class="string">&quot;sub_3F90&quot;</span>, <span class="string">&quot;sub_3FC0&quot;</span>, <span class="string">&quot;sub_4070&quot;</span>, <span class="string">&quot;prelink_image_4120&quot;</span>, <span class="string">&quot;relocate_4500&quot;</span>, <span class="string">&quot;sub_4670&quot;</span>, <span class="string">&quot;link_image_4EF0&quot;</span>, <span class="string">&quot;sub_4FF0&quot;</span>, <span class="string">&quot;sub_51B0&quot;</span>, <span class="string">&quot;sub_52E0&quot;</span>, <span class="string">&quot;sub_5340&quot;</span>, <span class="string">&quot;sub_5520&quot;</span>, <span class="string">&quot;sub_5730&quot;</span>, <span class="string">&quot;sub_5970&quot;</span>, <span class="string">&quot;sub_5A10&quot;</span>, <span class="string">&quot;sub_5AE0&quot;</span>, <span class="string">&quot;sub_5B20&quot;</span>, <span class="string">&quot;read_load_5B50&quot;</span>, <span class="string">&quot;sub_5D50&quot;</span>, <span class="string">&quot;sub_5F30&quot;</span>, <span class="string">&quot;sub_6110&quot;</span>, <span class="string">&quot;sub_6200&quot;</span>, <span class="string">&quot;_0x38_6760&quot;</span>, <span class="string">&quot;sub_67D0&quot;</span>, <span class="string">&quot;sub_6880&quot;</span>, <span class="string">&quot;sub_69D0&quot;</span>, <span class="string">&quot;sub_6A80&quot;</span>, <span class="string">&quot;sub_6AC0&quot;</span>, <span class="string">&quot;sub_6B00&quot;</span>, <span class="string">&quot;sub_6B30&quot;</span>, <span class="string">&quot;sub_6B40&quot;</span>, <span class="string">&quot;sub_6BA0&quot;</span>, <span class="string">&quot;sub_6C00&quot;</span>, <span class="string">&quot;sub_6C30&quot;</span>, <span class="string">&quot;sub_6CD0&quot;</span>, <span class="string">&quot;sub_6D30&quot;</span>, <span class="string">&quot;sub_6D90&quot;</span>, <span class="string">&quot;_ZN9__arm_c_19__arm_c_0Ev&quot;</span>, <span class="string">&quot;sub_6E10&quot;</span>, <span class="string">&quot;sub_6EC0&quot;</span>, <span class="string">&quot;sub_6F00&quot;</span>, <span class="string">&quot;sub_7010&quot;</span>, <span class="string">&quot;sub_7060&quot;</span>, <span class="string">&quot;sub_7150&quot;</span>, <span class="string">&quot;sub_7180&quot;</span>, <span class="string">&quot;sub_71B0&quot;</span>, <span class="string">&quot;sub_71E0&quot;</span>, <span class="string">&quot;sub_7210&quot;</span>, <span class="string">&quot;sub_7240&quot;</span>, <span class="string">&quot;sub_7270&quot;</span>, <span class="string">&quot;sub_72A0&quot;</span>, <span class="string">&quot;sub_7300&quot;</span>, <span class="string">&quot;sub_7330&quot;</span>, <span class="string">&quot;sub_7360&quot;</span>, <span class="string">&quot;sub_7390&quot;</span>, <span class="string">&quot;sub_73F0&quot;</span>, <span class="string">&quot;sub_7500&quot;</span>, <span class="string">&quot;sub_7610&quot;</span>, <span class="string">&quot;sub_7670&quot;</span>, <span class="string">&quot;sub_76D0&quot;</span>, <span class="string">&quot;_ZN10DynCryptor9__arm_c_0Ev&quot;</span>, <span class="string">&quot;sub_7750&quot;</span>, <span class="string">&quot;sub_77B0&quot;</span>, <span class="string">&quot;start_routine&quot;</span>, <span class="string">&quot;sub_7E30&quot;</span>, <span class="string">&quot;sub_7EA0&quot;</span>, <span class="string">&quot;_Z10__arm_a_21v&quot;</span>, <span class="string">&quot;_Z10__arm_a_20v&quot;</span>, <span class="string">&quot;sub_7FF0&quot;</span>, <span class="string">&quot;sub_8140&quot;</span>, <span class="string">&quot;sub_82D0&quot;</span>, <span class="string">&quot;sub_8460&quot;</span>, <span class="string">&quot;sub_8490&quot;</span>, <span class="string">&quot;sub_84C0&quot;</span>, <span class="string">&quot;sub_8740&quot;</span>, <span class="string">&quot;sub_8BE0&quot;</span>, <span class="string">&quot;sub_8C20&quot;</span>, <span class="string">&quot;sub_8C50&quot;</span>, <span class="string">&quot;sub_9790&quot;</span>, <span class="string">&quot;sub_9E40&quot;</span>, <span class="string">&quot;sub_9F30&quot;</span>, <span class="string">&quot;sub_9FB0&quot;</span>, <span class="string">&quot;_Z9__arm_a_2PcmS_Rii&quot;</span>, <span class="string">&quot;sub_A080&quot;</span>, <span class="string">&quot;sub_A210&quot;</span>, <span class="string">&quot;sub_A2C0&quot;</span>, <span class="string">&quot;sub_A2F0&quot;</span>, <span class="string">&quot;sub_A420&quot;</span>, <span class="string">&quot;sub_A830&quot;</span>, <span class="string">&quot;JNI_OnLoad&quot;</span>, <span class="string">&quot;sub_A8D0&quot;</span>, <span class="string">&quot;sub_A9A0&quot;</span>, <span class="string">&quot;sub_ABC0&quot;</span>, <span class="string">&quot;sub_ACA0&quot;</span>, <span class="string">&quot;sub_AE90&quot;</span>, <span class="string">&quot;sub_AF50&quot;</span>, <span class="string">&quot;sub_B150&quot;</span>, <span class="string">&quot;sub_B330&quot;</span>, <span class="string">&quot;sub_B360&quot;</span>, <span class="string">&quot;_Z9__arm_a_1P7_JavaVMP7_JNIEnvPvRi&quot;</span>, <span class="string">&quot;sub_B530&quot;</span>, <span class="string">&quot;sub_B580&quot;</span>, <span class="string">&quot;nullsub_1&quot;</span>, <span class="string">&quot;sub_B5C0&quot;</span>, <span class="string">&quot;sub_B5D0&quot;</span>, <span class="string">&quot;sub_B5F0&quot;</span>, <span class="string">&quot;sub_B610&quot;</span>, <span class="string">&quot;sub_B630&quot;</span>, <span class="string">&quot;sub_B640&quot;</span>, <span class="string">&quot;sub_B660&quot;</span>, <span class="string">&quot;nullsub_5&quot;</span>, <span class="string">&quot;nullsub_4&quot;</span>, <span class="string">&quot;nullsub_3&quot;</span>, <span class="string">&quot;nullsub_2&quot;</span>, <span class="string">&quot;j_._ZdlPv_3&quot;</span>, <span class="string">&quot;j_._ZdlPv_2&quot;</span>, <span class="string">&quot;j_._ZdlPv_1&quot;</span>, <span class="string">&quot;j_._ZdlPv_0&quot;</span>, <span class="string">&quot;j_._ZdlPv&quot;</span>, <span class="string">&quot;sub_B700&quot;</span>, <span class="string">&quot;sub_B720&quot;</span>, <span class="string">&quot;sub_B750&quot;</span>, <span class="string">&quot;sub_B820&quot;</span>, <span class="string">&quot;sub_B840&quot;</span>, <span class="string">&quot;sub_B890&quot;</span>, <span class="string">&quot;sub_B8D0&quot;</span>, <span class="string">&quot;sub_B920&quot;</span>, <span class="string">&quot;sub_B960&quot;</span>, <span class="string">&quot;sub_B9B0&quot;</span>, <span class="string">&quot;sub_BA00&quot;</span>, <span class="string">&quot;sub_BA60&quot;</span>, <span class="string">&quot;sub_BBB0&quot;</span>, <span class="string">&quot;sub_BBF0&quot;</span>, <span class="string">&quot;sub_BF50&quot;</span>, <span class="string">&quot;sub_BFA0&quot;</span>, <span class="string">&quot;sub_C0A0&quot;</span>, <span class="string">&quot;sub_C3C0&quot;</span>, <span class="string">&quot;sub_C6E0&quot;</span>, <span class="string">&quot;sub_C8E0&quot;</span>, <span class="string">&quot;sub_D620&quot;</span>, <span class="string">&quot;sub_10430&quot;</span>, <span class="string">&quot;sub_10720&quot;</span>, <span class="string">&quot;sub_13850&quot;</span>, <span class="string">&quot;interpreter_wrap_int64_t&quot;</span>, <span class="string">&quot;interpreter_wrap_float&quot;</span>, <span class="string">&quot;interpreter_wrap_double&quot;</span>, <span class="string">&quot;interpreter_wrap_int64_t_bridge&quot;</span>, <span class="string">&quot;interpreter_wrap_float_bridge&quot;</span>, <span class="string">&quot;interpreter_wrap_double_bridge&quot;</span>, <span class="string">&quot;sub_18A90&quot;</span>, <span class="string">&quot;sub_19400&quot;</span>, <span class="string">&quot;sub_194E0&quot;</span>, <span class="string">&quot;sub_19A90&quot;</span>, <span class="string">&quot;ffi_prep_cif_machdep&quot;</span>, <span class="string">&quot;ffi_call&quot;</span>, <span class="string">&quot;ffi_prep_closure_loc&quot;</span>, <span class="string">&quot;ffi_closure_unix64_inner&quot;</span>, <span class="string">&quot;ffi_call_unix64&quot;</span>, <span class="string">&quot;ffi_closure_unix64&quot;</span>, <span class="string">&quot;sub_1A7F0&quot;</span>, <span class="string">&quot;sub_1A8C0&quot;</span>, <span class="string">&quot;ffi_prep_cif&quot;</span>, <span class="string">&quot;ffi_prep_cif_var&quot;</span>, <span class="string">&quot;ffi_prep_closure&quot;</span>, <span class="string">&quot;__clear_cache&quot;</span>, <span class="string">&quot;_Z9__arm_a_0v&quot;</span>, <span class="string">&quot;sub_1B430&quot;</span>, <span class="string">&quot;__cxa_finalize&quot;</span>, <span class="string">&quot;__cxa_atexit&quot;</span>, <span class="string">&quot;__stack_chk_fail&quot;</span>, <span class="string">&quot;fclose&quot;</span>, <span class="string">&quot;fgets&quot;</span>, <span class="string">&quot;fopen&quot;</span>, <span class="string">&quot;memset&quot;</span>, <span class="string">&quot;strncpy&quot;</span>, <span class="string">&quot;strstr&quot;</span>, <span class="string">&quot;close&quot;</span>, <span class="string">&quot;lseek&quot;</span>, <span class="string">&quot;mmap&quot;</span>, <span class="string">&quot;munmap&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;strncmp&quot;</span>, <span class="string">&quot;__errno&quot;</span>, <span class="string">&quot;dlsym&quot;</span>, <span class="string">&quot;read&quot;</span>, <span class="string">&quot;uncompress&quot;</span>, <span class="string">&quot;free&quot;</span>, <span class="string">&quot;malloc&quot;</span>, <span class="string">&quot;memcpy&quot;</span>, <span class="string">&quot;_Znwm&quot;</span>, <span class="string">&quot;calloc&quot;</span>, <span class="string">&quot;dl_iterate_phdr&quot;</span>, <span class="string">&quot;dladdr&quot;</span>, <span class="string">&quot;dlopen&quot;</span>, <span class="string">&quot;isspace&quot;</span>, <span class="string">&quot;mprotect&quot;</span>, <span class="string">&quot;sigaction&quot;</span>, <span class="string">&quot;sscanf&quot;</span>, <span class="string">&quot;strcmp&quot;</span>, <span class="string">&quot;strerror&quot;</span>, <span class="string">&quot;strlen&quot;</span>, <span class="string">&quot;dlclose&quot;</span>, <span class="string">&quot;__cxa_pure_virtual&quot;</span>, <span class="string">&quot;_ZdlPv&quot;</span>, <span class="string">&quot;_ZdaPv&quot;</span>, <span class="string">&quot;_Znam&quot;</span>, <span class="string">&quot;fread&quot;</span>, <span class="string">&quot;fseek&quot;</span>, <span class="string">&quot;ftell&quot;</span>, <span class="string">&quot;fwrite&quot;</span>, <span class="string">&quot;atoi&quot;</span>, <span class="string">&quot;closedir&quot;</span>, <span class="string">&quot;getpid&quot;</span>, <span class="string">&quot;inotify_add_watch&quot;</span>, <span class="string">&quot;inotify_init&quot;</span>, <span class="string">&quot;kill&quot;</span>, <span class="string">&quot;opendir&quot;</span>, <span class="string">&quot;prctl&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>, <span class="string">&quot;pthread_detach&quot;</span>, <span class="string">&quot;readdir&quot;</span>, <span class="string">&quot;select&quot;</span>, <span class="string">&quot;snprintf&quot;</span>, <span class="string">&quot;strtol&quot;</span>, <span class="string">&quot;feof&quot;</span>, <span class="string">&quot;raise&quot;</span>, <span class="string">&quot;time&quot;</span>, <span class="string">&quot;sprintf&quot;</span>, <span class="string">&quot;syslog&quot;</span>, <span class="string">&quot;getpagesize&quot;</span>, <span class="string">&quot;getenv&quot;</span>, <span class="string">&quot;isalpha&quot;</span>, <span class="string">&quot;setenv&quot;</span>, <span class="string">&quot;strcpy&quot;</span>, <span class="string">&quot;strdup&quot;</span>, <span class="string">&quot;strtok&quot;</span>, <span class="string">&quot;abort&quot;</span>, <span class="string">&quot;puts&quot;</span>, <span class="string">&quot;fmodf&quot;</span>, <span class="string">&quot;fmod&quot;</span>, <span class="string">&quot;vsnprintf&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trace_so</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> times = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">var</span> pid = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start Stalker!&quot;</span>);</span><br><span class="line">    <span class="title class_">Stalker</span>.<span class="title function_">exclude</span>(&#123;</span><br><span class="line">        <span class="string">&quot;base&quot;</span>: <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>).<span class="property">base</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>).<span class="property">size</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">Stalker</span>.<span class="title function_">follow</span>(pid,&#123;</span><br><span class="line">        <span class="attr">events</span>:&#123;</span><br><span class="line">            <span class="attr">call</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">ret</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">exec</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">block</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">compile</span>:<span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onReceive</span>:<span class="keyword">function</span>(<span class="params">events</span>)&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">transform</span>: <span class="keyword">function</span> (<span class="params">iterator</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> instruction = iterator.<span class="title function_">next</span>();</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (func_addr.<span class="title function_">indexOf</span>(instruction.<span class="property">address</span> - <span class="variable language_">module</span>.<span class="property">base</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call&quot;</span> + times + <span class="string">&quot;:&quot;</span> + func_name[func_addr.<span class="title function_">indexOf</span>(instruction.<span class="property">address</span> - <span class="variable language_">module</span>.<span class="property">base</span>)])</span><br><span class="line">                    times = times + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                iterator.<span class="title function_">keep</span>();</span><br><span class="line">            &#125; <span class="keyword">while</span> ((instruction = iterator.<span class="title function_">next</span>()) !== <span class="literal">null</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onCallSummary</span>:<span class="keyword">function</span>(<span class="params">summary</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Stalker end!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>注入后可以看到应用运行时的 函数调用流程<br><img src="/img/2025-3-25/35.png"></p><p>其中几个关键函数调用如下<br>可以看到在真正开始加载so前，<code>先调用zlib库uncompress解压</code>（即libz.so），<code>后进行RC4解密</code><br><img src="/img/2025-3-25/37.png"><br>此时即便不知程序头表、.dynamic节等结构是整体解密还是独立解密，其实都有一点可以确定<br>那就是在后续开始加载so时，此时整个so都是已解密的<br>因此想要进一步解密loaded.so，只需在加载逻辑中 分别定位so各部分并dump，就像 <em>loaded.so解密 I</em> 中针对程序头表那样</p><p>进入后续分析前提一嘴，此程序soinfo结构体是自定义的<br>在内存布局上 与以下Android源码中的有所区别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">soinfo</span> &#123;</span><br><span class="line"><span class="comment">// #if defined(__work_around_b_24465209__)</span></span><br><span class="line"><span class="comment">//  private:</span></span><br><span class="line"><span class="comment">//   char old_name_[SOINFO_NAME_LEN];</span></span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr</span>;  <span class="comment">// 程序头表指针</span></span><br><span class="line">  <span class="type">size_t</span> phnum;</span><br><span class="line"><span class="comment">// #if defined(__work_around_b_24465209__)</span></span><br><span class="line"><span class="comment">//   ElfW(Addr) unused0;</span></span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) base;</span><br><span class="line">  <span class="type">size_t</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #if defined(__work_around_b_24465209__)</span></span><br><span class="line"><span class="comment">//   uint32_t unused1;</span></span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Dyn)* dynamic;   <span class="comment">// .dynamic节指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #if defined(__work_around_b_24465209__)</span></span><br><span class="line"><span class="comment">//   uint32_t unused2;</span></span><br><span class="line"><span class="comment">//   uint32_t unused3;</span></span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"></span><br><span class="line">  soinfo* next;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="type">uint32_t</span> flags_;</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* strtab_;</span><br><span class="line">  <span class="built_in">ElfW</span>(Sym)* symtab_;   <span class="comment">// .dynsym节指针</span></span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> nbucket_;</span><br><span class="line">  <span class="type">size_t</span> nchain_;</span><br><span class="line">  <span class="type">uint32_t</span>* bucket_;</span><br><span class="line">  <span class="type">uint32_t</span>* chain_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #if defined(__mips__) || !defined(__LP64__)</span></span><br><span class="line"><span class="comment">//   ElfW(Addr)** plt_got_;</span></span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">  <span class="built_in">ElfW</span>(Rela)* plt_rela_;    <span class="comment">// .rela.plt节指针</span></span><br><span class="line">  <span class="type">size_t</span> plt_rela_count_;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Rela)* rela_;    <span class="comment">// .rela.dyn节指针</span></span><br><span class="line">  <span class="type">size_t</span> rela_count_;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="comment">// ElfW(Rel)* plt_rel_;</span></span><br><span class="line">  <span class="comment">// size_t plt_rel_count_;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ElfW(Rel)* rel_;</span></span><br><span class="line">  <span class="comment">// size_t rel_count_;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>回到 prelink_image阶段，从 <em>自实现linker分析 I</em> 的分析可知参数一为 soinfo结构体指针<br>那么此时从其偏移256处获取的，就是 .dynamic节指针<br><img src="/img/2025-3-25/38.png"></p><h3 id="loaded-so解密-II"><a href="#loaded-so解密-II" class="headerlink" title="loaded.so解密 II"></a>loaded.so解密 II</h3><p>基于上述分析，hook目标函数，提取其参数指向位置 偏移256处的 .dynamic节指针<br>再dump其指向位置，大小则可在程序头表中查看<br><img src="/img/2025-3-25/39.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span> </span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">dump_dynamic</span>();     <span class="comment">// 新增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dump_dynamic</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> target_offset = <span class="number">0x4120</span>;</span><br><span class="line">    <span class="keyword">const</span> dump_size = <span class="number">0x200</span>;     </span><br><span class="line">    <span class="keyword">const</span> soinfo_offset = <span class="number">256</span>; </span><br><span class="line">    <span class="keyword">const</span> output_dir = <span class="string">&quot;/data/data/com.oacia.apk_protect/&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> libjiagu = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">const</span> target_addr = libjiagu.<span class="property">base</span>.<span class="title function_">add</span>(target_offset);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(target_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">soinfo</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> ptr_dynamic = <span class="variable language_">this</span>.<span class="property">soinfo</span>.<span class="title function_">add</span>(soinfo_offset).<span class="title function_">readPointer</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> dump_path = output_dir + <span class="string">`dynamic.bin`</span>;</span><br><span class="line">            <span class="keyword">const</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(dump_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> dump_data = ptr_dynamic.<span class="title function_">readByteArray</span>(dump_size);</span><br><span class="line">            file_handle.<span class="title function_">write</span>(dump_data);</span><br><span class="line">            file_handle.<span class="title function_">flush</span>();</span><br><span class="line">            file_handle.<span class="title function_">close</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump success]:&quot;</span>, dump_path, <span class="string">&quot;from pointer&quot;</span>, ptr_dynamic);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>dump出数据复制到loaded.so，修复后可以看到 一系列节头表项都已成功重建<br><img src="/img/2025-3-25/40.png"></p><p>IDA中查看各个节区，看到还剩下<code>.rela.dyn, .rela.plt节处于加密状态</code><br><img src="/img/2025-3-25/41.png"></p><h3 id="自实现linker分析-III"><a href="#自实现linker分析-III" class="headerlink" title="自实现linker分析 III"></a>自实现linker分析 III</h3><p>再来到 link_image, relocate阶段<br>可以看出此时分别从soinfo偏移处 312, 296处获取的，就是 .rela.dyn, .rela.plt这两个节的指针<br><img src="/img/2025-3-25/42.png"></p><h3 id="loaded-so解密-III"><a href="#loaded-so解密-III" class="headerlink" title="loaded.so解密 III"></a>loaded.so解密 III</h3><p>dump思路同上，不过这次dump大小可在上一步修复的so中查看<br><img src="/img/2025-3-25/43.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">dump_rela</span>();     <span class="comment">// 新增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dump_rela</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> target_offset = <span class="number">0x4500</span>;</span><br><span class="line">    <span class="keyword">const</span> output_dir = <span class="string">&quot;/data/data/com.oacia.apk_protect/&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> dump_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> libjiagu = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">const</span> target_addr = libjiagu.<span class="property">base</span>.<span class="title function_">add</span>(target_offset);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(target_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            dump_count++;</span><br><span class="line">            <span class="keyword">let</span> dump_size, dump_name;</span><br><span class="line">            <span class="keyword">if</span> (dump_count === <span class="number">1</span>) &#123;</span><br><span class="line">                dump_size = <span class="number">0x26568</span>;</span><br><span class="line">                dump_name = <span class="string">&quot;rela_dyn.bin&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dump_size = <span class="number">0x2250</span>;</span><br><span class="line">                dump_name = <span class="string">&quot;rela_plt.bin&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> dump_path = output_dir + dump_name;</span><br><span class="line">            <span class="keyword">const</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(dump_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">            <span class="keyword">const</span> dump_data = <span class="variable language_">this</span>.<span class="property">arg1</span>.<span class="title function_">readByteArray</span>(dump_size);</span><br><span class="line">            file_handle.<span class="title function_">write</span>(dump_data);</span><br><span class="line">            file_handle.<span class="title function_">flush</span>();</span><br><span class="line">            file_handle.<span class="title function_">close</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]:&quot;</span>, dump_path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>数据复制和修复操作同上，此时的loaded.so扔进IDA，可以看到终于是完全解密了<br><img src="/img/2025-3-25/51.png"></p><h3 id="frida检测绕过-II"><a href="#frida检测绕过-II" class="headerlink" title="frida检测绕过 II"></a>frida检测绕过 II</h3><p>别忘了 <em>frida检测绕过 I</em> 中劫持open读取，其实并未完全绕过frida检测，只是让程序能执行到<code>打开原dex</code>逻辑处</p><p>现在进一步定位后续检测逻辑的具体位置<br>hook pthread_create，打印调用栈、线程函数地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">relocate_proc_self_maps</span>();</span><br><span class="line">                <span class="title function_">print_start_routine</span>(so_name);    <span class="comment">// 新增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">relocate_proc_self_maps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print_start_routine</span>(<span class="params">so_name</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">let</span> baseAddr = <span class="variable language_">module</span>.<span class="property">base</span>;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="variable language_">module</span>.<span class="property">size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>), &#123;</span><br><span class="line">        <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> func_addr = args[<span class="number">2</span>]; </span><br><span class="line">            <span class="keyword">if</span> (func_addr.<span class="title function_">compare</span>(baseAddr) &gt;= <span class="number">0</span> &amp;&amp; func_addr.<span class="title function_">compare</span>(baseAddr.<span class="title function_">add</span>(size)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> relativeAddr = func_addr.<span class="title function_">sub</span>(baseAddr);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pthread_create] start_routine on &quot;</span> + so_name + <span class="string">&quot;!0x&quot;</span> + relativeAddr.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">                <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">FUZZY</span>).<span class="title function_">forEach</span>(addr_in_so);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addr_in_so</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title class_">Process</span>.<span class="title function_">enumerateModules</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (addr &gt;= <span class="variable language_">module</span>.<span class="property">base</span> &amp;&amp; addr &lt; <span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="variable language_">module</span>.<span class="property">size</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`0x<span class="subst">$&#123;addr.toString(<span class="number">16</span>)&#125;</span> in <span class="subst">$&#123;<span class="variable language_">module</span>.name&#125;</span>!0x<span class="subst">$&#123;addr.sub(<span class="variable language_">module</span>.base).toString(<span class="number">16</span>)&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>可以看到都是在 0x1a588 处被调用<br><img src="/img/2025-3-25/57.png"></p><p>发现此地址位置落在 第三方库libffi的内部函数 <code>ffi_call_unix64</code>中<br><img src="/img/2025-3-25/58.png"><br>这个库用于实现 跨语言动态调用函数，其核心逻辑由汇编实现<br>通过阅读源码可知，上面的参数a1指向 待调用函数的传参寄存器。共192字节，其中前8*6字节存储 rdi,rsi,rdx,rcx,r8,r9<br><img src="/img/2025-3-25/59.png"></p><p>由此hook ffi_call_unix64<br>打印其每次动态调用函数时 传入rdi-r9的值，以及这些值指向的字符串（如果本身是字符串指针的话）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">relocate_proc_self_maps</span>();</span><br><span class="line">                <span class="title function_">hook_ffi_call</span>();    <span class="comment">// 新增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">relocate_proc_self_maps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_ffi_call</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> moduleName = <span class="string">&quot;libjiagu_64.so&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> offset = <span class="number">0x1A53C</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(moduleName);</span><br><span class="line">    <span class="keyword">const</span> targetAddress = <span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(offset);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(targetAddress, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> registerArgsPtr = args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">MAX_GPR_REGS</span> = <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">let</span> gprValues = [];</span><br><span class="line">            <span class="keyword">let</span> gprStrings = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable constant_">MAX_GPR_REGS</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">const</span> gprValue = registerArgsPtr.<span class="title function_">add</span>(i * <span class="number">8</span>).<span class="title function_">readU64</span>(); </span><br><span class="line">                gprValues.<span class="title function_">push</span>(gprValue.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> str = gprValue != <span class="number">0</span> ? <span class="title function_">ptr</span>(gprValue).<span class="title function_">readCString</span>() : <span class="literal">null</span>;</span><br><span class="line">                    gprStrings.<span class="title function_">push</span>(str || <span class="string">&quot;&lt;null&gt;&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    gprStrings.<span class="title function_">push</span>(<span class="string">&quot;&lt;invalid&gt;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`gpr values: [<span class="subst">$&#123;gprValues.join(<span class="string">&quot;, &quot;</span>)&#125;</span>]`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`gpr strings: [<span class="subst">$&#123;gprStrings.join(<span class="string">&quot;, &quot;</span>)&#125;</span>]`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>可以从输出的一堆信息中检索到<code>特征字符串&quot;frida-agent-64.so&quot;</code><br><img src="/img/2025-3-25/60.png"><br>同时还惊奇地发现，应用竟不会像 <em>dump</em> 中那样卡在空白界面；而是在短暂打开主界面后，彻底退出（原因暂且不知……）<br><img src="/img/2025-3-25/61.png"></p><h1 id="主程序分析"><a href="#主程序分析" class="headerlink" title="主程序分析"></a>主程序分析</h1><h2 id="loaded-so"><a href="#loaded-so" class="headerlink" title="loaded.so"></a>loaded.so</h2><p>先把其基址设置为 在libjiagu.so中被加载时的偏移<br><img src="/img/2025-3-25/45.png"></p><h3 id="原dex解密分析"><a href="#原dex解密分析" class="headerlink" title="原dex解密分析"></a>原dex解密分析</h3><p>通过壳dex 文件头的 data_size, data_off定位到数据区域的末尾<br>发现后方还有一大堆可疑数据，且该数据开头和 <em>open上下文分析 I</em> 中得到的加密dex开头一致<br><img src="/img/2025-3-25/67.png"><br>由此可以确定，<code>原dex被加密保存在壳dex末尾</code></p><p>再次使用IDA插件 stalker_trace_so为 loaded.so生成追踪逻辑，并与 <em>自实现linker分析 II</em> 中的trace脚本合并<br>输出调用信息时，区分其来自哪个so</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">relocate_proc_self_maps</span>();</span><br><span class="line">                <span class="title function_">trace_so</span>();    <span class="comment">// 新增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">relocate_proc_self_maps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func_addr_libjiagu = [...];     <span class="comment">// 数组较长，这里暂且省略内容</span></span><br><span class="line"><span class="keyword">var</span> func_name_libjiagu =[...];</span><br><span class="line"><span class="keyword">var</span> func_addr_loaded = [...];</span><br><span class="line"><span class="keyword">var</span> func_name_loaded = [...];   </span><br><span class="line"><span class="keyword">var</span> func_addr = func_addr_libjiagu.<span class="title function_">concat</span>(func_addr_loaded);</span><br><span class="line"><span class="keyword">var</span> func_name = func_name_libjiagu.<span class="title function_">concat</span>(func_name_loaded);</span><br><span class="line"><span class="keyword">var</span> so_name = <span class="string">&quot;libjiagu_64.so&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trace_so</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> times = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">var</span> pid = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start Stalker!&quot;</span>);</span><br><span class="line">    <span class="title class_">Stalker</span>.<span class="title function_">exclude</span>(&#123;</span><br><span class="line">        <span class="string">&quot;base&quot;</span>: <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>).<span class="property">base</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>).<span class="property">size</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">Stalker</span>.<span class="title function_">follow</span>(pid,&#123;</span><br><span class="line">        <span class="attr">events</span>:&#123;</span><br><span class="line">            <span class="attr">call</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">ret</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">exec</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">block</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">compile</span>:<span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onReceive</span>:<span class="keyword">function</span>(<span class="params">events</span>)&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">transform</span>: <span class="keyword">function</span> (<span class="params">iterator</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> instruction = iterator.<span class="title function_">next</span>();</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (func_addr.<span class="title function_">indexOf</span>(instruction.<span class="property">address</span> - <span class="variable language_">module</span>.<span class="property">base</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> prefix = <span class="string">&quot;&quot;</span>;                </span><br><span class="line">                    <span class="keyword">if</span> (func_addr.<span class="title function_">indexOf</span>(instruction.<span class="property">address</span> - <span class="variable language_">module</span>.<span class="property">base</span>) &lt; func_addr_libjiagu.<span class="property">length</span>) &#123;</span><br><span class="line">                        prefix = <span class="string">&quot;[libjiagu.so] &quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        prefix = <span class="string">&quot;[loaded.so] &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                </span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(prefix + <span class="string">&quot;call&quot;</span> + times + <span class="string">&quot;:&quot;</span> + func_name[func_addr.<span class="title function_">indexOf</span>(instruction.<span class="property">address</span> - <span class="variable language_">module</span>.<span class="property">base</span>)])</span><br><span class="line">                    times = times + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                iterator.<span class="title function_">keep</span>();</span><br><span class="line">            &#125; <span class="keyword">while</span> ((instruction = iterator.<span class="title function_">next</span>()) !== <span class="literal">null</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onCallSummary</span>:<span class="keyword">function</span>(<span class="params">summary</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Stalker end!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><h3 id="open上下文分析-II"><a href="#open上下文分析-II" class="headerlink" title="open上下文分析 II"></a>open上下文分析 II</h3><p>回看 <em>open上下文分析 I</em> 中得到的open调用栈<br><img src="/img/2025-3-25/18.png"></p><p>来到 0x1a13f2处，这里直接调用了open<br><img src="/img/2025-3-25/64.png"><br>往上一级，来到一个有将近三千行伪代码的函数中<br>看来 <em>open上下文分析 I</em> 中所说的<code>dex解密与加载</code>逻辑，大概率就是在该函数中了<br><img src="/img/2025-3-25/65.png"></p><p>顺着往下寻找，发现一个可疑函数的调用<br>其中存在大量<code>字符串解密</code>逻辑，对应”DexFileLoader”等字符串<br>说明这里是在<code>对已解密dex进行加载</code><br><img src="/img/2025-3-25/66.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>壳dex：<br>libjiagu.so加载</li><li>libjiagu.so：<br>frida检测（&#x2F;proc&#x2F;self&#x2F;maps, “frida-agent-64.so”）<br>loaded.so解压（zlib uncompress）、解密（RC4，分phdr, .rela.plt, .rela.dyn, .dynamic四部分进行）、加载（自实现linker）</li><li>loaded.so：<br>原dex解压（zlib uncompress，来自壳dex末尾）、解密（RC4，每个dex开一个线程进行）、加载</li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dex执行机制</title>
      <link href="/2025/03/17/2025-3-17%20dex%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/2025/03/17/2025-3-17%20dex%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>最近在研究 DexVMP，了解到其内部虚拟机的设计思路，一定程度上借鉴了ART的解释器<br>因此这里从 Android 9.0 源码入手，探讨dex在ART中的执行机制，以加深对 DexVMP的理解</p><p>因为整体调用链很长，且涉及多处递归调用，这里放一下整体流程图————<br>（箭头表示调用关系）<br><img src="/img/2025-3-17/1.jpg"></p><h1 id="C-Framework-I"><a href="#C-Framework-I" class="headerlink" title="C++ Framework I"></a>C++ Framework I</h1><h2 id="ArtMethod-Invoke"><a href="#ArtMethod-Invoke" class="headerlink" title="ArtMethod::Invoke"></a>ArtMethod::Invoke</h2><p>根据当前方法是否有现成 AOT或JIT后的已编译代码，分别调用 art_quick_invoke_stub 或 EnterInterpreterFromInvoke<br>调用前者之前，会通过 GetEntryPointFromQuickCompiledCode 返回当前方法 已编译代码的入口点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/art_method.cc#318</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ArtMethod::Invoke</span><span class="params">(Thread* self, <span class="type">uint32_t</span>* args, <span class="type">uint32_t</span> args_size, JValue* result,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="type">const</span> <span class="type">char</span>* shorty)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">UNLIKELY</span>(!runtime-&gt;<span class="built_in">IsStarted</span>() || Dbg::<span class="built_in">IsForcedInterpreterNeededForCalling</span>(self, <span class="keyword">this</span>))) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsStatic</span>()) &#123;</span><br><span class="line">      art::interpreter::<span class="built_in">EnterInterpreterFromInvoke</span>(</span><br><span class="line">          self, <span class="keyword">this</span>, <span class="literal">nullptr</span>, args, result, <span class="comment">/*stay_in_interpreter*/</span> <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mirror::Object* receiver =</span><br><span class="line">          <span class="keyword">reinterpret_cast</span>&lt;StackReference&lt;mirror::Object&gt;*&gt;(&amp;args[<span class="number">0</span>])-&gt;<span class="built_in">AsMirrorPtr</span>();</span><br><span class="line">      art::interpreter::<span class="built_in">EnterInterpreterFromInvoke</span>(</span><br><span class="line">          self, <span class="keyword">this</span>, receiver, args + <span class="number">1</span>, result, <span class="comment">/*stay_in_interpreter*/</span> <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">DCHECK_EQ</span>(runtime-&gt;<span class="built_in">GetClassLinker</span>()-&gt;<span class="built_in">GetImagePointerSize</span>(), kRuntimePointerSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">bool</span> kLogInvocationStartAndReturn = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> have_quick_code = <span class="built_in">GetEntryPointFromQuickCompiledCode</span>() != <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LIKELY</span>(have_quick_code)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (kLogInvocationStartAndReturn) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="built_in">StringPrintf</span>(</span><br><span class="line">            <span class="string">&quot;Invoking &#x27;%s&#x27; quick code=%p static=%d&quot;</span>, <span class="built_in">PrettyMethod</span>().<span class="built_in">c_str</span>(),</span><br><span class="line">            <span class="built_in">GetEntryPointFromQuickCompiledCode</span>(), <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">IsStatic</span>() ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">IsStatic</span>()) &#123;</span><br><span class="line">        (*art_quick_invoke_stub)(<span class="keyword">this</span>, args, args_size, self, result, shorty);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (*art_quick_invoke_static_stub)(<span class="keyword">this</span>, args, args_size, self, result, shorty);</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="art-quick-invoke-stub"><a href="#art-quick-invoke-stub" class="headerlink" title="art_quick_invoke_stub"></a>art_quick_invoke_stub</h3><p>快速执行入口点，基于汇编实现</p><p>根据方法的签名将参数加入对应arm64寄存器，然后调用目标方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/arch/arm64/quick_entrypoints_arm64.S#805</span></span><br><span class="line"></span><br><span class="line">ENTRY art_quick_invoke_stub</span><br><span class="line">    <span class="comment">// Spill registers as per AACPS64 calling convention.</span></span><br><span class="line">    INVOKE_STUB_CREATE_FRAME</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fill registers x/w1 to x/w7 and s/d0 to s/d7 with parameters.</span></span><br><span class="line">    <span class="comment">// Parse the passed shorty to determine which register to load.</span></span><br><span class="line">    <span class="comment">// Load addresses for routines that load WXSD registers.</span></span><br><span class="line">    adr  x11, .LstoreW2</span><br><span class="line">    adr  x12, .LstoreX2</span><br><span class="line">    adr  x13, .LstoreS0</span><br><span class="line">    adr  x14, .LstoreD0</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize routine offsets to 0 for integers and floats.</span></span><br><span class="line">    <span class="comment">// x8 for integers, x15 for floating point.</span></span><br><span class="line">    mov x8, #<span class="number">0</span></span><br><span class="line">    mov x15, #<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    add x10, x5, #<span class="number">1</span>         <span class="comment">// Load shorty address, plus one to skip return value.</span></span><br><span class="line">    ldr w1, [x9],#<span class="number">4</span>         <span class="comment">// Load &quot;this&quot; parameter, and increment arg pointer.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop to fill registers.</span></span><br><span class="line">.LfillRegisters:</span><br><span class="line">    ldrb w17, [x10], #<span class="number">1</span>       <span class="comment">// Load next character in signature, and increment.</span></span><br><span class="line">    cbz w17, .LcallFunction   <span class="comment">// Exit at end of signature. Shorty 0 terminated.</span></span><br><span class="line"></span><br><span class="line">    cmp  w17, #<span class="string">&#x27;F&#x27;</span> <span class="comment">// is this a float?</span></span><br><span class="line">    bne .LisDouble</span><br><span class="line"></span><br><span class="line">    cmp x15, # <span class="number">8</span>*<span class="number">12</span>         <span class="comment">// Skip this load if all registers full.</span></span><br><span class="line">    beq .Ladvance4</span><br><span class="line"></span><br><span class="line">    add x17, x13, x15       <span class="comment">// Calculate subroutine to jump to.</span></span><br><span class="line">    br  x17</span><br><span class="line"></span><br><span class="line">.LisDouble:</span><br><span class="line">    cmp w17, #<span class="string">&#x27;D&#x27;</span>           <span class="comment">// is this a double?</span></span><br><span class="line">    bne .LisLong</span><br><span class="line"></span><br><span class="line">    cmp x15, # <span class="number">8</span>*<span class="number">12</span>         <span class="comment">// Skip this load if all registers full.</span></span><br><span class="line">    beq .Ladvance8</span><br><span class="line"></span><br><span class="line">    add x17, x14, x15       <span class="comment">// Calculate subroutine to jump to.</span></span><br><span class="line">    br x17</span><br><span class="line"></span><br><span class="line">.LisLong:</span><br><span class="line">    cmp w17, #<span class="string">&#x27;J&#x27;</span>           <span class="comment">// is this a long?</span></span><br><span class="line">    bne .LisOther</span><br><span class="line"></span><br><span class="line">    cmp x8, # <span class="number">6</span>*<span class="number">12</span>          <span class="comment">// Skip this load if all registers full.</span></span><br><span class="line">    beq .Ladvance8</span><br><span class="line"></span><br><span class="line">    add x17, x12, x8        <span class="comment">// Calculate subroutine to jump to.</span></span><br><span class="line">    br x17</span><br><span class="line"></span><br><span class="line">.LisOther:                  <span class="comment">// Everything else takes one vReg.</span></span><br><span class="line">    cmp x8, # <span class="number">6</span>*<span class="number">12</span>          <span class="comment">// Skip this load if all registers full.</span></span><br><span class="line">    beq .Ladvance4</span><br><span class="line"></span><br><span class="line">    add x17, x11, x8        <span class="comment">// Calculate subroutine to jump to.</span></span><br><span class="line">    br x17</span><br><span class="line"></span><br><span class="line">.Ladvance4:</span><br><span class="line">    add x9, x9, #<span class="number">4</span></span><br><span class="line">    b .LfillRegisters</span><br><span class="line"></span><br><span class="line">.Ladvance8:</span><br><span class="line">    add x9, x9, #<span class="number">8</span></span><br><span class="line">    b .LfillRegisters</span><br><span class="line"></span><br><span class="line"><span class="comment">// Macro for loading a parameter into a register.</span></span><br><span class="line"><span class="comment">//  counter - the register with offset into these tables</span></span><br><span class="line"><span class="comment">//  size - the size of the register - 4 or 8 bytes.</span></span><br><span class="line"><span class="comment">//  register - the name of the register to be loaded.</span></span><br><span class="line">.macro LOADREG counter size <span class="keyword">register</span> <span class="keyword">return</span></span><br><span class="line">    ldr \<span class="keyword">register</span> , [x9], #\size</span><br><span class="line">    add \counter, \counter, <span class="number">12</span></span><br><span class="line">    b \<span class="keyword">return</span></span><br><span class="line">.endm</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store ints.</span></span><br><span class="line">.LstoreW2:</span><br><span class="line">    LOADREG x8 <span class="number">4</span> w2 .LfillRegisters</span><br><span class="line">    LOADREG x8 <span class="number">4</span> w3 .LfillRegisters</span><br><span class="line">    LOADREG x8 <span class="number">4</span> w4 .LfillRegisters</span><br><span class="line">    LOADREG x8 <span class="number">4</span> w5 .LfillRegisters</span><br><span class="line">    LOADREG x8 <span class="number">4</span> w6 .LfillRegisters</span><br><span class="line">    LOADREG x8 <span class="number">4</span> w7 .LfillRegisters</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store longs.</span></span><br><span class="line">.LstoreX2:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store singles.</span></span><br><span class="line">.LstoreS0:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store doubles.</span></span><br><span class="line">.LstoreD0:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.LcallFunction:</span><br><span class="line"></span><br><span class="line">    INVOKE_STUB_CALL_AND_RETURN</span><br><span class="line"></span><br><span class="line">END art_quick_invoke_stub</span><br></pre></td></tr></table></figure><h3 id="EnterInterpreterFromInvoke"><a href="#EnterInterpreterFromInvoke" class="headerlink" title="EnterInterpreterFromInvoke"></a>EnterInterpreterFromInvoke</h3><p>解释执行入口点</p><p>先获取方法的字节码和寄存器信息；<br>再初始化该方法的 Shadow Frame，其中包含该方法信息和 后续解释过程用于存储参数、局部变量的虚拟寄存器；<br>最后根据要调用的方法是 java 或 native，分别调用 Execute 或 InterpreterJni</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter.cc#370</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnterInterpreterFromInvoke</span><span class="params">(Thread* self,</span></span></span><br><span class="line"><span class="params"><span class="function">                                ArtMethod* method,</span></span></span><br><span class="line"><span class="params"><span class="function">                                ObjPtr&lt;mirror::Object&gt; receiver,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">uint32_t</span>* args,</span></span></span><br><span class="line"><span class="params"><span class="function">                                JValue* result,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">bool</span> stay_in_interpreter)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function">CodeItemDataAccessor <span class="title">accessor</span><span class="params">(method-&gt;DexInstructionData())</span></span>;</span><br><span class="line">  <span class="type">uint16_t</span> num_regs;</span><br><span class="line">  <span class="type">uint16_t</span> num_ins;</span><br><span class="line">  <span class="keyword">if</span> (accessor.<span class="built_in">HasCodeItem</span>()) &#123;</span><br><span class="line">    num_regs =  accessor.<span class="built_in">RegistersSize</span>();</span><br><span class="line">    num_ins = accessor.<span class="built_in">InsSize</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!method-&gt;<span class="built_in">IsInvokable</span>()) &#123;</span><br><span class="line">    self-&gt;<span class="built_in">EndAssertNoThreadSuspension</span>(old_cause);</span><br><span class="line">    method-&gt;<span class="built_in">ThrowInvocationTimeError</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">DCHECK</span>(method-&gt;<span class="built_in">IsNative</span>());</span><br><span class="line">    num_regs = num_ins = ArtMethod::<span class="built_in">NumArgRegisters</span>(method-&gt;<span class="built_in">GetShorty</span>());</span><br><span class="line">    <span class="keyword">if</span> (!method-&gt;<span class="built_in">IsStatic</span>()) &#123;</span><br><span class="line">      num_regs++;</span><br><span class="line">      num_ins++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Set up shadow frame with matching number of reference slots to vregs.</span></span><br><span class="line">  ShadowFrame* last_shadow_frame = self-&gt;<span class="built_in">GetManagedStack</span>()-&gt;<span class="built_in">GetTopShadowFrame</span>();</span><br><span class="line">  ShadowFrameAllocaUniquePtr shadow_frame_unique_ptr =</span><br><span class="line">      <span class="built_in">CREATE_SHADOW_FRAME</span>(num_regs, last_shadow_frame, method, <span class="comment">/* dex pc */</span> <span class="number">0</span>);</span><br><span class="line">  ShadowFrame* shadow_frame = shadow_frame_unique_ptr.<span class="built_in">get</span>();</span><br><span class="line">  self-&gt;<span class="built_in">PushShadowFrame</span>(shadow_frame);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> cur_reg = num_regs - num_ins;</span><br><span class="line">  <span class="keyword">if</span> (!method-&gt;<span class="built_in">IsStatic</span>()) &#123;</span><br><span class="line">    <span class="built_in">CHECK</span>(receiver != <span class="literal">nullptr</span>);</span><br><span class="line">    shadow_frame-&gt;<span class="built_in">SetVRegReference</span>(cur_reg, receiver.<span class="built_in">Ptr</span>());</span><br><span class="line">    ++cur_reg;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">uint32_t</span> shorty_len = <span class="number">0</span>;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* shorty = method-&gt;<span class="built_in">GetShorty</span>(&amp;shorty_len);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> shorty_pos = <span class="number">0</span>, arg_pos = <span class="number">0</span>; cur_reg &lt; num_regs; ++shorty_pos, ++arg_pos, cur_reg++) &#123;</span><br><span class="line">    <span class="built_in">DCHECK_LT</span>(shorty_pos + <span class="number">1</span>, shorty_len);</span><br><span class="line">    <span class="keyword">switch</span> (shorty[shorty_pos + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: &#123;</span><br><span class="line">        ObjPtr&lt;mirror::Object&gt; o =</span><br><span class="line">            <span class="keyword">reinterpret_cast</span>&lt;StackReference&lt;mirror::Object&gt;*&gt;(&amp;args[arg_pos])-&gt;<span class="built_in">AsMirrorPtr</span>();</span><br><span class="line">        shadow_frame-&gt;<span class="built_in">SetVRegReference</span>(cur_reg, o.<span class="built_in">Ptr</span>());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;J&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: &#123;</span><br><span class="line">        <span class="type">uint64_t</span> wide_value = (<span class="built_in">static_cast</span>&lt;<span class="type">uint64_t</span>&gt;(args[arg_pos + <span class="number">1</span>]) &lt;&lt; <span class="number">32</span>) | args[arg_pos];</span><br><span class="line">        shadow_frame-&gt;<span class="built_in">SetVRegLong</span>(cur_reg, wide_value);</span><br><span class="line">        cur_reg++;</span><br><span class="line">        arg_pos++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        shadow_frame-&gt;<span class="built_in">SetVReg</span>(cur_reg, args[arg_pos]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">LIKELY</span>(!method-&gt;<span class="built_in">IsNative</span>())) &#123;</span><br><span class="line">    JValue r = <span class="built_in">Execute</span>(self, accessor, *shadow_frame, <span class="built_in">JValue</span>(), stay_in_interpreter);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      *result = r;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    args = shadow_frame-&gt;<span class="built_in">GetVRegArgs</span>(method-&gt;<span class="built_in">IsStatic</span>() ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!Runtime::<span class="built_in">Current</span>()-&gt;<span class="built_in">IsStarted</span>()) &#123;</span><br><span class="line">      UnstartedRuntime::<span class="built_in">Jni</span>(self, method, receiver.<span class="built_in">Ptr</span>(), args, result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">InterpreterJni</span>(self, method, shorty, receiver, args, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  self-&gt;<span class="built_in">PopShadowFrame</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h4><p>在后续 ArtInterpreterToInterpreterBridge 中被递归调用</p><p>根据是否有现成的 已编译代码，分别调用 ArtInterpreterToCompiledCodeBridge 或  ExecuteMterpImpl, ExecuteSwitchImpl<br>其中优先使用 ExecuteMterpImpl，如果遇到无法处理的情况，则回退到 ExecuteSwitchImpl</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter.cc#241</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> JValue <span class="title">Execute</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    Thread* self,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> CodeItemDataAccessor&amp; accessor,</span></span></span><br><span class="line"><span class="params"><span class="function">    ShadowFrame&amp; shadow_frame,</span></span></span><br><span class="line"><span class="params"><span class="function">    JValue result_register,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">bool</span> stay_in_interpreter = <span class="literal">false</span>)</span> <span class="title">REQUIRES_SHARED</span><span class="params">(Locks::mutator_lock_)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">LIKELY</span>(shadow_frame.<span class="built_in">GetDexPC</span>() == <span class="number">0</span>)) &#123;  <span class="comment">// Entering the method, but not via deoptimization.</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!stay_in_interpreter) &#123;</span><br><span class="line">      jit::Jit* jit = Runtime::<span class="built_in">Current</span>()-&gt;<span class="built_in">GetJit</span>();</span><br><span class="line">      <span class="keyword">if</span> (jit != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        jit-&gt;<span class="built_in">MethodEntered</span>(self, shadow_frame.<span class="built_in">GetMethod</span>());</span><br><span class="line">        <span class="keyword">if</span> (jit-&gt;<span class="built_in">CanInvokeCompiledCode</span>(method)) &#123;</span><br><span class="line">          JValue result;</span><br><span class="line"></span><br><span class="line">          self-&gt;<span class="built_in">PopShadowFrame</span>();</span><br><span class="line">          <span class="type">uint16_t</span> arg_offset = accessor.<span class="built_in">RegistersSize</span>() - accessor.<span class="built_in">InsSize</span>();</span><br><span class="line">          <span class="built_in">ArtInterpreterToCompiledCodeBridge</span>(self, <span class="literal">nullptr</span>, &amp;shadow_frame, arg_offset, &amp;result);</span><br><span class="line">          <span class="comment">// Push the shadow frame back as the caller will expect it.</span></span><br><span class="line">          self-&gt;<span class="built_in">PushShadowFrame</span>(&amp;shadow_frame);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">LIKELY</span>(method-&gt;<span class="built_in">SkipAccessChecks</span>())) &#123;</span><br><span class="line">    <span class="comment">// Enter the &quot;without access check&quot; interpreter.</span></span><br><span class="line">    <span class="keyword">if</span> (kInterpreterImplKind == kMterpImplKind) &#123;</span><br><span class="line">      <span class="keyword">if</span> (transaction_active) &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="comment">// Mterp does not support all instrumentation/debugging.</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">MterpShouldSwitchInterpreters</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">ExecuteSwitchImpl</span>&lt;<span class="literal">false</span>, <span class="literal">false</span>&gt;(self, accessor, shadow_frame, result_register,</span><br><span class="line">                                                   <span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="type">bool</span> returned = <span class="built_in">ExecuteMterpImpl</span>(self,</span><br><span class="line">                                           accessor.<span class="built_in">Insns</span>(),</span><br><span class="line">                                           &amp;shadow_frame,</span><br><span class="line">                                           &amp;result_register);</span><br><span class="line">          <span class="keyword">if</span> (returned) &#123;</span><br><span class="line">            <span class="keyword">return</span> result_register;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Mterp didn&#x27;t like that instruction.  Single-step it with the reference interpreter.</span></span><br><span class="line">            result_register = <span class="built_in">ExecuteSwitchImpl</span>&lt;<span class="literal">false</span>, <span class="literal">false</span>&gt;(self, accessor, shadow_frame,</span><br><span class="line">                                                              result_register, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (shadow_frame.<span class="built_in">GetDexPC</span>() == dex::kDexNoIndex) &#123;</span><br><span class="line">              <span class="comment">// Single-stepped a return or an exception not handled locally.  Return to caller.</span></span><br><span class="line">              <span class="keyword">return</span> result_register;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InterpreterJni"><a href="#InterpreterJni" class="headerlink" title="InterpreterJni"></a>InterpreterJni</h4><p>根据方法的签名和类型，调用其对应的native实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter.cc#46</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">InterpreterJni</span><span class="params">(Thread* self,</span></span></span><br><span class="line"><span class="params"><span class="function">                           ArtMethod* method,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">const</span> StringPiece&amp; shorty,</span></span></span><br><span class="line"><span class="params"><span class="function">                           ObjPtr&lt;mirror::Object&gt; receiver,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">uint32_t</span>* args,</span></span></span><br><span class="line"><span class="params"><span class="function">                           JValue* result)</span></span></span><br><span class="line"><span class="function">    <span class="title">REQUIRES_SHARED</span><span class="params">(Locks::mutator_lock_)</span> </span>&#123;</span><br><span class="line">  <span class="function">ScopedObjectAccessUnchecked <span class="title">soa</span><span class="params">(self)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (method-&gt;<span class="built_in">IsStatic</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (shorty == <span class="string">&quot;L&quot;</span>) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">typedef</span> <span class="title">jobject</span> <span class="params">(fntype)</span><span class="params">(JNIEnv*, jclass)</span></span>;</span><br><span class="line">      fntype* <span class="type">const</span> fn = <span class="built_in">reinterpret_cast</span>&lt;fntype*&gt;(method-&gt;<span class="built_in">GetEntryPointFromJni</span>());</span><br><span class="line">      <span class="function">ScopedLocalRef&lt;jclass&gt; <span class="title">klass</span><span class="params">(soa.Env(),</span></span></span><br><span class="line"><span class="params"><span class="function">                                   soa.AddLocalReference&lt;jclass&gt;(method-&gt;GetDeclaringClass()))</span></span>;</span><br><span class="line">      jobject jresult;</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="function">ScopedThreadStateChange <span class="title">tsc</span><span class="params">(self, kNative)</span></span>;</span><br><span class="line">        jresult = <span class="built_in">fn</span>(soa.<span class="built_in">Env</span>(), klass.<span class="built_in">get</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      result-&gt;<span class="built_in">SetL</span>(soa.<span class="built_in">Decode</span>&lt;mirror::Object&gt;(jresult));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shorty == <span class="string">&quot;V&quot;</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Framework-II"><a href="#C-Framework-II" class="headerlink" title="C++ Framework II"></a>C++ Framework II</h1><p>承接上方 Execute</p><h2 id="ArtInterpreterToCompiledCodeBridge"><a href="#ArtInterpreterToCompiledCodeBridge" class="headerlink" title="ArtInterpreterToCompiledCodeBridge"></a>ArtInterpreterToCompiledCodeBridge</h2><p>在后续 PerformCall 中被递归调用<br>其中递归调用 ArtMethod::Invoke</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter_common.cc#522</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ArtInterpreterToCompiledCodeBridge</span><span class="params">(Thread* self,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        ArtMethod* caller,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        ShadowFrame* shadow_frame,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">uint16_t</span> arg_offset,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        JValue* result)</span></span></span><br><span class="line"><span class="function">    <span class="title">REQUIRES_SHARED</span><span class="params">(Locks::mutator_lock_)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  method-&gt;<span class="built_in">Invoke</span>(self, shadow_frame-&gt;<span class="built_in">GetVRegArgs</span>(arg_offset),</span><br><span class="line">                 (shadow_frame-&gt;<span class="built_in">NumberOfVRegs</span>() - arg_offset) * <span class="built_in">sizeof</span>(<span class="type">uint32_t</span>),</span><br><span class="line">                 result, method-&gt;<span class="built_in">GetInterfaceMethodIfProxy</span>(kRuntimePointerSize)-&gt;<span class="built_in">GetShorty</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ExecuteMterpImpl"><a href="#ExecuteMterpImpl" class="headerlink" title="ExecuteMterpImpl"></a>ExecuteMterpImpl</h2><p>Mterp 解释器，与下方 Goto 解释器相似，但基于汇编实现<br>每个操作码的handler为一个独立模块，其结尾间接跳转至后续模块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/mterp/arm64/entry.S#28</span></span><br><span class="line"></span><br><span class="line">ENTRY ExecuteMterpImpl</span><br><span class="line">    SAVE_TWO_REGS_INCREASE_FRAME xPROFILE, x27, <span class="number">80</span></span><br><span class="line">    SAVE_TWO_REGS                xIBASE, xREFS, <span class="number">16</span></span><br><span class="line">    SAVE_TWO_REGS                xSELF, xINST, <span class="number">32</span></span><br><span class="line">    SAVE_TWO_REGS                xPC, xFP, <span class="number">48</span></span><br><span class="line">    SAVE_TWO_REGS                fp, lr, <span class="number">64</span></span><br><span class="line">    add     fp, sp, #<span class="number">64</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Remember the return register */</span></span><br><span class="line">    str     x3, [x2, #SHADOWFRAME_RESULT_REGISTER_OFFSET]</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Remember the dex instruction pointer */</span></span><br><span class="line">    str     x1, [x2, #SHADOWFRAME_DEX_INSTRUCTIONS_OFFSET]</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set up &quot;named&quot; registers */</span></span><br><span class="line">    mov     xSELF, x0</span><br><span class="line">    ldr     w0, [x2, #SHADOWFRAME_NUMBER_OF_VREGS_OFFSET]</span><br><span class="line">    add     xFP, x2, #SHADOWFRAME_VREGS_OFFSET     <span class="comment">// point to vregs.</span></span><br><span class="line">    add     xREFS, xFP, w0, lsl #<span class="number">2</span>                 <span class="comment">// point to reference array in shadow frame</span></span><br><span class="line">    ldr     w0, [x2, #SHADOWFRAME_DEX_PC_OFFSET]   <span class="comment">// Get starting dex_pc.</span></span><br><span class="line">    add     xPC, x1, w0, lsl #<span class="number">1</span>                    <span class="comment">// Create direct pointer to 1st dex opcode</span></span><br><span class="line">    CFI_DEFINE_DEX_PC_WITH_OFFSET(CFI_TMP, CFI_DEX, <span class="number">0</span>)</span><br><span class="line">    EXPORT_PC</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Starting ibase */</span></span><br><span class="line">    ldr     xIBASE, [xSELF, #THREAD_CURRENT_IBASE_OFFSET]</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set up for backwards branches &amp; osr profiling */</span></span><br><span class="line">    ldr     x0, [xFP, #OFF_FP_METHOD]</span><br><span class="line">    add     x1, xFP, #OFF_FP_SHADOWFRAME</span><br><span class="line">    mov     x2, xSELF</span><br><span class="line">    bl      MterpSetUpHotnessCountdown</span><br><span class="line">    mov     wPROFILE, w0                <span class="comment">// Starting hotness countdown to xPROFILE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start executing the instruction at rPC */</span></span><br><span class="line">    FETCH_INST                          <span class="comment">// load wINST from rPC</span></span><br><span class="line">    GET_INST_OPCODE ip                  <span class="comment">// extract opcode from wINST</span></span><br><span class="line">    GOTO_OPCODE ip                      <span class="comment">// jump to next instruction</span></span><br><span class="line">    <span class="comment">/* <span class="doctag">NOTE:</span> no fallthrough */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/mterp/arm64/op_sget.S</span></span><br><span class="line"></span><br><span class="line">%<span class="keyword">default</span> &#123; <span class="string">&quot;is_object&quot;</span>:<span class="string">&quot;0&quot;</span>, <span class="string">&quot;helper&quot;</span>:<span class="string">&quot;MterpGet32Static&quot;</span>, <span class="string">&quot;extend&quot;</span>:<span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * General SGET handler wrapper.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * for: sget, sget-object, sget-boolean, sget-byte, sget-char, sget-short</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* op vAA, field//BBBB */</span></span><br><span class="line"></span><br><span class="line">    .<span class="keyword">extern</span> $helper</span><br><span class="line">    EXPORT_PC</span><br><span class="line">    FETCH w0, <span class="number">1</span>                         <span class="comment">// w0&lt;- field ref BBBB</span></span><br><span class="line">    ldr   x1, [xFP, #OFF_FP_METHOD]</span><br><span class="line">    mov   x2, xSELF</span><br><span class="line">    bl    $helper</span><br><span class="line">    ldr   x3, [xSELF, #THREAD_EXCEPTION_OFFSET]</span><br><span class="line">    lsr   w2, wINST, #<span class="number">8</span>                 <span class="comment">// w2&lt;- AA</span></span><br><span class="line">    $extend</span><br><span class="line">    PREFETCH_INST <span class="number">2</span></span><br><span class="line">    cbnz  x3, MterpException            <span class="comment">// bail out</span></span><br><span class="line">.<span class="keyword">if</span> $is_object</span><br><span class="line">    SET_VREG_OBJECT w0, w2              <span class="comment">// fp[AA]&lt;- w0</span></span><br><span class="line">.<span class="keyword">else</span></span><br><span class="line">    SET_VREG w0, w2                     <span class="comment">// fp[AA]&lt;- w0</span></span><br><span class="line">.endif</span><br><span class="line">    ADVANCE <span class="number">2</span></span><br><span class="line">    GET_INST_OPCODE ip                  <span class="comment">// extract opcode from rINST</span></span><br><span class="line">    GOTO_OPCODE ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/mterp/arm64/invoke.S</span></span><br><span class="line"></span><br><span class="line">%<span class="keyword">default</span> &#123; <span class="string">&quot;helper&quot;</span>:<span class="string">&quot;UndefinedInvokeHandler&quot;</span> &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Generic invoke handler wrapper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* op vB, &#123;vD, vE, vF, vG, vA&#125;, class@CCCC */</span></span><br><span class="line">    <span class="comment">/* op &#123;vCCCC..v(CCCC+AA-1)&#125;, meth@BBBB */</span></span><br><span class="line">    .<span class="keyword">extern</span> $helper</span><br><span class="line">    EXPORT_PC</span><br><span class="line">    mov     x0, xSELF</span><br><span class="line">    add     x1, xFP, #OFF_FP_SHADOWFRAME</span><br><span class="line">    mov     x2, xPC</span><br><span class="line">    mov     x3, xINST</span><br><span class="line">    bl      $helper</span><br><span class="line">    cbz     w0, MterpException</span><br><span class="line">    FETCH_ADVANCE_INST <span class="number">3</span></span><br><span class="line">    bl      MterpShouldSwitchInterpreters</span><br><span class="line">    cbnz    w0, MterpFallback</span><br><span class="line">    GET_INST_OPCODE ip</span><br><span class="line">    GOTO_OPCODE ip</span><br></pre></td></tr></table></figure><h2 id="ExecuteGotoImpl"><a href="#ExecuteGotoImpl" class="headerlink" title="ExecuteGotoImpl"></a><del>ExecuteGotoImpl</del></h2><p>Goto 解释器 (来自 Android 7.1，后续已废弃，但在此列出)<br>每个操作码的handler位于一个 通过宏定义的 标签下；<br>handler结尾更新PC 使其指向下一个操作码，而后读取；<br>再将操作码传入跳转表 映射得到其handler所属标签（本质上是地址），而后goto跳转至handler处</p><p>遇到 SGET 等涉及 字段访问的操作码，则调用 DoFieldGet 等；<br>遇到 INVOKE_VIRTUAL 等涉及 方法调用的操作码，则调用 DoInvoke</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/7.1.2_r36/xref/art/runtime/interpreter/interpreter_goto_table_impl.cc#41</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADVANCE(_offset)                                                    \</span></span><br><span class="line"><span class="meta">  do &#123;                                                                      \</span></span><br><span class="line"><span class="meta">    int32_t disp = static_cast<span class="string">&lt;int32_t&gt;</span>(_offset);                           \</span></span><br><span class="line"><span class="meta">    inst = inst-&gt;RelativeAt(disp);                                          \</span></span><br><span class="line"><span class="meta">    dex_pc = static_cast<span class="string">&lt;uint32_t&gt;</span>(static_cast<span class="string">&lt;int32_t&gt;</span>(dex_pc) + disp);    \</span></span><br><span class="line"><span class="meta">    shadow_frame.SetDexPC(dex_pc);                                          \</span></span><br><span class="line"><span class="meta">    TraceExecution(shadow_frame, inst, dex_pc);                             \</span></span><br><span class="line"><span class="meta">    inst_data = inst-&gt;Fetch16(0);                                           \</span></span><br><span class="line"><span class="meta">    goto *currentHandlersTable[inst-&gt;Opcode(inst_data)];                    \</span></span><br><span class="line"><span class="meta">  &#125; while (false)</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> POSSIBLY_HANDLE_PENDING_EXCEPTION(_is_exception_pending, _offset)   \</span></span><br><span class="line"><span class="meta">  do &#123;                                                                      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (UNLIKELY(_is_exception_pending)) &#123;                                  \</span></span><br><span class="line"><span class="meta">      HANDLE_PENDING_EXCEPTION();                                           \</span></span><br><span class="line"><span class="meta">    &#125; <span class="keyword">else</span> &#123;                                                                \</span></span><br><span class="line"><span class="meta">      ADVANCE(_offset);                                                     \</span></span><br><span class="line"><span class="meta">    &#125;                                                                       \</span></span><br><span class="line"><span class="meta">  &#125; while (false)</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNREACHABLE_CODE_CHECK()                \</span></span><br><span class="line"><span class="meta">  do &#123;                                          \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (kIsDebugBuild) &#123;                        \</span></span><br><span class="line"><span class="meta">      LOG(FATAL) &lt;&lt; <span class="string">&quot;We should not be here !&quot;</span>;  \</span></span><br><span class="line"><span class="meta">      UNREACHABLE();                            \</span></span><br><span class="line"><span class="meta">    &#125;                                           \</span></span><br><span class="line"><span class="meta">  &#125; while (false)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HANDLE_INSTRUCTION_START(opcode) op_##opcode:  <span class="comment">// NOLINT(whitespace/labels)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HANDLE_INSTRUCTION_END() UNREACHABLE_CODE_CHECK()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// http://androidxref.com/7.1.2_r36/xref/art/runtime/interpreter/interpreter_goto_table_impl.cc#157</span></span><br><span class="line"></span><br><span class="line"><span class="function">JValue <span class="title">ExecuteGotoImpl</span><span class="params">(Thread* self, <span class="type">const</span> DexFile::CodeItem* code_item, ShadowFrame&amp; shadow_frame,</span></span></span><br><span class="line"><span class="params"><span class="function">                       JValue result_register)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Define handler tables:</span></span><br><span class="line">  <span class="type">static</span> <span class="type">const</span> <span class="type">void</span>* <span class="type">const</span> handlersTable[instrumentation::kNumHandlerTables][kNumPackedOpcodes] = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// Main handler table.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INSTRUCTION_HANDLER(o, code, n, f, r, i, a, v) &amp;&amp;op_##code,</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dex_instruction_list.h&quot;</span></span></span><br><span class="line">      <span class="built_in">DEX_INSTRUCTION_LIST</span>(INSTRUCTION_HANDLER)</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> DEX_INSTRUCTION_LIST</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> INSTRUCTION_HANDLER</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="type">uint32_t</span> dex_pc = shadow_frame.<span class="built_in">GetDexPC</span>();</span><br><span class="line">  <span class="type">const</span> Instruction* inst = Instruction::<span class="built_in">At</span>(code_item-&gt;insns_ + dex_pc);</span><br><span class="line">  <span class="type">uint16_t</span> inst_data;</span><br><span class="line">  <span class="type">const</span> <span class="type">void</span>* <span class="type">const</span>* currentHandlersTable;</span><br><span class="line">  <span class="built_in">UPDATE_HANDLER_TABLE</span>();</span><br><span class="line">  std::unique_ptr&lt;lambda::ClosureBuilder&gt; lambda_closure_builder;</span><br><span class="line">  <span class="type">size_t</span> lambda_captured_variable_index = <span class="number">0</span>;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">auto</span>* <span class="type">const</span> instrumentation = Runtime::<span class="built_in">Current</span>()-&gt;<span class="built_in">GetInstrumentation</span>();</span><br><span class="line">  ArtMethod* method = shadow_frame.<span class="built_in">GetMethod</span>();</span><br><span class="line">  jit::Jit* jit = Runtime::<span class="built_in">Current</span>()-&gt;<span class="built_in">GetJit</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Jump to first instruction.</span></span><br><span class="line">  <span class="built_in">ADVANCE</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">UNREACHABLE_CODE_CHECK</span>();</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="built_in">HANDLE_INSTRUCTION_START</span>(SGET) &#123;</span><br><span class="line">    <span class="type">bool</span> success = <span class="built_in">DoFieldGet</span>&lt;StaticPrimitiveRead, Primitive::kPrimInt, do_access_check&gt;(</span><br><span class="line">        self, shadow_frame, inst, inst_data);</span><br><span class="line">    <span class="built_in">POSSIBLY_HANDLE_PENDING_EXCEPTION</span>(!success, <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">HANDLE_INSTRUCTION_END</span>();</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="built_in">HANDLE_INSTRUCTION_START</span>(INVOKE_VIRTUAL) &#123;</span><br><span class="line">    <span class="type">bool</span> success = <span class="built_in">DoInvoke</span>&lt;kVirtual, <span class="literal">false</span>, do_access_check&gt;(</span><br><span class="line">        self, shadow_frame, inst, inst_data, &amp;result_register);</span><br><span class="line">    <span class="built_in">UPDATE_HANDLER_TABLE</span>();</span><br><span class="line">    <span class="built_in">POSSIBLY_HANDLE_PENDING_EXCEPTION</span>(!success, <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">HANDLE_INSTRUCTION_END</span>();</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="ExecuteSwitchImpl"><a href="#ExecuteSwitchImpl" class="headerlink" title="ExecuteSwitchImpl"></a>ExecuteSwitchImpl</h2><p>Switch 解释器<br>每个操作码的handler位于一个 以操作码自身为标签的 case分支中；<br>handler结尾更新PC 使其指向下一个操作码；<br>switch时读取操作码，并来到其handler所在的case（底层基于编译器生成的跳转表实现）</p><p>优先使用 ExecuteSwitchImplAsm，如果遇到无法处理的情况，则通过传入的函数指针调用 ExecuteSwitchImplCpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter_switch_impl.h#59</span></span><br><span class="line"></span><br><span class="line"><span class="function">ALWAYS_INLINE JValue <span class="title">ExecuteSwitchImpl</span><span class="params">(Thread* self, <span class="type">const</span> CodeItemDataAccessor&amp; accessor,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       ShadowFrame&amp; shadow_frame, JValue result_register,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="type">bool</span> interpret_one_instruction)</span></span></span><br><span class="line"><span class="function">  <span class="title">REQUIRES_SHARED</span><span class="params">(Locks::mutator_lock_)</span> </span>&#123;</span><br><span class="line">  SwitchImplContext ctx &#123;</span><br><span class="line">    .self = self,</span><br><span class="line">    .accessor = accessor,</span><br><span class="line">    .shadow_frame = shadow_frame,</span><br><span class="line">    .result_register = result_register,</span><br><span class="line">    .interpret_one_instruction = interpret_one_instruction,</span><br><span class="line">    .result = <span class="built_in">JValue</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="type">void</span>* impl = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(&amp;ExecuteSwitchImplCpp&lt;do_access_check, transaction_active&gt;);</span><br><span class="line">  <span class="type">const</span> <span class="type">uint16_t</span>* dex_pc = ctx.accessor.<span class="built_in">Insns</span>();</span><br><span class="line">  <span class="built_in">ExecuteSwitchImplAsm</span>(&amp;ctx, impl, dex_pc);</span><br><span class="line">  <span class="keyword">return</span> ctx.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExecuteSwitchImplAsm"><a href="#ExecuteSwitchImplAsm" class="headerlink" title="ExecuteSwitchImplAsm"></a>ExecuteSwitchImplAsm</h3><p>基于汇编实现</p><h4 id="ExecuteSwitchImplCpp"><a href="#ExecuteSwitchImplCpp" class="headerlink" title="ExecuteSwitchImplCpp"></a>ExecuteSwitchImplCpp</h4><p>遇到 SGET 等涉及 字段访问的操作码，则调用 DoFieldGet 等；<br>遇到 INVOKE_VIRTUAL 等涉及 方法调用的操作码，则调用 DoInvoke</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter_switch_impl.cc#198</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExecuteSwitchImplCpp</span><span class="params">(SwitchImplContext* ctx)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    dex_pc = inst-&gt;<span class="built_in">GetDexPc</span>(insns);</span><br><span class="line">    shadow_frame.<span class="built_in">SetDexPC</span>(dex_pc);</span><br><span class="line">    <span class="built_in">TraceExecution</span>(shadow_frame, inst, dex_pc);</span><br><span class="line">    inst_data = inst-&gt;<span class="built_in">Fetch16</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">switch</span> (inst-&gt;<span class="built_in">Opcode</span>(inst_data)) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">case</span> Instruction::SGET: &#123;</span><br><span class="line">        <span class="built_in">PREAMBLE</span>();</span><br><span class="line">        <span class="type">bool</span> success = <span class="built_in">DoFieldGet</span>&lt;StaticPrimitiveRead, Primitive::kPrimInt, do_access_check,</span><br><span class="line">            transaction_active&gt;(self, shadow_frame, inst, inst_data);</span><br><span class="line">        <span class="built_in">POSSIBLY_HANDLE_PENDING_EXCEPTION</span>(!success, Next_2xx);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">case</span> Instruction::INVOKE_VIRTUAL: &#123;</span><br><span class="line">        <span class="built_in">PREAMBLE</span>();</span><br><span class="line">        <span class="type">bool</span> success = <span class="built_in">DoInvoke</span>&lt;kVirtual, <span class="literal">false</span>, do_access_check&gt;(</span><br><span class="line">            self, shadow_frame, inst, inst_data, &amp;result_register);</span><br><span class="line">        <span class="built_in">POSSIBLY_HANDLE_PENDING_EXCEPTION</span>(!success, Next_3xx);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (!interpret_one_instruction);</span><br><span class="line">  <span class="comment">// Record where we stopped.</span></span><br><span class="line">  shadow_frame.<span class="built_in">SetDexPC</span>(inst-&gt;<span class="built_in">GetDexPc</span>(insns));</span><br><span class="line">  ctx-&gt;result = result_register;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="C-Framework-III"><a href="#C-Framework-III" class="headerlink" title="C++ Framework III"></a>C++ Framework III</h1><p>承接上方 ExecuteSwitchImplCpp</p><h2 id="DoFieldGet"><a href="#DoFieldGet" class="headerlink" title="DoFieldGet"></a>DoFieldGet</h2><p>从对象的字段中读取值，并将结果存入 Shadow Frame 中的虚拟寄存器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter_common.cc#51</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DoFieldGet</span><span class="params">(Thread* self, ShadowFrame&amp; shadow_frame, <span class="type">const</span> Instruction* inst,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">uint16_t</span> inst_data)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ArtField* f =</span><br><span class="line">      <span class="built_in">FindFieldFromCode</span>&lt;find_type, do_access_check&gt;(field_idx, shadow_frame.<span class="built_in">GetMethod</span>(), self,</span><br><span class="line">                                                    Primitive::<span class="built_in">ComponentSize</span>(field_type));</span><br><span class="line">  ...</span><br><span class="line">  ObjPtr&lt;mirror::Object&gt; obj;</span><br><span class="line">  <span class="keyword">if</span> (is_static) &#123;</span><br><span class="line">    obj = f-&gt;<span class="built_in">GetDeclaringClass</span>();</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj = shadow_frame.<span class="built_in">GetVRegReference</span>(inst-&gt;<span class="built_in">VRegB_22c</span>(inst_data));</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  JValue result;</span><br><span class="line">  ...</span><br><span class="line">  <span class="type">uint32_t</span> vregA = is_static ? inst-&gt;<span class="built_in">VRegA_21c</span>(inst_data) : inst-&gt;<span class="built_in">VRegA_22c</span>(inst_data);</span><br><span class="line">  <span class="keyword">switch</span> (field_type) &#123;</span><br><span class="line">    <span class="keyword">case</span> Primitive::kPrimBoolean:</span><br><span class="line">      shadow_frame.<span class="built_in">SetVReg</span>(vregA, result.<span class="built_in">GetZ</span>());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Primitive::kPrimByte:</span><br><span class="line">      shadow_frame.<span class="built_in">SetVReg</span>(vregA, result.<span class="built_in">GetB</span>());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DoInvoke"><a href="#DoInvoke" class="headerlink" title="DoInvoke"></a>DoInvoke</h2><p>先解析方法索引和虚拟寄存器；<br>再从dex中查找目标方法；<br>最后调用 DoCall</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter_common.h#168</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">DoInvoke</span><span class="params">(Thread* self,</span></span></span><br><span class="line"><span class="params"><span class="function">                            ShadowFrame&amp; shadow_frame,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">const</span> Instruction* inst,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">uint16_t</span> inst_data,</span></span></span><br><span class="line"><span class="params"><span class="function">                            JValue* result)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="type">const</span> <span class="type">uint32_t</span> method_idx = (is_range) ? inst-&gt;<span class="built_in">VRegB_3rc</span>() : inst-&gt;<span class="built_in">VRegB_35c</span>();</span><br><span class="line">  <span class="type">const</span> <span class="type">uint32_t</span> vregC = (is_range) ? inst-&gt;<span class="built_in">VRegC_3rc</span>() : inst-&gt;<span class="built_in">VRegC_35c</span>();</span><br><span class="line">  ...</span><br><span class="line">  ArtMethod* sf_method = shadow_frame.<span class="built_in">GetMethod</span>();</span><br><span class="line">  ArtMethod* <span class="type">const</span> called_method = <span class="built_in">FindMethodFromCode</span>&lt;type, do_access_check&gt;(</span><br><span class="line">      method_idx, &amp;receiver, sf_method, self);</span><br><span class="line">  <span class="comment">// The shadow frame should already be pushed, so we don&#x27;t need to update it.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">UNLIKELY</span>(called_method == <span class="literal">nullptr</span>)) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DoCall</span>&lt;is_range, do_access_check&gt;(called_method, self, shadow_frame, inst, inst_data,</span><br><span class="line">                                             result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DoCall"><a href="#DoCall" class="headerlink" title="DoCall"></a>DoCall</h3><p>先解析方法调用的参数数量；<br>再从虚拟寄存器中获取参数的值；<br>最后调用 DoCallCommon</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter_common.cc#1403</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DoCall</span><span class="params">(ArtMethod* called_method, Thread* self, ShadowFrame&amp; shadow_frame,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="type">const</span> Instruction* inst, <span class="type">uint16_t</span> inst_data, JValue* result)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Argument word count.</span></span><br><span class="line">  <span class="type">const</span> <span class="type">uint16_t</span> number_of_inputs =</span><br><span class="line">      (is_range) ? inst-&gt;<span class="built_in">VRegA_3rc</span>(inst_data) : inst-&gt;<span class="built_in">VRegA_35c</span>(inst_data);</span><br><span class="line"></span><br><span class="line">  <span class="type">uint32_t</span> arg[Instruction::kMaxVarArgRegs] = &#123;&#125;;  <span class="comment">// only used in invoke-XXX.</span></span><br><span class="line">  <span class="type">uint32_t</span> vregC = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (is_range) &#123;</span><br><span class="line">    vregC = inst-&gt;<span class="built_in">VRegC_3rc</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vregC = inst-&gt;<span class="built_in">VRegC_35c</span>();</span><br><span class="line">    inst-&gt;<span class="built_in">GetVarArgs</span>(arg, inst_data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">DoCallCommon</span>&lt;is_range, do_assignability_check&gt;(</span><br><span class="line">      called_method, self, shadow_frame,</span><br><span class="line">      result, number_of_inputs, arg, vregC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DoCallCommon"><a href="#DoCallCommon" class="headerlink" title="DoCallCommon"></a>DoCallCommon</h4><p>先构造新的 Shadow Frame；<br>再将必要参数复制到其中；<br>最后调用 PerformCall</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter_common.cc#1193</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">DoCallCommon</span><span class="params">(ArtMethod* called_method,</span></span></span><br><span class="line"><span class="params"><span class="function">                                Thread* self,</span></span></span><br><span class="line"><span class="params"><span class="function">                                ShadowFrame&amp; shadow_frame,</span></span></span><br><span class="line"><span class="params"><span class="function">                                JValue* result,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">uint16_t</span> number_of_inputs,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">uint32_t</span> (&amp;arg)[Instruction::kMaxVarArgRegs],</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">uint32_t</span> vregC)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Number of registers for the callee&#x27;s call frame.</span></span><br><span class="line">  <span class="type">uint16_t</span> num_regs;</span><br><span class="line">  <span class="type">const</span> <span class="type">bool</span> use_interpreter_entrypoint = !Runtime::<span class="built_in">Current</span>()-&gt;<span class="built_in">IsStarted</span>() ||</span><br><span class="line">      ClassLinker::<span class="built_in">ShouldUseInterpreterEntrypoint</span>(</span><br><span class="line">          called_method,</span><br><span class="line">          called_method-&gt;<span class="built_in">GetEntryPointFromQuickCompiledCode</span>());</span><br><span class="line">  ...</span><br><span class="line">  ShadowFrameAllocaUniquePtr shadow_frame_unique_ptr =</span><br><span class="line">      <span class="built_in">CREATE_SHADOW_FRAME</span>(num_regs, &amp;shadow_frame, called_method, <span class="comment">/* dex pc */</span> <span class="number">0</span>);</span><br><span class="line">  ShadowFrame* new_shadow_frame = shadow_frame_unique_ptr.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (do_assignability_check) &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy the caller&#x27;s invoke-* arguments into the callee&#x27;s parameter registers.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> shorty_pos = <span class="number">0</span>; dest_reg &lt; num_regs; ++shorty_pos, ++dest_reg, ++arg_offset) &#123;</span><br><span class="line">      <span class="comment">// Skip the 0th &#x27;shorty&#x27; type since it represents the return type.</span></span><br><span class="line">      <span class="built_in">DCHECK_LT</span>(shorty_pos + <span class="number">1</span>, shorty_len) &lt;&lt; <span class="string">&quot;for shorty &#x27;&quot;</span> &lt;&lt; shorty &lt;&lt; <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">      <span class="type">const</span> <span class="type">size_t</span> src_reg = (is_range) ? vregC + arg_offset : arg[arg_offset];</span><br><span class="line">      <span class="keyword">switch</span> (shorty[shorty_pos + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// Handle Object references. 1 virtual register slot.</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: &#123;</span><br><span class="line">          ObjPtr&lt;mirror::Object&gt; o = shadow_frame.<span class="built_in">GetVRegReference</span>(src_reg);</span><br><span class="line">          <span class="keyword">if</span> (do_assignability_check &amp;&amp; o != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="type">const</span> dex::TypeIndex type_idx = params-&gt;<span class="built_in">GetTypeItem</span>(shorty_pos).type_idx_;</span><br><span class="line">            ObjPtr&lt;mirror::Class&gt; arg_type = method-&gt;<span class="built_in">GetDexCache</span>()-&gt;<span class="built_in">GetResolvedType</span>(type_idx);</span><br><span class="line">            <span class="keyword">if</span> (arg_type == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">              <span class="function">StackHandleScope&lt;1&gt; <span class="title">hs</span><span class="params">(self)</span></span>;</span><br><span class="line">              <span class="comment">// Preserve o since it is used below and GetClassFromTypeIndex may cause thread</span></span><br><span class="line">              <span class="comment">// suspension.</span></span><br><span class="line">              HandleWrapperObjPtr&lt;mirror::Object&gt; h = hs.<span class="built_in">NewHandleWrapper</span>(&amp;o);</span><br><span class="line">              arg_type = method-&gt;<span class="built_in">ResolveClassFromTypeIndex</span>(type_idx);</span><br><span class="line">              <span class="keyword">if</span> (arg_type == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="built_in">CHECK</span>(self-&gt;<span class="built_in">IsExceptionPending</span>());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!o-&gt;<span class="built_in">VerifierInstanceOf</span>(arg_type)) &#123;</span><br><span class="line">              <span class="comment">// This should never happen.</span></span><br><span class="line">              std::string temp1, temp2;</span><br><span class="line">              self-&gt;<span class="built_in">ThrowNewExceptionF</span>(<span class="string">&quot;Ljava/lang/InternalError;&quot;</span>,</span><br><span class="line">                                       <span class="string">&quot;Invoking %s with bad arg %d, type &#x27;%s&#x27; not instance of &#x27;%s&#x27;&quot;</span>,</span><br><span class="line">                                       new_shadow_frame-&gt;<span class="built_in">GetMethod</span>()-&gt;<span class="built_in">GetName</span>(), shorty_pos,</span><br><span class="line">                                       o-&gt;<span class="built_in">GetClass</span>()-&gt;<span class="built_in">GetDescriptor</span>(&amp;temp1),</span><br><span class="line">                                       arg_type-&gt;<span class="built_in">GetDescriptor</span>(&amp;temp2));</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          new_shadow_frame-&gt;<span class="built_in">SetVRegReference</span>(dest_reg, o.<span class="built_in">Ptr</span>());</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PerformCall</span>(self,</span><br><span class="line">              accessor,</span><br><span class="line">              shadow_frame.<span class="built_in">GetMethod</span>(),</span><br><span class="line">              first_dest_reg,</span><br><span class="line">              new_shadow_frame,</span><br><span class="line">              result,</span><br><span class="line">              use_interpreter_entrypoint);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="PerformCall"><a href="#PerformCall" class="headerlink" title="PerformCall"></a>PerformCall</h5><p>根据运行时环境是否已启动，分别进行 ArtInterpreterToInterpreterBridge 的调用或 ArtInterpreterToCompiledCodeBridge 的递归调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/common_dex_operations.h#55</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PerformCall</span><span class="params">(Thread* self,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> CodeItemDataAccessor&amp; accessor,</span></span></span><br><span class="line"><span class="params"><span class="function">                        ArtMethod* caller_method,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> <span class="type">size_t</span> first_dest_reg,</span></span></span><br><span class="line"><span class="params"><span class="function">                        ShadowFrame* callee_frame,</span></span></span><br><span class="line"><span class="params"><span class="function">                        JValue* result,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">bool</span> use_interpreter_entrypoint)</span></span></span><br><span class="line"><span class="function">    <span class="title">REQUIRES_SHARED</span><span class="params">(Locks::mutator_lock_)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">LIKELY</span>(Runtime::<span class="built_in">Current</span>()-&gt;<span class="built_in">IsStarted</span>())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (use_interpreter_entrypoint) &#123;</span><br><span class="line">      interpreter::<span class="built_in">ArtInterpreterToInterpreterBridge</span>(self, accessor, callee_frame, result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      interpreter::<span class="built_in">ArtInterpreterToCompiledCodeBridge</span>(</span><br><span class="line">          self, caller_method, callee_frame, first_dest_reg, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    interpreter::UnstartedRuntime::<span class="built_in">Invoke</span>(self, accessor, callee_frame, result, first_dest_reg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ArtInterpreterToInterpreterBridge"><a href="#ArtInterpreterToInterpreterBridge" class="headerlink" title="ArtInterpreterToInterpreterBridge"></a>ArtInterpreterToInterpreterBridge</h6><p>递归调用 Execute</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/interpreter/interpreter.cc#601</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ArtInterpreterToInterpreterBridge</span><span class="params">(Thread* self,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="type">const</span> CodeItemDataAccessor&amp; accessor,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       ShadowFrame* shadow_frame,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       JValue* result)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  self-&gt;<span class="built_in">PushShadowFrame</span>(shadow_frame);</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">LIKELY</span>(!shadow_frame-&gt;<span class="built_in">GetMethod</span>()-&gt;<span class="built_in">IsNative</span>())) &#123;</span><br><span class="line">    result-&gt;<span class="built_in">SetJ</span>(<span class="built_in">Execute</span>(self, accessor, *shadow_frame, <span class="built_in">JValue</span>()).<span class="built_in">GetJ</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  self-&gt;<span class="built_in">PopShadowFrame</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/lin20044140410/article/details/79369342">Android ART虚拟机执行引擎－Interpreter（八）</a>                             # Switch,Goto比较<br><a href="https://jia.je/software/2025/03/06/android-runtime-interpreter/#%E8%A7%A3%E9%87%8A%E5%99%A8">Android Runtime 解释器的实现探究 - 解释器</a>  # Switch,Mterp比较<br><a href="https://bbs.kanxue.com/thread-270942.htm#msg_header_h2_4">ART 在 Android 安全攻防中的应用 - 方法调用</a>  # 源码（art&#x2F;runtime&#x2F;art_method.cc）<br><a href="https://juejin.cn/post/7384992816906747913">ART 虚拟机的解释执行</a>                                     # 源码（art&#x2F;runtime&#x2F;interpreter&#x2F;）<br><a href="https://blog.csdn.net/luoshengyang/article/details/40289405">Android运行时ART执行类方法的过程分析</a>     # 源码（art&#x2F;runtime&#x2F;）</p>]]></content>
      
      
      <categories>
          
          <category> 硬核知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Smali数据类型与语法</title>
      <link href="/2025/03/16/2025-3-16%20Smali%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/03/16/2025-3-16%20Smali%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>对于smali指令，一直以来都是处于看得懂又看不懂的 模棱两可的状态<br>即使遇到某个看不懂的指令时可以现查，但很影响分析的效率，而且看完之后记忆又会回归于模糊<br>因此，在此系统地记录那些自己含糊不清过的smali指令，算是一网打尽吧<br>文章会根据后续的学习进度，持续追加新内容</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p><img src="/img/2025-3-16/1.jpg"></p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p><img src="/img/2025-3-16/2.jpg"></p><h1 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h1><h2 id="顶层"><a href="#顶层" class="headerlink" title="顶层"></a>顶层</h2><p><img src="/img/2025-3-16/3.jpg"></p><h2 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h2><p>注：</p><ol><li>.param指定的参数 用参数寄存器p存储</li><li>.local申明的显示局部变量、一般操作数（隐式局部变量）用本地寄存器v存储</li><li>.register为两种寄存器的总数<br><img src="/img/2025-3-16/4.jpg"></li></ol><h1 id="操作码"><a href="#操作码" class="headerlink" title="操作码"></a>操作码</h1><p>注：</p><ol><li>每个操作码占 1 字节，理论上共有 2^8 种操作码。不过并非每种字节都被使用，一些保留为空操作或未来扩展使用</li><li>ART的解释器部分作为 寄存器式VM，依赖一组虚拟寄存器来存储操作数。<br>字节码中指明操作数所在的寄存器，执行完后 结果存入指定寄存器</li><li>对字符串、类型、方法等访问是基于索引的。<br>先分别读取dex string_ids, type_ids, method_ids中的索引信息，再基于此从dex中访问目标</li></ol><h2 id="方法操作"><a href="#方法操作" class="headerlink" title="方法操作"></a>方法操作</h2><h3 id="调用static"><a href="#调用static" class="headerlink" title="调用static"></a>调用static</h3><ul><li>invoke-static<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invoke-<span class="keyword">static</span>       &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V</span><br><span class="line"><span class="comment">//                  &#123;参数&#125;, 方法所属类       -&gt;方法名(参数类型)                返回类型       </span></span><br></pre></td></tr></table></figure></li></ul><h3 id="调用非static"><a href="#调用非static" class="headerlink" title="调用非static"></a>调用非static</h3><ul><li><p>invoke-direct</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invoke-direct       &#123;v0, v1&#125;, Lcom/android/terminal/TerminalActivity$<span class="number">1</span>;-&gt;&lt;init&gt;(Lcom/android/terminal/TerminalActivity;)V</span><br><span class="line"><span class="comment">//                  &#123;目标对象, 参数&#125;, 方法所属类                         -&gt;方法名(参数类型)                                返回类型</span></span><br></pre></td></tr></table></figure></li><li><p>invoke-virtual</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invoke-virtual      &#123;v2, v3&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder; </span><br><span class="line"><span class="comment">//                  &#123;目标对象, 参数&#125;, 方法所属类         -&gt;方法名(参数类型)           返回类型</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h3><ul><li><p>return-void</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>-<span class="keyword">void</span></span><br></pre></td></tr></table></figure></li><li><p>return-object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>-object       v1</span><br></pre></td></tr></table></figure></li></ul><h3 id="接收返回值"><a href="#接收返回值" class="headerlink" title="接收返回值"></a>接收返回值</h3><ul><li><p>move-result</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invoke-direct       &#123;...&#125;, ...-&gt;...(...)Z</span><br><span class="line">move-result         v3</span><br></pre></td></tr></table></figure></li><li><p>move-result-object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invoke-virtual      &#123;...&#125;, ...-&gt;...(...)Ljava/lang/StringBuilder;</span><br><span class="line">move-result-object  v1</span><br></pre></td></tr></table></figure></li></ul><h2 id="字段操作"><a href="#字段操作" class="headerlink" title="字段操作"></a>字段操作</h2><h3 id="操作static"><a href="#操作static" class="headerlink" title="操作static"></a>操作static</h3><ul><li><p>sget</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sget                v0, Lcom/example/MyClass;-&gt;PersonAge:I</span><br><span class="line"><span class="comment">//                  目标寄存器, 字段所属类     -&gt;字段名   :字段类型</span></span><br></pre></td></tr></table></figure></li><li><p>sput</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sput                v0, Lcom/example/MyClass;-&gt;isEnabled:Z</span><br><span class="line"><span class="comment">//                  当前寄存器, 字段所属类     -&gt;字段名   :字段类型</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="操作非static"><a href="#操作非static" class="headerlink" title="操作非static"></a>操作非static</h3><ul><li><p>iget</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iget                v0, p0, Lcom/wmctf/ezandroid/MainActivity;-&gt;PersonAge:I</span><br><span class="line"><span class="comment">//                  目标寄存器, 当前对象, 字段所属类            -&gt;字段名    :字段类型</span></span><br></pre></td></tr></table></figure></li><li><p>iput </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iput                v0, p0, Lcom/wmctf/ezandroid/MainActivity;-&gt;isEnabled:Z</span><br><span class="line"><span class="comment">//                  当前寄存器, 目标对象, 字段所属类             -&gt;字段名   :字段类型</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul><li>new-instance<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>-instance        v2, Ljava/lang/StringBuilder;</span><br><span class="line"><span class="comment">//                  目标寄存器, 对象类型</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><ul><li>check-cast<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">check-cast          v0, Landroid/widget/EditText;</span><br><span class="line"><span class="comment">//                  当前对象, 对象类型</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数据移动"><a href="#数据移动" class="headerlink" title="数据移动"></a>数据移动</h2><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><ul><li><p>const&#x2F;4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const/<span class="number">4</span>             v3, <span class="number">0x1</span></span><br></pre></td></tr></table></figure></li><li><p>const-string</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const-string        v3, <span class="string">&quot;failed login&quot;</span> </span><br></pre></td></tr></table></figure></li></ul><h3 id="传递"><a href="#传递" class="headerlink" title="传递"></a>传递</h3><ul><li>move-object<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move-result-object  v0</span><br><span class="line">move-object         v1, v0</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬核知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nmmp DexVMP壳分析</title>
      <link href="/2025/03/15/2025-3-15%20nmmp%20DexVMP%E5%A3%B3%E5%88%86%E6%9E%90%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89/"/>
      <url>/2025/03/15/2025-3-15%20nmmp%20DexVMP%E5%A3%B3%E5%88%86%E6%9E%90%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>环境如下：</p><ol><li>系统版本：Android 9.0.0</li><li>系统架构：x64</li><li>分析so架构：arm64</li></ol><h1 id="壳程序分析"><a href="#壳程序分析" class="headerlink" title="壳程序分析"></a>壳程序分析</h1><h2 id="classes-dex"><a href="#classes-dex" class="headerlink" title="classes.dex"></a>classes.dex</h2><p>可以看到，原包中的方法都被native化了<br><img src="/img/2025-3-15/1.png"></p><h3 id="NativeUtil"><a href="#NativeUtil" class="headerlink" title="NativeUtil"></a>NativeUtil</h3><p>每个类 static{} 中调用了 NativeUtil.classesInit0，传入用于表示该类的一个编号<br><img src="/img/2025-3-15/3.png"></p><h3 id="LoadLibApp"><a href="#LoadLibApp" class="headerlink" title="LoadLibApp"></a>LoadLibApp</h3><p>通过 AndroidManifest.xml中 “&lt;application android:name&#x3D;”com.nmmedit.protect.LoadLibApp” …”<br>来到自定义Application处，其中加载 libnmmp.so<br><img src="/img/2025-3-15/2.png"></p><h2 id="libnmmp-so"><a href="#libnmmp-so" class="headerlink" title="libnmmp.so"></a>libnmmp.so</h2><h3 id="JNI-Onload"><a href="#JNI-Onload" class="headerlink" title="JNI_Onload"></a>JNI_Onload</h3><p>初始化三块内存区域，并动态注册 NativeUtil.classesInit0<br><img src="/img/2025-3-15/4.png"></p><p>从三块内存区域的大小可以初步推测，这里后续用于存储dex中方法、字符串等信息<br><img src="/img/2025-3-15/8.png"></p><h3 id="classesInit0"><a href="#classesInit0" class="headerlink" title="classesInit0"></a>classesInit0</h3><p>传参为索引a（存在多个表，为区分不同表的索引，用字母来命名），由此定位到每个类的信息（4+4+4字节）<br>其中包含 类名索引b、类首个方法的信息的索引c、类方法数量</p><p>对于类方法的信息（4+4+8字节），其中包含 方法名索引d、方法签名索引e、方法指针<br>这些数据最后统一传入 RegisterNatives<br><img src="/img/2025-3-15/5.png"></p><p>简单来讲，classesInit0 通过读取dex（严格来讲是已在内存中的dex数据），实现对指定类所有native方法的动态注册</p><h3 id="某native函数"><a href="#某native函数" class="headerlink" title="某native函数"></a>某native函数</h3><p>通过前面提到的 方法指针，来到某个java方法对应的native处<br><img src="/img/2025-3-15/6.png"></p><p>可以看到，在栈中先初始化虚拟寄存器，再将方法字节码信息、一个函数指针数组压入，而后进入解释器入口函数 vmInterpret<br>由此来到 libnmmvm.so</p><p>分析 libnmmvm.so 之前，先看看这个函数指针数组<br>其首个函数中涉及读取逻辑，读取对象包括 前面在JNI_Onload中被初始化的内存区域，以及已在内存中的dex数据<br><img src="/img/2025-3-15/9.png"><br>剩下函数也是如出一辙<br>因此可推测出，这一系列函数是用于后续解释过程中，读取dex字符串、类型、字段、方法、类信息的</p><h2 id="libnmmvm-so"><a href="#libnmmvm-so" class="headerlink" title="libnmmvm.so"></a>libnmmvm.so</h2><p>java会发现没有显式加载 libnmmvm.so的逻辑<br>就算hook android_dlopen_ext 查看加载库，也看不到 libnmmvm.so的痕迹<br><img src="/img/2025-3-15/10.png"></p><p>实际上了解so加载流程的话可知，libnmmvm.so作为 libnmmp.so的依赖库（位列DT_NEEDED条目），在后者加载时会一并加载<br><img src="/img/2025-3-15/11.png"><br>此操作更加底层，因此 android_dlopen_ext 是拦截不到的</p><h3 id="vmInterpret"><a href="#vmInterpret" class="headerlink" title="vmInterpret"></a>vmInterpret</h3><p>可以看到一个自定义的，而非编译器为优化switch语句而生成的跳转表。接下来从中取出地址进行下一步的跳转<br><img src="/img/2025-3-15/7.png"></p><p>由此可以看出，是一个 Goto 结构解释器（参考Android源码中 <a href="http://androidxref.com/7.1.2_r36/xref/art/runtime/interpreter/interpreter_goto_table_impl.cc#157">ExecuteGotoImpl</a>）</p><h1 id="指令还原"><a href="#指令还原" class="headerlink" title="指令还原"></a>指令还原</h1><p>以原包中的 onCreate为例<br><img src="/img/2025-3-15/12.png"></p><h2 id="定位native函数"><a href="#定位native函数" class="headerlink" title="定位native函数"></a>定位native函数</h2><p>先要定位到该方法在libnmmp.so中 对应的native函数<br>可通过hook RegisterNatives打印 每个类的所有native函数地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">find_natives</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>();  <span class="comment">// 这里使用x64下的</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">RegisterNatives</span>_addr = <span class="variable constant_">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; symbols.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            <span class="keyword">const</span> symbol = symbols[index];</span><br><span class="line">            <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span> &amp;&amp; symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title class_">RegisterNatives</span>_addr = symbol.<span class="property">address</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">RegisterNatives</span>_addr, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>();</span><br><span class="line">                <span class="keyword">var</span> class_name = env.<span class="title function_">getClassName</span>(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;class_name:&quot;</span>, class_name);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> method_count = args[<span class="number">3</span>].<span class="title function_">toInt32</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; method_count; index++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> method_name = args[<span class="number">2</span>].<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> * index).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; method_name:&quot;</span>, method_name);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> signature = args[<span class="number">2</span>].<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> * index).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; signature:&quot;</span>, signature);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> fnPtr = args[<span class="number">2</span>].<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> * index).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; fnPtr:&quot;</span>, fnPtr);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> modeule = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; modeule:&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(modeule));</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; func_addr:&quot;</span>, fnPtr.<span class="title function_">sub</span>(modeule.<span class="property">base</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">find_natives</span>();</span><br></pre></td></tr></table></figure><p>由此找到 onCreate的地址，对应arm64下的 sub_31746C<br>进而获取到 其加密字节码<br><img src="/img/2025-3-15/13.png"></p><p>在进行字节码还原之前，先提前提放一下 字节码加密前后的对比<br><img src="/img/2025-3-15/14.png"></p><h2 id="操作码还原"><a href="#操作码还原" class="headerlink" title="操作码还原"></a>操作码还原</h2><p>字节码中加密了操作码部分，对其进行了重新映射（原映射见Android源码中 <a href="http://androidxref.com/9.0.0_r3/xref/dalvik/libdex/DexOpcodes.h#69">enum Opcode</a>）<br>因此要分析出 跳转表的每一个索引处，分别对应哪个操作码的handler</p><h2 id="索引还原"><a href="#索引还原" class="headerlink" title="索引还原"></a>索引还原</h2><p>字节码中还加密了索引部分，因为从前面的分析可知，解释器中访问字符串、类型、字段、方法、类信息时，并非直接读取dex，而是读取已在内存中的dex数据<br>换句话说，原先基于dex 的索引，都被转换成了基于内存中dex数据 的索引</p>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDA D-810插件反混淆</title>
      <link href="/2025/03/06/2025-3-6%20IDA%20d810%E6%8F%92%E4%BB%B6%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
      <url>/2025/03/06/2025-3-6%20IDA%20d810%E6%8F%92%E4%BB%B6%E5%8F%8D%E6%B7%B7%E6%B7%86/</url>
      
        <content type="html"><![CDATA[<p>这几天在研究OLLVM反混淆，了解到一个IDA反混淆插件————D-810，由此打算体验一手其强大功能<br>期间涉及的应用，各版本信息如下：</p><ol><li>IDA：7.7</li><li>python：3.11.5</li><li>PyQt5, PyQt5_sip：5.15.11, 12.17.0</li><li>OLLVM：9.0.1</li></ol><h1 id="插件导入"><a href="#插件导入" class="headerlink" title="插件导入"></a>插件导入</h1><p>将项目目录下的 D810.py、d810文件夹，移动至IDA plugins目录下</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><p>IDA快捷键 ctrl+shift+d 试图打开D-810面板，结果显示找不到sip模块<br><img src="/img/2025-3-6/1.png"></p><p>但是我python Lib\site-packages下，明明就有啊，为什么会找不到呢？<br><img src="/img/2025-3-6/4.png"></p><p>一开始以为是版本问题，捣鼓了好久都无济于事<br>之后注意到IDA控制台的报错，发现问题出在IDA该目录下<br><img src="/img/2025-3-6/2.png"></p><p>又是捣鼓了好久，最后才试出来要把这里的 sip.pyd删掉<br>看来问题出在，IDA自带的旧版本使用优先级较高，但与我python中的不兼容<br><img src="/img/2025-3-6/3.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="去指令替换"><a href="#去指令替换" class="headerlink" title="去指令替换"></a>去指令替换</h2><p>这下可以打开D-810面板了，先选择去除指令替换的json文件，点击”start”<br><img src="/img/2025-3-6/5.png"><br>等到控制台输出如下信息，即可开始重新生成伪代码<br><img src="/img/2025-3-6/6.png"></p><p>此时可以看到，MBA表达式已被简化<br><img src="/img/2025-3-6/7.png"></p><h2 id="去控制流平坦化"><a href="#去控制流平坦化" class="headerlink" title="去控制流平坦化"></a>去控制流平坦化</h2><p>接下来使用去控制流平坦和的json文件<br><img src="/img/2025-3-6/8.png"></p><p>可以看到，控制流平坦化被很好的去除了<br><img src="/img/2025-3-6/9.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://lkliki.github.io/2023/09/28/ida%E6%8F%92%E4%BB%B6-d810%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/">ida插件 - d810安装和使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OLLVM pass自定义及NDK集成</title>
      <link href="/2025/03/01/2025-3-1%20OLLVM%20pass%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8ANDK%E9%9B%86%E6%88%90/"/>
      <url>/2025/03/01/2025-3-1%20OLLVM%20pass%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8ANDK%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>一直以来久闻OLLVM混淆大名，逆向过程中也是常常遇到。不禁萌生出疑问，开发者是如何自定义pass，并将OLLVM引入到自己项目中去的？<br>带着这个疑问，开启了此次的探索，试着将OLLVM集成到Android NDK中，为自己的so加上混淆</p><h1 id="pass自定义"><a href="#pass自定义" class="headerlink" title="pass自定义"></a>pass自定义</h1><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p>用得较多的两个版本：</p><ol><li><a href="https://github.com/obfuscator-llvm/obfuscator/tree/llvm-4.0">https://github.com/obfuscator-llvm/obfuscator/tree/llvm-4.0</a></li><li><a href="https://github.com/heroims/obfuscator/tree/llvm-9.0.1">https://github.com/heroims/obfuscator/tree/llvm-9.0.1</a></li></ol><p>这里选择 llvm-9.0.1，因为与旧版相比 有字符串混淆功能（obfuscator-llvm-9.0.1\lib\Transforms\Obfuscation下有 StringObfuscation.cpp）</p><h2 id="pass添加"><a href="#pass添加" class="headerlink" title="pass添加"></a>pass添加</h2><ol><li><p>将以下自定义的 NameObfuscation.cpp 放到 obfuscator-llvm-9.0.1\lib\Transforms\Obfuscation</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Module.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/GlobalVariable.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/MD5.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/ADT/SmallString.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LLVMContext.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">NameObfuscation</span> : <span class="keyword">public</span> ModulePass &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">    <span class="built_in">NameObfuscation</span>() : <span class="built_in">ModulePass</span>(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">runOnModule</span><span class="params">(Module &amp;M)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      llvm::MD5 Hasher;</span><br><span class="line">      llvm::MD5::MD5Result Hash;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 对模块中所有函数 进行名称混淆</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;F : M) &#123;</span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;EncodeFunctionName: &quot;</span> &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳过 main 函数</span></span><br><span class="line">        <span class="keyword">if</span> (F.<span class="built_in">getName</span>().<span class="built_in">compare</span>(<span class="string">&quot;main&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">          Hasher.<span class="built_in">update</span>(F.<span class="built_in">getName</span>());        <span class="comment">// 添加函数名</span></span><br><span class="line">          Hasher.<span class="built_in">final</span>(Hash);                <span class="comment">// 计算MD5值</span></span><br><span class="line"></span><br><span class="line">          SmallString&lt;<span class="number">32</span>&gt; HexString;</span><br><span class="line">          llvm::MD5::<span class="built_in">stringifyResult</span>(Hash, HexString);</span><br><span class="line"></span><br><span class="line">          F.<span class="built_in">setName</span>(HexString);              <span class="comment">// 设置新函数名</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 对模块中所有全局变量 进行名称混淆</span></span><br><span class="line">      <span class="keyword">for</span> (GlobalVariable &amp;GV : M.<span class="built_in">globals</span>()) &#123;</span><br><span class="line">        StringRef oldName = GV.<span class="built_in">getName</span>();</span><br><span class="line">        Hasher.<span class="built_in">update</span>(oldName);            <span class="comment">// 添加全局变量名</span></span><br><span class="line">        Hasher.<span class="built_in">final</span>(Hash);               <span class="comment">// 计算MD5值</span></span><br><span class="line"></span><br><span class="line">        SmallString&lt;<span class="number">32</span>&gt; HexString;</span><br><span class="line">        llvm::MD5::<span class="built_in">stringifyResult</span>(Hash, HexString);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;EncodeVariableName: &quot;</span> &lt;&lt; oldName &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">        GV.<span class="built_in">setName</span>(HexString);            <span class="comment">// 设置新全局变量名</span></span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; GV.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="comment">// namespace</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> NameObfuscation::ID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;NameObfuscation&gt; <span class="title">X</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;nobf&quot;</span>,                              </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;function and global variable name obfuscation pass&quot;</span>                        </span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>同目录下 CMakeLists.txt中添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">add_llvm_library(LLVMObfuscation </span><br><span class="line">  SHARED  <span class="comment">// 新增，用于在 mingw64\build\bin下生成 LLVMObfuscation.dll</span></span><br><span class="line">  CryptoUtils.cpp</span><br><span class="line">  Substitution.cpp</span><br><span class="line">  StringObfuscation.cpp</span><br><span class="line">  BogusControlFlow.cpp</span><br><span class="line">  Utils.cpp</span><br><span class="line">  SplitBasicBlocks.cpp</span><br><span class="line">  Flattening.cpp</span><br><span class="line">  NameObfuscation.cpp   <span class="comment">// 新增</span></span><br><span class="line"></span><br><span class="line">  ADDITIONAL_HEADER_DIRS</span><br><span class="line">  $&#123;LLVM_MAIN_INCLUDE_DIR&#125;/llvm/Transforms/Obfuscation</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">add_dependencies(LLVMObfuscation intrinsics_gen)</span><br></pre></td></tr></table></figure></li></ol><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>使用 cmake-3.31.1 进行构建，其中使用 MinGW-W64-5.4.0 进行编译（都需先添加环境变量）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mingw64</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 生成构建文件</span></span><br><span class="line">cmake -G <span class="string">&quot;MinGW Makefiles&quot;</span> -DCMAKE_BUILD_TYPE=Release -DLLVM_INCLUDE_TESTS=OFF ..\..\obfuscator-llvm-9.0.1</span><br><span class="line"><span class="comment"># 开始构建，输出到 mingw64\build</span></span><br><span class="line">cmake --build .</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用opt工具，基于 LLVMObfuscation.dll 对IR进行混淆<br>通过控制台输出，可查看pass执行情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">opt -load LLVMObfuscation.dll -nobf hello.bc -o hello_obfuscated.bc</span><br></pre></td></tr></table></figure><h1 id="NDK集成"><a href="#NDK集成" class="headerlink" title="NDK集成"></a>NDK集成</h1><p>这里选择版本旧一些的 ndk-21.4.7075529</p><h2 id="文件替换"><a href="#文件替换" class="headerlink" title="文件替换"></a>文件替换</h2><ol><li>build\bin 下的 clang.exe, clang++.exe, clang-format.exe，替换掉 ndk\21.4.7075529\toolchains\llvm\prebuilt\windows-x86_64\bin 下的文件</li><li>build\lib\clang\9.0.1\include 下的 stddef.h, stdarg.h, float.h, __stddef_max_align_t.h 复制到 21.16352462\toolchains\llvm\prebuilt\windows-x86_64\sysroot\usr\include 下</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>指定ndk版本。build.gradle中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        ndkVersion <span class="string">&quot;21.4.7075529&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置混淆选项。针对不同范围的混淆，设置方式有所不同</p></li></ol><p>对于全局混淆：<br>CMakeLists.txt中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C源码、debug版、普通混淆</span></span><br><span class="line">set(CMAKE_C_FLAGS_DEBUG <span class="string">&quot;$&#123;CMAKE_C_FLAGS_DEBUG&#125; \</span></span><br><span class="line"><span class="string">    -mllvm -sub \</span></span><br><span class="line"><span class="string">    -mllvm -bcf \</span></span><br><span class="line"><span class="string">    -mllvm -fla -mllvm -split \</span></span><br><span class="line"><span class="string">    -mllvm -sobf&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// C++源码、release版、高度混淆</span></span><br><span class="line">set(CMAKE_CXX_FLAGS_RELEASE <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS_RELEASE&#125; \</span></span><br><span class="line"><span class="string">    -mllvm -sub -mllvm -sub_loop=6 \</span></span><br><span class="line"><span class="string">    -mllvm -bcf -mllvm -bcf_loop=6 -mllvm -bcf_prob=80 \</span></span><br><span class="line"><span class="string">    -mllvm -fla -mllvm -split -mllvm -split_num=4 \</span></span><br><span class="line"><span class="string">    -mllvm -sobf&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>对于函数混淆：<br>源码中添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> __<span class="title function_">attribute__</span><span class="params">((annotate(<span class="string">&quot;sub&quot;</span>), annotate(<span class="string">&quot;bcf&quot;</span>), annotate(<span class="string">&quot;fla&quot;</span>), annotate(<span class="string">&quot;sobf&quot;</span>)))</span></span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>以下为原so在IDA下的表现<br><img src="/img/2025-3-1/1.png"></p><p>以下为混淆的so在IDA下的表现<br>可以看到许多switch-case分支，不透明谓词表达式，以及在.init_array中才被解密的字符串<br><img src="/img/2025-3-1/2.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/blogzhangwei/p/17218016.html">win10  OLLVM编译环境搭建  并且实现Android jni 字符串加密</a><br><a href="https://blog.csdn.net/qq_36535153/article/details/131374150">Windows下Android studio 搭建 android NDK 搭建 OLLVM 踩坑记录</a><br><a href="https://www.jianshu.com/p/85e0abbc7f53">windows上编译ollvm的踩坑记录</a><br><a href="https://gal2xy.github.io/2024/04/22/LLVM%20and%20OLLVM/LLVM-Pass%E7%BC%96%E5%86%99/#%E4%BA%94%E3%80%81%E9%80%9A%E8%BF%87clang%E6%89%A7%E8%A1%8Cpass">LLVM Pass编写</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dpt-shell抽取壳分析</title>
      <link href="/2025/02/21/2025-2-21%20dpt-shell%E6%8A%BD%E5%8F%96%E5%A3%B3%E5%88%86%E6%9E%90/"/>
      <url>/2025/02/21/2025-2-21%20dpt-shell%E6%8A%BD%E5%8F%96%E5%A3%B3%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>最近在研究方法抽取壳。自实现的途中，看到了大佬的<a href="https://github.com/luoyesiqiu/dpt-shell">项目</a><br>于是想从逆向角度看看大佬思路下 抽取壳的实现，同时也体验一遍手脱过程<br>希望能为自实现抽取壳，以及未来脱壳提供一定思路</p><p>环境如下：</p><ol><li>系统版本：Android 9.0.0</li><li>系统架构：x64</li><li>分析so架构：arm64</li></ol><h1 id="dpt-shell加固"><a href="#dpt-shell加固" class="headerlink" title="dpt-shell加固"></a>dpt-shell加固</h1><p>随便整个apk，扔进 dpt-shell加固</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar dpt.jar -f AntiRoot.apk</span><br></pre></td></tr></table></figure><p>这是原项目在jadx中的结构<br><img src="/img/2025-2-21/13.png"></p><p>这是加固后的，可以看到原package下只剩一个R类了，多出了各种壳的类<br><img src="/img/2025-2-21/14.png"></p><h1 id="壳程序分析"><a href="#壳程序分析" class="headerlink" title="壳程序分析"></a>壳程序分析</h1><h2 id="java层"><a href="#java层" class="headerlink" title="java层"></a>java层</h2><p>AndroidManifest.xml 中可以看到应用有自定义的 AppComponentFactory, Application<br><img src="/img/2025-2-21/1.png"></p><h3 id="ProxyComponentFactory"><a href="#ProxyComponentFactory" class="headerlink" title="ProxyComponentFactory"></a>ProxyComponentFactory</h3><p>先 ProxyApplication一步执行，其中基于 C0000a, JniBridge类，实例化各个组件<br>其中重点关注 Application的实例化————<br>基于 Global.sIsReplacedClassLoader的返回，调用 JniBridge.loadShellLibs() 加载libdpt.so；或调用 JniBridge.cbde() 替换ClassLoader<br><img src="/img/2025-2-21/21.png"></p><h3 id="C0000a"><a href="#C0000a" class="headerlink" title="C0000a"></a>C0000a</h3><p>充当工具类，用于获取CPU架构信息、获取ApplicationInfo、从apk assets&#x2F;vwwwwwvwww&#x2F;中提取 libdpt.so并保存到应用私有目录<br><img src="/img/2025-2-21/20.png"></p><h3 id="JniBridge"><a href="#JniBridge" class="headerlink" title="JniBridge"></a>JniBridge</h3><p>提供与 libdpt.so 交互的各种功能<br><img src="/img/2025-2-21/19.png"></p><h3 id="ProxyApplication"><a href="#ProxyApplication" class="headerlink" title="ProxyApplication"></a>ProxyApplication</h3><p>查看壳程序的常客 attachBaseContext()，其中功能前面 ProxyComponentFactory大都有提到，这里不再赘述</p><h2 id="native层"><a href="#native层" class="headerlink" title="native层"></a>native层</h2><p>视角转向apk assets&#x2F;vwwwwwvwww&#x2F;中的 libdpt.so<br>按照惯例，先从.init_array入手，查看第一个函数sub_C67C<br><img src="/img/2025-2-21/2.png"></p><h3 id="解密逻辑"><a href="#解密逻辑" class="headerlink" title="解密逻辑"></a>解密逻辑</h3><p>最后的跳转目的地爆红了，一看都落在被加密的.bitcode节中<br><img src="/img/2025-2-21/3.png"><br>因此在此之前，肯定要完成<code>解密</code>，转而分析最前面的 sub_C558</p><p>其中”.bitcode”作为参数被传入（竟然没字符串混淆）<br><img src="/img/2025-2-21/4.png"><br>执行如下IDA脚本进行解密</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_segment</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">key, data</span>):</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="number">16</span>]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">     </span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        out.append(byte ^ k)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_bitcode</span>():</span><br><span class="line">    target_segment = <span class="string">&quot;.bitcode&quot;</span>  </span><br><span class="line">     </span><br><span class="line">    seg = ida_segment.get_segm_by_name(target_segment)</span><br><span class="line">     </span><br><span class="line">    start_ea = seg.start_ea</span><br><span class="line">    end_ea = seg.end_ea</span><br><span class="line">     </span><br><span class="line">    encrypted_data = idc.get_bytes(start_ea, end_ea - start_ea)</span><br><span class="line">     </span><br><span class="line">    rc4_key = <span class="built_in">bytes</span>([</span><br><span class="line">        <span class="number">0x0A</span>, <span class="number">0xAE</span>, <span class="number">0x0E</span>, <span class="number">0x20</span>, <span class="number">0xC9</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0x60</span>, <span class="number">0xB4</span>, <span class="number">0x74</span>, </span><br><span class="line">        <span class="number">0x04</span>, <span class="number">0xF5</span>, <span class="number">0x8F</span>, <span class="number">0x06</span>, <span class="number">0x9D</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">    ])</span><br><span class="line">     </span><br><span class="line">    decrypted_data = rc4_decrypt(rc4_key, encrypted_data)</span><br><span class="line">     </span><br><span class="line">    original_perms = idc.get_segm_attr(start_ea, idc.SEGATTR_PERM)</span><br><span class="line">    idc.set_segm_attr(start_ea, idc.SEGATTR_PERM, <span class="number">0x7</span>) </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> offset, byte <span class="keyword">in</span> <span class="built_in">enumerate</span>(decrypted_data):</span><br><span class="line">        idc.patch_byte(start_ea + offset, byte)</span><br><span class="line">     </span><br><span class="line">    idc.set_segm_attr(start_ea, idc.SEGATTR_PERM, original_perms)</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;操作完成&quot;</span>)</span><br><span class="line"> </span><br><span class="line">decrypt_bitcode()</span><br></pre></td></tr></table></figure><p>然后将.bitcode节折叠后全选，即可一次性转换成汇编<br><img src="/img/2025-2-21/5.png"></p><h3 id="检测逻辑"><a href="#检测逻辑" class="headerlink" title="检测逻辑"></a>检测逻辑</h3><p>这下可以看到先前爆红部分的逻辑了<br>sub_4E91C是基于 &#x2F;proc&#x2F;%d&#x2F;maps中特定字符串 的<code>frida检测</code>（竟然没字符串混淆）<br><img src="/img/2025-2-21/6.png"><br>sub_4E974是基于 ptrace系统调用 的<code>反调试</code><br><img src="/img/2025-2-21/7.png"></p><h3 id="指令回填逻辑"><a href="#指令回填逻辑" class="headerlink" title="指令回填逻辑"></a>指令回填逻辑</h3><p>sub_D1D0实现了方法抽取壳中最关键的<code>指令回填</code>操作<br><img src="/img/2025-2-21/8.png"><br>因为不同Android版本下 DefineClass存在差异，因此其中hook DefineClass的部分，基于SDK版本是否小于22存在两分支<br>此次环境的SDK大于22，因此分析 sub_4DAC0，其中可以看到明显的 hook后调用原函数的逻辑<br>（注意，因为Android源码中都是ClassLinker类的非静态成员函数，实际调用时会隐式传递一个this指针作为第一个参数，因此这里比定义要多一个参数）<br><img src="/img/2025-2-21/9.png"></p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>脱壳点很明确，调用原DefineClass时传入的第五个参数 dex_file，其中即保存着该dex的内存信息<br><img src="/img/2025-2-21/10.png"></p><p>因此脚本思路就是————<br>sub_4D608进入时，获取其第二个参数 dex_file中的 begin, size（该dex在内存中的起始位置和长度）；<br>离开时，基于上述数据进行dump<br>（手上frida是魔改过的，所以暂且不用过检测）</p><p>spawn模式注入脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libdpt.so&quot;</span> <span class="comment">// 使用x64下的</span></span><br><span class="line">    <span class="keyword">var</span> is_hooked = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// android_dlopen_ext进入时 hook call_constuctors</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">                <span class="title function_">hook_call_constructors</span>(is_hooked)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params">is_hooked</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;linker64&quot;</span>).<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">var</span> call_constructors_addr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; symbols.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            call_constructors_addr = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Find function call_constructors at address: &quot;</span> + call_constructors_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// call_constuctors进入时获取dex_file</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(call_constructors_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!is_hooked)&#123;</span><br><span class="line">                is_hooked = <span class="literal">true</span></span><br><span class="line">                <span class="title function_">get_dex_file</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> processedMemory = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_dex_file</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> baseAddress = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&#x27;libdpt.so&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> address = baseAddress.<span class="title function_">add</span>(<span class="number">0xFD90</span>);    <span class="comment">// 对应arm64下sub_C558</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// .bitcode节解密函数离开时</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> targetAddress = baseAddress.<span class="title function_">add</span>(<span class="number">0x5AE00</span>);  <span class="comment">// 对应arm64下sub_4D608</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 指令回填函数进入时</span></span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(targetAddress, &#123;</span><br><span class="line">                <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取 dex_file的指针</span></span><br><span class="line">                    <span class="keyword">const</span> ptr = args[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 分别读取 dex_file偏移8, 16字节处的 begin, size</span></span><br><span class="line">                    <span class="keyword">const</span> begin = ptr.<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                    <span class="keyword">const</span> size = ptr.<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readU64</span>(); </span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 每个dex会被进行多次指令回填操作，这里实现每个dex只打印一次begin,size</span></span><br><span class="line">                    <span class="keyword">const</span> memoryKey = <span class="string">`<span class="subst">$&#123;begin.toString(<span class="number">16</span>)&#125;</span>-<span class="subst">$&#123;size.toString(<span class="number">16</span>)&#125;</span>`</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!processedMemory.<span class="title function_">has</span>(memoryKey)) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Begin: 0x&quot;</span> + begin.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Size: 0x&quot;</span> + size.<span class="title function_">toString</span>(<span class="number">16</span>));  </span><br><span class="line">                        processedMemory.<span class="title function_">add</span>(memoryKey);                    </span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 将数据存入this上下文</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">begin</span> = begin;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">size</span> = size;                        </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                    <span class="comment">//  从this上下文获取数据，进行dump</span></span><br><span class="line">                    <span class="title function_">dump_dex</span>(<span class="variable language_">this</span>.<span class="property">begin</span>, <span class="variable language_">this</span>.<span class="property">size</span>);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dump_dex</span>(<span class="params">begin, size</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出文件放在应用私有目录</span></span><br><span class="line">    <span class="keyword">const</span> file_path = <span class="string">&quot;/data/data/com.example.antiroot/files/&quot;</span> + begin.<span class="title function_">toString</span>(<span class="number">16</span>) + <span class="string">&quot;_&quot;</span> + size.<span class="title function_">toString</span>(<span class="number">16</span>) + <span class="string">&quot;.dex&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件进行写入，如果文件已存在则复写</span></span><br><span class="line">    <span class="keyword">var</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(file_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(begin), size, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> buffer = <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(begin, size);</span><br><span class="line">    file_handle.<span class="title function_">write</span>(buffer);</span><br><span class="line">    file_handle.<span class="title function_">flush</span>();</span><br><span class="line">    file_handle.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">after_so_loaded</span>();</span><br></pre></td></tr></table></figure><p>可以看到控制台成功输出<br><img src="/img/2025-2-21/12.png"><br>dump出的扔进jadx，可以看到被抽取的类方法已悉数回填了<br><img src="/img/2025-2-21/16.png"></p><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>一开始脚本里的 get_dex_file()，是打算这样操作的————<br>sub_4D608离开时，读取qword_68408，即 DefineClass地址；<br>然后hook DefineClass，其进入时，获取其第五个参数 dex_file中的 begin, size，再进行dump<br><img src="/img/2025-2-21/10.png"></p><p>以下为一开始写的 get_dex_file()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_dex_file</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> baseAddress = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&#x27;libdpt.so&#x27;</span>);     <span class="comment">// 使用x64下的</span></span><br><span class="line">    <span class="keyword">const</span> address = baseAddress.<span class="title function_">add</span>(<span class="number">0xFD90</span>);    <span class="comment">// 对应arm64下sub_C558</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// .bitcode节解密函数离开时</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> targetAddress = baseAddress.<span class="title function_">add</span>(<span class="number">0x5AE00</span>); <span class="comment">// 对应arm64下sub_4D608</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 指令回填函数离开时</span></span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(targetAddress, &#123;</span><br><span class="line">                <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">DefineClass</span>_addr = baseAddress.<span class="title function_">add</span>(<span class="number">0x7C458</span>).<span class="title function_">readPointer</span>()   <span class="comment">// 对应arm64下qword_68408</span></span><br><span class="line">            </span><br><span class="line">                    <span class="comment">// DefineClass进入时</span></span><br><span class="line">                    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">DefineClass</span>_addr, &#123;</span><br><span class="line">                        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                            <span class="keyword">const</span> ptr = args[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">const</span> begin = ptr.<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                            <span class="keyword">const</span> size = ptr.<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readU64</span>();        </span><br><span class="line"></span><br><span class="line">                            <span class="keyword">const</span> memoryKey = <span class="string">`<span class="subst">$&#123;begin.toString(<span class="number">16</span>)&#125;</span>-<span class="subst">$&#123;size.toString(<span class="number">16</span>)&#125;</span>`</span>;</span><br><span class="line">                            <span class="keyword">if</span> (!processedMemory.<span class="title function_">has</span>(memoryKey)) &#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Begin: 0x&quot;</span> + begin.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Size: 0x&quot;</span> + size.<span class="title function_">toString</span>(<span class="number">16</span>));  </span><br><span class="line">                                processedMemory.<span class="title function_">add</span>(memoryKey);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="title function_">dump_dex</span>(begin, size);</span><br><span class="line">                        </span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但发现在dump期间会直接卡住，应用也卡在启动界面<br><img src="/img/2025-2-21/15.png"><br>exit命令也不管用，只能强行关闭应用，此时控制台报出段错误<br><img src="/img/2025-2-21/17.png"><br>把此时已dump出的扔进jadx。因为MainAvtivity甚至还未加载进内存，所以这里看不到<br><img src="/img/2025-2-21/18.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><pre><code>dex加壳（方法抽取）、frida检测（/proc/self/maps）、反调试（ptrace）、PLT Hook（ByteHook）、Inline Hook（Dobby）|dex dump</code></pre>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反调试及对抗</title>
      <link href="/2025/02/17/2025-2-17%20%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E5%AF%B9%E6%8A%97/"/>
      <url>/2025/02/17/2025-2-17%20%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E5%AF%B9%E6%8A%97/</url>
      
        <content type="html"><![CDATA[<p>本文记录了Android中常见的反调试手段，从原理及对抗两个方面进行总结<br>文章会根据后续的学习进度，持续追加新内容</p><p>注：</p><ol><li>Android下的调试器本质上是基于ptrace()的，这点与frida注入类似。因此反调试与frida检测有诸多相通之处<br>对于本文没涉及到的内容，会在同系列的《Frida检测及对抗》中进行补充说明</li><li>默认环境如下————Android 9.0.0、arm64</li></ol><h1 id="检测手段（native）"><a href="#检测手段（native）" class="headerlink" title="检测手段（native）"></a>检测手段（native）</h1><h2 id="23946端口"><a href="#23946端口" class="headerlink" title="23946端口"></a>23946端口</h2><h2 id="特定目录"><a href="#特定目录" class="headerlink" title="特定目录"></a>特定目录</h2><h3 id="data-local-tmp"><a href="#data-local-tmp" class="headerlink" title="&#x2F;data&#x2F;local&#x2F;tmp"></a>&#x2F;data&#x2F;local&#x2F;tmp</h3><h3 id="proc-self-status"><a href="#proc-self-status" class="headerlink" title="&#x2F;proc&#x2F;self&#x2F;status"></a>&#x2F;proc&#x2F;self&#x2F;status</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkTracerPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    std::string tracer_pid = <span class="string">&quot;0&quot;</span>;  </span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">fopen</span>(<span class="string">&quot;/proc/self/status&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        std::<span class="built_in">perror</span>(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fgets</span>(buffer, <span class="built_in">sizeof</span>(buffer), fp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (std::<span class="built_in">strncmp</span>(buffer, <span class="string">&quot;TracerPid:\t&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;TracerPid:\t&quot;</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(buffer, <span class="string">&quot;TracerPid:\t%s&quot;</span>, &amp;tracer_pid[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tracer_pid != <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="断点特征"><a href="#断点特征" class="headerlink" title="断点特征"></a>断点特征</h2><h3 id="库函数首字节"><a href="#库函数首字节" class="headerlink" title="库函数首字节"></a>库函数首字节</h3><p>不同架构下的实现有所区别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkBytes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;std::string&gt; funcs = &#123;<span class="string">&quot;open&quot;</span>, <span class="string">&quot;read&quot;</span>, <span class="string">&quot;write&quot;</span>, <span class="string">&quot;close&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *handle = <span class="built_in">dlopen</span>(<span class="string">&quot;/system/lib64/libc.so&quot;</span>, RTLD_NOW);</span><br><span class="line">    <span class="keyword">if</span> (!handle) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::ifstream <span class="title">file</span><span class="params">(<span class="string">&quot;/system/lib64/libc.so&quot;</span>, std::ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">        <span class="built_in">dlclose</span>(handle);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">seekg</span>(<span class="number">0</span>, std::ios::end);</span><br><span class="line">    <span class="type">long</span> length = file.<span class="built_in">tellg</span>();</span><br><span class="line">    file.<span class="built_in">seekg</span>(<span class="number">0</span>, std::ios::beg);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::unique_ptr&lt;<span class="type">char</span>[]&gt; <span class="title">fileBuffer</span><span class="params">(<span class="keyword">new</span> <span class="type">char</span>[length])</span></span>;</span><br><span class="line">    file.<span class="built_in">read</span>(fileBuffer.<span class="built_in">get</span>(), length);</span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;func : funcs) &#123;</span><br><span class="line">        <span class="type">void</span> *sym = <span class="built_in">dlsym</span>(handle, func.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">if</span> (!sym) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">uintptr_t</span> offset = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(sym) - <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(handle);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __aarch64__ </span></span><br><span class="line">        <span class="keyword">if</span> (offset + <span class="number">4</span> + <span class="built_in">sizeof</span>(targetSequence) &gt; <span class="built_in">static_cast</span>&lt;<span class="type">long</span>&gt;(length)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> targetSequence[] = &#123;<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0xd4</span>&#125;;    <span class="comment">// brk #0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (std::<span class="built_in">memcmp</span>(fileBuffer.<span class="built_in">get</span>() + offset + i, targetSequence, <span class="built_in">sizeof</span>(targetSequence)) == <span class="number">0</span>) &#123;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(__x86_64__) </span></span><br><span class="line">        <span class="keyword">if</span> (offset + <span class="number">8</span> &gt; <span class="built_in">static_cast</span>&lt;<span class="type">long</span>&gt;(length)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> targetByte = <span class="number">0xCC</span>;  <span class="comment">// int3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileBuffer.<span class="built_in">get</span>()[offset + i] == targetByte) &#123;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">if</span> (found) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dlclose</span>(handle);</span><br><span class="line">    <span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自实现系统调用"><a href="#自实现系统调用" class="headerlink" title="自实现系统调用"></a>自实现系统调用</h2><p>在此之间，先来看看libc.so中是如何对Linux系统调用进行封装的<br><img src="/img/2025-2-17/1.jpg"></p><h3 id="基于syscall"><a href="#基于syscall" class="headerlink" title="基于syscall()"></a>基于syscall()</h3><p>使用libc.so的syscall()，对其他系统调用进行 间接调用<br>不同架构下的实现大致相同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">my_write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">syscall</span>(SYS_write, fd, buf, count);  <span class="comment">// SYS_write 在arm64下为64，x64下为1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于汇编"><a href="#基于汇编" class="headerlink" title="基于汇编"></a>基于汇编</h3><p>使用汇编指令让CPU切换到内核模式，对其他系统调用进行 直接调用<br>不同架构下的实现有所区别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">my_write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="type">ssize_t</span> ret;</span><br><span class="line"></span><br><span class="line">    __asm__ __volatile__ (</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __aarch64__</span></span><br><span class="line">        <span class="string">&quot;svc #0&quot;</span>        </span><br><span class="line">        : <span class="string">&quot;=r&quot;</span> (ret)    </span><br><span class="line">        : <span class="string">&quot;r&quot;</span> (SYS_write), <span class="string">&quot;r&quot;</span> ((<span class="type">long</span>)fd), <span class="string">&quot;r&quot;</span> (buf), <span class="string">&quot;r&quot;</span> ((<span class="type">long</span>)count) </span><br><span class="line">        : <span class="string">&quot;x8&quot;</span>, <span class="string">&quot;x0&quot;</span>, <span class="string">&quot;x1&quot;</span>, <span class="string">&quot;x2&quot;</span>, <span class="string">&quot;memory&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(__x86_64__) </span></span><br><span class="line">        <span class="string">&quot;syscall&quot;</span>   <span class="comment">// x86下通常使用 int 0x80 或 sysenter</span></span><br><span class="line">        : <span class="string">&quot;=a&quot;</span> (ret)</span><br><span class="line">        : <span class="string">&quot;0&quot;</span> (SYS_write), <span class="string">&quot;D&quot;</span> (fd), <span class="string">&quot;S&quot;</span> (buf), <span class="string">&quot;d&quot;</span> (count)</span><br><span class="line">        : <span class="string">&quot;rcx&quot;</span>, <span class="string">&quot;r11&quot;</span>, <span class="string">&quot;memory&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ptrace-PTRACE-TRACEME-…"><a href="#ptrace-PTRACE-TRACEME-…" class="headerlink" title="ptrace(PTRACE_TRACEME, …)"></a>ptrace(PTRACE_TRACEME, …)</h2><h2 id="双进程保护"><a href="#双进程保护" class="headerlink" title="双进程保护"></a>双进程保护</h2><h2 id="代码执行时间"><a href="#代码执行时间" class="headerlink" title="代码执行时间"></a>代码执行时间</h2><h1 id="检测手段（java）"><a href="#检测手段（java）" class="headerlink" title="检测手段（java）"></a>检测手段（java）</h1><h2 id="Debug-isDebuggerConnected"><a href="#Debug-isDebuggerConnected" class="headerlink" title="Debug.isDebuggerConnected()"></a>Debug.isDebuggerConnected()</h2><h2 id="ApplicationInfo-FLAG-DEBUGGABLE"><a href="#ApplicationInfo-FLAG-DEBUGGABLE" class="headerlink" title="ApplicationInfo.FLAG_DEBUGGABLE"></a>ApplicationInfo.FLAG_DEBUGGABLE</h2><h1 id="对抗"><a href="#对抗" class="headerlink" title="对抗"></a>对抗</h1><h2 id="挂起线程"><a href="#挂起线程" class="headerlink" title="挂起线程"></a>挂起线程</h2><h2 id="拦截系统调用"><a href="#拦截系统调用" class="headerlink" title="拦截系统调用"></a>拦截系统调用</h2><p>具体见此项目 <a href="https://github.com/LLeavesG/Frida-Sigaction-Seccomp">Frida-Sigaction-Seccomp</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://bbs.kanxue.com/thread-284941.htm">frida反调试总结+一把梭</a><br><a href="https://blog.csdn.net/yi_rui_jie/article/details/137543707">[安卓逆向]常见调试和反调试及解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 保护与对抗 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>京东sign字段分析</title>
      <link href="/2025/02/14/2025-2-14%20%E4%BA%AC%E4%B8%9Csign%E5%AD%97%E6%AE%B5%E5%88%86%E6%9E%90/"/>
      <url>/2025/02/14/2025-2-14%20%E4%BA%AC%E4%B8%9Csign%E5%AD%97%E6%AE%B5%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>这么说来，自从学会抓包的基本流程后，似乎一直都是在单纯为了抓包而抓包<br>想到这里才如梦初醒，抓包不是一直以来都是逆向中极为重要的一环吗，自己却如此割裂地看待两者，属实是浅薄了<br>于是，为了让自己进行的抓包操作，不再是”单纯为了抓包而抓包”，于是便有了这篇记录</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>打开Charles，再配置系统代理后 即可开始抓包<br><img src="/img/2025-2-14/1.png"><br>锁定如下URL，分析其参数<br><img src="/img/2025-2-14/2.png"><br>可以看到 sign字段处于加密状态，通过长度32的Hex字符串特征，初步猜测是MD5哈希值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">functionIdswitchQuery</span><br><span class="line">clientVersion10.0.8</span><br><span class="line">build89053</span><br><span class="line">clientandroid</span><br><span class="line">d_brandnubia</span><br><span class="line">d_modelNX629J</span><br><span class="line">osVersion9</span><br><span class="line">screen1920*1080</span><br><span class="line">partnerjdtopc</span><br><span class="line">oaid</span><br><span class="line">eideidA8eaa8120ddsfH9ESOjD5QJK67a0tzEOkHB/RE9BkBixaWdOx5gNYYwEY8bR2T25TYmJZKZUq/r/gfJSGf1rl2KJShJbcBmNe8/ILmPeBwEVJZ0Qx</span><br><span class="line">sdkVersion28</span><br><span class="line">langzh_CN</span><br><span class="line">uuide1e578ba35dfebbc</span><br><span class="line">aide1e578ba35dfebbc</span><br><span class="line">networkTypewifi</span><br><span class="line">wifiBssidunknown</span><br><span class="line">uemps0-2</span><br><span class="line">harmonyOs0</span><br><span class="line">st1744623751487</span><br><span class="line">sign6c7fd9dbdd79c36ef54eb1d850c2330e</span><br><span class="line">sv112</span><br></pre></td></tr></table></figure><h1 id="java层分析"><a href="#java层分析" class="headerlink" title="java层分析"></a>java层分析</h1><h2 id="frida检测绕过"><a href="#frida检测绕过" class="headerlink" title="frida检测绕过"></a>frida检测绕过</h2><p>frida附加时，应用意外退出<br>因此先从改文件名、指定端口开始尝试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:2704 tcp:2704</span><br><span class="line">/data/local/tmp/florida -l 127.0.0.1:2704</span><br><span class="line">frida -H 127.0.0.1:2704 -f <span class="string">&quot;com.jingdong.app.mall&quot;</span></span><br></pre></td></tr></table></figure><p>没想到直接就能成功附加了，省了很多事</p><h2 id="加密入口定位"><a href="#加密入口定位" class="headerlink" title="加密入口定位"></a>加密入口定位</h2><p>一般有如下三种思路，这里选择第三种</p><ol><li>“sign”关键词搜索</li><li>hook StringBuilder, hashMap</li><li>hook getBytes</li></ol><p>哈希算法通常先使用 java.lang.String.getBytes 方法将字符串转换为字节数组<br>且sign字段的生成，通常会传入其他常规字段的值 参与计算<br>由此为切入点，hook getBytes多个重载方法，当传参包含上述包中一系列字段名时，打印调用栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keywords = [</span><br><span class="line">        <span class="string">&quot;functionId&quot;</span>, <span class="string">&quot;clientVersion&quot;</span>, <span class="string">&quot;build&quot;</span>, <span class="string">&quot;client&quot;</span>, <span class="string">&quot;d_brand&quot;</span>, <span class="string">&quot;d_model&quot;</span>, <span class="string">&quot;osVersion&quot;</span>, <span class="string">&quot;screen&quot;</span>, <span class="string">&quot;partner&quot;</span>, <span class="string">&quot;sdkVersion&quot;</span>, <span class="string">&quot;lang&quot;</span>, <span class="string">&quot;networkType&quot;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> str = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    str.<span class="property">getBytes</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> str1 = <span class="variable language_">this</span>.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">const</span> containsAllKeywords = keywords.<span class="title function_">every</span>(<span class="function"><span class="params">keyword</span> =&gt;</span> str1.<span class="title function_">indexOf</span>(keyword) &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (containsAllKeywords) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;find string:&quot;</span>, str1);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getBytes</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    str.<span class="property">getBytes</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">charsetName</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> containsAllKeywords = keywords.<span class="title function_">every</span>(<span class="function"><span class="params">keyword</span> =&gt;</span> charsetName.<span class="title function_">indexOf</span>(keyword) &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (containsAllKeywords) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;find string:&quot;</span>, charsetName);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getBytes</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>虽然存在多次调用，但发现调用栈都遵循如下结构<br><img src="/img/2025-2-14/4.png"><br>看来加密入口大概率就是位于这条调用链中了</p><p>先hook genSignJDGuardHelper$1.genSign，打印传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">JDGuardHelper</span>$1 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.jingdong.common.guard.JDGuardHelper$1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">JDGuardHelper</span>$1.<span class="property">genSign</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">uri, bArr, str, str2, z</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;URI: &quot;</span> + uri.<span class="title function_">toString</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;byte[] content: &quot;</span> + (bArr ? bArr.<span class="property">length</span> + <span class="string">&quot; bytes&quot;</span> : <span class="string">&quot;null&quot;</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String str: &quot;</span> + str);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String str2: &quot;</span> + str2);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;boolean z: &quot;</span> + z);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">genSign</span>(uri, bArr, str, str2, z);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发现其传入的URI中已包含sign字段<br><img src="/img/2025-2-14/5.png"><br>看来字段生成逻辑 还要位于更上层调用链</p><p>沿着调用链往上hook HttpSettingTool.doSignUsingJdGuard</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">ParamBuilderForJDMall</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.jingdong.jdsdk.network.toolbox.ParamBuilderForJDMall&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">ParamBuilderForJDMall</span>.<span class="property">setupParams</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">httpSetting</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HttpSetting object - URL: &quot;</span> + httpSetting.<span class="title function_">getUrl</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String str: &quot;</span> + str);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">doSignUsingJdGuard</span>(httpSetting, str);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>仍然包含sign字段<br><img src="/img/2025-2-14/6.png"></p><p>继续往上，来到 ParamBuilderForJDMall.setupParams<br>发现其在为 HttpRequest 对象添加各种自定义参数，进而构建 HTTP请求<br><img src="/img/2025-2-14/7.png"><br>而调用的 signature方法，正是在生成签名信息，由此深入追踪</p><p>其中从 HttpSetting 对象及工具类中获取 functionId, versionName等信息<br>而后与 str（请求体参数）, str2（UUID）一同传入 signature(Context context, String str, String str2, String str3, String str4, String str5)<br><img src="/img/2025-2-14/8.png"><br>然而跟进该方法发现是一个接口，仅通过查找引用是无法来到其实现类的<br><img src="/img/2025-2-14/9.png"><br>不过接口在实现时 肯定会再次提及其方法签名<br>基于此思路，我们可以直接对方法签名进行全局搜索<br><img src="/img/2025-2-14/10.png"></p><p>由此来到 BitmapkitUtils类<br><img src="/img/2025-2-14/11.png"><br>看来sign字段的生成，底层由native函数 getSignFromJni实现<br>且疑似来自于 运行期间动态加载的”jdbitmapkit”模块</p><p>一般还是通过遍历各模块导出符号 来定位native函数所在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findExportInModules</span>(<span class="params">exportName</span>) &#123;</span><br><span class="line">    <span class="title class_">Process</span>.<span class="title function_">enumerateModules</span>(&#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="title function_">enumerateExports</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">exports</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">exports</span>[i].<span class="property">name</span>.<span class="title function_">indexOf</span>(exportName) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found &quot;</span> + exportName + <span class="string">&quot; in module: &quot;</span> + <span class="variable language_">module</span>.<span class="property">name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">findExportInModules</span>(<span class="string">&quot;getSignFromJni&quot;</span>);</span><br></pre></td></tr></table></figure><p>不过这里既然已有明确方向，所以先选择解包查看 libjdbitmapkit.so导出表<br>成功搜到静态注册的 getSignFromJni<br><img src="/img/2025-2-14/12.png"></p><p>进入native层前先提一嘴<br>后续分析过程中肯定涉及 BitmapkitUtils.getSignFromJni的多次调用，然而每次变化的参数会对分析产生干扰<br>因此这里选择 固定传参+主动调用，触发每次的 BitmapkitUtils.getSignFromJni</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ProactiveCall</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">BitmapkitUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.jingdong.common.utils.BitmapkitUtils&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ActivityThread</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> currentApplication = <span class="title class_">ActivityThread</span>.<span class="title function_">currentApplication</span>();</span><br><span class="line">        <span class="keyword">var</span> context = currentApplication.<span class="title function_">getApplicationContext</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> str1 = <span class="string">&quot;queryTemplates&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str2 = <span class="string">&#x27;&#123;&quot;appType&quot;:&quot;jdapp&quot;,&quot;enableZip&quot;:&quot;1&quot;,&quot;systemCode&quot;:&quot;myjd&quot;&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> str3 = <span class="string">&quot;e1e578ba35dfebbc&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str4 = <span class="string">&quot;android&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str5 = <span class="string">&quot;11.6.4&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="title class_">BitmapkitUtils</span>.<span class="title function_">getSignFromJni</span>(context, str1, str2, str3, str4, str5);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Success! Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="native层分析"><a href="#native层分析" class="headerlink" title="native层分析"></a>native层分析</h1><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>跟进到 sub_127E4<br><img src="/img/2025-2-14/13.png"></p><p>其中逻辑大致可分为以下几部分</p><ol><li><p>先使用 StringBuffer对传入的 functionId, body, uuid等一系列参数进行拼接<br><img src="/img/2025-2-14/14.png"></p></li><li><p>再基于 gettimeofday返回的时间 生成时间戳，作为st字段值<br><img src="/img/2025-2-14/15.png"></p></li><li><p>再基于 lrand48生成的两个随机数（0&#x2F;1&#x2F;2），与”1”拼接，作为sv字段值<br><img src="/img/2025-2-14/19.png"></p></li><li><p>然后将上述随机数，与通过 getBytes转换成字节数组的 StringBuffer，一同传入encrypt1<br><img src="/img/2025-2-14/16.png"></p></li><li><p>动态分配内存，成功则进入if分支<br>此时将 encrypt1结果依次传入 encrypt2, encrypt3进行加密，转换成Hex字符串，作为sign字段值<br><img src="/img/2025-2-14/17.png"></p></li><li><p>最后依次将 st, sign, sv字段值拼入 StringBuffer，而后返回字符串至java层<br><img src="/img/2025-2-14/18.png"></p></li><li><p>内存分配失败，则进入else分支<br>此时 sign, sv字段值会被统一固定，而后返回字符串至java层<br><img src="/img/2025-2-14/20.png"></p></li></ol><h2 id="加密函数-I"><a href="#加密函数-I" class="headerlink" title="加密函数 I"></a>加密函数 I</h2><p>回过头来看前面提到的 encrypt1，传入了 初期StringBuffer，以及组成sv字段的三个int<br><img src="/img/2025-2-14/21.png"></p><p>其中先基于随机数二，生成乱序数组（0&#x2F;1&#x2F;2）<br>再基于随机数一，从该数组中选取 后续要进入的加密case（0&#x2F;1&#x2F;2），以及要与字节数组一同传入加密的 32字节key<br><img src="/img/2025-2-14/24.png"></p><p>开始各case分析前先提一嘴，因为其选取是随机的，即便一开始固定了java层传参，后续hook打印信息时 还是会存在拦截不到的情况<br>因此这里在前面 主动调用脚本的基础上添加功能<br>仅在 BitmapkitUtils.getSignFromJni执行期间，拦截 gettimeofday, lrand48，固定其返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isProactiveCallActive = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProactiveCall</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        isProactiveCallActive = <span class="literal">true</span>;  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">BitmapkitUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.jingdong.common.utils.BitmapkitUtils&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ActivityThread</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> currentApplication = <span class="title class_">ActivityThread</span>.<span class="title function_">currentApplication</span>();</span><br><span class="line">        <span class="keyword">var</span> context = currentApplication.<span class="title function_">getApplicationContext</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> str1 = <span class="string">&quot;queryTemplates&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str2 = <span class="string">&#x27;&#123;&quot;appType&quot;:&quot;jdapp&quot;,&quot;enableZip&quot;:&quot;1&quot;,&quot;systemCode&quot;:&quot;myjd&quot;&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> str3 = <span class="string">&quot;e1e578ba35dfebbc&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str4 = <span class="string">&quot;android&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str5 = <span class="string">&quot;11.6.4&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="title class_">BitmapkitUtils</span>.<span class="title function_">getSignFromJni</span>(context, str1, str2, str3, str4, str5);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Success! Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            isProactiveCallActive = <span class="literal">false</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SetReturn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> gettimeofday = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;gettimeofday&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(gettimeofday, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">timeval</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isProactiveCallActive) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">timeval</span>.<span class="title function_">writeU32</span>(<span class="number">1672531200</span>); </span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">timeval</span>.<span class="title function_">add</span>(<span class="number">4</span>).<span class="title function_">writeU32</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lrand48 = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;lrand48&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(lrand48, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isProactiveCallActive) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SetReturn</span>();</span><br></pre></td></tr></table></figure><h3 id="case-2"><a href="#case-2" class="headerlink" title="case 2"></a>case 2</h3><p>这套算法相比 case0, 1的要简单很多<br><img src="/img/2025-2-14/26.png"></p><p>以下为还原后的算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt1_2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v15 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> v16 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> v17 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> v18 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> v21[<span class="number">16</span>] = &#123;</span><br><span class="line">        <span class="number">0x37</span>, <span class="number">0x92</span>, <span class="number">0x44</span>, <span class="number">0x68</span>, <span class="number">0xA5</span>, <span class="number">0x3D</span>, <span class="number">0xCC</span>, <span class="number">0x7F</span>, </span><br><span class="line">        <span class="number">0xBB</span>, <span class="number">0x0F</span>, <span class="number">0xD9</span>, <span class="number">0x88</span>, <span class="number">0xEE</span>, <span class="number">0x9A</span>, <span class="number">0xE9</span>, <span class="number">0x5A</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* key = <span class="string">&quot;80306f4370b39fd5630ad0529f77adb6&quot;</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        v16 = v15 &amp; <span class="number">0xF</span>;</span><br><span class="line">        v17 = v15 &amp; <span class="number">7</span>;</span><br><span class="line">        v15 = v15 + <span class="number">1</span>;</span><br><span class="line">        v18 = v21[v16];</span><br><span class="line">        v18 = v18 ^ ((v18 ^ *data ^ key[v17]) + v18);</span><br><span class="line">        *data = v18 ^ key[v17];</span><br><span class="line">        data++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (v15 != length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="case-0-1"><a href="#case-0-1" class="headerlink" title="case 0, 1"></a>case 0, 1</h3><p>这两套算法仅在核心加密函数 sub_10EA4的常数传参上有差别<br><img src="/img/2025-2-14/25.png"></p><h4 id="整除字节处理"><a href="#整除字节处理" class="headerlink" title="整除字节处理"></a>整除字节处理</h4><p>目光转至 sub_10EA4，数据被分为8字节一组传入<br>从Graph view可以看出是一个非常冗长的函数，其中逻辑大致分为三部分<br><img src="/img/2025-2-14/27.png"></p><ol><li>使用 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80，分别对传入的各字节的每个位 进行提取、存储<br><img src="/img/2025-2-14/28.png"></li><li>每次循环，使用 0x01-0x80 对传入key的每个位 进行提取，并基于其与0比较的结果，进入16个不同分支<br>每个分支中，都在对前面存储的位数据 进行交换打乱<br><img src="/img/2025-2-14/29.png"></li><li>最后还是使用 0x01-0x80，对打乱的位数据 进行重组复原<br><img src="/img/2025-2-14/30.png"></li></ol><p>尝试过对着伪代码 手动还原出上述算法，然而成品实在是过于丑陋<br>又臭又长，根本称不上真正意义上的”还原”，就不放出来了</p><p>这里参考<a href="https://bbs.kanxue.com/thread-266377.htm#msg_header_h3_7">这位大佬</a>的思路<br>如果单纯把 sub_10EA4视作黑盒的话，其无非只是将传入的64位数据 进行重排序<br>也就是说，每一位数 在输入至输出间 都存在明确的映射关系 </p><p>因此我们可以利用差分攻击的思想，依次将 2^0, 2^1, 2^2… 2^63 传入sub_10EA4<br>然后捕获每次输出中”1”所在的位，即可得到各个位 前后映射关系了</p><p>这里选择hook sub_10EA4，依次将传入的8字节数据改成 2^0, 2^i… 2^63<br>然后每次将输出的log2(x) 存入数组的索引 i 处</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MODULE_NAME</span> = <span class="string">&#x27;libjdbitmapkit.so&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TARGET_OFFSET</span> = <span class="number">0x10EA4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAPPING_TABLE</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMapping</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> moduleBase = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="variable constant_">MODULE_NAME</span>);</span><br><span class="line">    <span class="keyword">const</span> targetAddress = moduleBase.<span class="title function_">add</span>(<span class="variable constant_">TARGET_OFFSET</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentPower = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(targetAddress, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentPower &lt; <span class="number">64</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> dataPtr = args[<span class="number">3</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">const</span> value = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, currentPower);</span><br><span class="line">                <span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line">                view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, <span class="title class_">BigInt</span>(value), <span class="literal">true</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="title class_">Memory</span>.<span class="title function_">writeByteArray</span>(dataPtr, <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer));</span><br><span class="line">                </span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">currentPower</span> = currentPower;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">dataPtr</span> = dataPtr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentPower &lt; <span class="number">64</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> resultBytes = <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(<span class="variable language_">this</span>.<span class="property">dataPtr</span>, <span class="number">8</span>);</span><br><span class="line">                <span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(resultBytes.<span class="property">buffer</span>);</span><br><span class="line">                <span class="keyword">const</span> resultValue = <span class="title class_">Number</span>(view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>));</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">const</span> resultPower = <span class="title class_">Math</span>.<span class="title function_">log2</span>(resultValue);</span><br><span class="line">                <span class="variable constant_">MAPPING_TABLE</span>[<span class="variable language_">this</span>.<span class="property">currentPower</span>] = resultPower;</span><br><span class="line"></span><br><span class="line">                currentPower++;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (currentPower === <span class="number">64</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mapping table for case 0:&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable constant_">MAPPING_TABLE</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getMapping</span>();</span><br></pre></td></tr></table></figure><p>由此得到映射表<br><img src="/img/2025-2-14/33.png"></p><p>基于此映射表，就可以十分优雅地写出 真正意义上的”还原”算法了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sub_10EA4</span><span class="params">(<span class="type">uint8_t</span>* data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> std::array&lt;<span class="type">uint8_t</span>, 64&gt; mapping_table = &#123;</span><br><span class="line">         <span class="number">0</span>,  <span class="number">4</span>, <span class="number">61</span>, <span class="number">15</span>, <span class="number">56</span>, <span class="number">40</span>,  <span class="number">6</span>, <span class="number">59</span>,</span><br><span class="line">        <span class="number">62</span>, <span class="number">58</span>, <span class="number">17</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">8</span>, <span class="number">32</span>, <span class="number">60</span>,</span><br><span class="line">        <span class="number">13</span>, <span class="number">45</span>, <span class="number">34</span>, <span class="number">14</span>, <span class="number">36</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">39</span>,</span><br><span class="line">        <span class="number">23</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">20</span>,  <span class="number">1</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">55</span>,</span><br><span class="line">        <span class="number">35</span>, <span class="number">24</span>, <span class="number">57</span>, <span class="number">19</span>, <span class="number">53</span>, <span class="number">37</span>, <span class="number">38</span>,  <span class="number">5</span>,</span><br><span class="line">        <span class="number">30</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">18</span>, <span class="number">47</span>, <span class="number">27</span>,  <span class="number">9</span>, <span class="number">44</span>,</span><br><span class="line">        <span class="number">51</span>,  <span class="number">7</span>, <span class="number">49</span>, <span class="number">63</span>, <span class="number">28</span>, <span class="number">43</span>, <span class="number">54</span>, <span class="number">52</span>,</span><br><span class="line">        <span class="number">31</span>, <span class="number">10</span>, <span class="number">29</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">16</span>, <span class="number">50</span>, <span class="number">48</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> input_bits[<span class="number">64</span>];</span><br><span class="line">    <span class="type">uint8_t</span> output_bits[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j) &#123;</span><br><span class="line">            input_bits[i * <span class="number">8</span> + j] = (data[i] &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; ++i) &#123;</span><br><span class="line">        output_bits[mapping_table[i]] = input_bits[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        data[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j) &#123;</span><br><span class="line">            data[i] |= (output_bits[i * <span class="number">8</span> + j] &lt;&lt; j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="末尾字节处理"><a href="#末尾字节处理" class="headerlink" title="末尾字节处理"></a>末尾字节处理</h4><p>但事情远没有这么简单，sub_10EA4 只是对8字节整除部分进行加密<br>对于末尾不足8字节的数据，还得进行额外处理</p><ol><li>sub_10E80中，sub_10DD0用于创建对象，其首8字节为指向 off_16E38处虚函数表的指针<br><img src="/img/2025-2-14/31.png"></li><li>sub_10E80后，通过指针调用虚表首个函数 sub_10D70，即来到 末尾数据的加密逻辑处<br>其中基于剩余的字节个数（1-7），进入7个不同分支<br><img src="/img/2025-2-14/32.png"><br>每个分支对应一套独立算法，人麻了……<br><img src="/img/2025-2-14/34.png"></li></ol><p>这里就挑理论上最简单的 sub_4B7C（加密剩余1个字节）上手了<br>整体逻辑 和前面处理整除字节相似，大致分为三部分<br>先是位提取、存储逻辑；再是基于key，但貌似不是单纯的位交换打乱；最后重组复原<br><img src="/img/2025-2-14/35.png"></p><p>先试着沿用前面 差分攻击的思想，依次将 2^0, 2^1, 2^2… 2^7 传入sub_4B7C，然而对比输入和输出的二进制特征<br>然而却得到如下映射，一下看不出所以然</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00000001 (01) -&gt; 01001001 (49)</span><br><span class="line">00000010 (02) -&gt; 00001000 (08)</span><br><span class="line">00000100 (04) -&gt; 01011000 (58)</span><br><span class="line">00001000 (08) -&gt; 01101000 (68)</span><br><span class="line">00010000 (10) -&gt; 11001000 (c8)</span><br><span class="line">00100000 (20) -&gt; 01001100 (4c)</span><br><span class="line">01000000 (40) -&gt; 01000000 (40)</span><br><span class="line">10000000 (80) -&gt; 01001010 (4a)</span><br></pre></td></tr></table></figure><p>由此控制变量，把每次输出与 传入0时的输出比对<br>豁然开朗，原来 位在映射期间还进行了 条件性取反操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">00000000 (00) -&gt; 01001000 (48)</span><br><span class="line">00000001 (01) -&gt; 01001001 (49)</span><br><span class="line">----------------------------------------</span><br><span class="line">00000000 (00) -&gt; 01001000 (48)</span><br><span class="line">00000010 (02) -&gt; 00001000 (08)</span><br><span class="line">----------------------------------------</span><br><span class="line">00000000 (00) -&gt; 01001000 (48)</span><br><span class="line">00000100 (04) -&gt; 01011000 (58)</span><br><span class="line">----------------------------------------</span><br><span class="line">00000000 (00) -&gt; 01001000 (48)</span><br><span class="line">00001000 (08) -&gt; 01101000 (68)</span><br><span class="line">----------------------------------------</span><br><span class="line">00000000 (00) -&gt; 01001000 (48)</span><br><span class="line">00010000 (10) -&gt; 11001000 (c8)</span><br><span class="line">----------------------------------------</span><br><span class="line">00000000 (00) -&gt; 01001000 (48)</span><br><span class="line">00100000 (20) -&gt; 01001100 (4c)</span><br><span class="line">----------------------------------------</span><br><span class="line">00000000 (00) -&gt; 01001000 (48)</span><br><span class="line">01000000 (40) -&gt; 01000000 (40)</span><br><span class="line">----------------------------------------</span><br><span class="line">00000000 (00) -&gt; 01001000 (48)</span><br><span class="line">10000000 (80) -&gt; 01001010 (4a)</span><br></pre></td></tr></table></figure><p>基于此映射规则，再次优雅地写出”还原”算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sub_4B7C</span><span class="params">(<span class="type">uint8_t</span>* data)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> array&lt;array&lt;<span class="type">uint8_t</span>, 3&gt;, 8&gt; transformation_table = &#123;&#123;</span><br><span class="line">        &#123;<span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,  </span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, </span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, </span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, </span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, </span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, </span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, </span><br><span class="line">        &#123;<span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">uint8_t</span> input_bits[<span class="number">8</span>];</span><br><span class="line">    <span class="type">uint8_t</span> output_bits[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        input_bits[<span class="number">7</span> - i] = (*data &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> input_bit = <span class="number">0</span>; input_bit &lt; <span class="number">8</span>; ++input_bit) &#123;</span><br><span class="line">        <span class="type">uint8_t</span> output_bit = transformation_table[input_bit][<span class="number">0</span>];</span><br><span class="line">        <span class="type">uint8_t</span> zero_value = transformation_table[input_bit][<span class="number">1</span>];</span><br><span class="line">        <span class="type">uint8_t</span> one_value = transformation_table[input_bit][<span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        output_bits[output_bit] = input_bits[input_bit] ? one_value : zero_value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        *data = (*data &lt;&lt; <span class="number">1</span>) | output_bits[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于剩下的6个分支，大概率也是按照上述套路<br>不过奈何本人水平和精力有限，这里就不继续展开了</p><h2 id="加密函数-II"><a href="#加密函数-II" class="headerlink" title="加密函数 II"></a>加密函数 II</h2><p>前面的 encrypt2，非常明显的Base64特征，且无魔改<br><img src="/img/2025-2-14/22.png"></p><h2 id="加密函数-III"><a href="#加密函数-III" class="headerlink" title="加密函数 III"></a>加密函数 III</h2><p>至于 encrypt3，无论是传参还是返回值特征，其实种种迹象都已指向MD5<br>跟进后看到熟悉的四个32位变量，这下确实是没得跑了<br><img src="/img/2025-2-14/23.png"><br>并且也无魔改，这点通过后续hook获取函数传参、返回值，并将后者与前者的常规MD5值 进行比对，即可得出</p><h1 id="模拟执行"><a href="#模拟执行" class="headerlink" title="模拟执行"></a>模拟执行</h1><p>这里算是个支线，尝试脱离frida，使用Unidbg完成上述的模拟调用</p><ol start="0"><li><p>初始模板代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdong.app.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.Unicorn2Factory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDTest</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DvmClass Module;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ApkPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\xxx\\jdapp_72334.apk&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LibraryName</span> <span class="operator">=</span> <span class="string">&quot;jdbitmapkit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;com.jingdong.common.utils.BitmapkitUtils&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">verbose</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JDTest</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for32Bit()</span><br><span class="line">                .addBackendFactory(<span class="keyword">new</span> <span class="title class_">Unicorn2Factory</span>(<span class="literal">true</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(ApkPath));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(verbose);</span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(LibraryName, <span class="literal">true</span>);</span><br><span class="line">        Module = vm.resolveClass(ClassName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSignFromJni</span><span class="params">()</span> &#123;</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;queryTemplates&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;appType\&quot;:\&quot;jdapp\&quot;,\&quot;enableZip\&quot;:\&quot;1\&quot;,\&quot;systemCode\&quot;:\&quot;myjd\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;e1e578ba35dfebbc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;android&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot;11.6.4&quot;</span>;</span><br><span class="line"></span><br><span class="line">        DvmObject&lt;?&gt; ret = Module.callStaticJniMethodObject(emulator,</span><br><span class="line">                <span class="string">&quot;getSignFromJni(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>,</span><br><span class="line">                vm.addLocalObject(context), str1, str2, str3, str4, str5);</span><br><span class="line"></span><br><span class="line">        System.out.println(ret.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JDTest</span> <span class="variable">jdtest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDTest</span>();</span><br><span class="line">        jdtest.getSignFromJni();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补 StringBuffer.&lt;init&gt; 构造函数<br><img src="/img/2025-2-14/36.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; newObjectV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/lang/StringBuffer-&gt;&lt;init&gt;()V&quot;</span>: &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/lang/StringBuffer&quot;</span>).newObject(stringBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.newObjectV(vm, dvmClass, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补 stringBuffer.append 实例方法<br><img src="/img/2025-2-14/38.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/lang/StringBuffer-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuffer;&quot;</span>: &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> (java.lang.StringBuffer) dvmObject.getValue();</span><br><span class="line">            stringBuffer.append(vaList.getObjectArg(<span class="number">0</span>).getValue());</span><br><span class="line">            <span class="type">DvmClass</span> <span class="variable">StringBuffer</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;java/lang/StringBuffer&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> StringBuffer.newObject(stringBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补 Integer.toString 实例方法<br><img src="/img/2025-2-14/39.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/lang/StringBuffer-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuffer;&quot;</span>: &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/lang/Integer-&gt;toString()Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> (Integer) dvmObject.getValue();</span><br><span class="line">           <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/lang/String&quot;</span>).newObject(value.toString());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补 stringBuffer.toString 实例方法<br><img src="/img/2025-2-14/40.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/lang/StringBuffer-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuffer;&quot;</span>: &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/lang/Integer-&gt;toString()Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/lang/StringBuffer-&gt;toString()Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">value</span> <span class="operator">=</span> (StringBuffer) dvmObject.getValue();</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/lang/String&quot;</span>).newObject(value.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>能成功输出sign了，补环境最不用补到天荒地老的一集<br><img src="/img/2025-2-14/37.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>入口方法：<br>com.jingdong.common.utils.BitmapkitUtils.getSignFromJni</li><li>libjdbitmapkit.so中 先后经过三个加密函数</li><li>第一个加密：<br>三套加密方案，随机选取。<br>前两套每次加密8字节，末尾字节有七套加密方案，基于剩余字节数选取。加密类型为位置换；<br>后一套使用简易的自定义加密。加密类型为流加密</li><li>后两个加密：<br>分别为标准 Base64, MD5</li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>so加载流程</title>
      <link href="/2025/01/31/2025-1-31%20so%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/01/31/2025-1-31%20so%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>最近在研究基于自实现linker的so加固，涉及到so的加载原理，即装载与链接过程，这需要从Android源码入手<br>然而经阅读发现，网上许多帖子较为古早，其与后来的Android版本 在细节实现上有较大出入<br>因此，在此记录基于 Android 9.0 的分析过程</p><p>因为整体调用链很长，这里列出其中的关键步骤————<br>4.1.1.1. find_libraries<br>5.1.1.1 soinfo_alloc<br>5.1.1.2.1 ElfReader::Read<br>5.1.1.3 for_each_dt_needed<br>5.2.1. ElfReader::Load<br>5.3 soinfo::prelink_image<br>5.4 soinfo::link_image<br>5.4.1 soinfo::relocate</p><p>还有几个步骤与本篇关联较小，但还是在此提几嘴————<br>1.1. System.loadLibrary<br>3.1.1.1. android_dlopen_ext<br>3.1.2. JNI_OnLoad<br>4.1.2. soinfo::call_constructors</p><h1 id="Java-Framework"><a href="#Java-Framework" class="headerlink" title="Java Framework"></a>Java Framework</h1><h2 id="System-loadLibrary"><a href="#System-loadLibrary" class="headerlink" title="System.loadLibrary"></a>System.loadLibrary</h2><p>java层中加载so 直接调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/libcore/ojluni/src/main/java/java/lang/Runtime.java#976</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadLibrary</span><span class="params">(String libname)</span> &#123;</span><br><span class="line">        Runtime.getRuntime().loadLibrary0(VMStack.getCallingClassLoader(), libname);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Runtime-loadLibrary0"><a href="#Runtime-loadLibrary0" class="headerlink" title="Runtime.loadLibrary0"></a>Runtime.loadLibrary0</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/libcore/ojluni/src/main/java/java/lang/Runtime.java#998</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">loadLibrary0</span><span class="params">(ClassLoader loader, String libname)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> System.mapLibraryName(libraryName);</span><br><span class="line">        List&lt;String&gt; candidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">lastError</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (String directory : getLibPaths()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">candidate</span> <span class="operator">=</span> directory + filename;</span><br><span class="line">            candidates.add(candidate);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (IoUtils.canOpenReadOnly(candidate)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">error</span> <span class="operator">=</span> nativeLoad(candidate, loader);</span><br><span class="line">                <span class="keyword">if</span> (error == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>; </span><br><span class="line">                &#125;</span><br><span class="line">                lastError = error;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">nativeLoad</span><span class="params">(String filename, ClassLoader loader)</span>;</span><br></pre></td></tr></table></figure><h1 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h1><p>承接上方 Runtime.loadLibrary0</p><h2 id="Runtime-nativeLoad"><a href="#Runtime-nativeLoad" class="headerlink" title="Runtime_nativeLoad"></a>Runtime_nativeLoad</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/libcore/ojluni/src/main/native/Runtime.c#77</span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Runtime_nativeLoad</span><span class="params">(JNIEnv* env, jclass ignored, jstring javaFilename,</span></span></span><br><span class="line"><span class="params"><span class="function">                   jobject javaLoader)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JVM_NativeLoad</span>(env, javaFilename, javaLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">NATIVE_METHOD</span>(Runtime, nativeLoad,</span><br><span class="line">                <span class="string">&quot;(Ljava/lang/String;Ljava/lang/ClassLoader;)&quot;</span></span><br><span class="line">                    <span class="string">&quot;Ljava/lang/String;&quot;</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JVM-nativeLoad"><a href="#JVM-nativeLoad" class="headerlink" title="JVM_nativeLoad"></a>JVM_nativeLoad</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/openjdkjvm/OpenjdkJvm.cc#323</span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring <span class="title">JVM_NativeLoad</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 jstring javaFilename,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 jobject javaLoader)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  std::string error_msg;</span><br><span class="line">  &#123;</span><br><span class="line">    art::JavaVMExt* vm = art::Runtime::<span class="built_in">Current</span>()-&gt;<span class="built_in">GetJavaVM</span>();</span><br><span class="line">    <span class="type">bool</span> success = vm-&gt;<span class="built_in">LoadNativeLibrary</span>(env,</span><br><span class="line">                                         filename.<span class="built_in">c_str</span>(),</span><br><span class="line">                                         javaLoader,</span><br><span class="line">                                         &amp;error_msg);</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Framework-I"><a href="#C-Framework-I" class="headerlink" title="C++ Framework I"></a>C++ Framework I</h1><p>承接上方 JVM_NativeLoad</p><h2 id="JavaVMExt-LoadNativeLibrary"><a href="#JavaVMExt-LoadNativeLibrary" class="headerlink" title="JavaVMExt::LoadNativeLibrary"></a>JavaVMExt::LoadNativeLibrary</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/art/runtime/java_vm_ext.cc#854</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">JavaVMExt::LoadNativeLibrary</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="type">const</span> std::string&amp; path,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  jobject class_loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  std::string* error_msg)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  Locks::mutator_lock_-&gt;<span class="built_in">AssertNotHeld</span>(self);</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* path_str = path.<span class="built_in">empty</span>() ? <span class="literal">nullptr</span> : path.<span class="built_in">c_str</span>();</span><br><span class="line">  <span class="type">bool</span> needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">  <span class="type">void</span>* handle = android::<span class="built_in">OpenNativeLibrary</span>(env,</span><br><span class="line">                                            runtime_-&gt;<span class="built_in">GetTargetSdkVersion</span>(),</span><br><span class="line">                                            path_str,</span><br><span class="line">                                            class_loader,</span><br><span class="line">                                            library_path.<span class="built_in">get</span>(),</span><br><span class="line">                                            &amp;needs_native_bridge,</span><br><span class="line">                                            error_msg);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[Call to dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;, RTLD_NOW) returned &quot;</span> &lt;&lt; handle &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span>* sym = library-&gt;<span class="built_in">FindSymbol</span>(<span class="string">&quot;JNI_OnLoad&quot;</span>, <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="keyword">if</span> (sym == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[No JNI_OnLoad found in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">    was_successful = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ScopedLocalRef&lt;jobject&gt; <span class="built_in">old_class_loader</span>(env, env-&gt;<span class="built_in">NewLocalRef</span>(self-&gt;<span class="built_in">GetClassLoaderOverride</span>()));</span><br><span class="line">    self-&gt;<span class="built_in">SetClassLoaderOverride</span>(class_loader);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[Calling JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="android-OpenNativeLibrary"><a href="#android-OpenNativeLibrary" class="headerlink" title="android::OpenNativeLibrary"></a>android::OpenNativeLibrary</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/system/core/libnativeloader/native_loader.cpp#637</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">OpenNativeLibrary</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">int32_t</span> target_sdk_version,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> <span class="type">char</span>* path,</span></span></span><br><span class="line"><span class="params"><span class="function">                        jobject class_loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                        jstring library_path,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">bool</span>* needs_native_bridge,</span></span></span><br><span class="line"><span class="params"><span class="function">                        std::string* error_msg)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__ANDROID__)</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ns.<span class="built_in">is_android_namespace</span>()) &#123;</span><br><span class="line">    android_dlextinfo extinfo;</span><br><span class="line">    extinfo.flags = ANDROID_DLEXT_USE_NAMESPACE;</span><br><span class="line">    extinfo.library_namespace = ns.<span class="built_in">get_android_ns</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">android_dlopen_ext</span>(path, RTLD_NOW, &amp;extinfo);</span><br><span class="line">    <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      *error_msg = <span class="built_in">dlerror</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> handle;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  ...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="android-dlopen-ext"><a href="#android-dlopen-ext" class="headerlink" title="android_dlopen_ext"></a>android_dlopen_ext</h4><p>对so加载过程进行监控或拦截时，常作为hook的目标函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/libdl/libdl.cpp#161</span></span><br><span class="line"></span><br><span class="line">__attribute__((__weak__))</span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">android_dlopen_ext</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">int</span> flag, <span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">void</span>* caller_addr = __builtin_return_address(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> __loader_android_dlopen_ext(filename, flag, extinfo, caller_addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/dlfcn.cpp#145</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* __loader_android_dlopen_ext(<span class="type">const</span> <span class="type">char</span>* filename,</span><br><span class="line">                           <span class="type">int</span> flags,</span><br><span class="line">                           <span class="type">const</span> android_dlextinfo* extinfo,</span><br><span class="line">                           <span class="type">const</span> <span class="type">void</span>* caller_addr) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">dlopen_ext</span>(filename, flags, extinfo, caller_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="dlopen-ext"><a href="#dlopen-ext" class="headerlink" title="dlopen_ext"></a>dlopen_ext</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/dlfcn.cpp#131</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">dlopen_ext</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">int</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> <span class="type">void</span>* caller_addr)</span> </span>&#123;</span><br><span class="line">  <span class="function">ScopedPthreadMutexLocker <span class="title">locker</span><span class="params">(&amp;g_dl_mutex)</span></span>;</span><br><span class="line">  g_linker_logger.<span class="built_in">ResetState</span>();</span><br><span class="line">  <span class="type">void</span>* result = <span class="built_in">do_dlopen</span>(filename, flags, extinfo, caller_addr);</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    __bionic_format_dlerror(<span class="string">&quot;dlopen failed&quot;</span>, <span class="built_in">linker_get_error_buffer</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JNI-OnLoad"><a href="#JNI-OnLoad" class="headerlink" title="JNI_OnLoad"></a>JNI_OnLoad</h3><p>一直以来都不清楚 init_func、init_array、JNI_OnLoad三者的执行先后顺序，这下搬出源码后弄明白了<br>下方提及的 init_func、init_array，在 JNI_OnLoad之前执行</p><h1 id="C-Framework-II"><a href="#C-Framework-II" class="headerlink" title="C++ Framework II"></a>C++ Framework II</h1><p>承接上方 dlopen_ext</p><h2 id="do-dlopen"><a href="#do-dlopen" class="headerlink" title="do_dlopen"></a>do_dlopen</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#2049</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">do_dlopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> <span class="type">void</span>* caller_addr)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  ProtectedDataGuard guard;</span><br><span class="line">  soinfo* si = <span class="built_in">find_library</span>(ns, translated_name, flags, extinfo, caller);</span><br><span class="line">  loading_trace.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (si != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="type">void</span>* handle = si-&gt;<span class="built_in">to_handle</span>();</span><br><span class="line">    <span class="built_in">LD_LOG</span>(kLogDlopen,</span><br><span class="line">           <span class="string">&quot;... dlopen calling constructors: realpath=\&quot;%s\&quot;, soname=\&quot;%s\&quot;, handle=%p&quot;</span>,</span><br><span class="line">           si-&gt;<span class="built_in">get_realpath</span>(), si-&gt;<span class="built_in">get_soname</span>(), handle);</span><br><span class="line">    si-&gt;<span class="built_in">call_constructors</span>();</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="find-library"><a href="#find-library" class="headerlink" title="find_library"></a>find_library</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#1759</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> soinfo* <span class="title">find_library</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="params"><span class="function">                            soinfo* needed_by)</span> </span>&#123;</span><br><span class="line">  soinfo* si = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    si = <span class="built_in">solist_get_somain</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">find_libraries</span>(ns,</span><br><span class="line">                             needed_by,</span><br><span class="line">                             &amp;name,</span><br><span class="line">                             <span class="number">1</span>,</span><br><span class="line">                             &amp;si,</span><br><span class="line">                             <span class="literal">nullptr</span>,</span><br><span class="line">                             <span class="number">0</span>,</span><br><span class="line">                             rtld_flags,</span><br><span class="line">                             extinfo,</span><br><span class="line">                             <span class="literal">false</span> <span class="comment">/* add_as_children */</span>,</span><br><span class="line">                             <span class="literal">true</span> <span class="comment">/* search_linked_namespaces */</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (si != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="built_in">soinfo_unload</span>(si);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  si-&gt;<span class="built_in">increment_ref_count</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> si;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="find-libraries"><a href="#find-libraries" class="headerlink" title="find_libraries"></a>find_libraries</h4><p>so加载流程中的关键函数，装载、链接操作都直接在其中进行<br>通过遍历 load_tasks 列表，基于 soinfo 结构体，对目标so及其所有依赖库进行加载<br>其中，装载由 find_library_internal, task-&gt;load 负责；链接由 si-&gt;prelink_image, si-&gt;link_image 负责</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#1508</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find_libraries</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="params"><span class="function">                    soinfo* start_with,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> library_names[],</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">size_t</span> library_names_count,</span></span></span><br><span class="line"><span class="params"><span class="function">                    soinfo* soinfos[],</span></span></span><br><span class="line"><span class="params"><span class="function">                    std::vector&lt;soinfo*&gt;* ld_preloads,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">size_t</span> ld_preloads_count,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">bool</span> add_as_children,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">bool</span> search_linked_namespaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                    std::vector&lt;<span class="type">android_namespace_t</span>*&gt;* namespaces)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i&lt;load_tasks.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    LoadTask* task = load_tasks[i];</span><br><span class="line">    soinfo* needed_by = task-&gt;<span class="built_in">get_needed_by</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> is_dt_needed = needed_by != <span class="literal">nullptr</span> &amp;&amp; (needed_by != start_with || add_as_children);</span><br><span class="line">    task-&gt;<span class="built_in">set_extinfo</span>(is_dt_needed ? <span class="literal">nullptr</span> : extinfo);</span><br><span class="line">    task-&gt;<span class="built_in">set_dt_needed</span>(is_dt_needed);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">find_library_internal</span>(<span class="built_in">const_cast</span>&lt;<span class="type">android_namespace_t</span>*&gt;(task-&gt;<span class="built_in">get_start_from</span>()),</span><br><span class="line">                               task,</span><br><span class="line">                               &amp;zip_archive_cache,</span><br><span class="line">                               &amp;load_tasks,</span><br><span class="line">                               rtld_flags,</span><br><span class="line">                               search_linked_namespaces || is_dt_needed)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!task-&gt;<span class="built_in">load</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_tasks) &#123;</span><br><span class="line">    soinfo* si = task-&gt;<span class="built_in">get_soinfo</span>();</span><br><span class="line">    <span class="keyword">if</span> (!si-&gt;<span class="built_in">is_linked</span>() &amp;&amp; !si-&gt;<span class="built_in">prelink_image</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> root : local_group_roots) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">bool</span> linked = local_group.<span class="built_in">visit</span>([&amp;](soinfo* si) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!si-&gt;<span class="built_in">is_linked</span>() &amp;&amp; si-&gt;<span class="built_in">get_primary_namespace</span>() == local_group_ns) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!si-&gt;<span class="built_in">link_image</span>(global_group, local_group, extinfo) ||</span><br><span class="line">            !<span class="built_in">get_cfi_shadow</span>()-&gt;<span class="built_in">AfterLoad</span>(si, <span class="built_in">solist_get_head</span>())) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="soinfo-call-constructors"><a href="#soinfo-call-constructors" class="headerlink" title="soinfo::call_constructors"></a>soinfo::call_constructors</h3><p>上方提及的 JNI_OnLoad，在 init_func、init_array之后执行；<br>而 init_func先于 init_array执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_soinfo.cpp#388</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">soinfo::call_constructors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">call_function</span>(<span class="string">&quot;DT_INIT&quot;</span>, init_func_, <span class="built_in">get_realpath</span>());</span><br><span class="line">  <span class="built_in">call_array</span>(<span class="string">&quot;DT_INIT_ARRAY&quot;</span>, init_array_, init_array_count_, <span class="literal">false</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">is_linker</span>()) &#123;</span><br><span class="line">    <span class="built_in">bionic_trace_end</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Framework-III"><a href="#C-Framework-III" class="headerlink" title="C++ Framework III"></a>C++ Framework III</h1><p>承接上方 find_libraries </p><h2 id="find-library-internal"><a href="#find-library-internal" class="headerlink" title="find_library_internal"></a>find_library_internal</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#1442</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">find_library_internal</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  LoadTask* task,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  ZipArchiveCache* zip_archive_cache,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  LoadTaskList* load_tasks,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="type">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="type">bool</span> search_linked_namespaces)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">load_library</span>(ns, task, zip_archive_cache, load_tasks, rtld_flags, search_linked_namespaces)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (search_linked_namespaces) &#123;</span><br><span class="line">    DlErrorRestorer dlerror_restorer;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; linked_namespace : ns-&gt;<span class="built_in">linked_namespaces</span>()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">find_library_in_linked_namespace</span>(linked_namespace,</span><br><span class="line">                                           task)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (task-&gt;<span class="built_in">get_soinfo</span>() == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">load_library</span>(linked_namespace.<span class="built_in">linked_namespace</span>(), task, zip_archive_cache, load_tasks, rtld_flags, <span class="literal">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="load-library"><a href="#load-library" class="headerlink" title="load_library"></a>load_library</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#1322</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">load_library</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="params"><span class="function">                         LoadTask* task,</span></span></span><br><span class="line"><span class="params"><span class="function">                         ZipArchiveCache* zip_archive_cache,</span></span></span><br><span class="line"><span class="params"><span class="function">                         LoadTaskList* load_tasks,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">bool</span> search_linked_namespaces)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">load_library</span>(ns, task, load_tasks, rtld_flags, realpath, search_linked_namespaces);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#1188</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">load_library</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="params"><span class="function">                         LoadTask* task,</span></span></span><br><span class="line"><span class="params"><span class="function">                         LoadTaskList* load_tasks,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">const</span> std::string&amp; realpath,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">bool</span> search_linked_namespaces)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  soinfo* si = <span class="built_in">soinfo_alloc</span>(ns, realpath.<span class="built_in">c_str</span>(), &amp;file_stat, file_offset, rtld_flags);</span><br><span class="line">  <span class="keyword">if</span> (si == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  task-&gt;<span class="built_in">set_soinfo</span>(si);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!task-&gt;<span class="built_in">read</span>(realpath.<span class="built_in">c_str</span>(), file_stat.st_size)) &#123;</span><br><span class="line">    <span class="built_in">soinfo_free</span>(si);</span><br><span class="line">    task-&gt;<span class="built_in">set_soinfo</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  for_each_dt_needed(task-&gt;<span class="built_in">get_elf_reader</span>(), [&amp;](<span class="type">const</span> <span class="type">char</span>* name) &#123;</span><br><span class="line">    load_tasks-&gt;<span class="built_in">push_back</span>(LoadTask::<span class="built_in">create</span>(name, si, ns, task-&gt;<span class="built_in">get_readers_map</span>()));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="soinfo-alloc"><a href="#soinfo-alloc" class="headerlink" title="soinfo_alloc"></a>soinfo_alloc</h4><p>负责 soinfo 结构体的初始化<br>将其添加到 solist 全局链表，并生成唯一的句柄</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#296</span></span><br><span class="line"></span><br><span class="line"><span class="function">soinfo* <span class="title">soinfo_alloc</span><span class="params">(<span class="type">android_namespace_t</span>* ns, <span class="type">const</span> <span class="type">char</span>* name,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="keyword">struct</span> stat* file_stat, <span class="type">off64_t</span> file_offset,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">uint32_t</span> rtld_flags)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strlen</span>(name) &gt;= PATH_MAX) &#123;</span><br><span class="line">    <span class="built_in">async_safe_fatal</span>(<span class="string">&quot;library name \&quot;%s\&quot; too long&quot;</span>, name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">TRACE</span>(<span class="string">&quot;name %s: allocating soinfo for ns=%p&quot;</span>, name, ns);</span><br><span class="line"></span><br><span class="line">  soinfo* si = <span class="built_in">new</span> (g_soinfo_allocator.<span class="built_in">alloc</span>()) <span class="built_in">soinfo</span>(ns, name, file_stat,</span><br><span class="line">                                                       file_offset, rtld_flags);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">solist_add_soinfo</span>(si);</span><br><span class="line"></span><br><span class="line">  si-&gt;<span class="built_in">generate_handle</span>();</span><br><span class="line">  ns-&gt;<span class="built_in">add_soinfo</span>(si);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">TRACE</span>(<span class="string">&quot;name %s: allocated soinfo @ %p&quot;</span>, name, si);</span><br><span class="line">  <span class="keyword">return</span> si;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LoadTask-read"><a href="#LoadTask-read" class="headerlink" title="LoadTask.read"></a>LoadTask.read</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#559</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoadTask</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">read</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* realpath, <span class="type">off64_t</span> file_size)</span> </span>&#123;</span><br><span class="line">    ElfReader&amp; elf_reader = <span class="built_in">get_elf_reader</span>();</span><br><span class="line">    <span class="keyword">return</span> elf_reader.<span class="built_in">Read</span>(realpath, fd_, file_offset_, file_size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="ElfReader-Read"><a href="#ElfReader-Read" class="headerlink" title="ElfReader::Read"></a>ElfReader::Read</h5><p>负责装载前的 读取校验及初步映射，共分为五个步骤</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#149</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::Read</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> fd, <span class="type">off64_t</span> file_offset, <span class="type">off64_t</span> file_size)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (did_read_) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  name_ = name;</span><br><span class="line">  fd_ = fd;</span><br><span class="line">  file_offset_ = file_offset;</span><br><span class="line">  file_size_ = file_size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">ReadElfHeader</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">VerifyElfHeader</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">ReadProgramHeaders</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">ReadSectionHeaders</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">ReadDynamicSection</span>()) &#123;</span><br><span class="line">    did_read_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> did_read_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>ElfReader::ReadElfHeader<br>使用 pread64 系统调用读取 ELF 头</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#190</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::ReadElfHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">ssize_t</span> rc = <span class="built_in">TEMP_FAILURE_RETRY</span>(<span class="built_in">pread64</span>(fd_, &amp;header_, <span class="built_in">sizeof</span>(header_), file_offset_));</span><br><span class="line">  <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;can&#x27;t read file \&quot;%s\&quot;: %s&quot;</span>, name_.<span class="built_in">c_str</span>(), <span class="built_in">strerror</span>(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (rc != <span class="built_in">sizeof</span>(header_)) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; is too small to be an ELF executable: only found %zd bytes&quot;</span>, name_.<span class="built_in">c_str</span>(),</span><br><span class="line">           <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(rc));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ElfReader::VerifyElfHeader<br>验证 ELF 头的有效性———<br>魔数是否为 \x7fELF，即 ELF 文件标识；<br>类型是否为共享对象（ET_DYN），即 .so 文件；<br>.shstrtab 节的索引是否有效…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#214</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::VerifyElfHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">memcmp</span>(header_.e_ident, ELFMAG, SELFMAG) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has bad ELF magic&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> elf_class = header_.e_ident[EI_CLASS];</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__LP64__)</span></span><br><span class="line">  <span class="keyword">if</span> (elf_class != ELFCLASS64) &#123;</span><br><span class="line">    <span class="keyword">if</span> (elf_class == ELFCLASS32) &#123;</span><br><span class="line">      <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; is 32-bit instead of 64-bit&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has unknown ELF class: %d&quot;</span>, name_.<span class="built_in">c_str</span>(), elf_class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="keyword">if</span> (elf_class != ELFCLASS32) &#123;</span><br><span class="line">    <span class="keyword">if</span> (elf_class == ELFCLASS64) &#123;</span><br><span class="line">      <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; is 64-bit instead of 32-bit&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has unknown ELF class: %d&quot;</span>, name_.<span class="built_in">c_str</span>(), elf_class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (header_.e_ident[EI_DATA] != ELFDATA2LSB) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; not little-endian: %d&quot;</span>, name_.<span class="built_in">c_str</span>(), header_.e_ident[EI_DATA]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (header_.e_type != ET_DYN) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has unexpected e_type: %d&quot;</span>, name_.<span class="built_in">c_str</span>(), header_.e_type);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (header_.e_version != EV_CURRENT) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has unexpected e_version: %d&quot;</span>, name_.<span class="built_in">c_str</span>(), header_.e_version);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (header_.e_machine != <span class="built_in">GetTargetElfMachine</span>()) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has unexpected e_machine: %d (%s)&quot;</span>, name_.<span class="built_in">c_str</span>(), header_.e_machine,</span><br><span class="line">           <span class="built_in">EM_to_string</span>(header_.e_machine));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (header_.e_shentsize != <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Shdr))) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get_application_target_sdk_version</span>() &gt;= __ANDROID_API_O__) &#123;</span><br><span class="line">      <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; has unsupported e_shentsize: 0x%x (expected 0x%zx)&quot;</span>,</span><br><span class="line">                     name_.<span class="built_in">c_str</span>(), header_.e_shentsize, <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Shdr)));</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DL_WARN_documented_change</span>(__ANDROID_API_O__,</span><br><span class="line">                              <span class="string">&quot;invalid-elf-header_section-headers-enforced-for-api-level-26&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;\&quot;%s\&quot; has unsupported e_shentsize 0x%x (expected 0x%zx)&quot;</span>,</span><br><span class="line">                              name_.<span class="built_in">c_str</span>(), header_.e_shentsize, <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Shdr)));</span><br><span class="line">    <span class="built_in">add_dlwarning</span>(name_.<span class="built_in">c_str</span>(), <span class="string">&quot;has invalid ELF header&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (header_.e_shstrndx == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get_application_target_sdk_version</span>() &gt;= __ANDROID_API_O__) &#123;</span><br><span class="line">      <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; has invalid e_shstrndx&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DL_WARN_documented_change</span>(__ANDROID_API_O__,</span><br><span class="line">                              <span class="string">&quot;invalid-elf-header_section-headers-enforced-for-api-level-26&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;\&quot;%s\&quot; has invalid e_shstrndx&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">add_dlwarning</span>(name_.<span class="built_in">c_str</span>(), <span class="string">&quot;has invalid ELF header&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ElfReader::ReadProgramHeaders<br>读取 ELF 头的程序头表 偏移量（e_phoff）和表项数量（e_phnum），检查有效性<br>将程序头表映射到内存中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#312</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::ReadProgramHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  phdr_num_ = header_.e_phnum;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (phdr_num_ &lt; <span class="number">1</span> || phdr_num_ &gt; <span class="number">65536</span>/<span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Phdr))) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has invalid e_phnum: %zd&quot;</span>, name_.<span class="built_in">c_str</span>(), phdr_num_);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> size = phdr_num_ * <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Phdr));</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">CheckFileRange</span>(header_.e_phoff, size, <span class="built_in">alignof</span>(<span class="built_in">ElfW</span>(Phdr)))) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; has invalid phdr offset/size: %zu/%zu&quot;</span>,</span><br><span class="line">                   name_.<span class="built_in">c_str</span>(),</span><br><span class="line">                   <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(header_.e_phoff),</span><br><span class="line">                   size);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!phdr_fragment_.<span class="built_in">Map</span>(fd_, file_offset_, header_.e_phoff, size)) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; phdr mmap failed: %s&quot;</span>, name_.<span class="built_in">c_str</span>(), <span class="built_in">strerror</span>(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  phdr_table_ = <span class="built_in">static_cast</span>&lt;<span class="built_in">ElfW</span>(Phdr)*&gt;(phdr_fragment_.<span class="built_in">data</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ElfReader::ReadSectionHeaders<br>读取 ELF 头的节头表 偏移量（e_shoff）和表项数量（e_shnum），检查有效性<br>将节头表映射到内存中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#341</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::ReadSectionHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  shdr_num_ = header_.e_shnum;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (shdr_num_ == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; has no section headers&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> size = shdr_num_ * <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Shdr));</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">CheckFileRange</span>(header_.e_shoff, size, <span class="built_in">alignof</span>(<span class="type">const</span> <span class="built_in">ElfW</span>(Shdr)))) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; has invalid shdr offset/size: %zu/%zu&quot;</span>,</span><br><span class="line">                   name_.<span class="built_in">c_str</span>(),</span><br><span class="line">                   <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(header_.e_shoff),</span><br><span class="line">                   size);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!shdr_fragment_.<span class="built_in">Map</span>(fd_, file_offset_, header_.e_shoff, size)) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; shdr mmap failed: %s&quot;</span>, name_.<span class="built_in">c_str</span>(), <span class="built_in">strerror</span>(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shdr_table_ = <span class="built_in">static_cast</span>&lt;<span class="type">const</span> <span class="built_in">ElfW</span>(Shdr)*&gt;(shdr_fragment_.<span class="built_in">data</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ElfReader::ReadDynamicSection<br>在节头表中查找类型为 SHT_DYNAMIC 的节（.dynamic 节）<br>检查 .dynamic 节的偏移量和大小是否与程序头表中的 PT_DYNAMIC 段一致<br>检查 .dynamic 节的 sh_link 是否指向有效的 .dynstr 节<br>将 .dynamic 节映射到内存中<br>将 .dynstr 节映射到内存中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#367</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::ReadDynamicSection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Shdr)</span>* dynamic_shdr </span>= <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; shdr_num_; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (shdr_table_[i].sh_type == SHT_DYNAMIC) &#123;</span><br><span class="line">      dynamic_shdr = &amp;shdr_table_ [i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="type">size_t</span> pt_dynamic_offset = <span class="number">0</span>;</span><br><span class="line">  <span class="type">size_t</span> pt_dynamic_filesz = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; phdr_num_; ++i) &#123;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr </span>= &amp;phdr_table_[i];</span><br><span class="line">    <span class="keyword">if</span> (phdr-&gt;p_type == PT_DYNAMIC) &#123;</span><br><span class="line">      pt_dynamic_offset = phdr-&gt;p_offset;</span><br><span class="line">      pt_dynamic_filesz = phdr-&gt;p_filesz;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pt_dynamic_offset != dynamic_shdr-&gt;sh_offset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get_application_target_sdk_version</span>() &gt;= __ANDROID_API_O__) &#123;</span><br><span class="line">      <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; .dynamic section has invalid offset: 0x%zx, &quot;</span></span><br><span class="line">                     <span class="string">&quot;expected to match PT_DYNAMIC offset: 0x%zx&quot;</span>,</span><br><span class="line">                     name_.<span class="built_in">c_str</span>(),</span><br><span class="line">                     <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(dynamic_shdr-&gt;sh_offset),</span><br><span class="line">                     pt_dynamic_offset);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DL_WARN_documented_change</span>(__ANDROID_API_O__,</span><br><span class="line">                              <span class="string">&quot;invalid-elf-header_section-headers-enforced-for-api-level-26&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;\&quot;%s\&quot; .dynamic section has invalid offset: 0x%zx &quot;</span></span><br><span class="line">                              <span class="string">&quot;(expected to match PT_DYNAMIC offset 0x%zx)&quot;</span>,</span><br><span class="line">                              name_.<span class="built_in">c_str</span>(),</span><br><span class="line">                              <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(dynamic_shdr-&gt;sh_offset),</span><br><span class="line">                              pt_dynamic_offset);</span><br><span class="line">    <span class="built_in">add_dlwarning</span>(name_.<span class="built_in">c_str</span>(), <span class="string">&quot;invalid .dynamic section&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pt_dynamic_filesz != dynamic_shdr-&gt;sh_size) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get_application_target_sdk_version</span>() &gt;= __ANDROID_API_O__) &#123;</span><br><span class="line">      <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; .dynamic section has invalid size: 0x%zx, &quot;</span></span><br><span class="line">                     <span class="string">&quot;expected to match PT_DYNAMIC filesz: 0x%zx&quot;</span>,</span><br><span class="line">                     name_.<span class="built_in">c_str</span>(),</span><br><span class="line">                     <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(dynamic_shdr-&gt;sh_size),</span><br><span class="line">                     pt_dynamic_filesz);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DL_WARN_documented_change</span>(__ANDROID_API_O__,</span><br><span class="line">                              <span class="string">&quot;invalid-elf-header_section-headers-enforced-for-api-level-26&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;\&quot;%s\&quot; .dynamic section has invalid size: 0x%zx &quot;</span></span><br><span class="line">                              <span class="string">&quot;(expected to match PT_DYNAMIC filesz 0x%zx)&quot;</span>,</span><br><span class="line">                              name_.<span class="built_in">c_str</span>(),</span><br><span class="line">                              <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(dynamic_shdr-&gt;sh_size),</span><br><span class="line">                              pt_dynamic_filesz);</span><br><span class="line">    <span class="built_in">add_dlwarning</span>(name_.<span class="built_in">c_str</span>(), <span class="string">&quot;invalid .dynamic section&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span> (dynamic_shdr-&gt;sh_link &gt;= shdr_num_) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; .dynamic section has invalid sh_link: %d&quot;</span>,</span><br><span class="line">                   name_.<span class="built_in">c_str</span>(),</span><br><span class="line">                   dynamic_shdr-&gt;sh_link);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Shdr)</span>* strtab_shdr </span>= &amp;shdr_table_[dynamic_shdr-&gt;sh_link];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (strtab_shdr-&gt;sh_type != SHT_STRTAB) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR_AND_LOG</span>(<span class="string">&quot;\&quot;%s\&quot; .dynamic section has invalid link(%d) sh_type: %d (expected SHT_STRTAB)&quot;</span>,</span><br><span class="line">                   name_.<span class="built_in">c_str</span>(), dynamic_shdr-&gt;sh_link, strtab_shdr-&gt;sh_type);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span> (!dynamic_fragment_.<span class="built_in">Map</span>(fd_, file_offset_, dynamic_shdr-&gt;sh_offset, dynamic_shdr-&gt;sh_size)) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; dynamic section mmap failed: %s&quot;</span>, name_.<span class="built_in">c_str</span>(), <span class="built_in">strerror</span>(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span> (!strtab_fragment_.<span class="built_in">Map</span>(fd_, file_offset_, strtab_shdr-&gt;sh_offset, strtab_shdr-&gt;sh_size)) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; strtab section mmap failed: %s&quot;</span>, name_.<span class="built_in">c_str</span>(), <span class="built_in">strerror</span>(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="for-each-dt-needed"><a href="#for-each-dt-needed" class="headerlink" title="for_each_dt_needed"></a>for_each_dt_needed</h4><p>负责依赖项的处理<br>通过遍历 .dynamic 节中的 DT_NEEDED 条目，将每个依赖库添加到 load_tasks 列表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#1127</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">for_each_dt_needed</span><span class="params">(<span class="type">const</span> ElfReader&amp; elf_reader, F action)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> <span class="built_in">ElfW</span>(Dyn)* d = elf_reader.<span class="built_in">dynamic</span>(); d-&gt;d_tag != DT_NULL; ++d) &#123;</span><br><span class="line">    <span class="keyword">if</span> (d-&gt;d_tag == DT_NEEDED) &#123;</span><br><span class="line">      <span class="built_in">action</span>(<span class="built_in">fix_dt_needed</span>(elf_reader.<span class="built_in">get_string</span>(d-&gt;d_un.d_val), elf_reader.<span class="built_in">name</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LoadTask-load"><a href="#LoadTask-load" class="headerlink" title="LoadTask.load"></a>LoadTask.load</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#559</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoadTask</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ElfReader&amp; elf_reader = <span class="built_in">get_elf_reader</span>();</span><br><span class="line">    <span class="keyword">if</span> (!elf_reader.<span class="built_in">Load</span>(extinfo_)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    si_-&gt;base = elf_reader.<span class="built_in">load_start</span>();</span><br><span class="line">    si_-&gt;size = elf_reader.<span class="built_in">load_size</span>();</span><br><span class="line">    si_-&gt;<span class="built_in">set_mapped_by_caller</span>(elf_reader.<span class="built_in">is_mapped_by_caller</span>());</span><br><span class="line">    si_-&gt;load_bias = elf_reader.<span class="built_in">load_bias</span>();</span><br><span class="line">    si_-&gt;phnum = elf_reader.<span class="built_in">phdr_count</span>();</span><br><span class="line">    si_-&gt;phdr = elf_reader.<span class="built_in">loaded_phdr</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="ElfReader-Load"><a href="#ElfReader-Load" class="headerlink" title="ElfReader::Load"></a>ElfReader::Load</h3><p>负责执行实际的 装载操作，共分为三个步骤</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#169</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::Load</span><span class="params">(<span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">CHECK</span>(did_read_);</span><br><span class="line">  <span class="keyword">if</span> (did_load_) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">ReserveAddressSpace</span>(extinfo) &amp;&amp;</span><br><span class="line">      <span class="built_in">LoadSegments</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">FindPhdr</span>()) &#123;</span><br><span class="line">    did_load_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> did_load_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>ElfReader::ReserveAddressSpace<br>计算 ELF 文件中所有 PT_LOAD 段的总大小<br>为其预留内存空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#560</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::ReserveAddressSpace</span><span class="params">(<span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) min_vaddr;</span><br><span class="line">  load_size_ = <span class="built_in">phdr_table_get_load_size</span>(phdr_table_, phdr_num_, &amp;min_vaddr);</span><br><span class="line">  <span class="keyword">if</span> (load_size_ == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has no loadable segments&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint8_t</span>* addr = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(min_vaddr);</span><br><span class="line">  <span class="type">void</span>* start;</span><br><span class="line">  <span class="type">size_t</span> reserved_size = <span class="number">0</span>;</span><br><span class="line">  <span class="type">bool</span> reserved_hint = <span class="literal">true</span>;</span><br><span class="line">  <span class="type">bool</span> strict_hint = <span class="literal">false</span>;</span><br><span class="line">  <span class="type">void</span>* mmap_hint = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (extinfo != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (extinfo-&gt;flags &amp; ANDROID_DLEXT_RESERVED_ADDRESS) &#123;</span><br><span class="line">      reserved_size = extinfo-&gt;reserved_size;</span><br><span class="line">      reserved_hint = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (extinfo-&gt;flags &amp; ANDROID_DLEXT_RESERVED_ADDRESS_HINT) &#123;</span><br><span class="line">      reserved_size = extinfo-&gt;reserved_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addr != <span class="literal">nullptr</span> &amp;&amp; (extinfo-&gt;flags &amp; ANDROID_DLEXT_FORCE_FIXED_VADDR) != <span class="number">0</span>) &#123;</span><br><span class="line">      mmap_hint = addr;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((extinfo-&gt;flags &amp; ANDROID_DLEXT_LOAD_AT_FIXED_ADDRESS) != <span class="number">0</span>) &#123;</span><br><span class="line">      mmap_hint = extinfo-&gt;reserved_addr;</span><br><span class="line">      strict_hint = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (load_size_ &gt; reserved_size) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!reserved_hint) &#123;</span><br><span class="line">      <span class="built_in">DL_ERR</span>(<span class="string">&quot;reserved address space %zd smaller than %zd bytes needed for \&quot;%s\&quot;&quot;</span>,</span><br><span class="line">             reserved_size - load_size_, load_size_, name_.<span class="built_in">c_str</span>());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    start = <span class="built_in">ReserveAligned</span>(mmap_hint, load_size_, kLibraryAlignment);</span><br><span class="line">    <span class="keyword">if</span> (start == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="built_in">DL_ERR</span>(<span class="string">&quot;couldn&#x27;t reserve %zd bytes of address space for \&quot;%s\&quot;&quot;</span>, load_size_, name_.<span class="built_in">c_str</span>());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strict_hint &amp;&amp; (start != mmap_hint)) &#123;</span><br><span class="line">      <span class="built_in">munmap</span>(start, load_size_);</span><br><span class="line">      <span class="built_in">DL_ERR</span>(<span class="string">&quot;couldn&#x27;t reserve %zd bytes of address space at %p for \&quot;%s\&quot;&quot;</span>,</span><br><span class="line">             load_size_, mmap_hint, name_.<span class="built_in">c_str</span>());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    start = extinfo-&gt;reserved_addr;</span><br><span class="line">    mapped_by_caller_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  load_start_ = start;</span><br><span class="line">  load_bias_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(start) - addr;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ElfReader::LoadSegments<br>在程序头表中寻找 PT_LOAD 段，计算其在内存中的起始和结束地址<br>将 PT_LOAD 段映射到内存中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#619</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::LoadSegments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; phdr_num_; ++i) &#123;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr </span>= &amp;phdr_table_[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (phdr-&gt;p_type != PT_LOAD) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) seg_start = phdr-&gt;p_vaddr + load_bias_;</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) seg_end   = seg_start + phdr-&gt;p_memsz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) seg_page_start = <span class="built_in">PAGE_START</span>(seg_start);</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) seg_page_end   = <span class="built_in">PAGE_END</span>(seg_end);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) seg_file_end   = seg_start + phdr-&gt;p_filesz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) file_start = phdr-&gt;p_offset;</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) file_end   = file_start + phdr-&gt;p_filesz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) file_page_start = <span class="built_in">PAGE_START</span>(file_start);</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) file_length = file_end - file_page_start;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_length != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="type">int</span> prot = <span class="built_in">PFLAGS_TO_PROT</span>(phdr-&gt;p_flags);</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="type">void</span>* seg_addr = <span class="built_in">mmap64</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(seg_page_start),</span><br><span class="line">                            file_length,</span><br><span class="line">                            prot,</span><br><span class="line">                            MAP_FIXED|MAP_PRIVATE,</span><br><span class="line">                            fd_,</span><br><span class="line">                            file_offset_ + file_page_start);</span><br><span class="line">      <span class="keyword">if</span> (seg_addr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">DL_ERR</span>(<span class="string">&quot;couldn&#x27;t map \&quot;%s\&quot; segment %zd: %s&quot;</span>, name_.<span class="built_in">c_str</span>(), i, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ElfReader::FindPhdr<br>利用 PT_PHDR 段来定位程序头表的地址<br>如果没有找到，则尝试从第一个文件偏移量为0的 PT_LOAD 段推断出程序头表的地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_phdr.cpp#1077</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::FindPhdr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr_limit </span>= phdr_table_ + phdr_num_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> <span class="built_in">ElfW</span>(Phdr)* phdr = phdr_table_; phdr &lt; phdr_limit; ++phdr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (phdr-&gt;p_type == PT_PHDR) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">CheckPhdr</span>(load_bias_ + phdr-&gt;p_vaddr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> <span class="built_in">ElfW</span>(Phdr)* phdr = phdr_table_; phdr &lt; phdr_limit; ++phdr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (phdr-&gt;p_type == PT_LOAD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (phdr-&gt;p_offset == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">ElfW</span>(Addr)  elf_addr = load_bias_ + phdr-&gt;p_vaddr;</span><br><span class="line">        <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Ehdr)</span>* ehdr </span>= <span class="built_in">reinterpret_cast</span>&lt;<span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Ehdr)</span>*&gt;<span class="params">(elf_addr)</span></span>;</span><br><span class="line">        <span class="built_in">ElfW</span>(Addr)  offset = ehdr-&gt;e_phoff;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CheckPhdr</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)&gt;(ehdr) + offset);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">DL_ERR</span>(<span class="string">&quot;can&#x27;t find loaded phdr for \&quot;%s\&quot;&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="soinfo-prelink-image"><a href="#soinfo-prelink-image" class="headerlink" title="soinfo::prelink_image"></a>soinfo::prelink_image</h2><p>负责链接前期的 数据解析<br>通过遍历 .dynamic 节表项的条目（Elf64_Dyn-&gt;d_tag），解析各节的数据（.hash, .dynsym, .dynstr, .rela.dyn, .rela.plt, .init_array…）并存入 soinfo 各成员变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#3052</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">soinfo::prelink_image</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">ElfW</span>(Word) dynamic_flags = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">phdr_table_get_dynamic_section</span>(phdr, phnum, load_bias, &amp;dynamic, &amp;dynamic_flags);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="type">uint32_t</span> needed_count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">ElfW</span>(Dyn)* d = dynamic; d-&gt;d_tag != DT_NULL; ++d) &#123;</span><br><span class="line">    <span class="built_in">DEBUG</span>(<span class="string">&quot;d = %p, d[0](tag) = %p d[1](val) = %p&quot;</span>,</span><br><span class="line">          d, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(d-&gt;d_tag), <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(d-&gt;d_un.d_val));</span><br><span class="line">    <span class="keyword">switch</span> (d-&gt;d_tag) &#123;</span><br><span class="line">      <span class="keyword">case</span> DT_SONAME:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_HASH:</span><br><span class="line">        nbucket_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">0</span>];</span><br><span class="line">        nchain_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">1</span>];</span><br><span class="line">        bucket_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr + <span class="number">8</span>);</span><br><span class="line">        chain_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr + <span class="number">8</span> + nbucket_ * <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_GNU_HASH:</span><br><span class="line">        gnu_nbucket_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">0</span>];</span><br><span class="line">        gnu_maskwords_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">2</span>];</span><br><span class="line">        gnu_shift2_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        gnu_bloom_filter_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)*&gt;(load_bias + d-&gt;d_un.d_ptr + <span class="number">16</span>);</span><br><span class="line">        gnu_bucket_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(gnu_bloom_filter_ + gnu_maskwords_);</span><br><span class="line">        gnu_chain_ = gnu_bucket_ + gnu_nbucket_ -</span><br><span class="line">            <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">powerof2</span>(gnu_maskwords_)) &#123;</span><br><span class="line">          <span class="built_in">DL_ERR</span>(<span class="string">&quot;invalid maskwords for gnu_hash = 0x%x, in \&quot;%s\&quot; expecting power to two&quot;</span>,</span><br><span class="line">              gnu_maskwords_, <span class="built_in">get_realpath</span>());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        --gnu_maskwords_;</span><br><span class="line"></span><br><span class="line">        flags_ |= FLAG_GNU_HASH;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_STRTAB:</span><br><span class="line">        strtab_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_STRSZ:</span><br><span class="line">        strtab_size_ = d-&gt;d_un.d_val;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_SYMTAB:</span><br><span class="line">        symtab_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Sym)*&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_SYMENT:</span><br><span class="line">        <span class="keyword">if</span> (d-&gt;d_un.d_val != <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Sym))) &#123;</span><br><span class="line">          <span class="built_in">DL_ERR</span>(<span class="string">&quot;invalid DT_SYMENT: %zd in \&quot;%s\&quot;&quot;</span>,</span><br><span class="line">              <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(d-&gt;d_un.d_val), <span class="built_in">get_realpath</span>());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_PLTREL:</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">        <span class="keyword">if</span> (d-&gt;d_un.d_val != DT_RELA) &#123;</span><br><span class="line">          <span class="built_in">DL_ERR</span>(<span class="string">&quot;unsupported DT_PLTREL in \&quot;%s\&quot;; expected DT_RELA&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="keyword">if</span> (d-&gt;d_un.d_val != DT_REL) &#123;</span><br><span class="line">          <span class="built_in">DL_ERR</span>(<span class="string">&quot;unsupported DT_PLTREL in \&quot;%s\&quot;; expected DT_REL&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_JMPREL:</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">        plt_rela_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Rela)*&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        plt_rel_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Rel)*&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_PLTRELSZ:</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">        plt_rela_count_ = d-&gt;d_un.d_val / <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Rela));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        plt_rel_count_ = d-&gt;d_un.d_val / <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Rel));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">      <span class="keyword">case</span> DT_RELA:</span><br><span class="line">        rela_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Rela)*&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_RELASZ:</span><br><span class="line">        rela_count_ = d-&gt;d_un.d_val / <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Rela));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_RELAENT:</span><br><span class="line">        <span class="keyword">if</span> (d-&gt;d_un.d_val != <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Rela))) &#123;</span><br><span class="line">          <span class="built_in">DL_ERR</span>(<span class="string">&quot;invalid DT_RELAENT: %zd&quot;</span>, <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(d-&gt;d_un.d_val));</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_RELACOUNT:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_REL:</span><br><span class="line">        <span class="built_in">DL_ERR</span>(<span class="string">&quot;unsupported DT_REL in \&quot;%s\&quot;&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_RELSZ:</span><br><span class="line">        <span class="built_in">DL_ERR</span>(<span class="string">&quot;unsupported DT_RELSZ in \&quot;%s\&quot;&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="keyword">case</span> DT_RELR:</span><br><span class="line">        relr_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Relr)*&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_RELRSZ:</span><br><span class="line">        relr_count_ = d-&gt;d_un.d_val / <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Relr));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_RELRENT:</span><br><span class="line">        <span class="keyword">if</span> (d-&gt;d_un.d_val != <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Relr))) &#123;</span><br><span class="line">          <span class="built_in">DL_ERR</span>(<span class="string">&quot;invalid DT_RELRENT: %zd&quot;</span>, <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(d-&gt;d_un.d_val));</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_RELRCOUNT:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_INIT:</span><br><span class="line">        init_func_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">linker_ctor_function_t</span>&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="built_in">DEBUG</span>(<span class="string">&quot;%s constructors (DT_INIT) found at %p&quot;</span>, <span class="built_in">get_realpath</span>(), init_func_);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_FINI:</span><br><span class="line">        fini_func_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">linker_dtor_function_t</span>&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="built_in">DEBUG</span>(<span class="string">&quot;%s destructors (DT_FINI) found at %p&quot;</span>, <span class="built_in">get_realpath</span>(), fini_func_);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_INIT_ARRAY:</span><br><span class="line">        init_array_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">linker_ctor_function_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="built_in">DEBUG</span>(<span class="string">&quot;%s constructors (DT_INIT_ARRAY) found at %p&quot;</span>, <span class="built_in">get_realpath</span>(), init_array_);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_INIT_ARRAYSZ:</span><br><span class="line">        init_array_count_ = <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(d-&gt;d_un.d_val) / <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Addr));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_TEXTREL:</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__LP64__)</span></span><br><span class="line">        <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has text relocations&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        has_text_relocations = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_SYMBOLIC:</span><br><span class="line">        has_DT_SYMBOLIC = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_NEEDED:</span><br><span class="line">        ++needed_count;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> DT_FLAGS:</span><br><span class="line">        <span class="keyword">if</span> (d-&gt;d_un.d_val &amp; DF_TEXTREL) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__LP64__)</span></span><br><span class="line">          <span class="built_in">DL_ERR</span>(<span class="string">&quot;\&quot;%s\&quot; has text relocations&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">          has_text_relocations = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d-&gt;d_un.d_val &amp; DF_SYMBOLIC) &#123;</span><br><span class="line">          has_DT_SYMBOLIC = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="soinfo-link-image"><a href="#soinfo-link-image" class="headerlink" title="soinfo::link_image"></a>soinfo::link_image</h2><p>负责链接后期的 地址重定位<br>分别将 .rela.dyn, .rela.plt 节表项的条目（Elf64_Rela-&gt;r_info）传入 relocate</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#3536</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">soinfo::link_image</span><span class="params">(<span class="type">const</span> <span class="type">soinfo_list_t</span>&amp; global_group, <span class="type">const</span> <span class="type">soinfo_list_t</span>&amp; local_group,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">  <span class="keyword">if</span> (rela_ != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">DEBUG</span>(<span class="string">&quot;[ relocating %s rela ]&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">relocate</span>(version_tracker,</span><br><span class="line">            <span class="built_in">plain_reloc_iterator</span>(rela_, rela_count_), global_group, local_group)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (plt_rela_ != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">DEBUG</span>(<span class="string">&quot;[ relocating %s plt rela ]&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">relocate</span>(version_tracker,</span><br><span class="line">            <span class="built_in">plain_reloc_iterator</span>(plt_rela_, plt_rela_count_), global_group, local_group)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  ...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="soinfo-relocate"><a href="#soinfo-relocate" class="headerlink" title="soinfo::relocate"></a>soinfo::relocate</h3><p>通过遍历 .rela.dyn 或 .rela.plt 节表项的条目，先检查符号合法性，后计算并修正 .data, .got 节中的变量地址或 .got.plt 节中的函数地址<br>期间涉及的符号解析 通过读取 .dynsym, .dynstr 节实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker.cpp#2681</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">soinfo::relocate</span><span class="params">(<span class="type">const</span> VersionTracker&amp; version_tracker, ElfRelIteratorT&amp;&amp; rel_iterator,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> <span class="type">soinfo_list_t</span>&amp; global_group, <span class="type">const</span> <span class="type">soinfo_list_t</span>&amp; local_group)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> idx = <span class="number">0</span>; rel_iterator.<span class="built_in">has_next</span>(); ++idx) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> rel = rel_iterator.<span class="built_in">next</span>();</span><br><span class="line">    <span class="keyword">if</span> (rel == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Word) type = <span class="built_in">ELFW</span>(R_TYPE)(rel-&gt;r_info);</span><br><span class="line">    <span class="built_in">ElfW</span>(Word) sym = <span class="built_in">ELFW</span>(R_SYM)(rel-&gt;r_info);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) reloc = <span class="built_in">static_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)&gt;(rel-&gt;r_offset + load_bias);</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) sym_addr = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* sym_name = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) addend = <span class="built_in">get_addend</span>(rel, reloc);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DEBUG</span>(<span class="string">&quot;Processing \&quot;%s\&quot; relocation at index %zd&quot;</span>, <span class="built_in">get_realpath</span>(), idx);</span><br><span class="line">    <span class="keyword">if</span> (type == R_GENERIC_NONE) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span>* s </span>= <span class="literal">nullptr</span>;</span><br><span class="line">    soinfo* lsi = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sym != <span class="number">0</span>) &#123;</span><br><span class="line">      sym_name = <span class="built_in">get_string</span>(symtab_[sym].st_name);</span><br><span class="line">      <span class="type">const</span> version_info* vi = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (s == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        s = &amp;symtab_[sym];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ELF_ST_BIND</span>(s-&gt;st_info) != STB_WEAK) &#123;</span><br><span class="line">          <span class="built_in">DL_ERR</span>(<span class="string">&quot;cannot locate symbol \&quot;%s\&quot; referenced by \&quot;%s\&quot;...&quot;</span>, sym_name, <span class="built_in">get_realpath</span>());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">          <span class="keyword">case</span> R_GENERIC_JUMP_SLOT:</span><br><span class="line">          <span class="keyword">case</span> R_GENERIC_GLOB_DAT:</span><br><span class="line">          <span class="keyword">case</span> R_GENERIC_RELATIVE:</span><br><span class="line">          <span class="keyword">case</span> R_GENERIC_IRELATIVE:</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__aarch64__)</span></span><br><span class="line">          <span class="keyword">case</span> R_AARCH64_ABS64:</span><br><span class="line">          <span class="keyword">case</span> R_AARCH64_ABS32:</span><br><span class="line">          <span class="keyword">case</span> R_AARCH64_ABS16:</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">count_relocation</span>(kRelocSymbol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> R_GENERIC_JUMP_SLOT:</span><br><span class="line">        <span class="built_in">count_relocation</span>(kRelocAbsolute);</span><br><span class="line">        <span class="built_in">MARK</span>(rel-&gt;r_offset);</span><br><span class="line">        <span class="built_in">TRACE_TYPE</span>(RELO, <span class="string">&quot;RELO JMP_SLOT %16p &lt;- %16p %s\n&quot;</span>,</span><br><span class="line">                   <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(reloc),</span><br><span class="line">                   <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(sym_addr + addend), sym_name);</span><br><span class="line"></span><br><span class="line">        *<span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)*&gt;(reloc) = (sym_addr + addend);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> R_GENERIC_GLOB_DAT:</span><br><span class="line">        <span class="built_in">count_relocation</span>(kRelocAbsolute);</span><br><span class="line">        <span class="built_in">MARK</span>(rel-&gt;r_offset);</span><br><span class="line">        <span class="built_in">TRACE_TYPE</span>(RELO, <span class="string">&quot;RELO GLOB_DAT %16p &lt;- %16p %s\n&quot;</span>,</span><br><span class="line">                   <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(reloc),</span><br><span class="line">                   <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(sym_addr + addend), sym_name);</span><br><span class="line">        *<span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)*&gt;(reloc) = (sym_addr + addend);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> R_GENERIC_RELATIVE:</span><br><span class="line">        <span class="built_in">count_relocation</span>(kRelocRelative);</span><br><span class="line">        <span class="built_in">MARK</span>(rel-&gt;r_offset);</span><br><span class="line">        <span class="built_in">TRACE_TYPE</span>(RELO, <span class="string">&quot;RELO RELATIVE %16p &lt;- %16p\n&quot;</span>,</span><br><span class="line">                   <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(reloc),</span><br><span class="line">                   <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(load_bias + addend));</span><br><span class="line">        *<span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)*&gt;(reloc) = (load_bias + addend);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__aarch64__)</span></span><br><span class="line">      <span class="keyword">case</span> R_AARCH64_ABS64:</span><br><span class="line">        <span class="built_in">count_relocation</span>(kRelocAbsolute);</span><br><span class="line">        <span class="built_in">MARK</span>(rel-&gt;r_offset);</span><br><span class="line">        <span class="built_in">TRACE_TYPE</span>(RELO, <span class="string">&quot;RELO ABS64 %16llx &lt;- %16llx %s\n&quot;</span>,</span><br><span class="line">                   reloc, sym_addr + addend, sym_name);</span><br><span class="line">        *<span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)*&gt;(reloc) = sym_addr + addend;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">case</span> R_AARCH64_PREL64:</span><br><span class="line">        <span class="built_in">count_relocation</span>(kRelocRelative);</span><br><span class="line">        <span class="built_in">MARK</span>(rel-&gt;r_offset);</span><br><span class="line">        <span class="built_in">TRACE_TYPE</span>(RELO, <span class="string">&quot;RELO REL64 %16llx &lt;- %16llx - %16llx %s\n&quot;</span>,</span><br><span class="line">                   reloc, sym_addr + addend, rel-&gt;r_offset, sym_name);</span><br><span class="line">        *<span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)*&gt;(reloc) = sym_addr + addend - rel-&gt;r_offset;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> R_AARCH64_COPY:</span><br><span class="line">        <span class="built_in">DL_ERR</span>(<span class="string">&quot;%s R_AARCH64_COPY relocations are not supported&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">case</span> R_AARCH64_TLS_TPREL64:</span><br><span class="line">        <span class="built_in">TRACE_TYPE</span>(RELO, <span class="string">&quot;RELO TLS_TPREL64 *** %16llx &lt;- %16llx - %16llx\n&quot;</span>,</span><br><span class="line">                   reloc, (sym_addr + addend), rel-&gt;r_offset);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">DL_ERR</span>(<span class="string">&quot;unknown reloc type %d @ %p (%zu)&quot;</span>, type, rel, idx);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://bbs.kanxue.com/thread-269801.htm">Android Linker详解</a><br><a href="https://bbs.kanxue.com/thread-269891.htm">Android Linker详解(二) </a><br><a href="https://bbs.kanxue.com/thread-281184.htm">自定义Linker实现分析之路</a><br><a href="https://blog.csdn.net/a332324956/article/details/68947789">深入 Android 源码系列（一）</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬核知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>百度加固免费版分析</title>
      <link href="/2025/01/25/2025-1-25%20%E7%99%BE%E5%BA%A6%E5%8A%A0%E5%9B%BA%E5%85%8D%E8%B4%B9%E7%89%88%E5%88%86%E6%9E%90%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89/"/>
      <url>/2025/01/25/2025-1-25%20%E7%99%BE%E5%BA%A6%E5%8A%A0%E5%9B%BA%E5%85%8D%E8%B4%B9%E7%89%88%E5%88%86%E6%9E%90%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<!-- 小白久闻百度加固之名，却从未亲眼见过，可以说对其中的运作机制一直是一头雾水这里紧跟[这位大佬](https://bbs.kanxue.com/thread-257926.htm)的思路，一步一个脚印去复现希望能逐步走进企业级加固，揭开其神秘面纱，也为未来面对时提供一定参考 --><h1 id="壳dex"><a href="#壳dex" class="headerlink" title="壳dex"></a>壳dex</h1><p>原dex已只剩一个R类，其他部分会在后续过程中被释放加载<br><img src="/img/2025-1-25/29.jpg"></p><p>查看AndroidManifest.xml中的 application标签，得知程序入口处为 StubApplication<br><img src="/img/2025-1-25/1.png"></p><h2 id="StubApplication-attachBaseContext"><a href="#StubApplication-attachBaseContext" class="headerlink" title="StubApplication.attachBaseContext"></a>StubApplication.attachBaseContext</h2><p>来到其中被重写的 attachBaseContext()<br><img src="/img/2025-1-25/2.png"></p><h3 id="1-Debug-isDebuggerConnected"><a href="#1-Debug-isDebuggerConnected" class="headerlink" title="(1)Debug.isDebuggerConnected"></a>(1)Debug.isDebuggerConnected</h3><p>反调试，可通过提前在 libart.so的 isDebuggerConnected()中下断点 实现绕过</p><h3 id="2-loadLibrary"><a href="#2-loadLibrary" class="headerlink" title="(2)loadLibrary"></a>(2)loadLibrary</h3><p>开始加载 libbaiduprotect.so，因此接下来进入native，开始分析so加载过程<br><img src="/img/2025-1-25/12.png"></p><h3 id="5-A-n001"><a href="#5-A-n001" class="headerlink" title="(5)A.n001"></a>(5)A.n001</h3><p>loadLibrary() 加载完libbaiduprotect.so后，调用了先前 JNI_Onload()中注册的 n001()，对应native的 sub_9318</p><h2 id="StubApplication-onCreate"><a href="#StubApplication-onCreate" class="headerlink" title="StubApplication.onCreate"></a>StubApplication.onCreate</h2><h3 id="7-A-n002"><a href="#7-A-n002" class="headerlink" title="(7)A.n002"></a>(7)A.n002</h3><p>其前面在 JNI_Onload 中被注册，可知道对应native的 sub_94E4</p><h1 id="libbaiduprotect-so"><a href="#libbaiduprotect-so" class="headerlink" title="libbaiduprotect.so"></a>libbaiduprotect.so</h1><h2 id="3-init-array"><a href="#3-init-array" class="headerlink" title="(3).init_array"></a>(3).init_array</h2><p><img src="/img/2025-1-25/21.png"></p><ol><li>sub_88060<br>伪代码中看到大量基于不透明谓词（dword_C0118、dword_C0120）的虚假控制流<br><img src="/img/2025-1-25/4.png"><br>可以通过更改属性为只读并赋值0 来去除<br><img src="/img/2025-1-25/5.png"></li></ol><p>去除之后可以看到大量<code>解密逻辑</code>，因此选择动调至 sub_88060刚执行完时 dump so<br>后续针对该so进行分析</p><h1 id="dump-so"><a href="#dump-so" class="headerlink" title="dump.so"></a>dump.so</h1><h2 id="3-init-array-1"><a href="#3-init-array-1" class="headerlink" title="(3).init_array"></a>(3).init_array</h2><ol start="2"><li>sub_6FC4…sub_7578<br>格式相似，都是先解密字符串，然后将存储在.data.rel.ro中的某个函数指针，<code>放入函数列表</code> 的指定索引处<br><img src="/img/2025-1-25/6.png"><br>以下为总结出的函数列表<br><img src="/img/2025-1-25/14.png"></li></ol><h2 id="4-JNI-Onload"><a href="#4-JNI-Onload" class="headerlink" title="(4)JNI_Onload"></a>(4)JNI_Onload</h2><p>同样存在混淆，先去掉虚假控制流；然后再修复一下各个方法名<br><img src="/img/2025-1-25/7.png"></p><p>1.<br>调用（a2传入1）上述列表函数 sub_B3B4，其中<code>保存libc.so中库函数地址</code>，用于后续通过指针调用<br><img src="/img/2025-1-25/8.png"></p><p>2.<br>对三个java层中声明的<code>native方法 进行注册</code><br><img src="/img/2025-1-25/9.png"></p><p>3.<br>调用（a2传入2）上述列表函数 sub_3E29C，其中调用 sub_3E36C<br><img src="/img/2025-1-25/10.png"></p><p>sub_3E36C中调用的 sub_3E3F0，通过<code>读取 /proc/self/maps</code>，检查是否存在 libdvm.so或libart.so，进而<code>判断Android虚拟机类型</code><br><img src="/img/2025-1-25/11.png"></p><h2 id="6-sub-9318"><a href="#6-sub-9318" class="headerlink" title="(6)sub_9318"></a>(6)sub_9318</h2><p>sub_9318中先将传参，即<code>应用信息进行存储</code>，然后调用 sub_781C<br><img src="/img/2025-1-25/13.png"></p><p>其中调用了（a2传入3）先前的列表函数 sub_3E29C、sub_40CF8、sub_3DFC4、sub_11F5C、sub_45964<br><img src="/img/2025-1-25/15.png"></p><ol><li>sub_3E29C<br><img src="/img/2025-1-25/16.png"></li></ol><p>其中sub_13880中调用java层方法，<code>获取apk签名后 计算MD5值</code><br><img src="/img/2025-1-25/17.png"></p><ol start="2"><li>sub_40CF8<br><img src="/img/2025-1-25/18.png"></li></ol><p>其中sub_409E0…</p><ol start="3"><li><p>sub_3DFC4<br>…</p></li><li><p>sub_11F5C<br><img src="/img/2025-1-25/19.png"></p></li></ol><p>唯一调用的sub_BC60，<code>基于SDK版本进入了不同分支</code>（dword_BE570 先前在 sub_9318中被赋值为 Build.VERSION.SDK_INT）<br>这里只关注SDK大于26的情况，即只涉及  sub_188AC、sub_11AB0<br><img src="/img/2025-1-25/20.png"></p><p>sub_188AC：<br><img src="/img/2025-1-25/22.png"></p><p>sub_11AB0：<br><img src="/img/2025-1-25/23.jpg"><br>其中 assets&#x2F; 目录下的jar具有如下自定义格式<br><img src="/img/2025-1-25/28.jpg"></p><ol start="5"><li>sub_45964<br><img src="/img/2025-1-25/24.png"></li></ol><p>sub_42C08：<br><img src="/img/2025-1-25/27.png"></p><h2 id="8-sub-94E4"><a href="#8-sub-94E4" class="headerlink" title="(8)sub_94E4"></a>(8)sub_94E4</h2><p>其前面在 JNI_Onload 中被注册，可知道对应native的 sub_94E4</p><p>其中调用了（a2传入4）先前的列表函数 sub_40CF8、sub_3E96C、sub_42388<br><img src="/img/2025-1-25/25.png"></p><ol><li><p>sub_40CF8<br>…</p></li><li><p>sub_3E96C<br>…</p></li><li><p>sub_42388<br>…</p></li></ol><h2 id="10-sub-42598"><a href="#10-sub-42598" class="headerlink" title="(10)sub_42598"></a>(10)sub_42598</h2><h1 id="9-dump-dex"><a href="#9-dump-dex" class="headerlink" title="(9)dump.dex"></a>(9)dump.dex</h1><p>对 sub_11AB0 中解密出的dex进行dump，得到原本的dex<br>但其中 MainActivity.onCreate 的逻辑已被处理，只留下进入VMP的入口函数，即 壳dex中的方法 A.V<br><img src="/img/2025-1-25/26.png"></p><p>由此来到 A.V的native处，即在 dump.so的 sub_42C08中被注册的 sub_42598</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><pre><code>代码混淆（虚假控制流、字符串混淆）、反调试（Debug.isDebuggerConnected()）、GOT Hook、动态加载 |so dump </code></pre>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件系统安全 2025 HappyLock</title>
      <link href="/2025/01/24/2025-1-24%20%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%202025%20HappyLock/"/>
      <url>/2025/01/24/2025-1-24%20%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%202025%20HappyLock/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><p>扔进jadx查看 MainActivity类</p><p>反编译代码非常奇怪，与之对应的是一些代码混淆————</p><ol><li><p>字符串混淆<br>对Base64编码下的字符串进行解密<br><img src="/img/2025-1-24/1.png"></p></li><li><p>控制流平坦化<br>查看smali，看到冗长的switch、case<br><img src="/img/2025-1-24/2.png"></p></li></ol><p>目光转到 onComplete()————<br>其中是获取用户绘制的图案锁序列，加密后验证结果。重点在于调用了 Utils.cmp()<br><img src="/img/2025-1-24/3.png"></p><h2 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h2><p>先看 唯一正常反编译的cmp()————<br>其中通过反射调用了某个已加载的类的 cmp方法（”Y21w”）<br><img src="/img/2025-1-24/4.png"></p><p>剩下就是零零散散的，但结合上方逻辑不难推出，这里对类进行了解密并动态加载<br><img src="/img/2025-1-24/5.png"></p><p>因此要想办法把这里的dex dump出来。<br>有很多种方式，但从省事的角度考虑，这里还是选择直接hook decode()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Utils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.crackme.happylock.Utils&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Utils</span>.<span class="property">decode</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">inputData</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="title function_">decode</span>(inputData);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">let</span> filePath = <span class="string">&#x27;C:\\Users\\xxx\\Desktop\\dump.dex&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> fos = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> fileOutputStream = <span class="keyword">new</span> <span class="title function_">fos</span>(filePath, <span class="literal">false</span>);</span><br><span class="line">            fileOutputStream.<span class="title function_">write</span>(result);</span><br><span class="line">            fileOutputStream.<span class="title function_">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h2><p>dump.dex扔进jeb，看到Check类里只有一个native check()，并没有看到预期的cmp()<br><img src="/img/2025-1-24/7.png"></p><p>到这里还是很蒙，但事已至此只能跟进native层了</p><h2 id="libhappylock-so"><a href="#libhappylock-so" class="headerlink" title="libhappylock.so"></a>libhappylock.so</h2><p>.init_array中————<br>看到许多解密逻辑，解密后被传入 __android_log_print()等位置，所以可以大致确定是对字符串混淆的解密<br><img src="/img/2025-1-24/8.png"></p><p>JNI_OnLoad()中————<br>并未发现常规的 JNI::FindClass()、JNI::RegisterNatives()，但是发现了一个可疑函数的调用<br><img src="/img/2025-1-24/6.png"></p><p>于是hook 查看参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> libhappylockBase = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libhappylock.so&quot;</span>).<span class="property">base</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(libhappylockBase.<span class="title function_">add</span>(<span class="number">0x12830</span>), &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; args.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`  arg<span class="subst">$&#123;i&#125;</span>: <span class="subst">$&#123;args[i]&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发现两次调用 操作的目标先后是 libc.so的 execve()，以及 libart.so的 ClassLinker::LoadMethod()</p><p>还是不明所以，正好前面 0x127BC处有看到 __android_log_print()，查看一手日志<br>然而很奇怪，logcat中没看到什么输出，因此hook查看此处 __android_log_print()的传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libhappylock = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libhappylock.so&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> targetOffset = <span class="number">0x127BC</span>;</span><br><span class="line">    <span class="keyword">var</span> targetAddress = libhappylock.<span class="property">base</span>.<span class="title function_">add</span>(targetOffset);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(targetAddress, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> prio = args[<span class="number">0</span>].<span class="title function_">toInt32</span>();  </span><br><span class="line">            <span class="keyword">var</span> tagPtr = args[<span class="number">1</span>];          </span><br><span class="line">            <span class="keyword">var</span> msgPtr = args[<span class="number">2</span>];        </span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> tag = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(tagPtr);</span><br><span class="line">            <span class="keyword">var</span> message = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(msgPtr);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Log Priority: &#x27;</span> + prio);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Tag: &#x27;</span> + tag);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message: &#x27;</span> + message);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看到了输出中带有”shadowhook”的字样，这下一切都串联起来了————</p><ol><li>native层通过shadowhook框架，先后hook了 execve()、LoadMethod()<br><img src="/img/2025-1-24/9.png"></li><li>对这两个函数的hook，非常契合dex第三代壳 指令抽取壳的特征。<br>hook跳转到的函数 sub_121E4、sub_12270的功能，也恰恰印证了这一点。<br>分别是在进行 dex2oat禁用、原指令回填的操作<br><img src="/img/2025-1-24/10.png"></li><li>这也是一开始java层 dump出的Check类，没见到预期cmp()的原因。<br>因为此时该方法还是处于指令被抽取的状态<br><img src="/img/2025-1-24/7.png"></li></ol><p>所以接下来目标就很明确了，从内存中dump出指令回填后的dex</p><h2 id="Check-fixed"><a href="#Check-fixed" class="headerlink" title="Check (fixed)"></a>Check (fixed)</h2><p>此时再在jeb中查看dump.dex，就可以如愿以偿看到cmp()逻辑了<br><img src="/img/2025-1-24/11.png"></p><p>由此得到exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">encrypted = [</span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0x11</span>, <span class="number">0x02</span>, <span class="number">0x50</span>, <span class="number">0x09</span>, <span class="number">0x7D</span>, <span class="number">0x06</span>, <span class="number">0x16</span>, <span class="number">0x71</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x29</span>, <span class="number">0x57</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0x7A</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0x5E</span>, <span class="number">0x29</span>, <span class="number">0x07</span>, <span class="number">0x13</span>, <span class="number">0x76</span>, <span class="number">0x16</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x5A</span>, <span class="number">0x29</span>, <span class="number">0x57</span>, <span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x44</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x04</span>, <span class="number">0x43</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;CrackMe!CrackMe!&quot;</span></span><br><span class="line"></span><br><span class="line">decrypted = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encrypted)):</span><br><span class="line">    decrypted_byte = encrypted[i] ^ key[i % <span class="built_in">len</span>(key)]</span><br><span class="line">    decrypted.append(decrypted_byte)</span><br><span class="line"></span><br><span class="line">decrypted_text = <span class="built_in">bytes</span>(decrypted).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypted_text)   <span class="comment"># 5cc3b0c720a25d25939f5db25dba1d2f66ed49ab</span></span><br></pre></td></tr></table></figure><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>代码混淆（字符串混淆、控制流平坦化）、dex加壳（方法抽取）、动态加载、Inline Hook（ShadowHook）|dex dump</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://onejane.github.io/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/">https://onejane.github.io/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/</a><br><a href="https://bbs.kanxue.com/thread-285135.htm">https://bbs.kanxue.com/thread-285135.htm</a><br><a href="https://bbs.kanxue.com/thread-285152.htm">https://bbs.kanxue.com/thread-285152.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>so加固及对抗</title>
      <link href="/2025/01/15/2025-1-15%20so%E5%8A%A0%E5%9B%BA%E5%8F%8A%E5%AF%B9%E6%8A%97/"/>
      <url>/2025/01/15/2025-1-15%20so%E5%8A%A0%E5%9B%BA%E5%8F%8A%E5%AF%B9%E6%8A%97/</url>
      
        <content type="html"><![CDATA[<p>本文记录了常见so加固手段，从原理及对抗两个方面进行总结<br>文章会根据后续的学习进度，持续追加新内容</p><p>默认环境如下：</p><ol><li>系统：Android 9.0.0</li><li>架构：arm64</li></ol><h1 id="加固手段"><a href="#加固手段" class="headerlink" title="加固手段"></a>加固手段</h1><h2 id="节加密"><a href="#节加密" class="headerlink" title="节加密"></a>节加密</h2><p>在此之前，先来回顾一下ELF文件的大致格式<br><img src="/img/2025-1-15/5.jpg"></p><ol><li><p>源码中，将待保护函数放到自定义节，然后在.init_array中对该节进行解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_example_myapplication_MainActivity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getLibAddr</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 待保护函数</span></span><br><span class="line">JNIEXPORT jint JNICALL <span class="title function_">Java_com_example_myapplication_MainActivity_plus</span><span class="params">(JNIEnv* env, jobject obj, jint a, jint b)</span> __<span class="title function_">attribute__</span><span class="params">((section(<span class="string">&quot;.mysection&quot;</span>)))</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">()</span> __<span class="title function_">attribute__</span><span class="params">((constructor))</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> base;</span><br><span class="line">    Elf64_Ehdr *ehdr;</span><br><span class="line"></span><br><span class="line">    base = getLibAddr();</span><br><span class="line">    ehdr = (Elf64_Ehdr *)base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 ELF头的 e_phoff 中取出自定义节的 s_offset（具体原因见下方加密逻辑）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> text_addr = ehdr-&gt;e_phoff + base;   </span><br><span class="line">    <span class="comment">// 从 ELF头的 e_entry 中取出自定义节的 s_size</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nsize = ehdr-&gt;e_entry &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nblock = ehdr-&gt;e_entry &gt;&gt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mprotect((<span class="type">void</span> *)(text_addr / PAGE_SIZE * PAGE_SIZE), <span class="number">4096</span> * nsize, PROT_READ | PROT_EXEC | PROT_WRITE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;mem privilege change failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; nblock; ++i) &#123;</span><br><span class="line">        <span class="type">char</span> *addr = (<span class="type">char</span> *)(text_addr + i);</span><br><span class="line">        *addr = ~(*addr);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mprotect((<span class="type">void</span> *)(text_addr / PAGE_SIZE * PAGE_SIZE), <span class="number">4096</span> * nsize, PROT_READ | PROT_EXEC) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;mem privilege change failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Decrypt success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getLibAddr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> name[] = <span class="string">&quot;libnative-lib.so&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">char</span> *temp;</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    FILE *fp;</span><br><span class="line"></span><br><span class="line">    pid = getpid();</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/maps&quot;</span>, pid);</span><br><span class="line">    fp = fopen(buf, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;open failed&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> _error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), fp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, name)) &#123;</span><br><span class="line">            temp = strtok(buf, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            ret = strtoul(temp, <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">_error:</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>针对编译后的so，找到自定义节进行加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">uint8_t</span>* fileByteArys, <span class="type">size_t</span> fileSize, <span class="type">const</span> <span class="type">char</span>* encodeSectionName)</span> &#123;</span><br><span class="line">    <span class="comment">// 解析ELF头</span></span><br><span class="line">    Elf64_Ehdr* ehdr = (Elf64_Ehdr*)fileByteArys;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 ELF头的 e_shstrndx，找到节头表中 .shstrtab 节的表项，获取其 s_offset、s_size</span></span><br><span class="line">    <span class="type">uint16_t</span> string_section_index = ehdr-&gt;e_shstrndx;</span><br><span class="line">    Elf64_Shdr* shdr = (Elf64_Shdr*)(fileByteArys + ehdr-&gt;e_shoff + string_section_index * ehdr-&gt;e_shentsize);</span><br><span class="line">    <span class="type">uint64_t</span> size = shdr-&gt;sh_size;</span><br><span class="line">    <span class="type">uint64_t</span> offset = shdr-&gt;sh_offset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过此 s_offset 和每个表项的 s_name，找到每个section的名称在 .shstrtab 节中的位置</span></span><br><span class="line">    <span class="type">uint64_t</span> mySectionOffset = <span class="number">0</span>, mySectionSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; ehdr-&gt;e_shnum; i++) &#123;</span><br><span class="line">        Elf64_Shdr* temp = (Elf64_Shdr*)(fileByteArys + ehdr-&gt;e_shoff + i * ehdr-&gt;e_shentsize);</span><br><span class="line">        <span class="type">uint64_t</span> sectionNameOffset = offset + temp-&gt;sh_name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过匹配名称，找到节头表中自定义节的表项，获取其 s_offset、s_size</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span>*)(fileByteArys + sectionNameOffset), encodeSectionName) == <span class="number">0</span>) &#123;</span><br><span class="line">            mySectionOffset = temp-&gt;sh_offset;</span><br><span class="line">            mySectionSize = temp-&gt;sh_size;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过此 s_offset、s_size，找到自定义节，进行加密</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint64_t</span> j = <span class="number">0</span>; j &lt; mySectionSize; j++) &#123;</span><br><span class="line">                fileByteArys[mySectionOffset + j] = ~fileByteArys[mySectionOffset + j]; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将此 s_offset、s_size 临时放置于 ELF头的 e_phoff、e_entry（不影响正常运行）</span></span><br><span class="line">    <span class="type">uint64_t</span> nSize = (mySectionSize + <span class="number">4095</span>) / <span class="number">4096</span>;</span><br><span class="line">    <span class="type">uint64_t</span> entryValue = ((<span class="type">uint64_t</span>)mySectionSize &lt;&lt; <span class="number">32</span>) | nSize;</span><br><span class="line">    <span class="built_in">memcpy</span>(fileByteArys + <span class="number">24</span>, &amp;entryValue, <span class="number">8</span>); </span><br><span class="line">    <span class="built_in">memcpy</span>(fileByteArys + <span class="number">32</span>, &amp;mySectionOffset, <span class="number">8</span>); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Section &#x27;%s&#x27; encrypted successfully!\n&quot;</span>, encodeSectionName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filePath = <span class="string">&quot;libnative-lib.so&quot;</span>;      <span class="comment">// 目标so         </span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* encodeSectionName = <span class="string">&quot;.mysection&quot;</span>;   <span class="comment">// 目标节</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* outputPath = <span class="string">&quot;libnative-lib_encrypted.so&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    FILE* file = fopen(filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">size_t</span> fileSize = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* fileByteArys = (<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(fileSize);</span><br><span class="line">    fread(fileByteArys, <span class="number">1</span>, fileSize, file);</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用加密函数</span></span><br><span class="line">    encrypt(fileByteArys, fileSize, encodeSectionName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写回文件</span></span><br><span class="line">    FILE* outFile = fopen(outputPath, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fwrite(fileByteArys, <span class="number">1</span>, fileSize, outFile);</span><br><span class="line">    fclose(outFile);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(fileByteArys);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encryption completed! Output file: %s\n&quot;</span>, outputPath);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对原so进行替换，再重打包及签名</p></li></ol><h2 id="函数加密"><a href="#函数加密" class="headerlink" title="函数加密"></a>函数加密</h2><ol><li><p>源码中，在.init_array中对目标函数进行解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getLibAddr</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">()</span> __<span class="title function_">attribute__</span><span class="params">((constructor))</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> base;</span><br><span class="line">    Elf64_Ehdr *ehdr;</span><br><span class="line"></span><br><span class="line">    base = getLibAddr();</span><br><span class="line">    ehdr = (Elf64_Ehdr *)base;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从 ELF头的 e_phoff 中取出目标函数的 st_value（具体原因见下方加密逻辑）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> text_addr = ehdr-&gt;e_phoff + base;   </span><br><span class="line">    <span class="comment">// 从 ELF头的 e_entry 中取出目标函数的 st_size</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nsize = ehdr-&gt;e_entry &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nblock = ehdr-&gt;e_entry &gt;&gt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mprotect((<span class="type">void</span> *)text_addr, <span class="number">4096</span> * nsize, PROT_READ | PROT_EXEC | PROT_WRITE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;mem privilege change failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; nblock; ++i) &#123;</span><br><span class="line">        <span class="type">char</span> *addr = (<span class="type">char</span> *)(text_addr + i);</span><br><span class="line">        *addr = ~(*addr);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mprotect((<span class="type">void</span> *)text_addr, <span class="number">4096</span> * nsize, PROT_READ | PROT_EXEC) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;mem privilege change failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Decrypt success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getLibAddr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> name[] = <span class="string">&quot;libnative-lib.so&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>], *temp;</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    FILE *fp;</span><br><span class="line"></span><br><span class="line">    pid = getpid();</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/maps&quot;</span>, pid);</span><br><span class="line">    fp = fopen(buf, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;open failed&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> _error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), fp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, name)) &#123;</span><br><span class="line">            temp = strtok(buf, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            ret = strtoul(temp, <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">_error:</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>针对编译后的so，找到目标函数进行加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">uint8_t</span>* fileByteArys, <span class="type">size_t</span> fileSize, <span class="type">const</span> <span class="type">char</span>* funcName)</span> &#123;</span><br><span class="line">    <span class="comment">// 解析ELF头</span></span><br><span class="line">    Elf64_Ehdr* ehdr = (Elf64_Ehdr*)fileByteArys;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过匹配程序头表的每个表项的 p_type，找到 PT_DYNAMIC 的表项，获取其 p_offset、p_filesz</span></span><br><span class="line">    <span class="type">uint64_t</span> dy_offset = <span class="number">0</span>, dy_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; ehdr-&gt;e_phnum; i++) &#123;</span><br><span class="line">        Elf64_Phdr* phdr = (Elf64_Phdr*)(fileByteArys + ehdr-&gt;e_phoff + i * ehdr-&gt;e_phentsize);</span><br><span class="line">        <span class="keyword">if</span> (phdr-&gt;p_type == PT_DYNAMIC) &#123;</span><br><span class="line">            dy_offset = phdr-&gt;p_offset;</span><br><span class="line">            dy_size = phdr-&gt;p_filesz;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过此 p_offset、p_filesz，找到 PT_DYNAMIC，读取其中的条目</span></span><br><span class="line">    <span class="type">uint64_t</span> strOffset = <span class="number">0</span>, strSize = <span class="number">0</span>, symbolOffset = <span class="number">0</span>, dynHashOffset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint64_t</span> i = <span class="number">0</span>; i &lt; dy_size / <span class="keyword">sizeof</span>(Elf64_Dyn); i++) &#123;</span><br><span class="line">        Elf64_Dyn* dyn = (Elf64_Dyn*)(fileByteArys + dy_offset + i * <span class="keyword">sizeof</span>(Elf64_Dyn));</span><br><span class="line">        <span class="keyword">switch</span> (dyn-&gt;d_tag) &#123;</span><br><span class="line">            <span class="keyword">case</span> DT_HASH:</span><br><span class="line">                dynHashOffset = dyn-&gt;d_un.d_ptr;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DT_STRTAB:</span><br><span class="line">                strOffset = dyn-&gt;d_un.d_ptr;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DT_SYMTAB:</span><br><span class="line">                symbolOffset = dyn-&gt;d_un.d_ptr;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DT_STRSZ:</span><br><span class="line">                strSize = dyn-&gt;d_un.d_val;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取 .dynstr 节中的字符串数据</span></span><br><span class="line">    <span class="type">uint8_t</span>* symbolStr = fileByteArys + strOffset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过匹配 st_name，找到 .dynsym 节中目标函数的表项，获取其 st_value、st_size</span></span><br><span class="line">    <span class="type">uint64_t</span> funcOffset = <span class="number">0</span>, funcSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> nbucket = *(<span class="type">uint32_t</span>*)(fileByteArys + dynHashOffset);</span><br><span class="line">    <span class="type">uint32_t</span> nchain = *(<span class="type">uint32_t</span>*)(fileByteArys + dynHashOffset + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算目标函数的哈希值</span></span><br><span class="line">    <span class="type">uint32_t</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="type">char</span>* p = funcName; *p; p++) &#123;</span><br><span class="line">        hash = (hash &lt;&lt; <span class="number">4</span>) + *p;</span><br><span class="line">        <span class="type">uint32_t</span> g = hash &amp; <span class="number">0xf0000000</span>;</span><br><span class="line">        <span class="keyword">if</span> (g) hash ^= g &gt;&gt; <span class="number">24</span>;</span><br><span class="line">        hash &amp;= ~g;</span><br><span class="line">    &#125;</span><br><span class="line">    hash %= nbucket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找目标函数的符号表项</span></span><br><span class="line">    <span class="type">uint32_t</span> funcIndex = *(<span class="type">uint32_t</span>*)(fileByteArys + dynHashOffset + <span class="number">8</span> + hash * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">while</span> (funcIndex != <span class="number">0</span>) &#123;</span><br><span class="line">        Elf64_Sym* sym = (Elf64_Sym*)(fileByteArys + symbolOffset + funcIndex * <span class="keyword">sizeof</span>(Elf64_Sym));</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* symName = (<span class="type">const</span> <span class="type">char</span>*)(symbolStr + sym-&gt;st_name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(symName, funcName) == <span class="number">0</span>) &#123;</span><br><span class="line">            funcOffset = sym-&gt;st_value;</span><br><span class="line">            funcSize = sym-&gt;st_size;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过此 st_value、st_size，找到目标函数，进行加密</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint64_t</span> i = <span class="number">0</span>; i &lt; funcSize; i++) &#123;</span><br><span class="line">                fileByteArys[funcOffset + i] ^= <span class="number">0xFF</span>; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将此 st_value、st_size 临时放置于 ELF头的 e_phoff、e_entry（不影响正常运行）</span></span><br><span class="line">            <span class="type">uint64_t</span> nSize = (funcSize + <span class="number">4095</span>) / <span class="number">4096</span>;</span><br><span class="line">            <span class="type">uint64_t</span> entryValue = ((<span class="type">uint64_t</span>)funcSize &lt;&lt; <span class="number">32</span>) | nSize;</span><br><span class="line">            <span class="built_in">memcpy</span>(fileByteArys + <span class="number">24</span>, &amp;entryValue, <span class="number">8</span>);</span><br><span class="line">            <span class="built_in">memcpy</span>(fileByteArys + <span class="number">32</span>, &amp;funcOffset, <span class="number">8</span>); </span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Function &#x27;%s&#x27; encrypted successfully!\n&quot;</span>, funcName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        funcIndex = *(<span class="type">uint32_t</span>*)(fileByteArys + dynHashOffset + <span class="number">8</span> + (<span class="number">2</span> + nbucket + funcIndex) * <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Function &#x27;%s&#x27; not found!\n&quot;</span>, funcName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filePath = <span class="string">&quot;libnative-lib.so&quot;</span>;  <span class="comment">// 目标so   </span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* funcName = <span class="string">&quot;myfunction&quot;</span>;        <span class="comment">// 目标函数</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* outputPath = <span class="string">&quot;libnative-lib_encrypted.so&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    FILE* file = fopen(filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">size_t</span> fileSize = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* fileByteArys = (<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(fileSize);</span><br><span class="line">    fread(fileByteArys, <span class="number">1</span>, fileSize, file);</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用加密函数</span></span><br><span class="line">    encrypt(fileByteArys, fileSize, funcName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写回文件</span></span><br><span class="line">    FILE* outFile = fopen(outputPath, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fwrite(fileByteArys, <span class="number">1</span>, fileSize, outFile);</span><br><span class="line">    fclose(outFile);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(fileByteArys);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encryption completed! Output file: %s\n&quot;</span>, outputPath);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对原so进行替换，再重打包及签名</p></li></ol><h2 id="自实现linker"><a href="#自实现linker" class="headerlink" title="自实现linker"></a>自实现linker</h2><p>大致原理是————加壳后的so加载时，.init_array触发自身loader 对内部so的解密、加载、soinfo替换<br>然而看了网上的帖子，几乎都是loader与so分离的情况，因此这里将两种情况都进行了记录</p><p>在此之前，先来看看基于内存中linker64 获取soinfo的方式<br><img src="/img/2025-1-15/7.jpg"></p><p>再看看so链接过程中涉及的一系列节区</p><ol><li>.dynamic, .dynstr, .dynsym<br><img src="/img/2025-1-15/4.png"></li><li>.rela.dyn, .rela.plt<br><img src="/img/2025-1-15/8.jpg"></li></ol><h3 id="loader与so分离"><a href="#loader与so分离" class="headerlink" title="loader与so分离"></a>loader与so分离</h3><ol><li><p>源码中，java层不加载目标so，只加载libloader.so<br>调用后者JNI函数，对前者进行解密、加载、soinfo替换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;link.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;defs.h&quot;</span>           <span class="comment">// 来自 .\IDA_Pro_7.7\plugins\hexrays_sdk\include\defs.h</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;linker_soinfo.h&quot;</span>  <span class="comment">// 来自 http://androidxref.com/9.0.0_r3/xref/bionic/linker/linker_soinfo.h</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rc4.h&quot;</span>            <span class="comment">// 自实现RC4</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAG_GNU_HASH   0x00000040</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__aarch64__) || defined(__x86_64__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAYBE_MAP_FLAG(x, from, to) (((x) &amp; (from)) ? (to) : 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFLAGS_TO_PROT(x) (MAYBE_MAP_FLAG((x), PF_X, PROT_EXEC) | \</span></span><br><span class="line"><span class="meta">                           MAYBE_MAP_FLAG((x), PF_R, PROT_READ) | \</span></span><br><span class="line"><span class="meta">                           MAYBE_MAP_FLAG((x), PF_W, PROT_WRITE))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_START(x) ((x) &amp; PAGE_MASK)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_OFFSET(x) ((x) &amp; ~PAGE_MASK)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_END(x) PAGE_START(((x) + (PAGE_SIZE - 1)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELFW(what) ELF64_ ## what</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_TYPE(sym) ((((Elf64_Xword)sym) &gt;&gt; 32) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_SYM(type) ((type) &amp; 0xffffffff)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">ElfW</span><span class="params">(Rela)</span> <span class="type">rel_t</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">plain_reloc_iterator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">plain_reloc_iterator</span>(<span class="type">rel_t</span>* rel_array, <span class="type">size_t</span> count)</span><br><span class="line">            : <span class="built_in">begin_</span>(rel_array), <span class="built_in">end_</span>(begin_ + count), <span class="built_in">current_</span>(begin_) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">has_next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current_ &lt; end_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">rel_t</span>* <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">rel_t</span>* <span class="type">const</span> begin_;</span><br><span class="line">    <span class="type">rel_t</span>* <span class="type">const</span> end_;</span><br><span class="line">    <span class="type">rel_t</span>* current_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">phdr_table_get_load_size</span><span class="params">(<span class="type">const</span> ElfW(Phdr)* phdr_table, <span class="type">size_t</span> phdr_count, ElfW(Addr)* out_min_vaddr)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) min_vaddr = UINTPTR_MAX;</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) max_vaddr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> found_pt_load = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; phdr_count; ++i) &#123;</span><br><span class="line">        <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr </span>= &amp;phdr_table[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (phdr-&gt;p_type != PT_LOAD) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        found_pt_load = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (phdr-&gt;p_vaddr &lt; min_vaddr) &#123;</span><br><span class="line">            min_vaddr = phdr-&gt;p_vaddr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (phdr-&gt;p_vaddr + phdr-&gt;p_memsz &gt; max_vaddr) &#123;</span><br><span class="line">            max_vaddr = phdr-&gt;p_vaddr + phdr-&gt;p_memsz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!found_pt_load) &#123;</span><br><span class="line">        min_vaddr = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    min_vaddr = <span class="built_in">PAGE_START</span>(min_vaddr);</span><br><span class="line">    max_vaddr = <span class="built_in">PAGE_END</span>(max_vaddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (out_min_vaddr != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        *out_min_vaddr = min_vaddr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_vaddr - min_vaddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">load</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ElfW</span>(Ehdr) header_;</span><br><span class="line">    <span class="type">size_t</span> phdr_num_;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *phdr_mmap_;</span><br><span class="line">    <span class="built_in">ElfW</span>(Phdr) *phdr_table_;</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) phdr_size_;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *load_start_;</span><br><span class="line">    <span class="type">size_t</span> load_size_;</span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) load_bias_;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span> *loaded_phdr_</span>;</span><br><span class="line">    <span class="type">void</span> *st;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">load</span>(<span class="type">void</span> *sta)</span><br><span class="line">            : <span class="built_in">phdr_num_</span>(<span class="number">0</span>), <span class="built_in">phdr_mmap_</span>(<span class="literal">NULL</span>), <span class="built_in">phdr_table_</span>(<span class="literal">NULL</span>), <span class="built_in">phdr_size_</span>(<span class="number">0</span>),</span><br><span class="line">              <span class="built_in">load_start_</span>(<span class="literal">NULL</span>), <span class="built_in">load_size_</span>(<span class="number">0</span>), <span class="built_in">load_bias_</span>(<span class="number">0</span>),</span><br><span class="line">              <span class="built_in">loaded_phdr_</span>(<span class="literal">NULL</span>), <span class="built_in">st</span>(sta) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">ReadProgramHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phdr_num_ = header_.e_phnum;</span><br><span class="line">        <span class="built_in">ElfW</span>(Addr) page_min = <span class="built_in">PAGE_START</span>(header_.e_phoff);</span><br><span class="line">        <span class="built_in">ElfW</span>(Addr) page_max = <span class="built_in">PAGE_END</span>(header_.e_phoff + (phdr_num_ * <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Phdr))));</span><br><span class="line">        <span class="built_in">ElfW</span>(Addr) page_offset = <span class="built_in">PAGE_OFFSET</span>(header_.e_phoff);</span><br><span class="line">        <span class="type">void</span> **c = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> **&gt;((<span class="type">char</span> *) (st) + page_min);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        phdr_table_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Phdr) *&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span> *&gt;(c) + page_offset);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">ReserveAddressSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">ElfW</span>(Addr) min_vaddr;</span><br><span class="line">        load_size_ = <span class="built_in">phdr_table_get_load_size</span>(phdr_table_, phdr_num_, &amp;min_vaddr);</span><br><span class="line"></span><br><span class="line">        <span class="type">uint8_t</span> *addr = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span> *&gt;(min_vaddr);</span><br><span class="line">        <span class="type">void</span> *start;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mmap_flags = MAP_PRIVATE | MAP_ANONYMOUS;</span><br><span class="line">        start = start = <span class="built_in">mmap</span>(<span class="literal">nullptr</span>, load_size_, PROT_NONE, mmap_flags, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        load_start_ = start;</span><br><span class="line">        load_bias_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span> *&gt;(load_start_) - addr;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">LoadSegments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; phdr_num_; ++i) &#123;</span><br><span class="line">            <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span> *phdr </span>= &amp;phdr_table_[i];</span><br><span class="line">            <span class="keyword">if</span> (phdr-&gt;p_type != PT_LOAD) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) seg_start = phdr-&gt;p_vaddr + load_bias_;</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) seg_end = seg_start + phdr-&gt;p_memsz;</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) seg_page_start = <span class="built_in">PAGE_START</span>(seg_start);</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) seg_page_end = <span class="built_in">PAGE_END</span>(seg_end);</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) seg_file_end = seg_start + phdr-&gt;p_filesz;</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) file_start = phdr-&gt;p_offset;</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) file_end = file_start + phdr-&gt;p_filesz;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) file_page_start = <span class="built_in">PAGE_START</span>(file_start);</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) file_length = file_end - file_page_start;</span><br><span class="line">            <span class="type">long</span>* pp= <span class="built_in">reinterpret_cast</span>&lt;<span class="type">long</span> *&gt;(seg_page_start);</span><br><span class="line">            <span class="built_in">mprotect</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> *&gt;(seg_page_start), seg_page_end-seg_page_start, PROT_WRITE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file_length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">void</span>* c=(<span class="type">char</span>*)st+file_page_start;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">memcpy</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> *&gt;(seg_page_start), c, file_length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((phdr-&gt;p_flags &amp; PF_W) != <span class="number">0</span> &amp;&amp; <span class="built_in">PAGE_OFFSET</span>(seg_file_end) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(seg_file_end), <span class="number">0</span>, PAGE_SIZE - <span class="built_in">PAGE_OFFSET</span>(seg_file_end));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            seg_file_end = <span class="built_in">PAGE_END</span>(seg_file_end);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (seg_page_end &gt; seg_file_end) &#123;</span><br><span class="line">                <span class="type">void</span>* zeromap = <span class="built_in">mmap</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(seg_file_end),</span><br><span class="line">                                     seg_page_end - seg_file_end,</span><br><span class="line">                                     <span class="built_in">PFLAGS_TO_PROT</span>(phdr-&gt;p_flags),</span><br><span class="line">                                     MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE,</span><br><span class="line">                                     <span class="number">-1</span>,</span><br><span class="line">                                     <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">loadhead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>   <span class="built_in">memcpy</span>(&amp;(header_),st,<span class="built_in">sizeof</span>(header_));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">CheckPhdr</span><span class="params">(ElfW(Addr) loaded)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span> *phdr_limit </span>= phdr_table_ + phdr_num_;</span><br><span class="line">        <span class="built_in">ElfW</span>(Addr) loaded_end = loaded + (phdr_num_ * <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Phdr)));</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">ElfW</span>(Phdr) *phdr = phdr_table_; phdr &lt; phdr_limit; ++phdr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (phdr-&gt;p_type != PT_LOAD) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) seg_start = phdr-&gt;p_vaddr + load_bias_;</span><br><span class="line">            <span class="built_in">ElfW</span>(Addr) seg_end = phdr-&gt;p_filesz + seg_start;</span><br><span class="line">            <span class="keyword">if</span> (seg_start &lt;= loaded &amp;&amp; loaded_end &lt;= seg_end) &#123;</span><br><span class="line">                loaded_phdr_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="built_in">ElfW</span>(Phdr) *&gt;(loaded);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">FindPHPtr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr_limit </span>= phdr_table_ + phdr_num_;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="built_in">ElfW</span>(Phdr)* phdr = phdr_table_; phdr &lt; phdr_limit; ++phdr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (phdr-&gt;p_type == PT_PHDR) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">CheckPhdr</span>(load_bias_ + phdr-&gt;p_vaddr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="built_in">ElfW</span>(Phdr)* phdr = phdr_table_; phdr &lt; phdr_limit; ++phdr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (phdr-&gt;p_type == PT_LOAD) &#123;</span><br><span class="line">                <span class="keyword">if</span> (phdr-&gt;p_offset == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">ElfW</span>(Addr)  elf_addr = load_bias_ + phdr-&gt;p_vaddr;</span><br><span class="line">                    <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Ehdr)</span>* ehdr </span>= <span class="built_in">reinterpret_cast</span>&lt;<span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Ehdr)</span>*&gt;<span class="params">(elf_addr)</span></span>;</span><br><span class="line">                    <span class="built_in">ElfW</span>(Addr)  offset = ehdr-&gt;e_phoff;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">CheckPhdr</span>((<span class="built_in">ElfW</span>(Addr))ehdr + offset);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借鉴linker64中 generate_handle()在IDA伪代码下显示的逻辑，自实现将handle转换为soinfo 并输出</span></span><br><span class="line">_QWORD* _dl__ZN6soinfo15generate_handleEv(<span class="type">unsigned</span> __int64 a1, <span class="type">void</span>* base) &#123;</span><br><span class="line">    <span class="type">void</span> *v3;</span><br><span class="line">    <span class="type">int64_t</span> v6;</span><br><span class="line">    <span class="type">uint64_t</span> v7;</span><br><span class="line">    <span class="type">uint64_t</span> *v8;</span><br><span class="line">    <span class="type">uint64_t</span> v9;</span><br><span class="line">    <span class="type">uint64_t</span> _dl_g_soinfo_handles_map = *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) base + <span class="number">0x1514B8</span>);</span><br><span class="line">    <span class="type">uint64_t</span> qword_1514C0 = *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) base + <span class="number">0x1514C0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( (a1 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( qword_1514C0 )</span><br><span class="line">        &#123;</span><br><span class="line">            v6 = qword_1514C0 - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ( ((qword_1514C0 - <span class="number">1</span>) &amp; qword_1514C0) != <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                v7 = a1;</span><br><span class="line">                <span class="keyword">if</span> ( qword_1514C0 &lt;= a1 )</span><br><span class="line">                    v7 = a1 - a1 / qword_1514C0 * qword_1514C0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                v7 = v6 &amp; a1;</span><br><span class="line">            &#125;</span><br><span class="line">            v8 = *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>**&gt;(_dl_g_soinfo_handles_map + <span class="number">8</span> * v7);</span><br><span class="line">            <span class="keyword">if</span> ( v8 )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    v8 = (<span class="type">uint64_t</span> *)*v8;</span><br><span class="line">                    <span class="keyword">if</span> ( !v8 )</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    v9 = v8[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> ( v9 == a1 )</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( v8[<span class="number">2</span>] == a1 )</span><br><span class="line">                        &#123;</span><br><span class="line">                            v3 = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(v8[<span class="number">3</span>]);</span><br><span class="line">                            <span class="keyword">if</span> (v3) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( ((qword_1514C0 - <span class="number">1</span>) &amp; qword_1514C0) != <span class="number">0</span> )</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> ( v9 &gt;= qword_1514C0 )</span><br><span class="line">                                v9 -= v9 / qword_1514C0 * qword_1514C0;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            v9 &amp;= v6;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> ( v9 != v7 )</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">uint64_t</span> *soinfo = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *)(v3));</span><br><span class="line">    <span class="keyword">return</span> soinfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> elf_header_off;</span><br><span class="line">    <span class="type">size_t</span> elf_header_size;</span><br><span class="line">    <span class="type">size_t</span> elf_program_header_table_num;</span><br><span class="line">    <span class="type">size_t</span> elf_program_header_table_off;</span><br><span class="line">    <span class="type">size_t</span> elf_program_header_table_size;</span><br><span class="line">&#125; Custom_Elf64_File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> e_ident[<span class="number">16</span>];</span><br><span class="line">    Elf64_Half e_type;</span><br><span class="line">    Elf64_Half e_machine;</span><br><span class="line">    Elf64_Word e_version;</span><br><span class="line">    Elf64_Addr e_entry;</span><br><span class="line">    Elf64_Off e_phoff;</span><br><span class="line">    Elf64_Off e_shoff;</span><br><span class="line">    Elf64_Word e_flags;</span><br><span class="line">    Elf64_Half e_ehsize;</span><br><span class="line">    Elf64_Half e_phentsize;</span><br><span class="line">    Elf64_Half e_phnum;</span><br><span class="line">    Elf64_Half e_shentsize;</span><br><span class="line">    Elf64_Half e_shnum;</span><br><span class="line">    Elf64_Half e_shstrndx;</span><br><span class="line">&#125; Custom_Elf64_Ehdr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">decrypt</span><span class="params">(<span class="type">void</span> *start, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *key = <span class="string">&quot;Ms135&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Custom_Elf64_File my_elf64_file;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;my_elf64_file, start, <span class="built_in">sizeof</span>(Custom_Elf64_File));</span><br><span class="line"></span><br><span class="line">    Custom_Elf64_Ehdr my_elf64_header;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">RC4</span>((<span class="type">char</span> *)start + my_elf64_file.elf_header_off, my_elf64_file.elf_header_size, key, <span class="built_in">strlen</span>(key), &amp;my_elf64_header) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Elf64_Phdr *phdr_table = (Elf64_Phdr *)<span class="built_in">malloc</span>(my_elf64_file.elf_program_header_table_size);</span><br><span class="line">    <span class="keyword">if</span> (!phdr_table) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">RC4</span>((<span class="type">char</span> *)start + my_elf64_file.elf_program_header_table_off, my_elf64_file.elf_program_header_table_size, key, <span class="built_in">strlen</span>(key), phdr_table) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(phdr_table);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; my_elf64_file.elf_program_header_table_num; i++) &#123;</span><br><span class="line">        Elf64_Phdr *phdr = &amp;phdr_table[i];</span><br><span class="line">        <span class="keyword">if</span> (phdr-&gt;p_type == PT_LOAD) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">RC4</span>((<span class="type">char</span> *)start + phdr-&gt;p_offset, phdr-&gt;p_filesz, key, <span class="built_in">strlen</span>(key), (<span class="type">char</span> *)start + phdr-&gt;p_offset) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(phdr_table);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(start, &amp;my_elf64_header, <span class="built_in">sizeof</span>(Custom_Elf64_Ehdr));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">char</span> *)start + my_elf64_file.elf_program_header_table_off, phdr_table, my_elf64_file.elf_program_header_table_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(phdr_table);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现核心功能的JNI函数</span></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_example_myapplication_MainActivity_loader</span><span class="params">(JNIEnv* env, jobject obj)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">void</span> *start;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stat</span> sb;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开目标so并映射</span></span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fstat</span>(fd, &amp;sb);</span><br><span class="line">    start = <span class="built_in">mmap</span>(<span class="literal">NULL</span>, sb.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (start == MAP_FAILED) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用解密函数</span></span><br><span class="line">    <span class="built_in">decrypt</span>(start, sb.st_size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装载</span></span><br><span class="line">    <span class="function">load <span class="title">a</span><span class="params">(start)</span></span>;</span><br><span class="line">    a.<span class="built_in">loadhead</span>();</span><br><span class="line">    a.<span class="built_in">ReadProgramHeader</span>();</span><br><span class="line">    a.<span class="built_in">ReserveAddressSpace</span>();</span><br><span class="line">    a.<span class="built_in">LoadSegments</span>();</span><br><span class="line">    a.<span class="built_in">FindPHPtr</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取linker64内存区域内 libloader.so的 soinfo</span></span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">dlopen</span>(<span class="string">&quot;libloader.so&quot;</span>, RTLD_LAZY);</span><br><span class="line">    <span class="keyword">if</span> (!handle) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> line[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> *startr;</span><br><span class="line">    <span class="type">int</span> *end;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">    FILE *fp = <span class="built_in">fopen</span>(<span class="string">&quot;/proc/self/maps&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fgets</span>(line, <span class="built_in">sizeof</span>(line), fp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;linker64&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">                startr = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span> *&gt;(<span class="built_in">strtoul</span>(<span class="built_in">strtok</span>(line, <span class="string">&quot;-&quot;</span>), <span class="literal">NULL</span>, <span class="number">16</span>));</span><br><span class="line">                end = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span> *&gt;(<span class="built_in">strtoul</span>(<span class="built_in">strtok</span>(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>), <span class="literal">NULL</span>, <span class="number">16</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">strtok</span>(line, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">                end = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span> *&gt;(<span class="built_in">strtoul</span>(<span class="built_in">strtok</span>(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>), <span class="literal">NULL</span>, <span class="number">16</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>** old_soinfo = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> **&gt;(_dl__ZN6soinfo15generate_handleEv((<span class="type">unsigned</span> __int64) handle, startr));</span><br><span class="line">    _QWORD *base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">56</span>);</span><br><span class="line">    Elf64_Ehdr aa;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* as = <span class="built_in">mmap</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> *&gt;(a.load_bias_), sb.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;aa, start, <span class="built_in">sizeof</span>(Elf64_Ehdr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析节头表、程序头表</span></span><br><span class="line">    <span class="type">int</span> secoff = aa.e_shoff;</span><br><span class="line">    <span class="type">int</span> secsnum = aa.e_shnum;</span><br><span class="line">    Elf64_Shdr bb;</span><br><span class="line">    Elf64_Phdr cc;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;bb, (<span class="type">char</span> *)(as) + aa.e_shoff + aa.e_shstrndx * aa.e_shentsize, <span class="built_in">sizeof</span>(Elf64_Shdr));</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;cc, (<span class="type">char</span> *)(start) + aa.e_phoff, <span class="built_in">sizeof</span>(Elf64_Phdr));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> secstr[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">char</span> dynstr[<span class="number">10240</span>];</span><br><span class="line">    <span class="type">int</span> needed = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mynedd[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(secstr, (<span class="type">char</span> *)(start) + bb.sh_offset, bb.sh_size);</span><br><span class="line">    <span class="built_in">mprotect</span>((<span class="type">void</span>*)<span class="built_in">PAGE_START</span>((<span class="built_in">ElfW</span>(Addr))((<span class="type">char</span> *)start)), a.load_size_, PROT_WRITE | PROT_READ | PROT_EXEC);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改（替换）soinfo</span></span><br><span class="line">    <span class="built_in">mprotect</span>((<span class="type">void</span>*)<span class="built_in">PAGE_START</span>((<span class="built_in">ElfW</span>(Addr))((<span class="type">char</span> *)old_soinfo + <span class="number">16</span>)), <span class="number">300</span>, PROT_WRITE | PROT_READ);</span><br><span class="line">    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(a.loaded_phdr_);</span><br><span class="line">    *(<span class="type">int</span>*)((<span class="type">char</span>*)(old_soinfo) + <span class="number">8</span>) = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(a.phdr_num_);</span><br><span class="line">    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">16</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(a.load_start_);</span><br><span class="line">    *(<span class="type">int</span>*)((<span class="type">char</span>*)(old_soinfo) + <span class="number">24</span>) = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(a.load_size_);</span><br><span class="line">    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">256</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(start);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 PT_DYNAMIC 段并更新 soinfo</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; y &lt; aa.e_phnum; ++y) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;cc, (<span class="type">char</span> *)(start) + aa.e_phoff + <span class="built_in">sizeof</span>(Elf64_Phdr) * y, <span class="built_in">sizeof</span>(Elf64_Phdr));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cc.p_type == PT_DYNAMIC) &#123;</span><br><span class="line">            Elf64_Dyn dd;</span><br><span class="line">            <span class="keyword">for</span>(y = <span class="number">0</span>; y == <span class="number">0</span> || dd.d_tag != <span class="number">0</span>; ++y) &#123;</span><br><span class="line">                <span class="built_in">memcpy</span>(&amp;dd, (<span class="type">char</span> *)(start) + cc.p_offset + y * <span class="built_in">sizeof</span>(Elf64_Dyn), <span class="built_in">sizeof</span>(Elf64_Dyn));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_GNU_HASH) &#123;</span><br><span class="line">                    <span class="type">size_t</span> gnu_nbucket_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;((<span class="type">char</span>*)start + dd.d_un.d_ptr)[<span class="number">0</span>];</span><br><span class="line">                    <span class="type">uint32_t</span> gnu_maskwords_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;((<span class="type">char</span>*)start + dd.d_un.d_ptr)[<span class="number">2</span>];</span><br><span class="line">                    <span class="type">uint32_t</span> gnu_shift2_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;((<span class="type">char</span>*)start + dd.d_un.d_ptr)[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">ElfW</span>(Addr)* gnu_bloom_filter_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)*&gt;((<span class="type">char</span>*)start + dd.d_un.d_ptr + <span class="number">16</span>);</span><br><span class="line">                    <span class="type">uint32_t</span>* gnu_bucket_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>*&gt;(gnu_bloom_filter_ + gnu_maskwords_);</span><br><span class="line">                    <span class="type">uint32_t</span>* gnu_chain_ = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span> *&gt;(gnu_bucket_ + gnu_nbucket_ - <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span> *&gt;((<span class="type">char</span> *) start + dd.d_un.d_ptr)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">                    --gnu_maskwords_;</span><br><span class="line">                    <span class="type">uint32_t</span> flags_ = FLAG_GNU_HASH | flags_;</span><br><span class="line"></span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">size_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">344</span>) = gnu_nbucket_;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">368</span>) = gnu_maskwords_;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">372</span>) = gnu_shift2_;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)**&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">376</span>) = gnu_bloom_filter_;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span> **&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">352</span>) = gnu_bucket_;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span> **&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">360</span>) = gnu_chain_;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">48</span>) |= FLAG_GNU_HASH;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_REL) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">48</span>) = dd.d_un.d_val / <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Rela));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_STRTAB) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">104</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(</span><br><span class="line">                            (<span class="type">char</span> *) start + dd.d_un.d_ptr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_SYMTAB) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">120</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(</span><br><span class="line">                            (<span class="type">char</span> *) start + dd.d_un.d_ptr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_STRSZ) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span> **&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">56</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;((<span class="type">char</span> *) start + dd.d_un.d_ptr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_SYMENT) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">64</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(</span><br><span class="line">                            (<span class="type">char</span> *) start + dd.d_un.d_ptr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_PLTRELSZ) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">336</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(</span><br><span class="line">                            (<span class="type">char</span> *) start + dd.d_un.d_ptr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_PLTGOT) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">336</span>) = dd.d_un.d_val / <span class="built_in">sizeof</span>(<span class="built_in">ElfW</span>(Rela));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_NEEDED) &#123;</span><br><span class="line">                    mynedd[needed] = dd.d_un.d_val;</span><br><span class="line">                    needed++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_VERNEED) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">440</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(</span><br><span class="line">                            (<span class="type">char</span>*)start + dd.d_un.d_ptr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_VERSYM) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">472</span>) = dd.d_un.d_val;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dd.d_tag == DT_VERDEF) &#123;</span><br><span class="line">                    *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">464</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span>&gt;(</span><br><span class="line">                            (<span class="type">char</span> *) start + dd.d_un.d_ptr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* strtab_ = *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span> **&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">56</span>);</span><br><span class="line">    Elf64_Sym* symtab_ = *<span class="built_in">reinterpret_cast</span>&lt;Elf64_Sym **&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">64</span>);</span><br><span class="line">    <span class="function">plain_reloc_iterator <span class="title">myit</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">reinterpret_cast</span>&lt;<span class="type">rel_t</span> *&gt;(*<span class="keyword">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;(</span></span></span><br><span class="line"><span class="params"><span class="function">                    (<span class="type">char</span> *) old_soinfo + <span class="number">104</span>)), *<span class="keyword">reinterpret_cast</span>&lt;<span class="type">size_t</span> *&gt;((<span class="type">char</span> *) old_soinfo + <span class="number">48</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 地址重定位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> idx = <span class="number">0</span>; myit.<span class="built_in">has_next</span>(); ++idx) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> rel = myit.<span class="built_in">next</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">ElfW</span>(Word) type = <span class="built_in">ELFW</span>(R_TYPE)(rel-&gt;r_info);</span><br><span class="line">        <span class="built_in">ElfW</span>(Word) sym = <span class="built_in">ELFW</span>(R_SYM)(rel-&gt;r_info);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">ElfW</span>(Addr) sym_addr = <span class="number">0</span>;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *sym_name = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> Elf64_Sym *s = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        sym_name = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span> *&gt;(strtab_ + symtab_[sym].st_name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s = <span class="number">0</span>; s &lt; needed; ++s) &#123;</span><br><span class="line">            <span class="comment">// 加载依赖的so</span></span><br><span class="line">            <span class="type">void</span>* handle = <span class="built_in">dlopen</span>(strtab_ + mynedd[s], RTLD_NOW);</span><br><span class="line">            <span class="keyword">if</span> (!handle) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            sym_addr = <span class="built_in">reinterpret_cast</span>&lt;Elf64_Addr&gt;(<span class="built_in">dlsym</span>(handle, sym_name));</span><br><span class="line">            <span class="keyword">if</span> (sym_addr != <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1026</span>:</span><br><span class="line">                *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint64_t</span> *&gt;((<span class="type">char</span> *) start + rel-&gt;r_offset) = sym_addr;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">munmap</span>(start, sb.st_size);</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>针对编译后的目标so，加密保存为自定义文件格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rc4.h&quot;</span>    <span class="comment">// 自实现RC4</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> elf_header_off;</span><br><span class="line">    <span class="type">size_t</span> elf_header_size;</span><br><span class="line">    <span class="type">size_t</span> elf_program_header_table_num;</span><br><span class="line">    <span class="type">size_t</span> elf_program_header_table_off;</span><br><span class="line">    <span class="type">size_t</span> elf_program_header_table_size;</span><br><span class="line">&#125; Custom_Elf64_File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> e_ident[<span class="number">16</span>];</span><br><span class="line">    Elf64_Half e_type;</span><br><span class="line">    Elf64_Half e_machine;</span><br><span class="line">    Elf64_Word e_version;</span><br><span class="line">    Elf64_Addr e_entry;</span><br><span class="line">    Elf64_Off e_phoff;</span><br><span class="line">    Elf64_Off e_shoff;</span><br><span class="line">    Elf64_Word e_flags;</span><br><span class="line">    Elf64_Half e_ehsize;</span><br><span class="line">    Elf64_Half e_phentsize;</span><br><span class="line">    Elf64_Half e_phnum;</span><br><span class="line">    Elf64_Half e_shentsize;</span><br><span class="line">    Elf64_Half e_shnum;</span><br><span class="line">    Elf64_Half e_shstrndx;</span><br><span class="line">&#125; Custom_Elf64_Ehdr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *input, <span class="type">size_t</span> size, <span class="type">char</span> *output)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *key = <span class="string">&quot;Ms135&quot;</span>;</span><br><span class="line">    Elf64_Ehdr* elf64_header = (Elf64_Ehdr*)input;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义 ELF 文件结构</span></span><br><span class="line">    Custom_Elf64_File my_elf64_file = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    my_elf64_file.elf_header_off = size + elf64_header-&gt;e_phnum * elf64_header-&gt;e_phentsize;</span><br><span class="line">    my_elf64_file.elf_header_size = elf64_header-&gt;e_ehsize;</span><br><span class="line">    my_elf64_file.elf_program_header_table_num = elf64_header-&gt;e_phnum;</span><br><span class="line">    my_elf64_file.elf_program_header_table_off = size;</span><br><span class="line">    my_elf64_file.elf_program_header_table_size = elf64_header-&gt;e_phnum * elf64_header-&gt;e_phentsize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义 ELF头</span></span><br><span class="line">    Custom_Elf64_Ehdr my_elf64_header = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    my_elf64_header.e_ehsize = elf64_header-&gt;e_ehsize;</span><br><span class="line">    my_elf64_header.e_entry = elf64_header-&gt;e_entry;</span><br><span class="line">    my_elf64_header.e_flags = elf64_header-&gt;e_flags;</span><br><span class="line">    my_elf64_header.e_machine = elf64_header-&gt;e_machine;</span><br><span class="line">    my_elf64_header.e_shentsize = elf64_header-&gt;e_shentsize;</span><br><span class="line">    my_elf64_header.e_shnum = elf64_header-&gt;e_shnum;</span><br><span class="line">    my_elf64_header.e_shoff = elf64_header-&gt;e_shoff;</span><br><span class="line">    my_elf64_header.e_shstrndx = elf64_header-&gt;e_shstrndx;</span><br><span class="line">    my_elf64_header.e_phentsize = elf64_header-&gt;e_phentsize;</span><br><span class="line">    my_elf64_header.e_phnum = elf64_header-&gt;e_phnum;</span><br><span class="line">    my_elf64_header.e_phoff = my_elf64_file.elf_program_header_table_off;</span><br><span class="line">    <span class="built_in">strncpy</span>((<span class="type">char</span>*)my_elf64_header.e_ident, <span class="string">&quot;\x7F&quot;</span> <span class="string">&quot;ELF&quot;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密 ELF头</span></span><br><span class="line">    <span class="keyword">if</span> (RC4(&amp;my_elf64_header, my_elf64_header.e_ehsize, key, <span class="built_in">strlen</span>(key), output + my_elf64_file.elf_header_off) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密程序头表</span></span><br><span class="line">    <span class="keyword">if</span> (RC4(input + elf64_header-&gt;e_phoff, elf64_header-&gt;e_phnum * elf64_header-&gt;e_phentsize, key, <span class="built_in">strlen</span>(key), output + my_elf64_file.elf_program_header_table_off) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密 PT_LOAD 段</span></span><br><span class="line">    Elf64_Phdr *p = (Elf64_Phdr*)(input + elf64_header-&gt;e_phoff);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; elf64_header-&gt;e_phnum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;p_type == PT_LOAD) &#123;</span><br><span class="line">            <span class="keyword">if</span> (RC4(input + p-&gt;p_offset, p-&gt;p_filesz, key, <span class="built_in">strlen</span>(key), output + p-&gt;p_offset) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p = (Elf64_Phdr*)((<span class="type">char</span>*)p + <span class="keyword">sizeof</span>(Elf64_Phdr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span>, <span class="keyword">sizeof</span>(Elf64_Ehdr));</span><br><span class="line">    <span class="built_in">memcpy</span>(output, &amp;my_elf64_file, <span class="keyword">sizeof</span>(Custom_Elf64_File));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filePath = <span class="string">&quot;libnative-lib.so&quot;</span>;      <span class="comment">// 目标so</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* outputPath = <span class="string">&quot;libnative-lib_encrypted.so&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    FILE* file = fopen(filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">size_t</span> fileSize = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* fileByteArys = (<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(fileSize);</span><br><span class="line">    fread(fileByteArys, <span class="number">1</span>, fileSize, file);</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用加密函数</span></span><br><span class="line">    encrypt((<span class="type">const</span> <span class="type">char</span>*)fileByteArys, fileSize, (<span class="type">char</span>*)fileByteArys);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写回文件</span></span><br><span class="line">    FILE* outFile = fopen(outputPath, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fwrite(fileByteArys, <span class="number">1</span>, fileSize, outFile);</span><br><span class="line">    fclose(outFile);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(fileByteArys);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encryption completed! Output file: %s\n&quot;</span>, outputPath);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对原so进行替换，再重打包及签名</p></li></ol><h3 id="loader与so合并"><a href="#loader与so合并" class="headerlink" title="loader与so合并"></a>loader与so合并</h3><p>注意到这种情况和UPX壳 有共通之处，因此去看了UPX源码，借鉴其实现原理<br>主要关注 p_lx_elf.cpp、linker.cpp、packer.cpp、p_unix.cpp</p><p>这里插一嘴，面对安卓下的so，UPX只会在其是arm架构时才提示“use –android-shlib”<br>然而只要是安卓下的so，无论架构，其实都需要加上”–android-shlib”，否则UPX会抹去————<br>1.ELF头 e_shoff, e_shnum, e_shtrndx 字段<br>2.节头表<br>3..shstrtab 节<br>而 Android 7.0之后增加了对节头表的检查，不通过则apk无法运行</p><h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><ul><li><p>BR</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_example_myapplication_MainActivity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">add_junkcode</span><span class="params">()</span> __<span class="title">attribute__</span><span class="params">((always_inline))</span> </span>&#123;     <span class="comment">// 设置编译器将函数调用替换为函数体的实际代码，实现花指令嵌入</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __aarch64__</span></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>&#125;;     <span class="comment">// arr[6] 用于存放后续跳转的偏移量</span></span><br><span class="line">    <span class="keyword">register</span> <span class="type">long</span> x7 __asm__(<span class="string">&quot;x7&quot;</span>) = (<span class="type">long</span>) arr;</span><br><span class="line">    __asm__ __volatile__(</span><br><span class="line">        <span class="string">&quot;mov x8, #0x1\n&quot;</span></span><br><span class="line">        <span class="string">&quot;mov x10, #0x2\n&quot;</span></span><br><span class="line">        <span class="string">&quot;ldr w10, [x7,#24]\n&quot;</span>   <span class="comment">// 读取 arr[6]</span></span><br><span class="line">        <span class="string">&quot;adr x9, .\n&quot;</span>           <span class="comment">// 保存当前指令地址作为后续跳转的基址</span></span><br><span class="line">        <span class="string">&quot;mov x7, #03\n&quot;</span></span><br><span class="line">        <span class="string">&quot;add x9, x9, x10\n&quot;</span>     <span class="comment">// 通过基址+偏移量，构造出后续跳转的地址</span></span><br><span class="line">        <span class="string">&quot;mul x8, x9, x8\n&quot;</span></span><br><span class="line">        <span class="string">&quot;adr x9, .\n&quot;</span>     </span><br><span class="line">        <span class="string">&quot;br x8\n&quot;</span>               <span class="comment">// 进行间接跳转，即来到当前指令的 下一条指令处     </span></span><br><span class="line">        : <span class="string">&quot;=r&quot;</span>(x7)             </span><br><span class="line">        : <span class="string">&quot;0&quot;</span>(x7)              </span><br><span class="line">        : <span class="string">&quot;memory&quot;</span>, <span class="string">&quot;cc&quot;</span>       </span><br><span class="line">    );</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jboolean</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_myapplication_MainActivity_check</span><span class="params">(JNIEnv* env, jobject <span class="comment">/* this */</span>, jstring username, jstring password)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cUsername = env-&gt;<span class="built_in">GetStringUTFChars</span>(username, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">add_junkcode</span>();    <span class="comment">// 添加花指令</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cPassword = env-&gt;<span class="built_in">GetStringUTFChars</span>(password, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">add_junkcode</span>();    <span class="comment">// 添加花指令</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cUsername, <span class="string">&quot;Ms&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(cPassword, <span class="string">&quot;135&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        result = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add_junkcode</span>();    <span class="comment">// 添加花指令</span></span><br><span class="line"></span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(username, cUsername);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(password, cPassword);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result ? JNI_TRUE : JNI_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CSEL + BR</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_example_myapplication_MainActivity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">add_conditional_junkcode</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> __<span class="title">attribute__</span><span class="params">((always_inline))</span> </span>&#123;     <span class="comment">// 设置编译器将函数调用替换为函数体的实际代码，实现花指令嵌入</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __aarch64__</span></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>&#125;;     <span class="comment">// arr[2] 用于存放后续跳转的偏移量</span></span><br><span class="line">    <span class="keyword">register</span> <span class="type">long</span> x7 __asm__(<span class="string">&quot;x7&quot;</span>) = (<span class="type">long</span>) arr;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> x11 __asm__(<span class="string">&quot;x11&quot;</span>) = a;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> x12 __asm__(<span class="string">&quot;x12&quot;</span>) = b;</span><br><span class="line">    __asm__ __volatile__(</span><br><span class="line">            <span class="string">&quot;mov x8, #24\n&quot;</span></span><br><span class="line">            <span class="string">&quot;mov x9, #8\n&quot;</span></span><br><span class="line">            <span class="string">&quot;cmp x11, x12\n&quot;</span></span><br><span class="line">            <span class="string">&quot;csel x8, x8, x9, EQ\n&quot;</span> <span class="comment">// 比较得出 后续待操作数据在 arr[] 中索引为 2</span></span><br><span class="line">            <span class="string">&quot;ldr w10, [x7,x8]\n&quot;</span>    <span class="comment">// 读取 arr[2]</span></span><br><span class="line">            <span class="string">&quot;adr x9, .\n&quot;</span>           <span class="comment">// 保存当前指令地址作为后续跳转的基址</span></span><br><span class="line">            <span class="string">&quot;mov x7, #03\n&quot;</span></span><br><span class="line">            <span class="string">&quot;add x8, x9, x10\n&quot;</span>     <span class="comment">// 通过基址+偏移量，构造出后续跳转的地址</span></span><br><span class="line">            <span class="string">&quot;adr x9, .\n&quot;</span></span><br><span class="line">            <span class="string">&quot;br x8\n&quot;</span>               <span class="comment">// 进行间接跳转，即来到当前指令的 下一条指令处</span></span><br><span class="line">            : <span class="string">&quot;=r&quot;</span>(x7)</span><br><span class="line">            : <span class="string">&quot;r&quot;</span>(x11), <span class="string">&quot;r&quot;</span>(x12), <span class="string">&quot;0&quot;</span>(x7)</span><br><span class="line">            : <span class="string">&quot;memory&quot;</span>, <span class="string">&quot;cc&quot;</span></span><br><span class="line">    );</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jboolean</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_myapplication_MainActivity_check</span><span class="params">(JNIEnv* env, jobject <span class="comment">/* this */</span>, jstring username, jstring password)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cUsername = env-&gt;<span class="built_in">GetStringUTFChars</span>(username, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">add_conditional_junkcode</span>(<span class="number">0</span>, <span class="number">1</span>);    <span class="comment">// 添加包含条件选择的花指令</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cPassword = env-&gt;<span class="built_in">GetStringUTFChars</span>(password, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">add_conditional_junkcode</span>(<span class="number">0</span>, <span class="number">1</span>);    <span class="comment">// 添加包含条件选择的花指令</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cUsername, <span class="string">&quot;Ms&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(cPassword, <span class="string">&quot;135&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        result = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add_conditional_junkcode</span>(<span class="number">0</span>, <span class="number">1</span>);    <span class="comment">// 添加包含条件选择的花指令</span></span><br><span class="line"></span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(username, cUsername);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(password, cPassword);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result ? JNI_TRUE : JNI_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DCD + RET</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_example_myapplication_MainActivity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">modify_return</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __aarch64__</span></span><br><span class="line">    __asm__ __volatile__(</span><br><span class="line">            <span class="string">&quot;ldr w0, [x30,w0,UXTW#2]\n&quot;</span> <span class="comment">// W0 = [X30 + 0x4 &lt;&lt; 2] = 20，从DCD表中读取返回地址的增量</span></span><br><span class="line">            <span class="string">&quot;add x30, x30, w0,UXTW\n&quot;</span>   <span class="comment">// X30 += W0，修改返回地址，RET后即来到DBD表后方指令处</span></span><br><span class="line">            :</span><br><span class="line">            :</span><br><span class="line">            : <span class="string">&quot;memory&quot;</span>, <span class="string">&quot;cc&quot;</span></span><br><span class="line">            );</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_junkcode</span><span class="params">()</span> __<span class="title">attribute__</span><span class="params">((always_inline))</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __aarch64__</span></span><br><span class="line">    __asm__ __volatile__(</span><br><span class="line">            <span class="string">&quot;mov x0, #0x4\n&quot;</span>        <span class="comment">// 数据在下方DCD表中的偏移</span></span><br><span class="line">            <span class="string">&quot;bl modify_return\n&quot;</span>    <span class="comment">// 返回地址被存入 X30</span></span><br><span class="line">            <span class="string">&quot;.word 12\n&quot;</span>            <span class="comment">// 原返回地址处</span></span><br><span class="line">            <span class="string">&quot;.word 6\n&quot;</span></span><br><span class="line">            <span class="string">&quot;.word 18\n&quot;</span></span><br><span class="line">            <span class="string">&quot;.word 4\n&quot;</span></span><br><span class="line">            <span class="string">&quot;.word 20\n&quot;</span>            <span class="comment">// 存储返回地址的增量</span></span><br><span class="line">            :</span><br><span class="line">            :</span><br><span class="line">            : <span class="string">&quot;memory&quot;</span>, <span class="string">&quot;cc&quot;</span></span><br><span class="line">            );</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jboolean</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_myapplication_MainActivity_check</span><span class="params">(JNIEnv* env, jobject <span class="comment">/* this */</span>, jstring username, jstring password)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cUsername = env-&gt;<span class="built_in">GetStringUTFChars</span>(username, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">add_junkcode</span>();    <span class="comment">// 添加花指令</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cPassword = env-&gt;<span class="built_in">GetStringUTFChars</span>(password, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">add_junkcode</span>();    <span class="comment">// 添加花指令</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cUsername, <span class="string">&quot;Ms&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(cPassword, <span class="string">&quot;135&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        result = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add_junkcode</span>();    <span class="comment">// 添加花指令</span></span><br><span class="line"></span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(username, cUsername);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(password, cPassword);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result ? JNI_TRUE : JNI_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// extern &quot;C&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="OLLVM"><a href="#OLLVM" class="headerlink" title="OLLVM"></a>OLLVM</h2><p>大致原理是————基于LLVM编译器框架，使用特定Pass对IR进行混淆<br>这里选择版本 <a href="https://github.com/heroims/obfuscator/tree/llvm-9.0.1">obfuscator-llvm-9.0.1</a>，pass的存储目录为 lib\Transforms\Obfuscation</p><h3 id="原pass"><a href="#原pass" class="headerlink" title="原pass"></a>原pass</h3><ul><li><p>指令替换（Substitution.cpp）</p></li><li><p>虚假控制流（BogusControlFlow.cpp）</p></li><li><p>控制流平坦化（Flattening.cpp）</p></li><li><p>基本块分割（SplitBasicBlocks.cpp）</p></li><li><p>字符串混淆（StringObfuscation.cpp）</p></li></ul><h3 id="魔改pass"><a href="#魔改pass" class="headerlink" title="魔改pass"></a>魔改pass</h3><ul><li>控制流平坦化</li></ul><p>loopEntry 仅作为入口块，分发逻辑转移至 loopEnd；同时引入 loopEnd1、loopEnd2 多个分发块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===- Flattening.cpp - Flattening Obfuscation pass------------------------===//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                     The LLVM Compiler Infrastructure</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This file is distributed under the University of Illinois Open Source</span></span><br><span class="line"><span class="comment">// License. See LICENSE.TXT for details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===----------------------------------------------------------------------===//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This file implements the flattening pass</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===----------------------------------------------------------------------===//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Obfuscation/Flattening.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Obfuscation/CryptoUtils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_TYPE <span class="string">&quot;flattening&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stats</span></span><br><span class="line"><span class="built_in">STATISTIC</span>(Flattened, <span class="string">&quot;Functions flattened&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Flattening</span> : <span class="keyword">public</span> FunctionPass &#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span> ID; <span class="comment">// Pass identification, replacement for typeid</span></span><br><span class="line">  <span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Flattening</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line">  <span class="built_in">Flattening</span>(<span class="type">bool</span> flag) : <span class="built_in">FunctionPass</span>(ID) &#123; <span class="keyword">this</span>-&gt;flag = flag; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">flatten</span><span class="params">(Function *f)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="comment">// namespace</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Flattening::ID = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;Flattening&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;flattening&quot;</span>, <span class="string">&quot;Call graph flattening&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">Pass *<span class="title">llvm::createFlattening</span><span class="params">(<span class="type">bool</span> flag)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Flattening</span>(flag); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Flattening::runOnFunction</span><span class="params">(Function &amp;F)</span> </span>&#123;</span><br><span class="line">  Function *tmp = &amp;F;</span><br><span class="line">  <span class="comment">// Do we obfuscate</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">toObfuscate</span>(flag, tmp, <span class="string">&quot;fla&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">flatten</span>(tmp)) &#123;</span><br><span class="line">      ++Flattened;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Flattening::flatten</span><span class="params">(Function *f)</span> </span>&#123;</span><br><span class="line">  std::vector&lt;BasicBlock *&gt; origBB;</span><br><span class="line">  BasicBlock *loopEntry;</span><br><span class="line">  BasicBlock *loopEnd1;  <span class="comment">/* 新增：第二个循环结束块 */</span></span><br><span class="line">  BasicBlock *loopEnd2;  <span class="comment">/* 新增：第二个循环结束块 */</span></span><br><span class="line">  LoadInst *load1;       <span class="comment">/* 新增：第一个加载指令 */</span></span><br><span class="line">  LoadInst *load2;       <span class="comment">/* 新增：第二个加载指令 */</span></span><br><span class="line">  SwitchInst *switch1;   <span class="comment">/* 新增：第一个switch指令 */</span></span><br><span class="line">  SwitchInst *switch2;   <span class="comment">/* 新增：第二个switch指令 */</span></span><br><span class="line">  AllocaInst *switchVar;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// SCRAMBLER</span></span><br><span class="line">  <span class="type">char</span> scrambling_key[<span class="number">16</span>];</span><br><span class="line">  llvm::cryptoutils-&gt;<span class="built_in">get_bytes</span>(scrambling_key, <span class="number">16</span>);</span><br><span class="line">  <span class="comment">// END OF SCRAMBLER</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LLVM_VERSION_MAJOR &gt;= 9</span></span><br><span class="line">    <span class="comment">// &gt;=9.0, LowerSwitchPass depends on LazyValueInfoWrapperPass, which cause AssertError.</span></span><br><span class="line">    <span class="comment">// So I move LowerSwitchPass into register function, just before FlatteningPass.</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="comment">// Lower switch</span></span><br><span class="line">  FunctionPass *lower = <span class="built_in">createLowerSwitchPass</span>();</span><br><span class="line">  lower-&gt;<span class="built_in">runOnFunction</span>(*f);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Save all original BB</span></span><br><span class="line">  <span class="keyword">for</span> (Function::iterator i = f-&gt;<span class="built_in">begin</span>(); i != f-&gt;<span class="built_in">end</span>(); ++i) &#123;</span><br><span class="line">    BasicBlock *tmp = &amp;*i;</span><br><span class="line">    <span class="keyword">if</span> (tmp-&gt;<span class="built_in">isEHPad</span>() || tmp-&gt;<span class="built_in">isLandingPad</span>()) &#123;</span><br><span class="line">      <span class="built_in">errs</span>()&lt;&lt;f-&gt;<span class="built_in">getName</span>()&lt;&lt;<span class="string">&quot; Contains Exception Handing Instructions and is unsupported for flattening in the open-source version of Hikari.\n&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    origBB.<span class="built_in">push_back</span>(tmp);</span><br><span class="line"></span><br><span class="line">    BasicBlock *bb = &amp;*i;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isa</span>&lt;InvokeInst&gt;(bb-&gt;<span class="built_in">getTerminator</span>())) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Nothing to flatten</span></span><br><span class="line">  <span class="keyword">if</span> (origBB.<span class="built_in">size</span>() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove first BB</span></span><br><span class="line">  origBB.<span class="built_in">erase</span>(origBB.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get a pointer on the first BB</span></span><br><span class="line">  Function::iterator tmp = f-&gt;<span class="built_in">begin</span>(); <span class="comment">//++tmp;</span></span><br><span class="line">  BasicBlock *insert = &amp;*tmp;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If main begin with an if</span></span><br><span class="line">  BranchInst *br = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isa</span>&lt;BranchInst&gt;(insert-&gt;<span class="built_in">getTerminator</span>())) &#123;</span><br><span class="line">    br = <span class="built_in">cast</span>&lt;BranchInst&gt;(insert-&gt;<span class="built_in">getTerminator</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((br != <span class="literal">NULL</span> &amp;&amp; br-&gt;<span class="built_in">isConditional</span>()) ||</span><br><span class="line">      insert-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getNumSuccessors</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    BasicBlock::iterator i = insert-&gt;<span class="built_in">end</span>();</span><br><span class="line">    --i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (insert-&gt;<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      --i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BasicBlock *tmpBB = insert-&gt;<span class="built_in">splitBasicBlock</span>(i, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">    origBB.<span class="built_in">insert</span>(origBB.<span class="built_in">begin</span>(), tmpBB);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove jump</span></span><br><span class="line">  insert-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create switch variable and set as it</span></span><br><span class="line">  switchVar =</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">AllocaInst</span>(Type::<span class="built_in">getInt32Ty</span>(f-&gt;<span class="built_in">getContext</span>()), <span class="number">0</span>, <span class="string">&quot;switchVar&quot;</span>, insert);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">StoreInst</span>(</span><br><span class="line">      ConstantInt::<span class="built_in">get</span>(Type::<span class="built_in">getInt32Ty</span>(f-&gt;<span class="built_in">getContext</span>()),</span><br><span class="line">                       llvm::cryptoutils-&gt;<span class="built_in">scramble32</span>(<span class="number">0</span>, scrambling_key)),</span><br><span class="line">      switchVar, insert);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create main loop</span></span><br><span class="line">  loopEntry = BasicBlock::<span class="built_in">Create</span>(f-&gt;<span class="built_in">getContext</span>(), <span class="string">&quot;loopEntry&quot;</span>, f, insert);</span><br><span class="line">  loopEnd1 = BasicBlock::<span class="built_in">Create</span>(f-&gt;<span class="built_in">getContext</span>(), <span class="string">&quot;loopEnd1&quot;</span>, f, insert);  <span class="comment">/* 新增：第一个循环结束块 */</span></span><br><span class="line">  loopEnd2 = BasicBlock::<span class="built_in">Create</span>(f-&gt;<span class="built_in">getContext</span>(), <span class="string">&quot;loopEnd2&quot;</span>, f, insert);  <span class="comment">/* 新增：第二个循环结束块 */</span></span><br><span class="line"></span><br><span class="line">  load1 = <span class="keyword">new</span> <span class="built_in">LoadInst</span>(switchVar, <span class="string">&quot;switchVar&quot;</span>, loopEntry);  <span class="comment">/* 新增：在loopEntry中加载switchVar */</span></span><br><span class="line">  load2 = <span class="keyword">new</span> <span class="built_in">LoadInst</span>(switchVar, <span class="string">&quot;switchVar&quot;</span>, loopEnd1);   <span class="comment">/* 新增：在loopEnd1中加载switchVar */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Move first BB on top</span></span><br><span class="line">  insert-&gt;<span class="built_in">moveBefore</span>(loopEntry);</span><br><span class="line">  BranchInst::<span class="built_in">Create</span>(loopEntry, insert);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// loopEnd1 jump to loopEnd2, loopEnd2 jump to loopEntry</span></span><br><span class="line">  BranchInst::<span class="built_in">Create</span>(loopEnd2, loopEnd1);  <span class="comment">/* 新增：loopEnd1跳转到loopEnd2 */</span></span><br><span class="line">  BranchInst::<span class="built_in">Create</span>(loopEntry, loopEnd2); <span class="comment">/* 新增：loopEnd2跳转到loopEntry */</span></span><br><span class="line"></span><br><span class="line">  BasicBlock *swDefault1 =</span><br><span class="line">      BasicBlock::<span class="built_in">Create</span>(f-&gt;<span class="built_in">getContext</span>(), <span class="string">&quot;switchDefault1&quot;</span>, f, loopEnd1);  <span class="comment">/* 新增：第一个switch的默认块 */</span></span><br><span class="line">  BranchInst::<span class="built_in">Create</span>(loopEnd2, swDefault1);</span><br><span class="line"></span><br><span class="line">  BasicBlock *swDefault2 =</span><br><span class="line">      BasicBlock::<span class="built_in">Create</span>(f-&gt;<span class="built_in">getContext</span>(), <span class="string">&quot;switchDefault2&quot;</span>, f, loopEnd2);  <span class="comment">/* 新增：第二个switch的默认块 */</span></span><br><span class="line">  BranchInst::<span class="built_in">Create</span>(loopEntry, swDefault2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create switch instruction itself and set condition</span></span><br><span class="line">  switch1 = SwitchInst::<span class="built_in">Create</span>(load1, loopEnd1, <span class="number">0</span>, loopEntry);  <span class="comment">/* 新增：第一个switch指令 */</span></span><br><span class="line">  switch2 = SwitchInst::<span class="built_in">Create</span>(load2, loopEnd2, <span class="number">0</span>, loopEnd1);   <span class="comment">/* 新增：第二个switch指令 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove branch jump from 1st BB and make a jump to the while</span></span><br><span class="line">  f-&gt;<span class="built_in">begin</span>()-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line">  BranchInst::<span class="built_in">Create</span>(loopEntry, &amp;*f-&gt;<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Put all BB in the switch</span></span><br><span class="line">  <span class="type">int</span> addCase_flag = <span class="number">1</span>;  <span class="comment">/* 新增：标志位，用于交替将基本块添加到switch1或switch2 */</span></span><br><span class="line">  <span class="type">size_t</span> count1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (std::vector&lt;BasicBlock *&gt;::iterator b = origBB.<span class="built_in">begin</span>();</span><br><span class="line">       b != origBB.<span class="built_in">end</span>(); ++b, count1++) &#123;</span><br><span class="line">    BasicBlock *i = *b;</span><br><span class="line">    ConstantInt *numCase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Move the BB inside the switch (only visual, no code logic)</span></span><br><span class="line">    i-&gt;<span class="built_in">moveBefore</span>(loopEnd1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addCase_flag == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// Add case to switch1</span></span><br><span class="line">      numCase = <span class="built_in">cast</span>&lt;ConstantInt&gt;(ConstantInt::<span class="built_in">get</span>(</span><br><span class="line">          switch1-&gt;<span class="built_in">getCondition</span>()-&gt;<span class="built_in">getType</span>(),</span><br><span class="line">          llvm::cryptoutils-&gt;<span class="built_in">scramble32</span>(count1, scrambling_key)));</span><br><span class="line">      switch1-&gt;<span class="built_in">addCase</span>(numCase, i);</span><br><span class="line">      addCase_flag = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Add case to switch2</span></span><br><span class="line">      numCase = <span class="built_in">cast</span>&lt;ConstantInt&gt;(ConstantInt::<span class="built_in">get</span>(</span><br><span class="line">          switch2-&gt;<span class="built_in">getCondition</span>()-&gt;<span class="built_in">getType</span>(),</span><br><span class="line">          llvm::cryptoutils-&gt;<span class="built_in">scramble32</span>(count1, scrambling_key)));</span><br><span class="line">      switch2-&gt;<span class="built_in">addCase</span>(numCase, i);</span><br><span class="line">      addCase_flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Recalculate switchVar</span></span><br><span class="line">  <span class="type">size_t</span> count2 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">1</span>;  <span class="comment">/* 新增：标志位，用于交替跳转到loopEnd1或loopEnd2 */</span></span><br><span class="line">  <span class="keyword">for</span> (std::vector&lt;BasicBlock *&gt;::iterator b = origBB.<span class="built_in">begin</span>();</span><br><span class="line">       b != origBB.<span class="built_in">end</span>(); ++b, count2++) &#123;</span><br><span class="line">    BasicBlock *i = *b;</span><br><span class="line">    ConstantInt *numCase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ret BB</span></span><br><span class="line">    <span class="keyword">if</span> (i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getNumSuccessors</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If it&#x27;s a non-conditional jump</span></span><br><span class="line">    <span class="keyword">if</span> (i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getNumSuccessors</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// Get successor and delete terminator</span></span><br><span class="line">      BasicBlock *succ = i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getSuccessor</span>(<span class="number">0</span>);</span><br><span class="line">      i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Get next case</span></span><br><span class="line">      <span class="keyword">if</span> (switch1-&gt;<span class="built_in">findCaseDest</span>(succ) != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        numCase = switch1-&gt;<span class="built_in">findCaseDest</span>(succ);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        numCase = switch2-&gt;<span class="built_in">findCaseDest</span>(succ);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If next case == default case (switchDefault)</span></span><br><span class="line">      <span class="keyword">if</span> (numCase == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        numCase = <span class="built_in">cast</span>&lt;ConstantInt&gt;(</span><br><span class="line">            ConstantInt::<span class="built_in">get</span>(switch1-&gt;<span class="built_in">getCondition</span>()-&gt;<span class="built_in">getType</span>(),</span><br><span class="line">                             llvm::cryptoutils-&gt;<span class="built_in">scramble32</span>(</span><br><span class="line">                                 switch1-&gt;<span class="built_in">getNumCases</span>() - <span class="number">1</span>, scrambling_key)));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Update switchVar and jump to the end of loop</span></span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">StoreInst</span>(numCase, load1-&gt;<span class="built_in">getPointerOperand</span>(), i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">        BranchInst::<span class="built_in">Create</span>(loopEnd1, i);  <span class="comment">/* 跳转到loopEnd1 */</span></span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        BranchInst::<span class="built_in">Create</span>(loopEnd2, i);  <span class="comment">/* 跳转到loopEnd2 */</span></span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If it&#x27;s a conditional jump</span></span><br><span class="line">    <span class="keyword">if</span> (i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getNumSuccessors</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="comment">// Get next cases</span></span><br><span class="line">      ConstantInt *numCaseTrue = <span class="literal">nullptr</span>;</span><br><span class="line">      ConstantInt *numCaseFalse = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (switch1-&gt;<span class="built_in">findCaseDest</span>(i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getSuccessor</span>(<span class="number">0</span>)) != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        numCaseTrue = switch1-&gt;<span class="built_in">findCaseDest</span>(i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getSuccessor</span>(<span class="number">0</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        numCaseTrue = switch2-&gt;<span class="built_in">findCaseDest</span>(i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getSuccessor</span>(<span class="number">0</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (switch1-&gt;<span class="built_in">findCaseDest</span>(i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getSuccessor</span>(<span class="number">1</span>)) != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        numCaseFalse = switch1-&gt;<span class="built_in">findCaseDest</span>(i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getSuccessor</span>(<span class="number">1</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        numCaseFalse = switch2-&gt;<span class="built_in">findCaseDest</span>(i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getSuccessor</span>(<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if next case == default case (switchDefault)</span></span><br><span class="line">      <span class="keyword">if</span> (numCaseTrue == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        numCaseTrue = <span class="built_in">cast</span>&lt;ConstantInt&gt;(</span><br><span class="line">            ConstantInt::<span class="built_in">get</span>(switch1-&gt;<span class="built_in">getCondition</span>()-&gt;<span class="built_in">getType</span>(),</span><br><span class="line">                             llvm::cryptoutils-&gt;<span class="built_in">scramble32</span>(</span><br><span class="line">                                 switch1-&gt;<span class="built_in">getNumCases</span>() - <span class="number">1</span>, scrambling_key)));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (numCaseFalse == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        numCaseFalse = <span class="built_in">cast</span>&lt;ConstantInt&gt;(</span><br><span class="line">            ConstantInt::<span class="built_in">get</span>(switch1-&gt;<span class="built_in">getCondition</span>()-&gt;<span class="built_in">getType</span>(),</span><br><span class="line">                             llvm::cryptoutils-&gt;<span class="built_in">scramble32</span>(</span><br><span class="line">                                 switch1-&gt;<span class="built_in">getNumCases</span>() - <span class="number">1</span>, scrambling_key)));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Create a SelectInst</span></span><br><span class="line">      BranchInst *br = <span class="built_in">cast</span>&lt;BranchInst&gt;(i-&gt;<span class="built_in">getTerminator</span>());</span><br><span class="line">      SelectInst *sel =</span><br><span class="line">          SelectInst::<span class="built_in">Create</span>(br-&gt;<span class="built_in">getCondition</span>(), numCaseTrue, numCaseFalse, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                             i-&gt;<span class="built_in">getTerminator</span>());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Erase terminator</span></span><br><span class="line">      i-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Update switchVar and jump to the end of loop</span></span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">StoreInst</span>(sel, load1-&gt;<span class="built_in">getPointerOperand</span>(), i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">        BranchInst::<span class="built_in">Create</span>(loopEnd1, i);  <span class="comment">/* 跳转到loopEnd1 */</span></span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        BranchInst::<span class="built_in">Create</span>(loopEnd2, i);  <span class="comment">/* 跳转到loopEnd2 */</span></span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fixStack</span>(f);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义pass"><a href="#自定义pass" class="headerlink" title="自定义pass"></a>自定义pass</h3><ul><li><p>名称混淆</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Module.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/GlobalVariable.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/MD5.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/ADT/SmallString.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LLVMContext.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">NameObfuscation</span> : <span class="keyword">public</span> ModulePass &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">    <span class="built_in">NameObfuscation</span>() : <span class="built_in">ModulePass</span>(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">runOnModule</span><span class="params">(Module &amp;M)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      llvm::MD5 Hasher;</span><br><span class="line">      llvm::MD5::MD5Result Hash;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 对模块中所有函数 进行名称混淆</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;F : M) &#123;</span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;EncodeFunctionName: &quot;</span> &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳过 main</span></span><br><span class="line">        <span class="keyword">if</span> (F.<span class="built_in">getName</span>().<span class="built_in">compare</span>(<span class="string">&quot;main&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">          Hasher.<span class="built_in">update</span>(F.<span class="built_in">getName</span>());        <span class="comment">// 添加函数名</span></span><br><span class="line">          Hasher.<span class="built_in">final</span>(Hash);                <span class="comment">// 计算MD5值</span></span><br><span class="line"></span><br><span class="line">          SmallString&lt;<span class="number">32</span>&gt; HexString;</span><br><span class="line">          llvm::MD5::<span class="built_in">stringifyResult</span>(Hash, HexString);</span><br><span class="line"></span><br><span class="line">          F.<span class="built_in">setName</span>(HexString);              <span class="comment">// 设置新函数名</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 对模块中所有全局变量 进行名称混淆</span></span><br><span class="line">      <span class="keyword">for</span> (GlobalVariable &amp;GV : M.<span class="built_in">globals</span>()) &#123;</span><br><span class="line">        StringRef oldName = GV.<span class="built_in">getName</span>();</span><br><span class="line">        Hasher.<span class="built_in">update</span>(oldName);            <span class="comment">// 添加全局变量名</span></span><br><span class="line">        Hasher.<span class="built_in">final</span>(Hash);               <span class="comment">// 计算MD5值</span></span><br><span class="line"></span><br><span class="line">        SmallString&lt;<span class="number">32</span>&gt; HexString;</span><br><span class="line">        llvm::MD5::<span class="built_in">stringifyResult</span>(Hash, HexString);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;EncodeVariableName: &quot;</span> &lt;&lt; oldName &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">        GV.<span class="built_in">setName</span>(HexString);            <span class="comment">// 设置新全局变量名</span></span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; GV.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="comment">// namespace</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> NameObfuscation::ID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;NameObfuscation&gt; <span class="title">X</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;nobf&quot;</span>,                              </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;function and global variable name obfuscation pass&quot;</span>                        </span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>多函数合并</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Module.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/CFG.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/ADT/SmallSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/ADT/SmallVector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/BasicBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/LinkAllPasses.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Cloning.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CombineFunction</span> : <span class="keyword">public</span> ModulePass &#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span> ID; </span><br><span class="line">  <span class="built_in">CombineFunction</span>() : <span class="built_in">ModulePass</span>(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取函数中的所有基本块</span></span><br><span class="line">  <span class="function">std::vector&lt;BasicBlock *&gt; *<span class="title">getBlocks</span><span class="params">(Function *function,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       std::vector&lt;BasicBlock *&gt; *lists)</span> </span>&#123;</span><br><span class="line">    lists-&gt;<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (BasicBlock &amp;basicBlock : *function)</span><br><span class="line">      lists-&gt;<span class="built_in">push_back</span>(&amp;basicBlock);</span><br><span class="line">    <span class="keyword">return</span> lists;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取模块中的所有函数</span></span><br><span class="line">  <span class="function">std::vector&lt;Function *&gt; *<span class="title">getFunctions</span><span class="params">(Module *<span class="keyword">module</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        std::vector&lt;Function *&gt; *lists)</span> </span>&#123;</span><br><span class="line">    lists-&gt;<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (Function &amp;func : *<span class="keyword">module</span>)</span><br><span class="line">      lists-&gt;<span class="built_in">push_back</span>(&amp;func);</span><br><span class="line">    <span class="keyword">return</span> lists;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从函数中读取注解信息</span></span><br><span class="line">  <span class="function">std::string <span class="title">readAnnotate</span><span class="params">(Function *f)</span> </span>&#123;</span><br><span class="line">    std::string annotation = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    GlobalVariable *glob =</span><br><span class="line">        f-&gt;<span class="built_in">getParent</span>()-&gt;<span class="built_in">getGlobalVariable</span>(<span class="string">&quot;llvm.global.annotations&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (glob != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ConstantArray *ca = <span class="built_in">dyn_cast</span>&lt;ConstantArray&gt;(glob-&gt;<span class="built_in">getInitializer</span>())) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i &lt; ca-&gt;<span class="built_in">getNumOperands</span>(); ++i) &#123;</span><br><span class="line">          <span class="keyword">if</span> (ConstantStruct *structAn =</span><br><span class="line">                  <span class="built_in">dyn_cast</span>&lt;ConstantStruct&gt;(ca-&gt;<span class="built_in">getOperand</span>(i))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ConstantExpr *expr =</span><br><span class="line">                    <span class="built_in">dyn_cast</span>&lt;ConstantExpr&gt;(structAn-&gt;<span class="built_in">getOperand</span>(<span class="number">0</span>))) &#123;</span><br><span class="line">              <span class="keyword">if</span> (expr-&gt;<span class="built_in">getOpcode</span>() == Instruction::BitCast &amp;&amp;</span><br><span class="line">                  expr-&gt;<span class="built_in">getOperand</span>(<span class="number">0</span>) == f) &#123;</span><br><span class="line">                ConstantExpr *note =</span><br><span class="line">                    <span class="built_in">cast</span>&lt;ConstantExpr&gt;(structAn-&gt;<span class="built_in">getOperand</span>(<span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (note-&gt;<span class="built_in">getOpcode</span>() == Instruction::GetElementPtr) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (GlobalVariable *annoteStr =</span><br><span class="line">                          <span class="built_in">dyn_cast</span>&lt;GlobalVariable&gt;(note-&gt;<span class="built_in">getOperand</span>(<span class="number">0</span>))) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ConstantDataSequential *data =</span><br><span class="line">                            <span class="built_in">dyn_cast</span>&lt;ConstantDataSequential&gt;(</span><br><span class="line">                                annoteStr-&gt;<span class="built_in">getInitializer</span>())) &#123;</span><br><span class="line">                      <span class="keyword">if</span> (data-&gt;<span class="built_in">isString</span>()) &#123;</span><br><span class="line">                        annotation += data-&gt;<span class="built_in">getAsString</span>().<span class="built_in">lower</span>() + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> annotation;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将多个函数合并为一个函数</span></span><br><span class="line">  <span class="function">Function *<span class="title">Combine</span><span class="params">(std::vector&lt;Function *&gt; *func_list, ValueToValueMapTy *VMap,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Twine name, std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; *argPosList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (func_list-&gt;<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="comment">// 如果只有一个函数，无需合并</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Check Function Type\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = func_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">         f != func_list-&gt;<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      Function *func = *f;</span><br><span class="line">      <span class="keyword">if</span> (func-&gt;<span class="built_in">isDeclaration</span>() || func-&gt;<span class="built_in">hasAvailableExternallyLinkage</span>() != <span class="number">0</span> ||</span><br><span class="line">          func-&gt;<span class="built_in">getFunctionType</span>()-&gt;<span class="built_in">isVarArg</span>() != <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// 跳过声明、外部链接和可变参数函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;        Done\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Prepare Function Type\n&quot;</span>;</span><br><span class="line">    std::vector&lt;Type *&gt; ArgTypes;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = func_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">         f != func_list-&gt;<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      Function *func = *f;</span><br><span class="line">      <span class="keyword">for</span> (Argument &amp;I : func-&gt;<span class="built_in">args</span>())</span><br><span class="line">        ArgTypes.<span class="built_in">push_back</span>(I.<span class="built_in">getType</span>()); <span class="comment">// 收集参数类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;        Done\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Check Function Return Type\n&quot;</span>;</span><br><span class="line">    Function *first = *func_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">    ArgTypes.<span class="built_in">push_back</span>(</span><br><span class="line">        Type::<span class="built_in">getInt32Ty</span>(first-&gt;<span class="built_in">getParent</span>()-&gt;<span class="built_in">getContext</span>())); <span class="comment">// 添加控制参数</span></span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = func_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">         f != func_list-&gt;<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      Function *func = *f;</span><br><span class="line">      <span class="keyword">if</span> (func-&gt;<span class="built_in">getFunctionType</span>()-&gt;<span class="built_in">getReturnType</span>() !=</span><br><span class="line">          first-&gt;<span class="built_in">getFunctionType</span>()-&gt;<span class="built_in">getReturnType</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// 确保所有函数具有相同的返回类型</span></span><br><span class="line">      <span class="keyword">if</span> (func-&gt;<span class="built_in">getParent</span>() != first-&gt;<span class="built_in">getParent</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// 确保所有函数在同一个模块中</span></span><br><span class="line">      <span class="keyword">if</span> (func-&gt;<span class="built_in">getLinkage</span>() != first-&gt;<span class="built_in">getLinkage</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// 确保所有函数具有相同的链接类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FunctionType *fty = FunctionType::<span class="built_in">get</span>(</span><br><span class="line">        first-&gt;<span class="built_in">getFunctionType</span>()-&gt;<span class="built_in">getReturnType</span>(), ArgTypes, <span class="literal">false</span>);</span><br><span class="line">    Function *result = Function::<span class="built_in">Create</span>(fty, first-&gt;<span class="built_in">getLinkage</span>(),</span><br><span class="line">                                       first-&gt;<span class="built_in">getAddressSpace</span>(), name,</span><br><span class="line">                                       first-&gt;<span class="built_in">getParent</span>()); <span class="comment">// 创建新函数</span></span><br><span class="line">    Function::arg_iterator iter = result-&gt;<span class="built_in">arg_begin</span>();</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;        Done\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Start Working\n&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = func_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">         f != func_list-&gt;<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      Function *func = *f;</span><br><span class="line">      argPosList-&gt;<span class="built_in">push_back</span>(index); <span class="comment">// 存储每个函数参数的起始索引</span></span><br><span class="line">      <span class="keyword">for</span> (Argument &amp;I : func-&gt;<span class="built_in">args</span>())</span><br><span class="line">        (*VMap)[&amp;I] = &amp;*iter++, index++; <span class="comment">// 将原始参数映射到新参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SmallVector&lt;ReturnInst *, <span class="number">8</span>&gt; returns;</span><br><span class="line">    ClonedCodeInfo CodeInfo;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = func_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">         f != func_list-&gt;<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      Function *func = *f;</span><br><span class="line">      <span class="built_in">CloneFunctionInto</span>(result, func, *VMap, func-&gt;<span class="built_in">getSubprogram</span>() != <span class="literal">nullptr</span>,</span><br><span class="line">                        returns, <span class="string">&quot;&quot;</span>, &amp;CodeInfo); <span class="comment">// 克隆每个函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;        Done\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成唯一的随机数</span></span><br><span class="line">  <span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">getUniqueNumber</span><span class="params">(std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; *rand_list)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="type">bool</span> state = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;::iterator n = rand_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">           n != rand_list-&gt;<span class="built_in">end</span>(); n++)</span><br><span class="line">        <span class="keyword">if</span> (*n == num) &#123;</span><br><span class="line">          state = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span> (state)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      num = <span class="built_in">rand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过添加 switch 语句修复函数逻辑</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">FixFunction</span><span class="params">(Function *target, std::vector&lt;Function *&gt; *orig_list,</span></span></span><br><span class="line"><span class="params"><span class="function">                   ValueToValueMapTy *VMap, std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; *valueList)</span> </span>&#123;</span><br><span class="line">    std::vector&lt;BasicBlock *&gt; entryBlocks;</span><br><span class="line">    std::vector&lt;BasicBlock *&gt; bodyBlock;</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Get all entry blocks\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = orig_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">         f != orig_list-&gt;<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      Function *func = *f;</span><br><span class="line">      BasicBlock *entry = &amp;*func-&gt;<span class="built_in">begin</span>();</span><br><span class="line">      Value *ptr = (Value *)VMap-&gt;<span class="built_in">lookup</span>(entry);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isa</span>&lt;BasicBlock&gt;(*ptr))</span><br><span class="line">        entryBlocks.<span class="built_in">push_back</span>((BasicBlock *)ptr);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getBlocks</span>(target, &amp;bodyBlock);</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;        Done\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Build switch\n&quot;</span>;</span><br><span class="line">    BasicBlock *entry =</span><br><span class="line">        BasicBlock::<span class="built_in">Create</span>(target-&gt;<span class="built_in">getContext</span>(), <span class="string">&quot;Entry&quot;</span>, target);</span><br><span class="line">    BasicBlock *selector =</span><br><span class="line">        BasicBlock::<span class="built_in">Create</span>(target-&gt;<span class="built_in">getContext</span>(), <span class="string">&quot;Selector&quot;</span>, target);</span><br><span class="line">    entry-&gt;<span class="built_in">moveBefore</span>(*entryBlocks.<span class="built_in">begin</span>());</span><br><span class="line">    selector-&gt;<span class="built_in">moveBefore</span>(*entryBlocks.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">    AllocaInst *var = <span class="keyword">new</span> <span class="built_in">AllocaInst</span>(Type::<span class="built_in">getInt32Ty</span>(target-&gt;<span class="built_in">getContext</span>()), <span class="number">0</span>,</span><br><span class="line">                                     <span class="built_in">Twine</span>(<span class="string">&quot;switchVar&quot;</span>), entry);</span><br><span class="line">    Function::arg_iterator iter = target-&gt;<span class="built_in">arg_end</span>();</span><br><span class="line">    Value *controlArg = --iter;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">StoreInst</span>(controlArg, var, entry);</span><br><span class="line">    BranchInst::<span class="built_in">Create</span>(selector, entry);</span><br><span class="line"></span><br><span class="line">    LoadInst *load = <span class="keyword">new</span> <span class="built_in">LoadInst</span>(var, <span class="built_in">Twine</span>(<span class="string">&quot;&quot;</span>), selector);</span><br><span class="line">    BasicBlock *endBlock =</span><br><span class="line">        BasicBlock::<span class="built_in">Create</span>(target-&gt;<span class="built_in">getContext</span>(), <span class="string">&quot;DefaultEnd&quot;</span>, target);</span><br><span class="line">    ReturnInst *ret = ReturnInst::<span class="built_in">Create</span>(</span><br><span class="line">        target-&gt;<span class="built_in">getContext</span>(),</span><br><span class="line">        Constant::<span class="built_in">getNullValue</span>(target-&gt;<span class="built_in">getFunctionType</span>()-&gt;<span class="built_in">getReturnType</span>()),</span><br><span class="line">        endBlock);</span><br><span class="line">    SwitchInst *sw = SwitchInst::<span class="built_in">Create</span>(load, endBlock, <span class="number">0</span>, selector);</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; rand_list;</span><br><span class="line">    std::vector&lt;BasicBlock *&gt;::iterator bblist_iter = entryBlocks.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = orig_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">         f != orig_list-&gt;<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> val = <span class="built_in">getUniqueNumber</span>(&amp;rand_list);</span><br><span class="line">      rand_list.<span class="built_in">push_back</span>(val);</span><br><span class="line">      ConstantInt *numCase =</span><br><span class="line">          <span class="built_in">cast</span>&lt;ConstantInt&gt;(ConstantInt::<span class="built_in">get</span>(sw-&gt;<span class="built_in">getCondition</span>()-&gt;<span class="built_in">getType</span>(), val));</span><br><span class="line">      valueList-&gt;<span class="built_in">push_back</span>(val);</span><br><span class="line">      sw-&gt;<span class="built_in">addCase</span>(numCase, *bblist_iter);</span><br><span class="line">      bblist_iter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;        Done\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Add useless code\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;BasicBlock *&gt;::iterator b = bodyBlock.<span class="built_in">begin</span>();</span><br><span class="line">         b != bodyBlock.<span class="built_in">end</span>(); b++) &#123;</span><br><span class="line">      BasicBlock *basicBlock = *b;</span><br><span class="line">      BranchInst *br = <span class="literal">nullptr</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isa</span>&lt;BranchInst&gt;(*basicBlock-&gt;<span class="built_in">getTerminator</span>())) &#123;</span><br><span class="line">        br = (BranchInst *)basicBlock-&gt;<span class="built_in">getTerminator</span>();</span><br><span class="line">        <span class="keyword">if</span> (br-&gt;<span class="built_in">isUnconditional</span>()) &#123;</span><br><span class="line">          BasicBlock *rand_target = entryBlocks.<span class="built_in">at</span>(<span class="built_in">rand</span>() % entryBlocks.<span class="built_in">size</span>());</span><br><span class="line">          BasicBlock *right = basicBlock-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">getSuccessor</span>(<span class="number">0</span>);</span><br><span class="line">          basicBlock-&gt;<span class="built_in">getTerminator</span>()-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line">          <span class="type">unsigned</span> <span class="type">int</span> val = <span class="built_in">getUniqueNumber</span>(&amp;rand_list);</span><br><span class="line">          rand_list.<span class="built_in">push_back</span>(val);</span><br><span class="line">          LoadInst *cmpValA = <span class="keyword">new</span> <span class="built_in">LoadInst</span>(var, <span class="built_in">Twine</span>(<span class="string">&quot;&quot;</span>), basicBlock);</span><br><span class="line">          ConstantInt *cmpValB =</span><br><span class="line">              ConstantInt::<span class="built_in">get</span>(Type::<span class="built_in">getInt32Ty</span>(target-&gt;<span class="built_in">getContext</span>()), val);</span><br><span class="line">          ICmpInst *condition =</span><br><span class="line">              <span class="keyword">new</span> <span class="built_in">ICmpInst</span>(*basicBlock, ICmpInst::ICMP_EQ, cmpValA, cmpValB);</span><br><span class="line">          BranchInst::<span class="built_in">Create</span>(rand_target, right, condition, basicBlock);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;        Done\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修复调用指令以指向新的合并函数</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">FixCallInst</span><span class="params">(Function *target, std::vector&lt;Function *&gt; *orig_list,</span></span></span><br><span class="line"><span class="params"><span class="function">                   ValueToValueMapTy *VMap, std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; *valueList,</span></span></span><br><span class="line"><span class="params"><span class="function">                   std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; *argPosList)</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;::iterator v = valueList-&gt;<span class="built_in">begin</span>(),</span><br><span class="line">                                        a = argPosList-&gt;<span class="built_in">begin</span>();</span><br><span class="line">    std::vector&lt;CallInst *&gt; remove_list;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = orig_list-&gt;<span class="built_in">begin</span>();</span><br><span class="line">         f != orig_list-&gt;<span class="built_in">end</span>(); f++, v++, a++) &#123;</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> val = *v, argPos = *a;</span><br><span class="line">      Function *ff = *f;</span><br><span class="line">      <span class="keyword">for</span> (Function &amp;func : *ff-&gt;<span class="built_in">getParent</span>()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (BasicBlock &amp;bb : func) &#123;</span><br><span class="line">          <span class="keyword">for</span> (Instruction &amp;ii : bb) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isa</span>&lt;CallInst&gt;(ii)) &#123;</span><br><span class="line">              CallInst *callInst = &amp;<span class="built_in">cast</span>&lt;CallInst&gt;(ii);</span><br><span class="line">              <span class="keyword">if</span> (callInst-&gt;<span class="built_in">getCalledFunction</span>() == ff) &#123;</span><br><span class="line">                std::vector&lt;Value *&gt; arg_list;</span><br><span class="line">                Function::arg_iterator itera = target-&gt;<span class="built_in">arg_begin</span>();</span><br><span class="line">                User::op_iterator iterb = callInst-&gt;<span class="built_in">arg_begin</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; target-&gt;<span class="built_in">arg_size</span>() - <span class="number">1</span>; i++, itera++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (i &gt;= argPos &amp;&amp; i &lt; argPos + callInst-&gt;<span class="built_in">arg_size</span>()) &#123;</span><br><span class="line">                    arg_list.<span class="built_in">push_back</span>(*iterb);</span><br><span class="line">                    iterb++;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arg_list.<span class="built_in">push_back</span>(Constant::<span class="built_in">getNullValue</span>((*itera).<span class="built_in">getType</span>()));</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                arg_list.<span class="built_in">push_back</span>(</span><br><span class="line">                    ConstantInt::<span class="built_in">get</span>(Type::<span class="built_in">getInt32Ty</span>(target-&gt;<span class="built_in">getContext</span>()), val));</span><br><span class="line">                CallInst *newCall =</span><br><span class="line">                    CallInst::<span class="built_in">Create</span>(target, arg_list, <span class="built_in">Twine</span>(<span class="string">&quot;&quot;</span>), callInst);</span><br><span class="line">                remove_list.<span class="built_in">push_back</span>(callInst);</span><br><span class="line">                callInst-&gt;<span class="built_in">replaceAllUsesWith</span>(newCall);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;CallInst *&gt;::iterator c = remove_list.<span class="built_in">begin</span>();</span><br><span class="line">         c != remove_list.<span class="built_in">end</span>(); c++)</span><br><span class="line">      (*c)-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pass 的主入口点</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">runOnModule</span><span class="params">(Module &amp;<span class="keyword">module</span>)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    std::vector&lt;Function *&gt; func_list;</span><br><span class="line">    <span class="built_in">getFunctions</span>(&amp;<span class="keyword">module</span>, &amp;func_list);</span><br><span class="line">    std::vector&lt;Function *&gt; work_list;</span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Function List:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = func_list.<span class="built_in">begin</span>();</span><br><span class="line">         f != func_list.<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      Function *func = *f;</span><br><span class="line">      <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;        &quot;</span>;</span><br><span class="line">      <span class="built_in">errs</span>().<span class="built_in">write_escaped</span>(func-&gt;<span class="built_in">getName</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">readAnnotate</span>(func).<span class="built_in">find</span>(<span class="string">&quot;combine&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;                -Add to work list\n&quot;</span>;</span><br><span class="line">        work_list.<span class="built_in">push_back</span>(func);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ValueToValueMapTy VMap;</span><br><span class="line">    std::vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; values, argPos;</span><br><span class="line">    Function *target = <span class="built_in">Combine</span>(&amp;work_list, &amp;VMap, <span class="string">&quot;MixFunction&quot;</span>, &amp;argPos);</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Combine Fail\n&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">FixFunction</span>(target, &amp;work_list, &amp;VMap, &amp;values)) &#123;</span><br><span class="line">      <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;FixFunction Fail\n&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">FixCallInst</span>(target, &amp;work_list, &amp;VMap, &amp;values, &amp;argPos)) &#123;</span><br><span class="line">      <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;FixCallInst Fail\n&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">module</span>.<span class="built_in">getGlobalVariable</span>(<span class="string">&quot;llvm.global.annotations&quot;</span>)-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;Function *&gt;::iterator f = work_list.<span class="built_in">begin</span>();</span><br><span class="line">         f != work_list.<span class="built_in">end</span>(); f++) &#123;</span><br><span class="line">      Function *func = *f;</span><br><span class="line">      func-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="comment">// namespace</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> CombineFunction::ID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;CombineFunction&gt; <span class="title">X</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;fcom&quot;</span>,                              </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;function combination pass&quot;</span>                        </span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="对抗"><a href="#对抗" class="headerlink" title="对抗"></a>对抗</h1><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><ol><li><p>spawn模式注入，hook android_dlopen_ext 实现目标so加载时dump；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> so_name = <span class="string">&quot;libnative-lib.so&quot;</span>        <span class="comment">// 目标so</span></span><br><span class="line">    <span class="keyword">var</span> package_name = <span class="string">&quot;com.example.test&quot;</span>   <span class="comment">// 应用包名</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="title function_">dump_so</span>(so_name, package_name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dump_so</span>(<span class="params">so_name, package_name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libso = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">var</span> file_path =  <span class="string">&quot;/data/data/&quot;</span> + package_name + <span class="string">&quot;/&quot;</span> + libso.<span class="property">name</span> + <span class="string">&quot;_&quot;</span> + libso.<span class="property">base</span> + <span class="string">&quot;_&quot;</span> + <span class="title function_">ptr</span>(libso.<span class="property">size</span>) + <span class="string">&quot;.so&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(file_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (file_handle &amp;&amp; file_handle !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(libso.<span class="property">base</span>), libso.<span class="property">size</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> libso_buffer = <span class="title function_">ptr</span>(libso.<span class="property">base</span>).<span class="title function_">readByteArray</span>(libso.<span class="property">size</span>);</span><br><span class="line">        file_handle.<span class="title function_">write</span>(libso_buffer);</span><br><span class="line">        file_handle.<span class="title function_">flush</span>();</span><br><span class="line">        file_handle.<span class="title function_">close</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]:&quot;</span>, file_path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]: Failed to create file handle for &quot;</span> + file_path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者 attach模式注入，对so主动进行dump</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dump_so</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> so_name = <span class="string">&quot;libnative-lib.so&quot;</span>        <span class="comment">// 目标so</span></span><br><span class="line">    <span class="keyword">var</span> package_name = <span class="string">&quot;com.example.test&quot;</span>   <span class="comment">// 应用包名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> libso = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">var</span> file_path =  <span class="string">&quot;/data/data/&quot;</span> + package_name + <span class="string">&quot;/&quot;</span> + libso.<span class="property">name</span> + <span class="string">&quot;_&quot;</span> + libso.<span class="property">base</span> + <span class="string">&quot;_&quot;</span> + <span class="title function_">ptr</span>(libso.<span class="property">size</span>) + <span class="string">&quot;.so&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(file_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (file_handle &amp;&amp; file_handle !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(libso.<span class="property">base</span>), libso.<span class="property">size</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> libso_buffer = <span class="title function_">ptr</span>(libso.<span class="property">base</span>).<span class="title function_">readByteArray</span>(libso.<span class="property">size</span>);</span><br><span class="line">        file_handle.<span class="title function_">write</span>(libso_buffer);</span><br><span class="line">        file_handle.<span class="title function_">flush</span>();</span><br><span class="line">        file_handle.<span class="title function_">close</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]:&quot;</span>, file_path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]: Failed to create file handle for &quot;</span> + file_path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出见应用 &#x2F;data&#x2F;data&#x2F;…&#x2F;files&#x2F; 目录</p></li><li><p>修复dump出的so</p></li></ol><p>具体见此项目 <a href="https://github.com/F8LEFT/SoFixer">SoFixer</a></p><h2 id="指令追踪"><a href="#指令追踪" class="headerlink" title="指令追踪"></a>指令追踪</h2><p>hook android_dlopen_ext 实现目标so加载后 开始跟踪指令执行流<br>后续打印目标函数的执行情况，并根据选项是否打印此时的调用栈信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> so_name = <span class="string">&quot;libnative-lib.so&quot;</span>;   <span class="comment">// 目标so</span></span><br><span class="line"><span class="keyword">var</span> func_addr = [<span class="number">0x2bc1</span>, <span class="number">0x2bd1</span>, <span class="number">0x2be1</span>, <span class="number">0x2bf1</span>, <span class="number">0x2c01</span>, <span class="number">0x2c11</span>, <span class="number">0x2c21</span>, <span class="number">0x2c31</span>];   <span class="comment">// 目标函数地址</span></span><br><span class="line"><span class="keyword">var</span> func_name = [<span class="string">&quot;.munmap&quot;</span>, <span class="string">&quot;.close&quot;</span>, <span class="string">&quot;.dlsym&quot;</span>, <span class="string">&quot;.dladdr&quot;</span>, <span class="string">&quot;sub_6B30&quot;</span>, <span class="string">&quot;sub_6B40&quot;</span>, <span class="string">&quot;sub_6BA0&quot;</span>, <span class="string">&quot;sub_6C00&quot;</span>]; <span class="comment">// 目标函数在IDA中名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> print_stack = <span class="literal">false</span>;            <span class="comment">// 输出选项1</span></span><br><span class="line"><span class="keyword">var</span> print_stack_mode = <span class="string">&quot;FUZZY&quot;</span>;     <span class="comment">// 输出选项2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>),</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="keyword">if</span> (path.<span class="title function_">indexOf</span>(so_name) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">is_can_hook</span> = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_can_hook</span>) &#123;</span><br><span class="line">                    <span class="title function_">trace_so</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trace_so</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> times = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">var</span> pid = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start Stalker!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Stalker</span>.<span class="title function_">exclude</span>(&#123;   <span class="comment">// 不跟踪该范围内的指令，即后续不打印libc.so函数的执行情况</span></span><br><span class="line">        <span class="string">&quot;base&quot;</span>: <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>).<span class="property">base</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>).<span class="property">size</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Stalker</span>.<span class="title function_">follow</span>(pid,&#123;</span><br><span class="line">        <span class="attr">events</span>:&#123;</span><br><span class="line">            <span class="attr">call</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">ret</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">exec</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">block</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">compile</span>:<span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onReceive</span>:<span class="keyword">function</span>(<span class="params">events</span>)&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">transform</span>: <span class="keyword">function</span> (<span class="params">iterator</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> instruction = iterator.<span class="title function_">next</span>();</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (func_addr.<span class="title function_">indexOf</span>(instruction.<span class="property">address</span> - <span class="variable language_">module</span>.<span class="property">base</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call&quot;</span> + times + <span class="string">&quot;:&quot;</span> + func_name[func_addr.<span class="title function_">indexOf</span>(instruction.<span class="property">address</span> - <span class="variable language_">module</span>.<span class="property">base</span>)])</span><br><span class="line">                    times = times + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> (print_stack) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (print_stack_mode === <span class="string">&quot;FUZZY&quot;</span>) &#123;</span><br><span class="line">                            iterator.<span class="title function_">putCallout</span>(<span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;backtrace:\n&quot;</span>+<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">FUZZY</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>));</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>)</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (print_stack_mode === <span class="string">&quot;ACCURATE&quot;</span>) &#123;</span><br><span class="line">                            iterator.<span class="title function_">putCallout</span>(<span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;backtrace:\n&quot;</span>+<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>));</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>)</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (print_stack_mode === <span class="string">&quot;MANUAL&quot;</span>) &#123;</span><br><span class="line">                            iterator.<span class="title function_">putCallout</span>(<span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;backtrace:&quot;</span>)</span><br><span class="line">                                <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">FUZZY</span>).<span class="title function_">map</span>(addr_in_so);</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>)</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.<span class="title function_">keep</span>();</span><br><span class="line">            &#125; <span class="keyword">while</span> ((instruction = iterator.<span class="title function_">next</span>()) !== <span class="literal">null</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onCallSummary</span>:<span class="keyword">function</span>(<span class="params">summary</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Stalker end!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addr_in_so</span>(<span class="params">addr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> process_Obj_Module_Arr = <span class="title class_">Process</span>.<span class="title function_">enumerateModules</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; process_Obj_Module_Arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(addr&gt;process_Obj_Module_Arr[i].<span class="property">base</span> &amp;&amp; addr&lt;process_Obj_Module_Arr[i].<span class="property">base</span>.<span class="title function_">add</span>(process_Obj_Module_Arr[i].<span class="property">size</span>))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(addr.<span class="title function_">toString</span>(<span class="number">16</span>),<span class="string">&quot;is in&quot;</span>,process_Obj_Module_Arr[i].<span class="property">name</span>,<span class="string">&quot;offset: 0x&quot;</span>+(addr-process_Obj_Module_Arr[i].<span class="property">base</span>).<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(hook_dlopen,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>对于脚本的生成，具体见此项目 <a href="https://github.com/oacia/stalker_trace_so">stalker_trace_so</a></p><h2 id="反混淆"><a href="#反混淆" class="headerlink" title="反混淆"></a>反混淆</h2><h3 id="去花"><a href="#去花" class="headerlink" title="去花"></a>去花</h3><ul><li>间接改为直接跳转</li></ul><p>手动：<br><img src="/img/2025-1-15/3.jpg"><br><img src="/img/2025-1-15/6.jpg"></p><p>angr：</p><p>unicorn：</p><h3 id="去指令替换"><a href="#去指令替换" class="headerlink" title="去指令替换"></a>去指令替换</h3><ul><li>修改IDA microcode</li></ul><p>IDA插件：<br>具体见此项目 <a href="https://github.com/joydo/d810">d810</a></p><h3 id="去虚假控制流"><a href="#去虚假控制流" class="headerlink" title="去虚假控制流"></a>去虚假控制流</h3><ul><li>不透明谓词只读赋零</li></ul><p>手动：<br><img src="/img/2025-1-15/1.jpg"></p><p>IDAPython：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_segment</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line">seg = ida_segment.get_segm_by_name(<span class="string">&#x27;.bss&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读</span></span><br><span class="line">seg.perm = <span class="number">0b100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋零</span></span><br><span class="line"><span class="keyword">for</span> ea <span class="keyword">in</span> <span class="built_in">range</span>(seg.start_ea, seg.end_ea,<span class="number">4</span>):</span><br><span class="line">    ida_bytes.patch_bytes(ea, <span class="built_in">int</span>(<span class="number">0</span>).to_bytes(<span class="number">4</span>,<span class="string">&#x27;little&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>去除不透明谓词引用</li></ul><p>手动：<br><img src="/img/2025-1-15/2.jpg"></p><p>IDAPython：</p><ul><li>去除不可达基本块</li></ul><p>angr：<br>具体见此项目 <a href="https://github.com/cq674350529/deflat">deflat-master</a></p><p>unicorn：</p><h3 id="去控制流平坦化"><a href="#去控制流平坦化" class="headerlink" title="去控制流平坦化"></a>去控制流平坦化</h3><ul><li>识别分发器、串联真实块</li></ul><p>angr：<br>具体见此项目 <a href="https://github.com/cq674350529/deflat">deflat-master</a></p><p>unicorn：</p><h3 id="去字符串混淆"><a href="#去字符串混淆" class="headerlink" title="去字符串混淆"></a>去字符串混淆</h3><ul><li><p>.init_array中统一解密</p></li><li><p>使用前单独解密</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>节加密<br><a href="https://zhuanlan.zhihu.com/p/379521981">基于section加密实现so加固</a><br><a href="https://blog.csdn.net/zhangmiaoping23/article/details/80016399">Android SO文件保护加固——加密篇（一）</a></p></li><li><p>函数加密<br><a href="https://blog.csdn.net/feibabeibei_beibei/article/details/52642288">Android SO文件保护加固——加密篇（二）</a><br><a href="https://bbs.kanxue.com/thread-255220.htm">入门级加固–3种加固方式学习记录</a></p></li><li><p>自定义linker<br><a href="https://www.cnblogs.com/theseventhson/p/16366038.html">android逆向奇技淫巧三十：so加壳&amp;加固原理简述</a><br><a href="https://cloud.tencent.com/developer/article/1071358">Android Linker 与 SO 加壳技术</a><br><a href="https://bbs.kanxue.com/thread-269484.htm">《基于linker实现so加壳技术基础》上篇 </a>   # so加载、soinfo替换（其一）<br><a href="https://www.cnblogs.com/revercc/p/17100308.html">自实现linker加固so</a>             # 加壳（整体）+ so解密<br><a href="https://bbs.kanxue.com/thread-285650.htm">关于SO加密对抗的两种实现方式</a>            # 加壳（函数）+ 加载、soinfo替换（其一）、so解密<br><a href="https://bbs.kanxue.com/thread-282316.htm">自實現Linker加載so</a>                    # so加载、soinfo替换（其二）<br><a href="https://www.cnblogs.com/ichunqiu/p/7245329.html">UPX源码分析——加壳篇</a></p></li><li><p>花指令<br><a href="https://bbs.kanxue.com/thread-281748.htm">如何在代码中使用花指令</a><br><a href="https://iosre.com/t/anti-disassembly-on-arm64/21006">Anti-Disassembly on ARM64</a><br><a href="https://bbs.kanxue.com/thread-285056.htm">大众DP清理jumpout </a></p></li><li><p>OLLVM<br><a href="https://bbs.kanxue.com/thread-282305.htm">自实现一个LLVM Pass以及OLLVM简单的魔改</a><br><a href="https://www.52pojie.cn/thread-1369130-1-1.html">基于LLVM的控制流平坦化的魔改和混淆Pass实战</a></p></li><li><p>反混淆<br><a href="https://bbs.kanxue.com/thread-285764.htm">一种基于unicorn的寄存器间接跳转混淆去除方式</a>     # 去花<br><a href="https://bbs.kanxue.com/thread-280231.htm">使用unicorn模拟执行去除间接跳转</a><br><a href="https://bbs.kanxue.com/thread-280737.htm">符号执行去除BR指令混淆</a><br><a href="https://oacia.dev/ollvm-study/">ollvm三种混淆模式的反混淆思路</a>     # 去OLLVM<br><a href="https://bbs.kanxue.com/thread-271557.htm">简单完善《ARM64 OLLVM反虚假控制流》中的脚本</a><br><a href="https://www.cnblogs.com/revercc/p/17135120.html">利用unicorn模拟执行去除ollvm平坦化</a><br><a href="https://bbs.kanxue.com/thread-271388.htm#msg_header_h3_1">百度加固免费版libbaiduprotect.so反混淆 - 字符串加密</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 保护与对抗 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯游戏安全 2023 安卓 初赛</title>
      <link href="/2025/01/13/2025-1-13%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202023%20%E5%AE%89%E5%8D%93%20%E5%88%9D%E8%B5%9B/"/>
      <url>/2025/01/13/2025-1-13%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202023%20%E5%AE%89%E5%8D%93%20%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>一次Unity逆向。虽然以往在CTF中也有遇到过，但是整体逆向思路与使用手段却截然不同。<br>期间参考了许多师傅的解题思路，但即便如此，因自身能力欠佳，全程还是磕磕绊绊。<br>不过有一说一，还是一次很宝贵的体验，收获颇丰。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/2025-1-13/21.png"></p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="符号还原"><a href="#符号还原" class="headerlink" title="符号还原"></a>符号还原</h2><h3 id="dump解密"><a href="#dump解密" class="headerlink" title="dump解密"></a>dump解密</h3><p>libil2cpp.so本身被加密，无法直接扔进 Il2CppDumper<br>解密逻辑位于.init_array的 init_proc()中（严格来讲是在.init_array前执行）<br><img src="/img/2025-1-13/1.png"></p><p>这里选择用frida dump出解密后的 libil2cpp.so<br>注意存在frida检测，不过可以通过改端口等方式进行绕过，或者整一个魔改版frida</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dump_so</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> so_name = <span class="string">&quot;libil2cpp.so&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> currentApplication = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>();</span><br><span class="line">        <span class="keyword">var</span> dir = currentApplication.<span class="title function_">getApplicationContext</span>().<span class="title function_">getFilesDir</span>().<span class="title function_">getPath</span>();</span><br><span class="line">        <span class="keyword">var</span> libso = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> file_path = dir + <span class="string">&quot;/&quot;</span> + libso.<span class="property">name</span> + <span class="string">&quot;_&quot;</span> + libso.<span class="property">base</span> + <span class="string">&quot;_&quot;</span> + <span class="title function_">ptr</span>(libso.<span class="property">size</span>) + <span class="string">&quot;.so&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(file_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (file_handle &amp;&amp; file_handle !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(libso.<span class="property">base</span>), libso.<span class="property">size</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> libso_buffer = <span class="title function_">ptr</span>(libso.<span class="property">base</span>).<span class="title function_">readByteArray</span>(libso.<span class="property">size</span>);</span><br><span class="line">            file_handle.<span class="title function_">write</span>(libso_buffer);</span><br><span class="line">            file_handle.<span class="title function_">flush</span>();</span><br><span class="line">            file_handle.<span class="title function_">close</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump]:&quot;</span>, file_path);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;[dump]: Failed to create file handle for &quot;</span> + file_path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>由于dump出的so是在内存映像下的，在IDA中的静态分析场景中还是会部分爆红，因此还要进行修复<br>这里选择扔进 010 Editor，使用 ELF.bt模板，手动修复</p><ol><li>segment 文件偏移</li></ol><p>对于 program_header_table 的每个 element————<br>取 p_vaddr，填到 p_offset<br>取 p_memsz，填到 p_filesz</p><ol start="2"><li>section_header_table 文件偏移</li></ol><p>对于 program_header_table 的末尾 element————<br>取 p_vaddr + p_memsz，填到 elf_header 的 e_shoff</p><ol start="3"><li>section 内容</li></ol><p>取原so section_header_table，填到待修复so section_header_table</p><ol start="4"><li>section 名称</li></ol><p>通过 elf_header 的 e_shtrndx，找到 section_header_table 中.shstrtab的 element<br>对于该 element————<br>取原so 的 s_offset 处的数据，填到待修复so 的 s_offset 处</p><ol start="5"><li>section 文件偏移</li></ol><p>对于 section_header_table 的每个 element————<br>取不为0的 s_addr，填到 s_offset</p><h3 id="恢复符号"><a href="#恢复符号" class="headerlink" title="恢复符号"></a>恢复符号</h3><p>接下来就是与往常一样了，把 global-metakey.dat和修复后的 libil2cpp.so扔进 Il2CppDumper，获取符号信息；<br>然后在IDA中通过ida_with_struct_py3.py脚本，使用 script.json, il2cpp.h 对libil2cpp.so 进行符号还原</p><h2 id="获取Flag"><a href="#获取Flag" class="headerlink" title="获取Flag"></a>获取Flag</h2><p>既然题目中说 “收集金币数量超过1000时，赢得Flag”，说明libil2cpp.so中某处一定存在 金币数量比较逻辑<br>这里选择将比较目标”1000”改为”0”，即可实现开局就输出Flag</p><p>通过搜索“coin”相关字符串，可以定位到 CollectCoin()，进而定位到比较逻辑<br><img src="/img/2025-1-13/6.png"></p><p>接下来通过frida，将此处 “CMP W0, #3E8” 语句改为 “CMP W0, #0”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> libil2cpp = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libil2cpp.so&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> coinCmpAddress = <span class="title function_">ptr</span>(libil2cpp.<span class="property">base</span>).<span class="title function_">add</span>(<span class="number">0x4652E4</span> + (<span class="number">0x7AD79283CC</span> - <span class="number">0x7AD79282E4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(coinCmpAddress), <span class="number">4</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">writeU32</span>(<span class="title function_">ptr</span>(coinCmpAddress), <span class="number">0x7100001f</span>);  <span class="comment">// CMP W0, #0</span></span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(coinCmpAddress), <span class="number">4</span>, <span class="string">&#x27;rx&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册机分析"><a href="#注册机分析" class="headerlink" title="注册机分析"></a>注册机分析</h2><h3 id="按键逻辑分析"><a href="#按键逻辑分析" class="headerlink" title="按键逻辑分析"></a>按键逻辑分析</h3><p>dump.cs中可以看到 SmallKeyboard相关函数，猜测对应游戏中 “Mod Menu”界面的按键逻辑<br>libil2cpp.so中来到该函数处，可以看到通过 KeyType变量进入不同类型按键 的响应逻辑分支<br><img src="/img/2025-1-13/5.png"></p><p>重点关注 “keyType &#x3D;&#x3D; 2”的情况，其中————</p><ol><li>System_Convert__ToUInt64_486054767044()将玩家输入存入v13</li><li>SmallKeyboard__iI1Ii_486050613936()传入v13，其中调用了外部函数，<br>即 libsec2023.so中位于 g_sec2023_p_array偏移0x48处的函数<br><img src="/img/2025-1-13/7.png"></li></ol><h3 id="反内存修改检测"><a href="#反内存修改检测" class="headerlink" title="反内存修改检测"></a>反内存修改检测</h3><p>视角转到 libsec2023.so，正准备开始后续分析时，惊奇发现此时附加上frida会被检测到（严格来讲是使用frida进行hook时，几秒后会被检测到）<br>明明前面已对frida特征进行隐藏了，为什么还是如此？<br>其实还存在一种检测frida的角度，就是对 Inline Hook修改内存的行为进行检测（上方frida被检测时的反应，很契合此种检测手段的特点）</p><p>在讲对抗方式之前，先大致了解下其检测原理————</p><ol><li>开启后台线程（pthread_create()），每隔一段时间（sleep()）执行检测逻辑</li><li>可以选择对关键函数的开头进行检查，是否存在 Inline Hook的几字节跳转逻辑；<br>或者直接对该内存区域进行CRC校验，查看每次返回的CRC值是否更改</li></ol><p>既然如此，可以选择hook修改 sleep()传参，将检测逻辑的执行间隔改大；<br>同时打印其堆栈信息，从而定位到调用sleep()的检测逻辑处</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sleep_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> original_sleep = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(sleep_addr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sleep_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            args[<span class="number">0</span>] = <span class="title function_">ptr</span>(<span class="number">1000000</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Modified duration to: &#x27;</span> + args[<span class="number">0</span>].<span class="title function_">toInt32</span>() + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Sleep call finished.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里每次对 sub_376CC的返回值进行检查，进而对v9进行更改<br>如果检测到修改则v9为0x38，否则为0x28<br><img src="/img/2025-1-13/9.png"></p><p>因此，可以选择spawn模式 patch此处汇编，把 “MOV W9, #0x38” 改为 “MOV W9, #0x28”<br>至此，frida可任意进行hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">patch2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> libso = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libsec2023.so&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (libso) &#123;</span><br><span class="line">            <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(libso.<span class="property">base</span>), libso.<span class="property">size</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">            <span class="title class_">Memory</span>.<span class="title function_">writeByteArray</span>(<span class="title function_">ptr</span>(libso.<span class="property">base</span>).<span class="title function_">add</span>(<span class="number">0x371D0</span>), [<span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x80</span>, <span class="number">0x52</span>]);  <span class="comment">// MOV W9, #0x28</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Successfully patched libsec2023.so at address: &quot;</span> + <span class="title function_">ptr</span>(libso.<span class="property">base</span>).<span class="title function_">add</span>(<span class="number">0x371D0</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Failed to find module &#x27;libsec2023.so&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反混淆"><a href="#反混淆" class="headerlink" title="反混淆"></a>反混淆</h3><p>回归正题，基于g_sec2023_p_array中偏移0x48处，来到libsec2023.so的 sub_31164<br><img src="/img/2025-1-13/8.png"></p><p>发现其中存在大量 基于如下形式的混淆————<br>通过CSEL为要参与后续运算的寄存器 进行条件赋值；再通过ADD运算构造出地址；最后BR跳转到目标位置；<br>将原本一个 条件分支下的直接跳转，转换成寄存器寻址下的间接跳转<br><img src="/img/2025-1-13/11.jpg"></p><p>这里选择比较原始的方式，即手动patch的方式去混淆————</p><ol><li>先将各处BR指令改为B.XX指令，把间接跳转还原回直接跳转</li><li>跟进到直接跳转处，重复上述步骤，直到遇到RET</li><li>然后对此函数所有逻辑进行快捷键u，取消定义</li><li>最后再统一快捷键c、p，编译指令后生成函数</li></ol><p>以下为与加密相关函数的patch位置————</p><ol><li><p>sub_3B8CC</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000003</span>B950 <span class="number">61</span> <span class="number">00</span> <span class="number">00</span> <span class="number">54</span>                   B.NE            loc_3B95C</span><br><span class="line">.text:<span class="number">000000000003</span>B990 <span class="number">61</span> <span class="number">00</span> <span class="number">00</span> <span class="number">54</span>                   B.EQ            loc_3B99C</span><br></pre></td></tr></table></figure></li><li><p>sub_3B8CC-&gt;sub_3B9D4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000003</span>BA00 <span class="number">8</span>A <span class="number">0</span>A <span class="number">00</span> <span class="number">54</span>                   B.GE            loc_3BB50</span><br><span class="line">.text:<span class="number">000000000003</span>BA30 <span class="number">23</span> <span class="number">02</span> <span class="number">00</span> <span class="number">54</span>                   B.CC            loc_3BA74</span><br><span class="line">.text:<span class="number">000000000003</span>BA70 <span class="number">2</span>A FE FF <span class="number">54</span>                   B.GE            loc_3BA34</span><br><span class="line">.text:<span class="number">000000000003</span>BADC <span class="number">83</span> <span class="number">02</span> <span class="number">00</span> <span class="number">54</span>                   B.CC            loc_3BB2C</span><br><span class="line">.text:<span class="number">000000000003</span>BB28 CA FD FF <span class="number">54</span>                   B.GE            loc_3BAE0</span><br><span class="line">.text:<span class="number">000000000003</span>BB4C C3 F5 FF <span class="number">54</span>                   B.CC            loc_3BA04</span><br></pre></td></tr></table></figure></li><li><p>sub_3B8CC-&gt;sub_3A054</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000003</span>A08C <span class="number">21</span> <span class="number">03</span> <span class="number">00</span> <span class="number">54</span>                   B.NE            loc_3A0F0</span><br><span class="line">.text:<span class="number">000000000003</span>A0C8 <span class="number">41</span> <span class="number">01</span> <span class="number">00</span> <span class="number">54</span>                   B.NE            loc_3A0F0</span><br></pre></td></tr></table></figure></li><li><p>sub_3B8CC-&gt;sub_3A924</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000003</span>AA70 <span class="number">40</span> <span class="number">05</span> <span class="number">00</span> <span class="number">54</span>                   B.EQ            loc_3AB18</span><br><span class="line">.text:<span class="number">000000000003</span>AAA0 C0 <span class="number">03</span> <span class="number">00</span> <span class="number">54</span>                   B.EQ            loc_3AB18</span><br><span class="line">.text:<span class="number">000000000003</span>AAD4 A0 <span class="number">01</span> <span class="number">00</span> <span class="number">54</span>                   B.EQ            loc_3AB08</span><br><span class="line">.text:<span class="number">000000000003</span>AB04 <span class="number">60</span> <span class="number">03</span> <span class="number">00</span> <span class="number">54</span>                   B.EQ            loc_3AB70</span><br></pre></td></tr></table></figure></li><li><p>sub_3B8CC-&gt;sub_3A924-&gt;sub_3B4B8</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000003</span>B508 <span class="number">1</span>F <span class="number">20</span> <span class="number">03</span> D5                   NOP</span><br><span class="line">.text:<span class="number">000000000003</span>B54C <span class="number">0</span>D FE FF <span class="number">54</span>                   B.LE            loc_3B50C</span><br></pre></td></tr></table></figure></li><li><p>sub_3B8CC-&gt;sub_3A924-&gt;sub_3B570</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000003</span>B5C0 <span class="number">1</span>F <span class="number">20</span> <span class="number">03</span> D5                   NOP</span><br><span class="line">.text:<span class="number">000000000003</span>B604 <span class="number">0</span>D FE FF <span class="number">54</span>                   B.LE            loc_3B5C4</span><br></pre></td></tr></table></figure></li></ol><h3 id="加密分析-I"><a href="#加密分析-I" class="headerlink" title="加密分析 I"></a>加密分析 I</h3><p>现在终于可以对 libsec2023.so中的sub_31164进行分析了</p><ol><li><p>sub_3B8CC<br><img src="/img/2025-1-13/14.png"></p></li><li><p>sub_3B8CC-&gt;sub_3B9D4<br>加密过程涉及数组操作，需先将 “int v8”类型改为 “char v8[4]”<br><img src="/img/2025-1-13/12.png"></p></li></ol><p>还原后如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">encrypt1</span><span class="params">(<span class="type">uint32_t</span> ipt[])</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">ssize_t</span> idx = <span class="number">0</span>; idx &lt; <span class="number">2</span>; ++idx) &#123;</span><br><span class="line">    <span class="type">uint8_t</span> buf[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, tmp[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">ssize_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      buf[i] = ((<span class="type">uint8_t</span> *)&amp;ipt[idx])[i] ^ i;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    buf[<span class="number">3</span>] ^= <span class="number">0x86</span>;</span><br><span class="line">    buf[<span class="number">2</span>] -= <span class="number">0x5E</span>;</span><br><span class="line">    buf[<span class="number">1</span>] ^= <span class="number">0xD3</span>;</span><br><span class="line">    buf[<span class="number">0</span>] -= <span class="number">0x1C</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">ssize_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      tmp[i] = buf[i] - i * <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ipt[idx] = *(<span class="type">uint32_t</span> *)&amp;tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>sub_3B8CC-&gt;sub_3A924<br>看到 v11偏移1000+处的函数指针，由此推出涉及JNI操作，需要先将v11的类型改为 “JNIEnv*”<br><img src="/img/2025-1-13/13.png"></li></ol><p>通过hook输出 GetStaticMethodID()的传参，可获取要调用的java方法 名为”encrypt”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookGetStaticMethodID</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> symbol <span class="keyword">of</span> symbols) &#123;</span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&quot;GetStaticMethodID&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> jniAddress = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(jniAddress, &#123;</span><br><span class="line">                <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Class name:&#x27;</span>, args[<span class="number">2</span>].<span class="title function_">readCString</span>());</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Method name:&#x27;</span>, args[<span class="number">3</span>].<span class="title function_">readCString</span>());</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Signature:&#x27;</span>, args[<span class="number">4</span>].<span class="title function_">readCString</span>());</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然是java方法，那就转向java层分析。然而将应用拖进jadx，发现搜索不到名为”encrypt”的方法<br>因此猜测该encrypt方法所在的dex，是在应用运行期间动态加载进内存的<br>由此使用frida-dexdump，dump出dex<br><img src="/img/2025-1-13/15.png"></p><p>接下来从 classes00.dex开始一个个拖进jadx，成功找到 Encrypt.encrypt()<br><img src="/img/2025-1-13/16.png"></p><p>代码是经过 BlackObfuscator混淆过的，不过可以通过扔进 自带反混淆功能的JEB<br>优化后的代码大致是这个样子的<br><img src="/img/2025-1-13/17.png"></p><p>还原后如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">encrypt2</span><span class="params">(<span class="type">uint32_t</span> ipt)</span> </span>&#123;</span><br><span class="line">  <span class="type">uint32_t</span> n1 = <span class="number">0</span>, n2 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">uint8_t</span> result[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, *buf = (<span class="type">uint8_t</span> *)&amp;ipt;</span><br><span class="line">  <span class="type">uint8_t</span> key[<span class="number">8</span>] = &#123;<span class="number">0x32</span>, <span class="number">0xCD</span>, <span class="number">0xFF</span>, <span class="number">0x98</span>, <span class="number">0x19</span>, <span class="number">0xB2</span>, <span class="number">0x7C</span>, <span class="number">0x9A</span>&#125;;</span><br><span class="line"> </span><br><span class="line">  n1 = __builtin_bswap32(*(<span class="type">uint32_t</span> *)buf);</span><br><span class="line">  n2 = (n1 &gt;&gt; <span class="number">7</span>) | (n1 &lt;&lt; <span class="number">25</span>);</span><br><span class="line"> </span><br><span class="line">  *(<span class="type">uint32_t</span> *)result = __builtin_bswap32(n2);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> idx = <span class="number">0</span>; idx &lt; <span class="number">8</span>; idx++) &#123;</span><br><span class="line">    result[idx] = (result[idx] ^ key[idx % <span class="number">8</span>]);</span><br><span class="line">    result[idx] = (result[idx] + idx);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> *(<span class="type">uint32_t</span> *)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加密分析-II"><a href="#加密分析-II" class="headerlink" title="加密分析 II"></a>加密分析 II</h3><p>sub_31164中调用完 sub_3B8CC后，来了个间接跳转<br><img src="/img/2025-1-13/18.png"><br>动调跟进发现回到了 libil2cpp.so，开始执行 sub_465AB4<br><img src="/img/2025-1-13/19.png"></p><ol><li><p>sub_465AB4-&gt;OO0OoOOo_Oo0__oOOoO0o0()<br>循环读取opcode，分发给各个handler，具备VM的特征<br>然而因本人目前能力有限，此处暂无法做分析并还原</p></li><li><p>sub_465AB4-&gt;魔改XTEA<br>继VM之后，来到最后的XTEA加密，存在魔改<br><img src="/img/2025-1-13/20.png"></p></li></ol><p>其中v24为key，因为是动态生成的，所以可通过动调可获取<br>整体逻辑还原后如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">encrypt4</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> v1, <span class="type">unsigned</span> <span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[] = &#123; <span class="number">0x7b777c63</span>, <span class="number">0xc56f6bf2</span>, <span class="number">0x2b670130</span>, <span class="number">0x76abd7fe</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum1 = <span class="number">0xBEEFBEEF</span>, sum2 = <span class="number">0x9D9D7DDE</span>, i = <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        v1 += (sum1 - key[(sum1 &amp; <span class="number">3</span>)]) ^ (((v2 &lt;&lt; <span class="number">7</span>) ^ (v2 &gt;&gt; <span class="number">8</span>)) + v2);</span><br><span class="line">        sum1 -= <span class="number">0x21524111</span>;</span><br><span class="line">        v2 += (sum2 + key[(sum2 &gt;&gt; <span class="number">13</span>) &amp; <span class="number">3</span>]) ^ (((v1 &lt;&lt; <span class="number">8</span>) ^ (v1 &gt;&gt; <span class="number">7</span>)) - v1);</span><br><span class="line">        sum2 -= <span class="number">0x21524111</span>;</span><br><span class="line">        --i;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>Unity、so加固（加密）、Frida检测（端口、CRC）、花指令（CSEL+BR）、代码混淆（BlackObfuscator）、动态加载、VM、魔改XTEA | so dump、so修复、符号还原、dex dump</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://oacia.dev/sec-2023/">https://oacia.dev/sec-2023/</a><br><a href="https://bbs.kanxue.com/thread-276949.htm">https://bbs.kanxue.com/thread-276949.htm</a><br><a href="https://bbs.kanxue.com/thread-276896.htm">https://bbs.kanxue.com/thread-276896.htm</a><br><a href="https://bbs.kanxue.com/thread-276893.htm">https://bbs.kanxue.com/thread-276893.htm</a><br><a href="https://www.xiaowaaa.asia/article/1675df8d-8884-80e6-a777-eb524d4d70e4#1675df8d888480668f6dc01463eaa13e">https://www.xiaowaaa.asia/article/1675df8d-8884-80e6-a777-eb524d4d70e4#1675df8d888480668f6dc01463eaa13e</a><br><a href="https://moodyblue.cn/category/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%AE%89%E5%8D%932023%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/">https://moodyblue.cn/category/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%AE%89%E5%8D%932023%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爱奇艺TV版去广告</title>
      <link href="/2025/01/12/2025-1-12%20%E7%88%B1%E5%A5%87%E8%89%BATV%E7%89%88%E5%8E%BB%E5%B9%BF%E5%91%8A/"/>
      <url>/2025/01/12/2025-1-12%20%E7%88%B1%E5%A5%87%E8%89%BATV%E7%89%88%E5%8E%BB%E5%B9%BF%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>自从入坑逆向，就想试一次 对市场上应用进行功能篡改<br>但介于日益加强的加固手段和风控策略，一直以来都没有适合上手的样本供分析<br>不过得益于别人的分享，这几天得到了一个很合适的样本，于是赶紧端上来试试</p><h1 id="应用打开时广告"><a href="#应用打开时广告" class="headerlink" title="应用打开时广告"></a>应用打开时广告</h1><h2 id="Activity定位"><a href="#Activity定位" class="headerlink" title="Activity定位"></a>Activity定位</h2><p>使用MT管理器的“Activity记录”功能<br><img src="/img/2025-1-12/2.png"><br>应用打开时，可以看到该开屏广告所属的Activity<br><img src="/img/2025-1-12/1.png"></p><h2 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h2><p>Spawn模式注入，动态hook该类中所有方法，调用时打印信息 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> targetClass = <span class="string">&quot;com.qiyi.video.speaker.activity.WelcomeActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">WelcomeActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(targetClass);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> methods = <span class="title class_">WelcomeActivity</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line"></span><br><span class="line">    methods.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">method</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> methodName = method.<span class="title function_">getName</span>();</span><br><span class="line">        <span class="keyword">var</span> methodSignature = method.<span class="title function_">toGenericString</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!methodName.<span class="title function_">startsWith</span>(<span class="string">&quot;$&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> originalMethod = <span class="title class_">WelcomeActivity</span>[methodName].<span class="property">overloads</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            originalMethod.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[Enter Method] &quot;</span> + targetClass + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;()&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> result = originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以下为各方法调用顺序<br><img src="/img/2025-1-12/3.png"><br>而且发现，在开屏广告倒计时结束的那一刻，access$200()调用信息刚好被打印</p><p>从该方法切入，smali中可以看到如下调用链<br><img src="/img/2025-1-12/4.png"><br>继续沿着调用链往上找，在 launchMain()中就能看到开屏广告放出逻辑<br>最上方的判断，决定了是否跳过广告，直接打开主界面<br><img src="/img/2025-1-12/5.png"></p><h2 id="逻辑篡改"><a href="#逻辑篡改" class="headerlink" title="逻辑篡改"></a>逻辑篡改</h2><p>这下目标就很明确了，即此判断逻辑在smali中对应的 if-ne 语句<br><img src="/img/2025-1-12/6.png"><br>改成 if-eq 语句即可<br><img src="/img/2025-1-12/7.png"></p><h1 id="视频播放时广告"><a href="#视频播放时广告" class="headerlink" title="视频播放时广告"></a>视频播放时广告</h1><h2 id="控件定位"><a href="#控件定位" class="headerlink" title="控件定位"></a>控件定位</h2><p>其实也可以延续前面的思路，使用“Activity记录”<br><img src="/img/2025-1-12/8.png"><br>不过这里换个思路，使用开发助手的“布局查看”功能<br>其实原理上是相通的，都是基于Android原生的 AccessibilityService类（无障碍服务）<br><img src="/img/2025-1-12/9.png"><br>进入视频播放界面时，可以看到该界面上所有控件的信息<br><img src="/img/2025-1-12/10.png"></p><p>其中”暂停”控件，是触发 暂停广告<br>“会员关闭此广告”控件，只会触发弹出 VIP会员充值界面<br><img src="/img/2025-1-12/13.png"><br>而”倒计时”控件，用于判断 是否结束广告播放</p><p>因此这里选择上述第三个控件 R.id.account_ads_time_pre_ad 作为切入点<br>其一共在三处方法中被引用<br><img src="/img/2025-1-12/11.png"></p><h2 id="逻辑分析-I"><a href="#逻辑分析-I" class="headerlink" title="逻辑分析 I"></a>逻辑分析 I</h2><p>Attach模式注入，Hook以上方法，调用时打印信息 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hookMethod</span>(<span class="params">className, methodName</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> targetClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">        targetClass[methodName].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\n[Enter Method] <span class="subst">$&#123;className&#125;</span>.<span class="subst">$&#123;methodName&#125;</span>()`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[methodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[Success] Hooked <span class="subst">$&#123;className&#125;</span>.<span class="subst">$&#123;methodName&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hookMethod</span>(<span class="string">&quot;com.iqiyi.video.adview.roll.aux&quot;</span>, <span class="string">&quot;Vz&quot;</span>);</span><br><span class="line">    <span class="title function_">hookMethod</span>(<span class="string">&quot;com.iqiyi.video.adview.roll.com8&quot;</span>, <span class="string">&quot;initView&quot;</span>);</span><br><span class="line">    <span class="title function_">hookMethod</span>(<span class="string">&quot;com.iqiyi.video.adview.roll.com4&quot;</span>, <span class="string">&quot;initView&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时再点入视频，输出如下方法调用顺序<br><img src="/img/2025-1-12/12.png"><br>因此先将目标转向 aux类，其中与 广告倒计时处理逻辑相关如下<br><img src="/img/2025-1-12/20.png"></p><p>由此继续跟踪 Xc()中调用的 getAdDuration()<br>其本质上是在调用 以下接口 的实现类中的方法<br><img src="/img/2025-1-12/14.png"><br>可以看到该接口存在多处实现，并存在如下调用关系<br><img src="/img/2025-1-12/15.png"><br>顺着调用链来到 QYMediaPlayerProxy类中的 getAdDuration()<br><img src="/img/2025-1-12/16.png"></p><p>继续一路跟踪，最终来到与native的交界处<br>其中通过InvokeMethod()，JNI调用native函数 获取广告的剩余播放时间<br><img src="/img/2025-1-12/17.png"></p><p>然而经过尝试发现，hook修改该方法返回值为0，只能让 每隔一秒刷新显示在屏幕上的数值 为0<br>而无法直接让 是否结束广告播放的判断逻辑 成立<br><img src="/img/2025-1-12/18.png"></p><h2 id="逻辑分析-II"><a href="#逻辑分析-II" class="headerlink" title="逻辑分析 II"></a>逻辑分析 II</h2><p>这下只能回到处于调用链上层的 QYMediaPlayerProxy类<br>换个思路，不通过修改广告剩余时长，让广告提前结束；而是直接修改 是否显示广告界面的判断逻辑，就像前面处理 应用打开时广告那样</p><p>由此定位到如下调用链<br><img src="/img/2025-1-12/21.png"><br>prepareBigCorePlayback()中选择播放策略，进入 performBigCorePlayback()直接执行核心播放逻辑<br>其中的核心判断语句，在检查到 播放数据、playerInfo中的某个信息 为空后，即不显示广告界面</p><p>至于这里所说的”某个信息”，便是来自PlayerInfo类的，PlayerExtraInfo类中的播放地址、播放地址类型<br>（其实如果能早点找到这个用户信息类，前面切入点会多很多）<br><img src="/img/2025-1-12/22.png"></p><h2 id="逻辑篡改-1"><a href="#逻辑篡改-1" class="headerlink" title="逻辑篡改"></a>逻辑篡改</h2><p>上述判断逻辑，对应smali中的 if-eqz 语句<br><img src="/img/2025-1-12/19.png"><br>改成 if-nez 语句即可</p><p>至于接下来，就是常规的重打包、重签名，就不再赘述了</p>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯游戏安全 2024 安卓 初赛</title>
      <link href="/2025/01/08/2025-1-8%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20%E5%AE%89%E5%8D%93%20%E5%88%9D%E8%B5%9B/"/>
      <url>/2025/01/08/2025-1-8%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20%E5%AE%89%E5%8D%93%20%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>一次UE4逆向的初体验，整体下来的感觉就是，在运用常规Android逆向手段的基础上，<br>还要对UE4的 C++源码、API使用、对象内存布局 都较为熟悉，不然无从下手 </p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/2025-1-8/5.png"></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="ARM64模拟器"><a href="#ARM64模拟器" class="headerlink" title="ARM64模拟器"></a>ARM64模拟器</h2><p>原来一直用的 leidian模拟器是x86-64的，但是这里限制ARM64，所以得搞一台<br>然而人比较懒，比起物理机，还是想着用Android Studio中自带的模拟器</p><p>创建后一跑，报错“Unable to launch Pixel 8 APl34-Theemulator process for AVD Pixel_8_APl_34 hasterminated.”<br>按照网上的教程动了环境变量、.android\avd 路径、Windows功能————结果都无济于事<br>这时候意识到Android Studio还有个日志（C:\Users\xxx\AppData\Local\Google\AndroidStudio2023.3\log\idea.log）<br><img src="/img/2025-1-8/6.png"></p><p>难道我x86-64主机注定与ARM64模拟器无缘吗？<br>其实不然，查阅资料得知，x86_64 主机上进行 ARM64 模拟目前只能达到 API 27 Oreo 级别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __x86_64__</span></span><br><span class="line">  <span class="keyword">if</span> (sarch == <span class="string">&quot;arm64&quot;</span> &amp;&amp; apiLevel &gt;=<span class="number">28</span>) &#123;</span><br><span class="line">      APANIC(<span class="string">&quot;Avd&#x27;s CPU Architecture &#x27;%s&#x27; is not supported by the QEMU2 emulator on x86_64 host.\n&quot;</span>, avdarch);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>也就是在创建设备时，只能在如下镜像中挑选<br><img src="/img/2025-1-8/7.png"><br>但是据说即便搞出来了性能也会低到感人，所以为日后着想，还是着手搞一台真机为妙</p><h2 id="ARM64真机"><a href="#ARM64真机" class="headerlink" title="ARM64真机"></a>ARM64真机</h2><p>这个过程就非常曲折了，需要搞到root</p><p>一开始试了两台接口是Micro USB的老机，然而怎么都连不上电脑，怀疑是驱动问题<br>google usb_driver已在设备管理器中添加，但对于没显示“便携设备”选项的问题，这里参考了以下两篇文章————<br><a href="https://webbedxp.com/zh-CN/tech/ardith/solucion-dispositivos-portatiles-no-se-muestran-en-administrador-de-dispositivos-windows-11-10/">1.</a><br><a href="https://blog.csdn.net/weixin_42277380/article/details/103736309">2.</a><br>然而即便打开了“便携设备”，其索引下的“MTP USB设备”怎么更新驱动都没用，一直冒黄感叹号，因此只能无奈放弃</p><p>接下来试了家里有台空出来的较新机子，Type-C接口一下就给电脑连上了，然而出场就是锁bootloader的，因此又放弃</p><p>只能上淘宝买个O版 Pixel 4了<br>然而没想到，只是在订单备注“Androi 10，有root需求”，发过来就是已刷入Magisk、EdXposed的机子<br>拿到手只需一键即可root，这可省了我一大堆事了</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="before-section0"><a href="#before-section0" class="headerlink" title="before section0"></a>before section0</h2><h3 id="dump-SDK"><a href="#dump-SDK" class="headerlink" title="dump SDK"></a>dump SDK</h3><p>对于Android下的UE4逆向，首先需要dump SDK，得到各个API在 libUE4.so中的偏移地址（反过来讲，即符号还原）<br>大致包含以下几个步骤:</p><ol><li><p>AndroidManifest.xml中查看 “com.epicgames.ue4.GameActivity.EngineVersion”键值<br>但此处被抹去了，所以得用别的方法<br><img src="/img/2025-1-8/1.png"></p></li><li><p>IDA中分析libUE4.so，获取关键信息<br>版本：<br><img src="/img/2025-1-8/2.png"><br>一开始用 alt+b 去搜”+UE4+Release”，还搜不到。<br>观察后发现部分字符串的是UTF-16编码的，而非UTF-8。<br>因此”2b 2b 55 45 34 2b 52 65 6c 65 61 73 65”的基础上，每个字节间还要添个”00”</p></li></ol><p>GNames偏移（基于libUE4.so基址）：<br>对于寻找参数，大体思路是从UE源码入手，通过参数附近的特征字符串，快速定位到其本身<br>搜索 “ByteProperty”，交叉引用来到 FNamePool构造函数<br><img src="/img/2025-1-8/8.png"><br>继续对该函数进行交叉引用，此时的传参即是 GNames<br><img src="/img/2025-1-8/9.png"></p><p>GUObjectArray偏移：<br>同样的思路，搜索”CloseDisregardForGC”，交叉引用来到 FEngineLoop::PreInitPostStartupScreen()<br><img src="/img/2025-1-8/10.png"><br>其中”CloseDisregardForGC”的下方，便是 GUObjectArray<br><img src="/img/2025-1-8/11.png"></p><p>GWorld偏移：<br>搜索”    SeamlessTravel FlushLevelStreaming “，交叉引用来到 SeamlessTravelHandler::Tick()<br><img src="/img/2025-1-8/12.png"><br>顺着往上即可看到 GWorld<br><img src="/img/2025-1-8/13.png"></p><ol start="3"><li>使用 UE4Dumper工具，dump SDK<br>.&#x2F;Ue4dumper<br>–package com.tencent.ace.match2024<br>–ptrdec    （启用指针解密模式，以便正确读取数据）<br>–sdku      （基于 GObjectArray参数实现dump）<br>–gname 0x0B171CC0<br>–guobj 0x0B1B5F98<br>–output &#x2F;data&#x2F;local&#x2F;tmp<br>–newue     （启用对 UE4 4.23及以上版本的支持）</li></ol><h3 id="SDK-使用示例"><a href="#SDK-使用示例" class="headerlink" title="SDK 使用示例"></a>SDK 使用示例</h3><p>结合各API偏移地址与 libUE4.so基址，可以实现调用native的任意 UE4 API，从而实现外挂功能<br>这里简单展示如何调用API————SetActorLocation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setActorLocation</span>(<span class="params">actor_addr, x, y, z</span>) &#123;</span><br><span class="line">    <span class="comment">// SetActorLocation - 0x965DC3C</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x8C3181C</span>); </span><br><span class="line">    <span class="comment">// 创建目标函数的 本地JavaScript函数对象，需传入 目标函数地址、返回类型、参数类型数组</span></span><br><span class="line">    <span class="keyword">var</span> setLocationFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;bool&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;float&#x27;</span>]);</span><br><span class="line">    <span class="comment">// 调用目标函数并传递地址作为参数</span></span><br><span class="line">    <span class="title function_">setLocationFunc</span>(<span class="title function_">ptr</span>(actor_addr), <span class="number">0</span>, <span class="title function_">ptr</span>(<span class="number">0</span>), <span class="number">0</span>, x, y, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有点要注意，dump的SDK中显示的函数偏移地址，本质上是该API的中转函数的；中转函数在return处调用的，才是该API本身<br>这也是为什么上述示例中，使用的是 0x8C3181C 而不是 0x965DC3C<br><img src="/img/2025-1-8/14.png"></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>已知参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">GName</span>_Offset = <span class="number">0xB171CC0</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GUObjectArray</span>_Offset = <span class="number">0xB1B5F98</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GWorld</span>_Ptr_Offset = <span class="number">0xB32D8A8</span></span><br></pre></td></tr></table></figure><p>初始化参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleBase;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GName</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GUObjectArray</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">GWorld</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">moduleName</span>)&#123;</span><br><span class="line">  moduleBase = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(moduleName)；</span><br><span class="line">  <span class="title class_">GName</span> = moduleBase.<span class="title function_">add</span>(<span class="title class_">GName</span>_Offset);</span><br><span class="line">  <span class="title class_">GUObjectArray</span> = moduleBase.<span class="title function_">add</span>(<span class="title class_">GUObjectArray</span>_Offset);</span><br><span class="line">  <span class="title class_">GWorld</span> = moduleBase.<span class="title function_">add</span>(<span class="title class_">GWorld</span>_Offset).<span class="title function_">readPointer</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">set</span>(<span class="string">&#x27;liblibUE4.so&#x27;</span>)</span><br></pre></td></tr></table></figure><p>UObject类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> offset_UObject_ClassPrivate = <span class="number">0x10</span>;</span><br><span class="line"><span class="keyword">var</span> offset_UObject_FNameIndex = <span class="number">0x18</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UObject</span> = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValid</span>(obj))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">getFNameFromID</span>(<span class="variable language_">this</span>.<span class="title function_">getNameId</span>(obj));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;None&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isValid</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> isValid = (<span class="title function_">ptr</span>(obj) &gt; <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">getNameId</span>(obj) &gt; <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">getClass</span>(obj) &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getClass</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> classPrivate = <span class="title function_">ptr</span>(obj).<span class="title function_">add</span>(offset_UObject_ClassPrivate).<span class="title function_">readPointer</span>();</span><br><span class="line">        <span class="keyword">return</span> classPrivate;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getNameId</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> nameId = <span class="title function_">ptr</span>(obj).<span class="title function_">add</span>(offset_UObject_FNameIndex).<span class="title function_">readU32</span>();</span><br><span class="line">            <span class="keyword">return</span> nameId;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFNameFromID</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="comment">// FNamePool相关偏移量和步长</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FNameStride</span> = <span class="number">0x2</span>;                   <span class="comment">// FNameEntry 的步长，每个FNameEntry占用2字节</span></span><br><span class="line">  <span class="keyword">var</span> offset_GName_FNamePool = <span class="number">0x30</span>;       <span class="comment">// GName 到 FNamePool 的偏移量</span></span><br><span class="line">  <span class="keyword">var</span> offset_FNamePool_Blocks = <span class="number">0x10</span>;      <span class="comment">// FNamePool 到 Blocks 的偏移量</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">// FNameEntry相关偏移量和位</span></span><br><span class="line">  <span class="keyword">var</span> offset_FNameEntry_Info = <span class="number">0</span>;          <span class="comment">// FNameEntry 到 Info 的偏移量</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FNameEntry</span>_LenBit = <span class="number">6</span>;               <span class="comment">// FNameEntry 长度位</span></span><br><span class="line">  <span class="keyword">var</span> offset_FNameEntry_String = <span class="number">0x2</span>;      <span class="comment">// FNameEntry 到字符串部分的偏移量</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 计算块和偏移量</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Block</span> = index &gt;&gt; <span class="number">16</span>;                 <span class="comment">// 块索引</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Offset</span> = index &amp; <span class="number">65535</span>;              <span class="comment">// 块内偏移量</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 获取FNamePool的起始地址</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FNamePool</span> = <span class="title class_">GName</span>.<span class="title function_">add</span>(offset_GName_FNamePool);</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 获取特定块的地址</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">NamePoolChunk</span> = <span class="title class_">FNamePool</span>.<span class="title function_">add</span>(offset_FNamePool_Blocks + <span class="title class_">Block</span> * <span class="number">8</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 计算FNameEntry的地址</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FNameEntry</span> = <span class="title class_">NamePoolChunk</span>.<span class="title function_">add</span>(<span class="title class_">FNameStride</span> * <span class="title class_">Offset</span>);</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 读取FNameEntry的Header</span></span><br><span class="line">      <span class="keyword">if</span> (offset_FNameEntry_Info !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> <span class="title class_">FNameEntryHeader</span> = <span class="title class_">FNameEntry</span>.<span class="title function_">add</span>(offset_FNameEntry_Info).<span class="title function_">readU16</span>();    </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> <span class="title class_">FNameEntryHeader</span> = <span class="title class_">FNameEntry</span>.<span class="title function_">readU16</span>();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取字符串地址</span></span><br><span class="line">  <span class="keyword">var</span> str_addr = <span class="title class_">FNameEntry</span>.<span class="title function_">add</span>(offset_FNameEntry_String);</span><br><span class="line">  <span class="comment">// console.log(`str_addr: $&#123;str_addr&#125;`);</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 计算字符串长度和宽度</span></span><br><span class="line">  <span class="keyword">var</span> str_length = <span class="title class_">FNameEntryHeader</span> &gt;&gt; <span class="title class_">FNameEntry</span>_LenBit; <span class="comment">// 计算字符串长度</span></span><br><span class="line">  <span class="keyword">var</span> wide = <span class="title class_">FNameEntryHeader</span> &amp; <span class="number">1</span>;                       <span class="comment">// 判断字符串是否为宽字符</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 如果是宽字符，返回 &quot;widestr&quot;</span></span><br><span class="line">  <span class="keyword">if</span> (wide) <span class="keyword">return</span> <span class="string">&quot;widestr&quot;</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 如果字符串长度合理，读取并返回UTF-8字符串</span></span><br><span class="line">  <span class="keyword">if</span> (str_length &gt; <span class="number">0</span> &amp;&amp; str_length &lt; <span class="number">250</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> str = str_addr.<span class="title function_">readUtf8String</span>(str_length);</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;None&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各Actor地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getActorsAddr</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Level</span>_Offset = <span class="number">0x30</span>  </span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Actors</span>_Offset = <span class="number">0x98</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Level</span> = <span class="title class_">GWorld</span>.<span class="title function_">add</span>(<span class="title class_">Level</span>_Offset).<span class="title function_">readPointer</span>()    <span class="comment">// 读取GWorld的level指针</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Actors</span> = <span class="title class_">Level</span>.<span class="title function_">add</span>(<span class="title class_">Actors</span>_Offset).<span class="title function_">readPointer</span>()   <span class="comment">// 读取Actors的指针</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Actors</span>_Num = <span class="title class_">Level</span>.<span class="title function_">add</span>(<span class="title class_">Actors</span>_Offset).<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readU32</span>()    <span class="comment">// 获取Actor的数量</span></span><br><span class="line">  <span class="keyword">var</span> actorsAddr = &#123;&#125;;  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="title class_">Actors</span>_Num; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> actor_addr = <span class="title class_">Actors</span>.<span class="title function_">add</span>(index*<span class="number">8</span>).<span class="title function_">readPointer</span>()    <span class="comment">// 读取当前索引处的Actor地址</span></span><br><span class="line">        <span class="keyword">var</span> actorName = <span class="title class_">UObject</span>.<span class="title function_">getName</span>(actor_addr)   <span class="comment">// 通过地址获取字符串名字</span></span><br><span class="line">        actorsAddr[actorName] = actor_addr;   <span class="comment">// 以字符串名字对应地址</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        console.log(`actors[$&#123;index&#125;]`,actorName);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> actorsAddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="section0"><a href="#section0" class="headerlink" title="section0"></a>section0</h2><h3 id="获取Player位置"><a href="#获取Player位置" class="headerlink" title="获取Player位置"></a>获取Player位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">z</span> = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.z&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPlayerLocation</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">getActorLocation</span>(<span class="title function_">getPlayerAddr</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPlayerAddr</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> player_addr;</span><br><span class="line">    <span class="keyword">var</span> actorsAddr = <span class="title function_">getActorsAddr</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> actorsAddr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="string">&quot;FirstPersonCharacter_C&quot;</span>)&#123;  <span class="comment">// Player的Name，可事先从getActorsAddr()在控制台的输出中获取</span></span><br><span class="line">            player_addr = actorsAddr[key];  <span class="comment">// 获取Actor里Player地址</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> player_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getActorLocation</span>(<span class="params">actor_addr</span>)&#123;</span><br><span class="line">    <span class="comment">// GetActorLocation()</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x965ddf8</span>);</span><br><span class="line">    <span class="keyword">var</span> getLocationFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">var</span> buf = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title function_">getLocationFunc</span>(<span class="title function_">ptr</span>(actor_addr), buf, buf);</span><br><span class="line">        <span class="title function_">dumpVector</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dumpVector</span>(<span class="params">addr</span>)&#123;</span><br><span class="line">  <span class="comment">// 从地址空间中读取三个浮点数</span></span><br><span class="line">  <span class="keyword">const</span> values = <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(addr, <span class="number">3</span> * <span class="number">4</span>);  <span class="comment">// 3个float共占12个字节</span></span><br><span class="line">  <span class="comment">// 解析浮点数并初始化 Vector 对象</span></span><br><span class="line">  <span class="keyword">const</span> vec = <span class="keyword">new</span> <span class="title class_">Vector</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Float32Array</span>(values, <span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>],  <span class="comment">// 读取第一个浮点数</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Float32Array</span>(values, <span class="number">4</span>, <span class="number">1</span>)[<span class="number">0</span>],  <span class="comment">// 读取第二个浮点数</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Float32Array</span>(values, <span class="number">8</span>, <span class="number">1</span>)[<span class="number">0</span>]   <span class="comment">// 读取第三个浮点数</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] 坐标：&#x27;</span>,vec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">getPlayerLocation</span>();</span><br></pre></td></tr></table></figure><h3 id="篡改Player位置"><a href="#篡改Player位置" class="headerlink" title="篡改Player位置"></a>篡改Player位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setPlayerLocation</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">    <span class="title function_">setActorLocation</span>(<span class="title function_">getPlayerAddr</span>(), x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setActorLocation</span>(<span class="params">actor_addr, x, y, z</span>) &#123;</span><br><span class="line">    <span class="comment">// SetActorLocation(const FVector&amp; NewLocation, bool bSweep = false, FHitResult* OutSweepHitResult = nullptr, ETeleportType Teleport = ETeleportType::None)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x8C3181C</span>);</span><br><span class="line">    <span class="keyword">var</span> setLocationFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;bool&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;float&#x27;</span>]);</span><br><span class="line">    <span class="title function_">setLocationFunc</span>(<span class="title function_">ptr</span>(actor_addr), <span class="number">0</span>, <span class="title function_">ptr</span>(<span class="number">0</span>), <span class="number">0</span>, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setPlayerLocation</span>(-<span class="number">1000</span>, <span class="number">100</span>, <span class="number">270</span>);</span><br></pre></td></tr></table></figure><h2 id="section1"><a href="#section1" class="headerlink" title="section1"></a>section1</h2><h3 id="篡改所有Actor可见性"><a href="#篡改所有Actor可见性" class="headerlink" title="篡改所有Actor可见性"></a>篡改所有Actor可见性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SetVisibility</span>(<span class="params">actor_addr, bVisible, bOnlyThisComponent</span>) &#123;</span><br><span class="line">    <span class="comment">// SetVisibility(bool bVisible, bool bOnlyThisComponent = false)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x8E619BC</span>);</span><br><span class="line">    <span class="keyword">var</span> callSetVisibility = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&quot;void&quot;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="title function_">callSetVisibility</span>(<span class="title function_">ptr</span>(actor_addr).<span class="title function_">add</span>(<span class="number">0x130</span>).<span class="title function_">readPointer</span>(), bVisible, bOnlyThisComponent);   <span class="comment">// 操作特定组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setActorHidden</span>(<span class="params">actor_addr, NewHidden, bPropagateToChildren</span>) &#123;</span><br><span class="line">    <span class="comment">// SetActorHiddenInGame(bool bNewHidden, bool bPropagateToChildren = false)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x8E61C70</span>);</span><br><span class="line">    <span class="keyword">var</span> setActorHiddenFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&quot;void&quot;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;char&#x27;</span>, <span class="string">&#x27;char&#x27;</span>]);</span><br><span class="line">    <span class="title function_">setActorHiddenFunc</span>(<span class="title function_">ptr</span>(actor_addr), <span class="title class_">NewHidden</span>, bPropagateToChildren); <span class="comment">// 操作Actor</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setPlayerLocation</span>(-<span class="number">1700</span>, <span class="number">700</span>, <span class="number">270</span>)</span><br><span class="line"><span class="keyword">var</span> actors = <span class="title function_">getActorsAddr</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> actorName <span class="keyword">in</span> actors) &#123;</span><br><span class="line">    <span class="keyword">var</span> actor_addr = actors[actorName];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">SetVisibility</span>(actor_addr, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        setActorHidden(actor_addr, false, false);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="section2"><a href="#section2" class="headerlink" title="section2"></a>section2</h2><h3 id="篡改部分Actor可碰撞性"><a href="#篡改部分Actor可碰撞性" class="headerlink" title="篡改部分Actor可碰撞性"></a>篡改部分Actor可碰撞性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SetCollisionEnable</span>(<span class="params">actor_addr, NewType</span>) &#123;</span><br><span class="line">    <span class="comment">// SetCollisionEnabled(ECollisionEnabled::Type NewType)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = moduleBase.<span class="title function_">add</span>(<span class="number">0x933B300</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">CallFunc</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="title class_">CallFunc</span>(<span class="title function_">ptr</span>(actor_addr).<span class="title function_">add</span>(<span class="number">0x130</span>).<span class="title function_">readPointer</span>(), <span class="title class_">NewType</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setStaticMeshActorCollisionEnabled</span>(<span class="params">actor_addr, NewType</span>) &#123;</span><br><span class="line">    <span class="comment">// SetCollisionEnabled(ECollisionEnabled::Type NewType)</span></span><br><span class="line">    <span class="keyword">var</span> f_addr = actor_addr.<span class="title function_">add</span>(<span class="number">0x220</span>).<span class="title function_">readPointer</span>().<span class="title function_">readPointer</span>().<span class="title function_">add</span>(<span class="number">0x660</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">CallFunc</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(f_addr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="title class_">CallFunc</span>(<span class="title function_">ptr</span>(actor_addr).<span class="title function_">add</span>(<span class="number">0x130</span>).<span class="title function_">readPointer</span>(), <span class="title class_">NewType</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setPlayerLocation</span>(-<span class="number">1700</span>, <span class="number">1500</span>, <span class="number">270</span>)</span><br><span class="line"><span class="keyword">var</span> actors = <span class="title function_">getActorsAddr</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> actorName <span class="keyword">in</span> actors) &#123;</span><br><span class="line">    <span class="keyword">if</span> (actorName.<span class="title function_">includes</span>(<span class="string">&quot;Cube&quot;</span>)) &#123; <span class="comment">// 检查名字是否包含 &quot;Cube&quot;</span></span><br><span class="line">        <span class="keyword">var</span> actor_addr = actors[actorName];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">SetCollisionEnable</span>(actor_addr, <span class="number">3</span>); <span class="comment">// 设置为可碰撞</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            setActorHidden(actor_addr, false, false);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="section3"><a href="#section3" class="headerlink" title="section3"></a>section3</h2><h3 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h3><p>最后一部分flag位于 libplay.so的 get_last_flag()中，大致逻辑为————</p><ol><li><p>key,cipher分别被异或<br><img src="/img/2025-1-8/15.png"></p></li><li><p>sub_192C中，使用key对输入进行循环异或<br>其中涉及 基于寄存器的BR间接跳转（后续操作都如出一辙，访问函数指针表，跳转到指定函数处，循环往复）<br><img src="/img/2025-1-8/16.png"></p></li><li><p>sub_19BC中，字母表被异或后，进行换表Base64加密<br><img src="/img/2025-1-8/17.png"></p></li><li><p>off_3DB0中，与cipher进行比较<br><img src="/img/2025-1-8/18.png"></p></li></ol><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><ol><li><p>异或后cipher 进行换表Base64解密<br><img src="/img/2025-1-8/19.png"></p></li><li><p>与异或后key 进行异或</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">base64_decoded = <span class="built_in">bytearray</span>([</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x4d</span>, <span class="number">0x60</span>, <span class="number">0x74</span>, <span class="number">0x38</span>, <span class="number">0x49</span>, <span class="number">0x64</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0x2c</span>, <span class="number">0x7b</span>, <span class="number">0x4f</span>, <span class="number">0x03</span>, <span class="number">0x68</span>, <span class="number">0x36</span>, <span class="number">0x1f</span>, <span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x8e</span>, <span class="number">0x8a</span> </span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytearray</span>([</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x0C</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0x16</span>, <span class="number">0x27</span>, <span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0x49</span>, <span class="number">0x1A</span>, <span class="number">0x3B</span>, <span class="number">0x5C</span>, <span class="number">0x2D</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0xFE</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    base64_decoded[i] ^= key[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> byte <span class="keyword">in</span> base64_decoded:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(byte), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>UE4、C++、花指令（CEST+BR）、Base64 |SDK dump</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://bbs.kanxue.com/thread-281998.htm">https://bbs.kanxue.com/thread-281998.htm</a><br><a href="http://www.yxfzedu.com/article/10613">http://www.yxfzedu.com/article/10613</a><br><a href="https://www.cnblogs.com/revercc/p/17641855.html">https://www.cnblogs.com/revercc/p/17641855.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Frida检测及对抗</title>
      <link href="/2025/01/06/2025-1-6%20Frida%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%AF%B9%E6%8A%97/"/>
      <url>/2025/01/06/2025-1-6%20Frida%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%AF%B9%E6%8A%97/</url>
      
        <content type="html"><![CDATA[<p>本文记录了Android中常见的frida检测手段，从原理及对抗两个方面进行总结<br>文章会根据后续的学习进度，持续追加新内容</p><p>注：</p><ol><li>frida注入本质上是基于ptrace()的，这点与Android下的调试器类似。因此frida检测与反调试有诸多相通之处<br>对于本文没涉及到的内容，会在同系列的《反调试及对抗》中进行补充说明</li><li>因frida版本的迭代，部分检测手段已失效，这里不再列举</li><li>因检测逻辑一般不写在java层，这里只列举native下的情况</li><li>默认环境如下————Android 9.0.0、arm64</li></ol><h1 id="检测手段"><a href="#检测手段" class="headerlink" title="检测手段"></a>检测手段</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;Ms135&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkPort</span><span class="params">(<span class="type">int</span> port)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkDataLocalTmp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkMapsFile</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkTaskDirectory</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareLibraryBytes</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check_text_segment_integrity</span><span class="params">(<span class="type">const</span> std::string&amp; libPath)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isFridaAttached</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">checkPort</span>(<span class="number">27042</span>) ||</span><br><span class="line">           <span class="built_in">checkDataLocalTmp</span>() ||</span><br><span class="line">           <span class="built_in">checkMapsFile</span>() ||</span><br><span class="line">           <span class="built_in">checkTaskDirectory</span>() ||</span><br><span class="line">           <span class="built_in">compareLibraryBytes</span>() ||</span><br><span class="line">           !<span class="built_in">check_text_segment_integrity</span>(<span class="string">&quot;/system/lib64/libc.so&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27042端口"><a href="#27042端口" class="headerlink" title="27042端口"></a>27042端口</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkPort</span><span class="params">(<span class="type">int</span> port)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sockfd &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="string">&#x27;0&#x27;</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> isConnected = <span class="built_in">connect</span>(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)) == <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">close</span>(sockfd);</span><br><span class="line">    <span class="keyword">return</span> isConnected;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特定目录"><a href="#特定目录" class="headerlink" title="特定目录"></a>特定目录</h2><h3 id="data-local-tmp"><a href="#data-local-tmp" class="headerlink" title="&#x2F;data&#x2F;local&#x2F;tmp"></a>&#x2F;data&#x2F;local&#x2F;tmp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkDataLocalTmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DIR *dir = <span class="built_in">opendir</span>(<span class="string">&quot;/data/local/tmp&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!dir) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dirent</span> *entry;</span><br><span class="line">    <span class="keyword">while</span> ((entry = <span class="built_in">readdir</span>(dir)) != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(entry-&gt;d_name, <span class="string">&quot;frida&quot;</span>)) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line">    <span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proc-self-maps"><a href="#proc-self-maps" class="headerlink" title="&#x2F;proc&#x2F;self&#x2F;maps"></a>&#x2F;proc&#x2F;self&#x2F;maps</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkMapsFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">maps</span><span class="params">(<span class="string">&quot;/proc/self/maps&quot;</span>, ios::in)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!maps.<span class="built_in">is_open</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    string line;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(maps, line)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.<span class="built_in">find</span>(<span class="string">&quot;frida&quot;</span>) != string::npos) &#123;</span><br><span class="line">            maps.<span class="built_in">close</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maps.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proc-self-task"><a href="#proc-self-task" class="headerlink" title="&#x2F;proc&#x2F;self&#x2F;task"></a>&#x2F;proc&#x2F;self&#x2F;task</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkTaskDirectory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DIR *dir = <span class="built_in">opendir</span>(<span class="string">&quot;/proc/self/task&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!dir) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dirent</span> *entry;</span><br><span class="line">    <span class="keyword">while</span> ((entry = <span class="built_in">readdir</span>(dir)) != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        string path = <span class="string">&quot;/proc/self/task/&quot;</span> + <span class="built_in">string</span>(entry-&gt;d_name) + <span class="string">&quot;/comm&quot;</span>;</span><br><span class="line">        <span class="function">ifstream <span class="title">comm</span><span class="params">(path, ios::in)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (comm.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">            <span class="function">string <span class="title">content</span><span class="params">((istreambuf_iterator&lt;<span class="type">char</span>&gt;(comm)), istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (content.<span class="built_in">find</span>(<span class="string">&quot;gmain&quot;</span>) != string::npos ||</span><br><span class="line">                content.<span class="built_in">find</span>(<span class="string">&quot;gdbus&quot;</span>) != string::npos ||</span><br><span class="line">                content.<span class="built_in">find</span>(<span class="string">&quot;gum-js-loop&quot;</span>) != string::npos ||</span><br><span class="line">                content.<span class="built_in">find</span>(<span class="string">&quot;pool-frida&quot;</span>) != string::npos) &#123;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            comm.<span class="built_in">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line">    <span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Inline-Hook特征"><a href="#Inline-Hook特征" class="headerlink" title="Inline Hook特征"></a>Inline Hook特征</h2><h3 id="库函数首字节"><a href="#库函数首字节" class="headerlink" title="库函数首字节"></a>库函数首字节</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareLibraryBytes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;string&gt; libs = &#123;<span class="string">&quot;/system/lib64/libc.so&quot;</span>, <span class="string">&quot;/system/lib64/libdl.so&quot;</span>&#125;;</span><br><span class="line">    vector&lt;string&gt; funcs = &#123;<span class="string">&quot;open&quot;</span>, <span class="string">&quot;read&quot;</span>, <span class="string">&quot;dlopen&quot;</span>, <span class="string">&quot;dlsym&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;lib : libs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;func : funcs) &#123;</span><br><span class="line">            <span class="type">void</span> *handle = <span class="built_in">dlopen</span>(lib.<span class="built_in">c_str</span>(), RTLD_NOW);</span><br><span class="line">            <span class="keyword">if</span> (!handle) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">void</span> *sym = <span class="built_in">dlsym</span>(handle, func.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">if</span> (!sym) &#123;</span><br><span class="line">                <span class="built_in">dlclose</span>(handle);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span> buffer[<span class="number">16</span>];</span><br><span class="line">            <span class="built_in">memcpy</span>(buffer, sym, <span class="built_in">sizeof</span>(buffer));</span><br><span class="line"></span><br><span class="line">            <span class="function">ifstream <span class="title">file</span><span class="params">(lib, ios::binary)</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">                <span class="built_in">dlclose</span>(handle);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            file.<span class="built_in">seekg</span>(<span class="number">0</span>, ios::end);</span><br><span class="line">            <span class="type">long</span> length = file.<span class="built_in">tellg</span>();</span><br><span class="line">            file.<span class="built_in">seekg</span>(<span class="number">0</span>, ios::beg);</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span> *fileBuffer = <span class="keyword">new</span> <span class="type">char</span>[length];</span><br><span class="line">            file.<span class="built_in">read</span>(fileBuffer, length);</span><br><span class="line">            file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">const</span> <span class="type">char</span> *ptr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt;= length - <span class="built_in">sizeof</span>(buffer); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">memcmp</span>(fileBuffer + i, sym, <span class="built_in">sizeof</span>(buffer)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    ptr = fileBuffer + i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ptr &amp;&amp; <span class="built_in">memcmp</span>(ptr, buffer, <span class="built_in">sizeof</span>(buffer)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span>[] fileBuffer;</span><br><span class="line">                <span class="built_in">dlclose</span>(handle);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">delete</span>[] fileBuffer;</span><br><span class="line">            <span class="built_in">dlclose</span>(handle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存修改情况"><a href="#内存修改情况" class="headerlink" title="内存修改情况"></a>内存修改情况</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> last_crc32_value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check_text_segment_integrity</span><span class="params">(<span class="type">const</span> std::string&amp; libPath)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>(libPath.<span class="built_in">c_str</span>(), O_RDONLY);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stat</span> sb;</span><br><span class="line">    <span class="type">void</span> *start = <span class="built_in">mmap</span>(<span class="literal">NULL</span>, sb.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    Elf64_Ehdr header;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;header, start, <span class="built_in">sizeof</span>(Elf64_Ehdr));</span><br><span class="line"></span><br><span class="line">    Elf64_Shdr strtabHeader;</span><br><span class="line">    <span class="type">char</span>* strTab = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (header.e_shstrndx != SHN_UNDEF) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;strtabHeader, <span class="built_in">static_cast</span>&lt;<span class="type">char</span>*&gt;(start) + header.e_shoff + header.e_shstrndx * header.e_shentsize, <span class="built_in">sizeof</span>(strtabHeader));</span><br><span class="line">        strTab = <span class="built_in">static_cast</span>&lt;<span class="type">char</span>*&gt;(start) + strtabHeader.sh_offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> crc32Value = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> textSectionFound = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; header.e_shnum; ++i) &#123;</span><br><span class="line">        Elf64_Shdr sectionHeader;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;sectionHeader, <span class="built_in">static_cast</span>&lt;<span class="type">char</span>*&gt;(start) + header.e_shoff + i * header.e_shentsize, <span class="built_in">sizeof</span>(sectionHeader));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strTab &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">&quot;.text&quot;</span>, strTab + sectionHeader.sh_name) == <span class="number">0</span>) &#123;</span><br><span class="line">            crc32Value = <span class="built_in">crc32</span>(crc32Value, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> Bytef*&gt;(<span class="built_in">static_cast</span>&lt;<span class="type">char</span>*&gt;(start) + sectionHeader.sh_offset), sectionHeader.sh_size);</span><br><span class="line">            textSectionFound = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">munmap</span>(start, sb.st_size);</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> isIntact = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (last_crc32_value == <span class="number">0</span>) &#123;</span><br><span class="line">        last_crc32_value = crc32Value;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (crc32Value != last_crc32_value) &#123;</span><br><span class="line">        isIntact = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isIntact;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态加载库函数"><a href="#动态加载库函数" class="headerlink" title="动态加载库函数"></a>动态加载库函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*PthreadCreateFunc)</span><span class="params">(<span class="type">pthread_t</span>*, <span class="type">const</span> <span class="type">pthread_attr_t</span>*, <span class="type">void</span>* (*)(<span class="type">void</span>*), <span class="type">void</span>*)</span></span>;</span><br><span class="line"><span class="type">void</span>* libc_handle = <span class="built_in">dlopen</span>(<span class="string">&quot;libc.so&quot;</span>, RTLD_LAZY | RTLD_NOLOAD);</span><br><span class="line">PthreadCreateFunc pthread_create_ptr = (PthreadCreateFunc)<span class="built_in">dlsym</span>(libc_handle, <span class="string">&quot;pthread_create&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="检测形式"><a href="#检测形式" class="headerlink" title="检测形式"></a>检测形式</h1><h2 id="单次调用"><a href="#单次调用" class="headerlink" title="单次调用"></a>单次调用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFridaAttached</span>()) &#123;</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;Frida detected&quot;</span>);</span><br><span class="line">        _exit(EXIT_FAILURE); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">check_periodically</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isFridaAttached</span>()) &#123;</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="string">&quot;Frida detected&quot;</span>);</span><br><span class="line">            _exit(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thread;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create_ptr</span>(&amp;thread, <span class="literal">NULL</span>, check_periodically, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检测时机"><a href="#检测时机" class="headerlink" title="检测时机"></a>检测时机</h1><p>这里根据执行先后顺序，列出了常见 调用检测逻辑的位置</p><h2 id="init"><a href="#init" class="headerlink" title="_init()"></a>_init()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">void</span> _init() &#123;</span><br><span class="line">    <span class="built_in">check</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="init-array"><a href="#init-array" class="headerlink" title=".init_array"></a>.init_array</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span> __<span class="title">attribute__</span><span class="params">((constructor))</span></span>;</span><br></pre></td></tr></table></figure><h2 id="JNI-OnLoad"><a href="#JNI-OnLoad" class="headerlink" title="JNI_OnLoad()"></a>JNI_OnLoad()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="type">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">check</span>();</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对抗"><a href="#对抗" class="headerlink" title="对抗"></a>对抗</h1><h2 id="改文件名-指定端口"><a href="#改文件名-指定端口" class="headerlink" title="改文件名+指定端口"></a>改文件名+指定端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:2704 tcp:2704</span><br><span class="line">/data/local/tmp/florida -l 127.0.0.1:2704</span><br><span class="line">frida -H 127.0.0.1:2704 ...</span><br></pre></td></tr></table></figure><h2 id="定位检测位置"><a href="#定位检测位置" class="headerlink" title="定位检测位置"></a>定位检测位置</h2><ol><li><p>hook android_dlopen_ext，打印加载的so<br>一旦加载某so后程序退出，则说明检测逻辑位于该so中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print_loaded_so</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>hook pthread_create，打印线程函数地址<br>一旦创建某线程后程序退出，则说明检测逻辑位于该函数中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print_start_routine</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libcheckFrida.so&quot;</span>  <span class="comment">// 目标so</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">    <span class="keyword">let</span> baseAddr = <span class="variable language_">module</span>.<span class="property">base</span>;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="variable language_">module</span>.<span class="property">size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>), &#123;</span><br><span class="line">        <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> func_addr = args[<span class="number">2</span>]; </span><br><span class="line">            <span class="keyword">if</span> (func_addr.<span class="title function_">compare</span>(baseAddr) &gt;= <span class="number">0</span> &amp;&amp; func_addr.<span class="title function_">compare</span>(baseAddr.<span class="title function_">add</span>(size)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> relativeAddr = func_addr.<span class="title function_">sub</span>(baseAddr);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pthread_create] start_routine on &quot;</span> + so_name + <span class="string">&quot;!0x&quot;</span> + relativeAddr.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="拦截关键函数"><a href="#拦截关键函数" class="headerlink" title="拦截关键函数"></a>拦截关键函数</h2><ul><li>android_dlopen_ext</li></ul><p>实现目标so加载后，才开始执行后续操作。且后续操作中针对 执行时机不同的函数，有不同hook方式<br>_init()、.init_array中函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libcheckFrida.so&quot;</span>  <span class="comment">// 目标so</span></span><br><span class="line">    <span class="keyword">var</span> is_hooked = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">                <span class="title function_">hook_call_constructors</span>(is_hooked);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;linker64&quot;</span>).<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">var</span> call_constructors_addr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; symbols.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            call_constructors_addr = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Find function call_constructors at address: &quot;</span> + call_constructors_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(call_constructors_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!is_hooked)&#123;</span><br><span class="line">                is_hooked = <span class="literal">true</span></span><br><span class="line">                <span class="comment">// 后续操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JNI_Onload、普通函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">after_so_loaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libcheckFrida.so&quot;</span>  <span class="comment">// 目标so</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (path.<span class="title function_">includes</span>(so_name)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">is_hooked</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loading: &quot;</span> + path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_hooked</span>) &#123;</span><br><span class="line">                <span class="comment">// 后续操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pthread_create</li></ul><p>如果待创建线程函数是 检测函数，则将该函数替换为一个空函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replace_func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> so_name = <span class="string">&quot;libcheckFrida.so&quot;</span>;     <span class="comment">// 目标so</span></span><br><span class="line">    <span class="keyword">var</span> base_addr = <span class="title class_">Module</span>.<span class="title function_">getBaseAddress</span>(so_name);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> func_addr = base_addr.<span class="title function_">add</span>(<span class="number">0x4E91C</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (args[<span class="number">2</span>].<span class="title function_">compare</span>(func_addr) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(args[<span class="number">2</span>], <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">a1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;replace successfully&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;, <span class="string">&#x27;pointer&#x27;</span>, []));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>strstr, strcmp</li></ul><p>检测传参如果包含”frida”等特定字符串，则将返回值改为0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replace_str</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pt_strstr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&#x27;strstr&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> pt_strcmp = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&#x27;strcmp&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pt_strstr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> str1 = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">var</span> str2 = args[<span class="number">1</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;REJECT&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;tmp&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>) !== -<span class="number">1</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strstr--&gt;&quot;</span>, str1, str2);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hook</span>) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pt_strcmp, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> str1 = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">var</span> str2 = args[<span class="number">1</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;REJECT&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;tmp&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>) !== -<span class="number">1</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>) !== -<span class="number">1</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hook</span>) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>open</li></ul><p>检测如果要进行 &#x2F;proc&#x2F;self&#x2F;maps 的读取操作，则将访问重定向至伪造路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">relocate_proc_self_maps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> openPtr = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="literal">null</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> open = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> fakePath = <span class="string">&quot;not/existent/path&quot;</span>;  <span class="comment">// 伪造路径</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(openPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">pathnameptr, flag</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> pathname = pathnameptr.<span class="title function_">readCString</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[open] <span class="subst">$&#123;pathname&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pathname === <span class="string">&quot;/proc/self/maps&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Redirect to: <span class="subst">$&#123;fakePath&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">open</span>(<span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(fakePath), flag);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">open</span>(pathnameptr, flag);</span><br><span class="line">    &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="魔改server"><a href="#魔改server" class="headerlink" title="魔改server"></a>魔改server</h2><p>具体见此项目 <a href="https://github.com/Ylarod/Florida">Florida</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>检测手段<br><a href="https://www.52pojie.cn/thread-1921073-1-1.html">《安卓逆向这档事》十八、表哥，你也不想你的Frida被检测吧!(上)</a><br><a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1530251">从inlinehook角度检测frida</a><br><a href="https://bbs.kanxue.com/thread-278145.htm">frida常用检测点及其原理–一把梭方案</a></p></li><li><p>对抗<br><a href="https://www.jianshu.com/p/59d1d3054abe">so逆向筑基-hook init init_array 和JNI_OnLoad</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 保护与对抗 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Frida-Labs</title>
      <link href="/2025/01/04/2025-1-4%20Frida-Labs/"/>
      <url>/2025/01/04/2025-1-4%20Frida-Labs/</url>
      
        <content type="html"><![CDATA[<p>通过在模拟环境中解题，学习frida的基础使用<br>虽然都可以像解CTF题那样，直接解密得flag，但既然是frida专场，那还是老老实实用它吧</p><h1 id="Frida-0x1"><a href="#Frida-0x1" class="headerlink" title="Frida 0x1"></a>Frida 0x1</h1><p>思路：<br>hook MainActivity.check(int i, int i2)，在其中调用其自身，且传参设为0,4</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="property">check</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">i, i2</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> new_i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> new_i2 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">check</span>(new_i, new_i2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x2"><a href="#Frida-0x2" class="headerlink" title="Frida 0x2"></a>Frida 0x2</h1><p>思路：<br>直接调用静态方法 MainActivity.get_flag(int a)，传参为4919</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x2.MainActivity&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="title function_">get_flag</span>(<span class="number">4919</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x3"><a href="#Frida-0x3" class="headerlink" title="Frida 0x3"></a>Frida 0x3</h1><p>思路：<br>直接调用256次静态方法 Checker.increase()</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x3.Checker&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">Checker</span>.<span class="title function_">increase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x4"><a href="#Frida-0x4" class="headerlink" title="Frida 0x4"></a>Frida 0x4</h1><p>思路：<br>创建 Checker实例，调用其实例方法 get_flag(int a)，传参为1337<br>然后打印返回值</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Check</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x4.Check&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> checkInstance = <span class="title class_">Check</span>.$new();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = checkInstance.<span class="title function_">get_flag</span>(<span class="number">1337</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag: &quot;</span> + result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x5"><a href="#Frida-0x5" class="headerlink" title="Frida 0x5"></a>Frida 0x5</h1><p>思路：<br>遍历所有已存在的 MainActivity实例，调用其实例方法 flag()，传参为1337</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x5.MainActivity&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                instance.<span class="title function_">flag</span>(<span class="number">1337</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x6"><a href="#Frida-0x6" class="headerlink" title="Frida 0x6"></a>Frida 0x6</h1><p>思路：<br>创建 Checker实例，设置其num1,num2分别为1234,4321（要使用value属性来操作，因为Frida的 Java API将Java字段封装在一个对象中）<br>然后遍历所有已存在的 MainActivity实例，调用其实例方法 get_flag(Checker A)，传参为上述实例</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x6.Checker&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> checkerInstance = <span class="title class_">Checker</span>.$new();</span><br><span class="line">    checkerInstance.<span class="property">num1</span>.<span class="property">value</span> = <span class="number">1234</span>;</span><br><span class="line">    checkerInstance.<span class="property">num2</span>.<span class="property">value</span> = <span class="number">4321</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x6.MainActivity&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                instance.<span class="title function_">get_flag</span>(checkerInstance);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x7"><a href="#Frida-0x7" class="headerlink" title="Frida 0x7"></a>Frida 0x7</h1><p>思路：<br>hook Checker的构造方法，在其中调用其自身，且传参设为513,513<br>（要以spawn模式注入脚本）</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.ad2001.frida0x7.Checker&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Checker</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> newA = <span class="number">513</span>;</span><br><span class="line">        <span class="keyword">var</span> newB = <span class="number">513</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.$init(newA, newB);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x8"><a href="#Frida-0x8" class="headerlink" title="Frida 0x8"></a>Frida 0x8</h1><p>思路：<br>从native层入手</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">Java_com_ad2001_frida0x8_MainActivity_cmpstr</span><span class="params">(JNIEnv *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-9Ch]</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [sp+20h] [bp-98h]</span></span><br><span class="line">  <span class="type">char</span> *input; <span class="comment">// [sp+28h] [bp-90h]</span></span><br><span class="line">  <span class="type">char</span> cipher[<span class="number">100</span>]; <span class="comment">// [sp+48h] [bp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  input = (<span class="type">char</span> *)_JNIEnv::GetStringUTFChars(a1, a3);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; _strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xFFFFFFFF</span>); ++i )</span><br><span class="line">    cipher[i] = aGsjebObujwfMbo[i] - <span class="number">1</span>;</span><br><span class="line">  cipher[_strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xFFFFFFFF</span>)] = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">strcmp</span>(input, cipher);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">&quot;input &quot;</span>, <span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">&quot;Password&quot;</span>, <span class="string">&quot;%s&quot;</span>, cipher);</span><br><span class="line">  _JNIEnv::ReleaseStringUTFChars(a1, a3, input);</span><br><span class="line">  <span class="keyword">return</span> v4 == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hook strcmp()，且只在第一个参数为”aaa”时，打印第二个参数<br>最后在应用中输入”aaa”</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libfrida0x8 = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&#x27;libfrida0x8.so&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> strcmp_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(libfrida0x8.<span class="property">name</span>, <span class="string">&#x27;strcmp&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(strcmp_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> str1 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> str2 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str1 === <span class="string">&quot;aaa&quot;</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag: &quot;</span> + str2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0x9"><a href="#Frida-0x9" class="headerlink" title="Frida 0x9"></a>Frida 0x9</h1><p>思路：<br>hook native层 Java_com_ad2001_a0x9_MainActivity_check_1flag()，设置返回值为1337</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> liba0x9 = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&#x27;liba0x9.so&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> check_1flag_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(liba0x9.<span class="property">name</span>, <span class="string">&#x27;Java_com_ad2001_a0x9_MainActivity_check_1flag&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(check_1flag_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">return_value</span> = <span class="number">1337</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            retval.<span class="title function_">replace</span>(<span class="number">1337</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0xA"><a href="#Frida-0xA" class="headerlink" title="Frida 0xA"></a>Frida 0xA</h1><p>思路：<br>直接调用 native层导出的 get_flag(int a1, int a2)，参数为1,2<br>（在模块中找目标函数时，要使用导出名）</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libfrida0xa = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&#x27;libfrida0xa.so&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> get_flag = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(</span><br><span class="line">        <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&#x27;libfrida0xa.so&#x27;</span>, <span class="string">&#x27;_Z8get_flagii&#x27;</span>), </span><br><span class="line">        <span class="string">&#x27;int&#x27;</span>, </span><br><span class="line">        [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="title function_">get_flag</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Frida-0xB"><a href="#Frida-0xB" class="headerlink" title="Frida 0xB"></a>Frida 0xB</h1><p>思路：<br>native层 Java_com_ad2001_frida0xb_MainActivity_getFlag()的伪代码未完全显示，从汇编层面可发现原因</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000</span>A2DE <span class="number">88</span> <span class="number">42</span>                         CMP             R0, R1</span><br><span class="line">.text:<span class="number">0000</span>A<span class="number">2E0</span> <span class="number">3</span>F D1                         BNE             loc_A362</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">.text:<span class="number">0000</span>A362 <span class="number">0</span>C B0                         ADD             SP, SP, #<span class="number">0x30</span> ; <span class="string">&#x27;0&#x27;</span></span><br><span class="line">.text:<span class="number">0000</span>A364 <span class="number">80</span> BD                         POP             &#123;R7,PC&#125;</span><br><span class="line">.text:<span class="number">0000</span>A364</span><br><span class="line">.text:<span class="number">0000</span>A364                               ; End of function Java_com_ad2001_frida0xb_MainActivity_getFlag</span><br></pre></td></tr></table></figure><p>所以通过偏移定位，将”BNE” patch成”NOP”</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libfrida0xb = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&#x27;libfrida0xb.so&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getFlagExport = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&#x27;libfrida0xb.so&#x27;</span>, <span class="string">&#x27;Java_com_ad2001_frida0xb_MainActivity_getFlag&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> offsetFromGetFlag = <span class="number">0x1C</span>;</span><br><span class="line">    <span class="keyword">var</span> patchAddress = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(getFlagExport).<span class="title function_">add</span>(offsetFromGetFlag);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(patchAddress, <span class="number">2</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">writeU16</span>(patchAddress, <span class="number">0xBF00</span>); </span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(patchAddress, <span class="number">2</span>, <span class="string">&#x27;r-x&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>Frida 0x1 : hookFrida 0x2 : 调用静态方法Frida 0x3 : 改变量值Frida 0x4 : 创建类的实例Frida 0x5 : 调用已有实例的实例方法Frida 0x6 : 调用已有实例的实例方法，且传参为实例Frida 0x7 : hook构造函数Frida 0x8 : hook native函数Frida 0x9 : 改变native函数返回值Frida 0xA : 调用native函数Frida 0xB : 用X86Writer,ARM64Writer实现patch</code></pre>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CBCTF 2024</title>
      <link href="/2024/12/31/2024-12-31%20CBCTF%202024/"/>
      <url>/2024/12/31/2024-12-31%20CBCTF%202024/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="鸽鸽的礼物"><a href="#鸽鸽的礼物" class="headerlink" title="鸽鸽的礼物"></a>鸽鸽的礼物</h2><p>切入点：<br>MainActivity-&gt;View$OnClickListenerC0135a.onClick()</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decode_message</span><span class="params">(<span class="type">char</span> *input, <span class="type">char</span> *output)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(input); ++i) &#123;</span><br><span class="line">        output[i] = input[i] - <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    output[<span class="built_in">strlen</span>(input)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(output); ++i) &#123;</span><br><span class="line">        <span class="type">char</span> c = output[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isupper</span>(c)) &#123;</span><br><span class="line">            c = <span class="string">&#x27;A&#x27;</span> + (c - <span class="string">&#x27;*&#x27;</span> + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(c)) &#123;</span><br><span class="line">            c = <span class="string">&#x27;a&#x27;</span> + (c - <span class="string">&#x27;J&#x27;</span> + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output[i] = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> encoded_message[] = <span class="string">&quot;lrgm~;&lt;lgk:j:hj:8594;&lt;739&lt;g6i3;37jh8g&quot;</span>;</span><br><span class="line">    <span class="type">char</span> decoded_message[<span class="number">256</span>]; </span><br><span class="line">    decode_message(encoded_message, decoded_message);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decoded message: %s\n&quot;</span>, decoded_message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CBCTF&#123;89fae7d7bd75261894069a3c0804db5a&#125;</span></span><br></pre></td></tr></table></figure><h2 id="inside"><a href="#inside" class="headerlink" title="inside"></a>inside</h2><p>win10环境下，用unlicense脱壳先</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> output[<span class="number">40</span>] = &#123;</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">15</span>, <span class="number">119</span>, <span class="number">67</span>, <span class="number">16</span>, <span class="number">28</span>, <span class="number">4</span>, <span class="number">113</span>, <span class="number">17</span>,</span><br><span class="line">        <span class="number">41</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">102</span>, <span class="number">34</span>, <span class="number">1</span>, <span class="number">118</span>, <span class="number">57</span>, <span class="number">106</span>, <span class="number">90</span>,</span><br><span class="line">        <span class="number">88</span>, <span class="number">56</span>, <span class="number">3</span>, <span class="number">73</span>, <span class="number">88</span>, <span class="number">57</span>, <span class="number">106</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">102</span>,</span><br><span class="line">        <span class="number">23</span>, <span class="number">85</span>, <span class="number">76</span>, <span class="number">63</span>, <span class="number">3</span>, <span class="number">85</span>, <span class="number">76</span>, <span class="number">103</span>, <span class="number">106</span>, <span class="number">28</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> xor_values[<span class="number">4</span>] = &#123;<span class="number">0x15</span>, <span class="number">0x55</span>, <span class="number">0x45</span>, <span class="number">0x33</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(output); i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span> &amp;&amp; i + j &lt; <span class="keyword">sizeof</span>(output); ++j) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> result = output[i + j] ^ xor_values[j];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后扔进CyberChef<br><img src="/img/2024-12-31/1.png"></p><h2 id="who-am-i"><a href="#who-am-i" class="headerlink" title="who_am_i"></a>who_am_i</h2><p>切入点：<br>先pyinstxtractor+pycdc得到——<br>import dll<br>print(‘Who am i?Show me your flag to help me find my birth!!’)<br>gets &#x3D; input()<br>enc &#x3D; dll.init(gets)<br>dll.check(enc)</p><p>然后去文件夹里找dll.so</p><p>so分析：<br>全局字符串（通过”Oh no!You don’t understand me!” 定位）——<br>enc &#x3D; “2076d4307ecc47b66fde5bb71fbc2ffbac3e3e076b8ec187ecb208290152876aee26d05a”<br>key &#x3D; “1z_int3rest1ng_cyth0n”</p><p>check()——<br>使用encrypt_string()加密，<br>然后与enc比较</p><p>encrypt_string()——<br>使用xor()加密，<br>将Hex转为字符串后返回</p><p>xor()——<br>用’0’填充为偶数个字节<br>两个字节为一组处理<br>使用key初始化Sbox[255]<br>输出 [20 76 d4 30 7e cc 47 b6 6f de 5b b7 1f bc 2f fb ac 3e 3e 07 6b 8e c1 87 ec b2 08 29 01 52 87 6a ee 26 d0 5a]</p><p>然后就没思路了……</p><h2 id="让我康康"><a href="#让我康康" class="headerlink" title="让我康康"></a>让我康康</h2><p>先脚本去个平坦化</p><p>main分析：<br>大致就是input扔进 sub_402160处理，然后与cipher比较</p><p>sub_402160分析：<br>一个魔改RC4，最后异或时还多了个rand()<br>注意，key在.init_array里被异或过（如果没在调试状态）</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> bytes1[] = &#123;</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0xAC</span>, <span class="number">0x37</span>, <span class="number">0xA4</span>, <span class="number">0x6A</span>, <span class="number">0x0D</span>, <span class="number">0xAB</span>, <span class="number">0x4B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xFA</span>, <span class="number">0xD1</span>, <span class="number">0xA1</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x38</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xF4</span>, <span class="number">0x73</span>, <span class="number">0xE7</span>, <span class="number">0x29</span>, <span class="number">0x7E</span>, <span class="number">0x39</span>, <span class="number">0x33</span>, <span class="number">0x7E</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0xD7</span>, <span class="number">0xAA</span>, <span class="number">0x97</span>, <span class="number">0x2C</span>, <span class="number">0x5B</span>, <span class="number">0x29</span>, <span class="number">0xD9</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> bytes2[] = &#123;</span><br><span class="line">    <span class="number">0x21</span>, <span class="number">0xEE</span>, <span class="number">0x74</span>, <span class="number">0xF0</span>, <span class="number">0x2C</span>, <span class="number">0x76</span>, <span class="number">0xC4</span>, <span class="number">0x29</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x8F</span>, <span class="number">0xA2</span>, <span class="number">0xC2</span>, <span class="number">0x25</span>, <span class="number">0x18</span>, <span class="number">0x57</span>, <span class="number">0xA0</span>,</span><br><span class="line">    <span class="number">0xAB</span>, <span class="number">0x42</span>, <span class="number">0x94</span>, <span class="number">0x76</span>, <span class="number">0x4F</span>, <span class="number">0x57</span>, <span class="number">0x47</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0x58</span>, <span class="number">0xE4</span>, <span class="number">0xD9</span>, <span class="number">0xE3</span>, <span class="number">0x1D</span>, <span class="number">0x35</span>, <span class="number">0x4E</span>, <span class="number">0xA4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> length = <span class="keyword">sizeof</span>(bytes1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length != <span class="keyword">sizeof</span>(bytes2)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: Byte arrays must be of the same length.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> result[length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        result[i] = bytes1[i] ^ bytes2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;XOR Result: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, result[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CBCTF&#123;obfusc@tor_1s_1nter3st1ng&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ezHarmony"><a href="#ezHarmony" class="headerlink" title="ezHarmony"></a>ezHarmony</h2><p>需要用jadx-dev-all，先装个Java 17</p><p>abc文件分析：<br>核心逻辑在 Index.#~h1&gt;@0<em>^2</em>#()——<br>substring &#x3D; “CBCTF{“<br>substring2 &#x3D;”962410”（因为(“7a747160774b”, substring2) &#x3D;&#x3D; substring）</p><p>找不到 <em>lexenv_1_x</em>()这类函数的位置……</p><h2 id="in-inside"><a href="#in-inside" class="headerlink" title="in_inside"></a>in_inside</h2><p>查壳：<br>exeinfope显示没壳<br>PEID查出来是 yoda’s Protector，但扔进脱壳机 显示不是该壳——难道是其他壳的伪装？<br>DiE终于查出来是 VMP3.8</p><p>但现成脱壳机用不明白……</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="who-am-i-1"><a href="#who-am-i-1" class="headerlink" title="who_am_i"></a>who_am_i</h2><h2 id="ezHarmony-1"><a href="#ezHarmony-1" class="headerlink" title="ezHarmony"></a>ezHarmony</h2><h2 id="in-inside-1"><a href="#in-inside-1" class="headerlink" title="in_inside"></a>in_inside</h2><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>鸽鸽的礼物：Android、Kotlininside：Themida壳、魔改Base64（换表、输出前被^）who_am_i：Python（Pyinstaller）、Cython、RC4让我康康：代码混淆（控制流平坦化）、反调试（ptrace()）、魔改RC4（最后还^rand()）ezHarmony：HarmonyOS、代码混淆（名称混淆）、魔改XXTEAin_inside：VMP壳</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VenomCTF 2024</title>
      <link href="/2024/12/23/2024-12-23%20VenomCTF%202024/"/>
      <url>/2024/12/23/2024-12-23%20VenomCTF%202024/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="ezre"><a href="#ezre" class="headerlink" title="ezre"></a>ezre</h2><p>main分析：<br>魔改RC4 + Base64（动调可知未魔改）</p><p>解密：<br>先cipher进行 Base64解码，得到——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0f 3c 41 75 72 42 53 06 5d 4c 32 1d 2a 5c 49 26 22 4b 69 22</span><br></pre></td></tr></table></figure><p>动调至RC4前，将其填进input的内存处（20字节）；<br>再f8，即可在input处查看明文——诶，等等，为什么最后4字节出错了？</p><p>原来是动调一开始输入input时，我随便输了16字节进去，导致传入RC4的length是 0xF，害</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// flag&#123;Simple_rEvErse&#125;</span><br></pre></td></tr></table></figure><h2 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h2><p>自动脱壳：<br>然而，报错了……官方工具也脱不了——这是个魔改UPX？？</p><p>手动脱壳：<br>Linux中运行程序，gdb附加上后dump<br>dump出来的文件解析一下——UPX壳还在？？</p><p>那就IDA中动调——显示这是个动态库，不能直接跑？？<br>明明linux上可以执行的，file命令查出来也是个executable</p><p>那就IDA中attach——成功附加上了，但动调几步就退了</p><p>好吧，黔驴技穷了</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="ezvm-1"><a href="#ezvm-1" class="headerlink" title="ezvm"></a>ezvm</h2><p>哇，改个 overlay_offset字段，根本看不出来<br>不过有一说一，可以趁此机会熟悉一下 UPX壳的原理，以及各种魔改UPX的实现</p><p>脱完壳后，再以“初探”的视角，重新做做这题</p><p>VM_Init分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a1[<span class="number">4</span>*<span class="number">0</span>]：EAX</span><br><span class="line">a1[<span class="number">4</span>*<span class="number">1</span>]：EBX</span><br><span class="line">a1[<span class="number">4</span>*<span class="number">2</span>]：ECX</span><br><span class="line">a1[<span class="number">4</span>*<span class="number">3</span>]：EDX</span><br><span class="line">a1[<span class="number">16</span>]：ZF</span><br><span class="line">a1[<span class="number">24</span>]：EIP</span><br><span class="line"></span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">0</span>+<span class="number">2</span>)]：F0</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">0</span>+<span class="number">2</span>)+<span class="number">8</span>]：handler_0</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">1</span>+<span class="number">2</span>)]：F1</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">1</span>+<span class="number">2</span>)+<span class="number">8</span>]：handler_1</span><br><span class="line">……</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">7</span>+<span class="number">2</span>)]：F7</span><br><span class="line">a1[<span class="number">16</span>*(<span class="number">7</span>+<span class="number">2</span>)+<span class="number">8</span>]：handler_7</span><br><span class="line"></span><br><span class="line">s[<span class="number">512</span>]：input</span><br><span class="line"></span><br><span class="line">s[<span class="number">544</span>]：key0</span><br><span class="line">s[<span class="number">552</span>]：key1</span><br></pre></td></tr></table></figure><p>VM分析（32位、寄存器式、小端序）：<br>读取字节码，与每个handler的操作码相比较，然后执行相应的handler<br>总之是个RC4</p><p>handler分析：<br>注释写的非常抽象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//handler_0</span></span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *(IP + <span class="number">1LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">0xE0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(IP + <span class="number">4LL</span>) == <span class="number">0xE0</span> )                <span class="comment">// mov reg [s+reg]</span></span><br><span class="line">        v3 = *(s + *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">5LL</span>)));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v3 = *(s + ((*(IP + <span class="number">5LL</span>) &lt;&lt; <span class="number">8</span>) + *(IP + <span class="number">4LL</span>)));    <span class="comment">// mov reg [s+#numm]</span></span><br><span class="line">      *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v2 == <span class="number">0xE1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(s + *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">3LL</span>))) = *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">5LL</span>)); <span class="comment">// mov [s+reg] reg</span></span><br><span class="line">    &#125;</span><br><span class="line">    IP += <span class="number">6LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) = *(IP + <span class="number">3LL</span>);    <span class="comment">// mov reg #num</span></span><br><span class="line">    IP += <span class="number">4LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) = *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">4LL</span>));  <span class="comment">// mov reg reg</span></span><br><span class="line">    IP += <span class="number">5LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//handler_1</span></span><br><span class="line">  v3 = *(IP + <span class="number">2LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(IP + <span class="number">3LL</span>) == <span class="number">0xE0</span> )</span><br><span class="line">    v1 = *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">4LL</span>)) + *(a1 + <span class="number">4LL</span> * v3);  <span class="comment">// add reg reg</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = ((*(IP + <span class="number">4LL</span>) &lt;&lt; <span class="number">8</span>) + *(IP + <span class="number">3LL</span>)) + *(a1 + <span class="number">4LL</span> * v3); <span class="comment">//add  reg #numm</span></span><br><span class="line">  *(a1 + <span class="number">4LL</span> * v3) = v1;</span><br><span class="line">  IP += <span class="number">5LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_2</span></span><br><span class="line">  v3 = *(IP + <span class="number">2LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(IP + <span class="number">3LL</span>) == <span class="number">0xE0</span> )</span><br><span class="line">    v1 = *(a1 + <span class="number">4LL</span> * v3) % *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">4LL</span>));  <span class="comment">// mod reg reg</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = *(a1 + <span class="number">4LL</span> * v3) % ((*(IP + <span class="number">4LL</span>) &lt;&lt; <span class="number">8</span>) + *(IP + <span class="number">3LL</span>)); <span class="comment">// mod reg #numm</span></span><br><span class="line">  *(a1 + <span class="number">4LL</span> * v3) = v1;</span><br><span class="line">  IP += <span class="number">5LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_3</span></span><br><span class="line">  ++*(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>));  <span class="comment">// inc reg </span></span><br><span class="line">  IP += <span class="number">3LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_4</span></span><br><span class="line">  --*(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>));  <span class="comment">// dec reg</span></span><br><span class="line">  IP += <span class="number">3LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_5</span></span><br><span class="line">  *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) ^= *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">4LL</span>)); <span class="comment">// xor reg reg </span></span><br><span class="line">  IP += <span class="number">5LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_6</span></span><br><span class="line">  <span class="keyword">if</span> ( *(a1 + <span class="number">4LL</span> * *(IP + <span class="number">2LL</span>)) &lt; ((*(IP + <span class="number">4LL</span>) &lt;&lt; <span class="number">8</span>) + *(IP + <span class="number">3LL</span>)) ) <span class="comment">// cmp reg #numm </span></span><br><span class="line">    ZF = <span class="number">1</span>;</span><br><span class="line">  IP += <span class="number">5LL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler_7</span></span><br><span class="line">  <span class="keyword">if</span> ( ZF )   <span class="comment">// jz #num</span></span><br><span class="line">  &#123;</span><br><span class="line">    IP = &amp;bytecode + *(IP + <span class="number">1LL</span>);</span><br><span class="line">    ZF = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    IP += <span class="number">2LL</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>bytecode+汇编分析：<br>可以看出，魔改的部分，是最后多异或了循环的索引</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">F0 E0 <span class="number">02</span> <span class="number">00</span>         mov ecx <span class="number">0</span></span><br><span class="line"><span class="comment">//4:</span></span><br><span class="line">F0 E0 <span class="number">00</span> E0 <span class="number">02</span>      mov eax ecx</span><br><span class="line">F0 E1 E0 <span class="number">02</span> E0 <span class="number">02</span>   mov [s+ecx] ecx</span><br><span class="line">F0 E0 <span class="number">01</span> <span class="number">10</span>         mov ebx <span class="number">16</span></span><br><span class="line">F2 E0 <span class="number">00</span> E0 <span class="number">01</span>      mod eax ebx</span><br><span class="line">F1 E0 <span class="number">00</span> <span class="number">20</span> <span class="number">02</span>      add eax <span class="number">544</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">00</span>   mov eax [s+eax]</span><br><span class="line">F0 E0 <span class="number">01</span> E0 <span class="number">02</span>      mov ebx ecx</span><br><span class="line">F1 E0 <span class="number">01</span> <span class="number">00</span> <span class="number">01</span>      add ebx <span class="number">256</span></span><br><span class="line">F0 E1 E0 <span class="number">01</span> E0 <span class="number">00</span>   mov [s+ebx] eax</span><br><span class="line">F3 E0 <span class="number">02</span>            inc ecx</span><br><span class="line">F6 E0 <span class="number">02</span> <span class="number">00</span> <span class="number">01</span>      cmp ecx <span class="number">256</span></span><br><span class="line">F7 <span class="number">04</span>               jz <span class="number">4</span></span><br><span class="line"></span><br><span class="line">——————————————————————————————————————————————</span><br><span class="line">F0 E0 <span class="number">02</span> <span class="number">00</span>         mov ecx <span class="number">0</span></span><br><span class="line">F0 E0 <span class="number">03</span> <span class="number">00</span>         mov edx <span class="number">0</span></span><br><span class="line"><span class="comment">//69:</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">02</span>   mov eax [s+ecx]</span><br><span class="line">F1 E0 <span class="number">03</span> E0 <span class="number">00</span>      add edx eax</span><br><span class="line">F0 E0 <span class="number">00</span> E1 <span class="number">02</span>      mov eax ecx</span><br><span class="line">F1 E0 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span>      add eax <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">00</span>   mov eax [s+eax]</span><br><span class="line">F1 E0 <span class="number">03</span> E0 <span class="number">00</span>      add edx eax</span><br><span class="line">F2 E0 <span class="number">03</span> <span class="number">00</span> <span class="number">01</span>      mod edx <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">02</span>   mov eax [s+ecx]</span><br><span class="line">F0 E0 <span class="number">01</span> E1 E0 <span class="number">03</span>   mov ebx [s+edx]</span><br><span class="line">F0 E1 E0 <span class="number">03</span> E0 <span class="number">00</span>   mov [s+edx] eax</span><br><span class="line">F0 E1 E0 <span class="number">02</span> E0 <span class="number">01</span>   mov [s+ecx] ebx</span><br><span class="line">F3 E0 <span class="number">02</span>            inc ecx</span><br><span class="line">F6 E0 <span class="number">02</span> <span class="number">00</span> <span class="number">01</span>      cmp ecx <span class="number">256</span></span><br><span class="line">F7 <span class="number">45</span>               jz <span class="number">69</span></span><br><span class="line"></span><br><span class="line">——————————————————————————————————————————————</span><br><span class="line">F0 E0 <span class="number">02</span> <span class="number">00</span>         mov ecx <span class="number">0</span></span><br><span class="line">F0 E0 <span class="number">03</span> <span class="number">00</span>         mov edx <span class="number">0</span></span><br><span class="line"><span class="comment">//148:</span></span><br><span class="line">F3 E0 <span class="number">02</span>            inc ecx</span><br><span class="line">F2 E0 <span class="number">02</span> <span class="number">00</span> <span class="number">01</span>      mod ecx <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">02</span>   mov eax [s+ecx]</span><br><span class="line">F1 E0 <span class="number">03</span> E0 <span class="number">00</span>      add edx eax</span><br><span class="line">F2 E0 <span class="number">03</span> <span class="number">00</span> <span class="number">01</span>      mod edx <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">02</span>   mov eax [s+ecx]</span><br><span class="line">F0 E0 <span class="number">01</span> E1 E0 <span class="number">03</span>   mov ebx [s+edx]</span><br><span class="line">F0 E1 E0 <span class="number">03</span> E0 <span class="number">00</span>   mov [s+edx] eax</span><br><span class="line">F0 E1 E0 <span class="number">02</span> E0 <span class="number">01</span>   mov [s+ecx] ebx</span><br><span class="line">F1 E0 <span class="number">00</span> E0 <span class="number">01</span>      add eax ebx</span><br><span class="line">F2 E0 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span>      mod eax <span class="number">256</span></span><br><span class="line">F0 E0 <span class="number">00</span> E1 E0 <span class="number">00</span>   mov eax [s+eax]</span><br><span class="line">F0 E0 <span class="number">01</span> E0 <span class="number">02</span>      mov ebx ecx</span><br><span class="line">F4 E0 <span class="number">01</span>            dec ebx</span><br><span class="line">F1 E0 <span class="number">01</span> <span class="number">00</span> <span class="number">02</span>      add ebx ecx</span><br><span class="line">F0 E0 <span class="number">01</span> E1 E0 <span class="number">01</span>   mov ebx [s+ebx]</span><br><span class="line">F5 E0 <span class="number">00</span> E0 <span class="number">01</span>      xor eax ebx</span><br><span class="line">F1 E0 <span class="number">00</span> E0 <span class="number">02</span>      add eax ecx</span><br><span class="line">F0 E0 <span class="number">01</span> E0 <span class="number">02</span>      mov ebx ecx</span><br><span class="line">F4 E0 <span class="number">01</span>            dec ebx</span><br><span class="line">F1 E0 <span class="number">01</span> <span class="number">00</span> <span class="number">02</span>      add ebx <span class="number">512</span></span><br><span class="line">F0 E1 E0 <span class="number">01</span> E0 <span class="number">00</span>   mov [s+ebx] eax</span><br><span class="line">F0 E0 <span class="number">01</span> E0 <span class="number">02</span>      mov ebx ecx</span><br><span class="line">F4 E0 <span class="number">01</span>            dec ebx</span><br><span class="line">F6 E0 <span class="number">01</span> <span class="number">20</span> <span class="number">00</span>      cmp ebx <span class="number">32</span></span><br><span class="line">F7 <span class="number">94</span>               jz <span class="number">148</span>       </span><br><span class="line"></span><br><span class="line">——————————————————————————————————————————————</span><br><span class="line">F8</span><br></pre></td></tr></table></figure><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>ezre：魔改RC4（Sbox小1/2）、魔改Base64（换表）ezvm：Linux、魔改UPX壳（改overlay_offset）、VM（寄存器式）、魔改RC4（最后^索引）</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethereum进阶技术</title>
      <link href="/2024/12/21/2024-12-21%20Ethereum%E8%BF%9B%E9%98%B6%E6%8A%80%E6%9C%AF/"/>
      <url>/2024/12/21/2024-12-21%20Ethereum%E8%BF%9B%E9%98%B6%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式&#x2F;Proxy"></a>代理模式&#x2F;Proxy</h1><p>机制：</p><ol><li>代理合约&#x2F;Proxy 使用内联汇编、delegatecall()，将调用委托给 逻辑合约&#x2F;Implementation</li><li>期间所有的状态修改，都仅限于 代理合约<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理合约，使用 delegatecall 将所有调用转发给实现合约。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">SimpleProxy</span> is <span class="title class_">Proxy</span> &#123;</span><br><span class="line">    <span class="comment">// 存储实现合约地址的存储槽位置</span></span><br><span class="line">    bytes32 private constant _IMPLEMENTATION_SLOT = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，设置初始实现合约地址</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address implementation</span>) &#123;</span><br><span class="line">        <span class="title function_">assert</span>(_IMPLEMENTATION_SLOT == <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>));</span><br><span class="line">        <span class="title function_">_setImplementation</span>(implementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回当前实现合约的地址</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementation</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_getImplementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置新的实现合约地址</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setImplementation</span>(<span class="params">address newImplementation</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == <span class="title function_">owner</span>(), <span class="string">&quot;仅合约所有者可以设置实现合约&quot;</span>);</span><br><span class="line">        <span class="title function_">_setImplementation</span>(newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取存储在 _IMPLEMENTATION_SLOT 中的实现合约地址</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_getImplementation</span>(<span class="params"></span>) internal view override <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置实现合约地址到 _IMPLEMENTATION_SLOT</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_setImplementation</span>(<span class="params">address newImplementation</span>) private &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title class_">Address</span>.<span class="title function_">isContract</span>(newImplementation), <span class="string">&quot;实现合约不是一个有效的合约&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span> = newImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 delegatecall 调用实现合约的方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_delegate</span>(<span class="params">address implementation</span>) internal virtual override &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// 拷贝 calldata 到内存中的临时位置</span></span><br><span class="line">            <span class="title function_">calldatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 delegatecall 调用实现合约</span></span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(<span class="title function_">gas</span>(), implementation, <span class="number">0</span>, <span class="title function_">calldatasize</span>(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拷贝返回数据回 calldata 的起始位置</span></span><br><span class="line">            <span class="title function_">returndatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据 delegatecall 的结果返回或抛出异常</span></span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="title function_">revert</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约，包含了一些简单的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContract</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置一个新的值，并触发事件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前值</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>合约升级：<br>使用升级函数，通过修改地址，更换代理合约对应的 逻辑合约</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理合约，使用 delegatecall 将所有调用转发给实现合约。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">SimpleUpgradeableProxy</span> is <span class="title class_">Proxy</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">// 存储实现合约地址的存储槽位置</span></span><br><span class="line">    bytes32 private constant _IMPLEMENTATION_SLOT = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，设置初始实现合约地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address implementation</span>) &#123;</span><br><span class="line">        <span class="title function_">assert</span>(_IMPLEMENTATION_SLOT == <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>));</span><br><span class="line">        <span class="title function_">_setImplementation</span>(implementation);</span><br><span class="line">        <span class="title function_">transferOwnership</span>(msg.<span class="property">sender</span>); <span class="comment">// 设置部署者为合约所有者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前实现合约的地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementation</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_getImplementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的实现合约地址，仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address newImplementation</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title class_">Address</span>.<span class="title function_">isContract</span>(newImplementation), <span class="string">&quot;新的实现合约不是一个有效的合约&quot;</span>);</span><br><span class="line">        <span class="title function_">_setImplementation</span>(newImplementation);</span><br><span class="line">        emit <span class="title class_">Upgraded</span>(newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取存储在 _IMPLEMENTATION_SLOT 中的实现合约地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_getImplementation</span>(<span class="params"></span>) internal view override <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置实现合约地址到 _IMPLEMENTATION_SLOT。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_setImplementation</span>(<span class="params">address newImplementation</span>) private &#123;</span><br><span class="line">        <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span> = newImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 delegatecall 调用实现合约的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_delegate</span>(<span class="params">address implementation</span>) internal virtual override &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="title function_">calldatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(<span class="title function_">gas</span>(), implementation, <span class="number">0</span>, <span class="title function_">calldatasize</span>(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="title function_">returndatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="title function_">revert</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Upgraded</span>(address indexed implementation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V1，包含了一些简单的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV1</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V2，在 V1 的基础上增加了新功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV2</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line">    string public message;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">    event <span class="title class_">MessageSet</span>(string newMessage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMessage</span>(<span class="params">string memory newMessage</span>) external &#123;</span><br><span class="line">        message = newMessage;</span><br><span class="line">        emit <span class="title class_">MessageSet</span>(newMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理模式下，合约升级时”选择器冲突“问题 解决方案：</p><ol><li>透明代理：<br>管理员变为工具人，仅能调用代理合约的可升级函数对合约升级；<br>其它用户不能调用可升级函数，但是可以调用逻辑合约的函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个透明代理合约使用 delegatecall 将所有调用转发给实现合约。</span></span><br><span class="line"><span class="comment"> * 管理员仅能调用代理合约的可升级函数对合约升级；</span></span><br><span class="line"><span class="comment"> * 其它用户不能调用可升级函数，但可以调用逻辑合约的函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">TransparentUpgradeableProxy</span> is <span class="title class_">Proxy</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">// 存储实现合约地址的存储槽位置</span></span><br><span class="line">    bytes32 private constant _IMPLEMENTATION_SLOT = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，设置初始实现合约地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address implementation</span>) &#123;</span><br><span class="line">        <span class="title function_">assert</span>(_IMPLEMENTATION_SLOT == <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>));</span><br><span class="line">        <span class="title function_">_setImplementation</span>(implementation);</span><br><span class="line">        <span class="title function_">transferOwnership</span>(msg.<span class="property">sender</span>); <span class="comment">// 设置部署者为合约所有者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前实现合约的地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementation</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_getImplementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的实现合约地址，仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address newImplementation</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title class_">Address</span>.<span class="title function_">isContract</span>(newImplementation), <span class="string">&quot;新的实现合约不是一个有效的合约&quot;</span>);</span><br><span class="line">        <span class="title function_">_setImplementation</span>(newImplementation);</span><br><span class="line">        emit <span class="title class_">Upgraded</span>(newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取存储在 _IMPLEMENTATION_SLOT 中的实现合约地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_getImplementation</span>(<span class="params"></span>) internal view override <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置实现合约地址到 _IMPLEMENTATION_SLOT。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_setImplementation</span>(<span class="params">address newImplementation</span>) private &#123;</span><br><span class="line">        <span class="title class_">StorageSlot</span>.<span class="title function_">getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span> = newImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 delegatecall 调用实现合约的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_delegate</span>(<span class="params">address implementation</span>) internal virtual override &#123;</span><br><span class="line">        <span class="comment">// 防止普通用户调用代理合约的内部管理函数（如 upgradeTo）</span></span><br><span class="line">        <span class="keyword">if</span> (msg.<span class="property">sig</span> == <span class="variable language_">this</span>.<span class="property">upgradeTo</span>.<span class="property">selector</span> || msg.<span class="property">sig</span> == <span class="variable language_">this</span>.<span class="property">getImplementation</span>.<span class="property">selector</span>) &#123;</span><br><span class="line">            <span class="built_in">require</span>(msg.<span class="property">sender</span> == <span class="title function_">owner</span>(), <span class="string">&quot;TransparentUpgradeableProxy: Unauthorized access&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="title function_">calldatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(<span class="title function_">gas</span>(), implementation, <span class="number">0</span>, <span class="title function_">calldatasize</span>(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="title function_">returndatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="title function_">revert</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Upgraded</span>(address indexed implementation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V1，包含了一些简单的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV1</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V2，在 V1 的基础上增加了新功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV2</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line">    string public message;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">    event <span class="title class_">MessageSet</span>(string newMessage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMessage</span>(<span class="params">string memory newMessage</span>) external &#123;</span><br><span class="line">        message = newMessage;</span><br><span class="line">        emit <span class="title class_">MessageSet</span>(newMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通用可升级代理&#x2F;UUPS：<br>将升级函数放在逻辑合约中；<br>这样一来，如果有其它函数与升级函数存在”选择器冲突”，编译时就会报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个通用可升级代理（UUPS）模式的逻辑合约。</span></span><br><span class="line"><span class="comment"> * 升级逻辑直接嵌入到逻辑合约中，以防止选择器冲突。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV1</span> is <span class="title class_">Initializable</span>, <span class="title class_">UUPSUpgradeable</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化函数，代替构造函数用于代理合约初始化</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) initializer public &#123;</span><br><span class="line">        <span class="title function_">__Ownable_init</span>(); <span class="comment">// 初始化 Ownable 的状态变量</span></span><br><span class="line">        <span class="title function_">__UUPSUpgradeable_init</span>(); <span class="comment">// 初始化 UUPSUpgradeable 的状态变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external onlyOwner &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的实现合约地址，仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_authorizeUpgrade</span>(<span class="params">address newImplementation</span>) internal override onlyOwner &#123;&#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑合约 V2，在 V1 的基础上增加了新功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="title class_">LogicContractV2</span> is <span class="title class_">Initializable</span>, <span class="title class_">UUPSUpgradeable</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line">    string public message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化函数，代替构造函数用于代理合约初始化</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) initializer public &#123;</span><br><span class="line">        <span class="title function_">__Ownable_init</span>(); <span class="comment">// 初始化 Ownable 的状态变量</span></span><br><span class="line">        <span class="title function_">__UUPSUpgradeable_init</span>(); <span class="comment">// 初始化 UUPSUpgradeable 的状态变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external onlyOwner &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMessage</span>(<span class="params">string memory newMessage</span>) external onlyOwner &#123;</span><br><span class="line">        message = newMessage;</span><br><span class="line">        emit <span class="title class_">MessageSet</span>(newMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的实现合约地址，仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_authorizeUpgrade</span>(<span class="params">address newImplementation</span>) internal override onlyOwner &#123;&#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">    event <span class="title class_">MessageSet</span>(string newMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="WETH"><a href="#WETH" class="headerlink" title="WETH"></a>WETH</h1><p>概述：<br>一种ERC20代币，可与ETH 1:1等价转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WETH 合约实现了 ERC-20 标准，并允许 ETH 和 WETH 之间进行 1:1 的转换。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract <span class="variable constant_">WETH</span> is <span class="title class_">ERC20</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化 WETH 合约。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ERC20</span>(<span class="string">&quot;Wrapped Ether&quot;</span>, <span class="string">&quot;WETH&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入 ETH 并铸造相应数量的 WETH。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params"></span>) external payable &#123;</span><br><span class="line">        <span class="title function_">_mint</span>(msg.<span class="property">sender</span>, msg.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁指定数量的 WETH 并提取相应的 ETH。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint256 amount</span>) external &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">balanceOf</span>(msg.<span class="property">sender</span>) &gt;= amount, <span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        <span class="title function_">_burn</span>(msg.<span class="property">sender</span>, amount);</span><br><span class="line">        <span class="title function_">payable</span>(msg.<span class="property">sender</span>).<span class="title function_">transfer</span>(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Merkle证明"><a href="#Merkle证明" class="headerlink" title="Merkle证明"></a>Merkle证明</h1><p>机制：</p><ol><li>将数组构建为 Merkle树</li><li>将待验证数据 传入Merkle树的叶子节点，自下而上计算哈希</li><li>若最终结果 与根哈希匹配，则证明该数据 存在于数组中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">MerkleTree</span> &#123;</span><br><span class="line">    bytes32 public merkleRoot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，用于初始化 Merkle 根哈希。</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">bytes32 _merkleRoot</span>) &#123;</span><br><span class="line">        merkleRoot = _merkleRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两个哈希值的组合哈希。</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hashPair</span>(<span class="params">bytes32 left, bytes32 right</span>) internal pure <span class="title function_">returns</span> (bytes32) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(left, right));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(right, left));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 Merkle 树的根哈希。</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMerkleRoot</span>(<span class="params">bytes32[] memory elements</span>) public pure <span class="title function_">returns</span> (bytes32) &#123;</span><br><span class="line">        uint256 len = elements.<span class="property">length</span>;</span><br><span class="line">        bytes32[] memory nodes = elements;</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>;) &#123;</span><br><span class="line">                nodes[i] = <span class="title function_">hashPair</span>(nodes[i * <span class="number">2</span>], nodes[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">                unchecked &#123; ++i; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                nodes[len / <span class="number">2</span>] = nodes[len - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            len = (len + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证给定的数据和证明路径是否属于 Merkle 树。</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">verifyProof</span>(<span class="params">bytes32 data, bytes32[] memory proof</span>) public view <span class="title function_">returns</span> (bool) &#123;</span><br><span class="line">        bytes32 computedHash = data;</span><br><span class="line">        <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; proof.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            bytes32 proofElement = proof[i];</span><br><span class="line">            <span class="keyword">if</span> (computedHash &lt; proofElement) &#123;</span><br><span class="line">                computedHash = <span class="title function_">hashPair</span>(computedHash, proofElement);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                computedHash = <span class="title function_">hashPair</span>(proofElement, computedHash);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> computedHash == merkleRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="元交易"><a href="#元交易" class="headerlink" title="元交易"></a>元交易</h1><p>机制：</p><ol><li>转发器&#x2F;Forwarder 实现EIP712标准，其中定义了待接收数据的结构</li><li>用户基于该结构 构建数据，签名后 发给转发器</li><li>转发器 验证签名有效性，通过后 基于数据中包含的交易信息，发送交易<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">Forwarder</span> is <span class="title class_">EIP712</span> &#123;</span><br><span class="line">    <span class="comment">// 定义待接收数据的结构体</span></span><br><span class="line">    struct <span class="title class_">MetaTransaction</span> &#123;</span><br><span class="line">        address <span class="keyword">from</span>;</span><br><span class="line">        uint256 nonce;</span><br><span class="line">        bytes functionSignature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事件用于记录成功执行的元交易</span></span><br><span class="line">    event <span class="title class_">MetaTransactionExecuted</span>(address userAddress, address relayerAddress, bytes functionSignature);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储用户的非重复使用计数器（nonce）</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) private nonces;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数初始化EIP712域分隔符</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">EIP712</span>(<span class="string">&quot;Forwarder&quot;</span>, <span class="string">&quot;1&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证并执行元交易。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">executeMetaTransaction</span>(<span class="params">MetaTransaction memory metaTx, bytes memory signature</span>) public <span class="title function_">returns</span> (bytes memory) &#123;</span><br><span class="line">        <span class="built_in">require</span>(nonces[metaTx.<span class="property">from</span>] == metaTx.<span class="property">nonce</span>, <span class="string">&quot;无效的nonce&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复签名者地址</span></span><br><span class="line">        bytes32 digest = <span class="title function_">_hashTypedDataV4</span>(<span class="title function_">keccak256</span>(abi.<span class="title function_">encode</span>(</span><br><span class="line">            <span class="title function_">keccak256</span>(<span class="string">&quot;MetaTransaction(address from,uint256 nonce,bytes functionSignature)&quot;</span>),</span><br><span class="line">            metaTx.<span class="property">from</span>,</span><br><span class="line">            metaTx.<span class="property">nonce</span>,</span><br><span class="line">            <span class="title function_">keccak256</span>(metaTx.<span class="property">functionSignature</span>)</span><br><span class="line">        )));</span><br><span class="line">        address signer = <span class="variable constant_">ECDSA</span>.<span class="title function_">recover</span>(digest, signature);</span><br><span class="line">        <span class="built_in">require</span>(signer == metaTx.<span class="property">from</span>, <span class="string">&quot;无效的签名&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新nonce防止重放攻击</span></span><br><span class="line">        nonces[metaTx.<span class="property">from</span>] = metaTx.<span class="property">nonce</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行交易</span></span><br><span class="line">        (bool success, bytes memory returnData) = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="title function_">call</span>(metaTx.<span class="property">functionSignature</span>);</span><br><span class="line">        <span class="built_in">require</span>(success, <span class="string">&quot;交易执行失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">MetaTransactionExecuted</span>(metaTx.<span class="property">from</span>, msg.<span class="property">sender</span>, metaTx.<span class="property">functionSignature</span>);</span><br><span class="line">        <span class="keyword">return</span> returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定地址的当前nonce值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getNonce</span>(<span class="params">address user</span>) public view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> nonces[user];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标合约，处理元交易</span></span><br><span class="line">contract <span class="title class_">TargetContract</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="variable constant_">ECDSA</span> <span class="keyword">for</span> bytes32;</span><br><span class="line"></span><br><span class="line">    address public forwarder;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyForwarder</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == forwarder, <span class="string">&quot;仅转发器可以调用&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _forwarder</span>) &#123;</span><br><span class="line">        forwarder = _forwarder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 value</span>) external onlyForwarder &#123;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>EIP-712标准：<br>类型化数据 签名校验，具体见此<a href="https://developer.baidu.com/article/details/2727890">文章</a></p><h1 id="多重调用-Multicall"><a href="#多重调用-Multicall" class="headerlink" title="多重调用&#x2F;Multicall"></a>多重调用&#x2F;Multicall</h1><p>机制：<br>多个调用视为同一交易，成功失败具有一致性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">Multicall</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行多个函数调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">multicall</span>(<span class="params">bytes[] calldata data</span>) external <span class="title function_">returns</span> (bytes[] memory results) &#123;</span><br><span class="line">        results = <span class="keyword">new</span> bytes[](data.<span class="property">length</span>);</span><br><span class="line">        <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 执行每个调用并捕获结果或错误</span></span><br><span class="line">            (bool success, bytes memory result) = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="title function_">delegatecall</span>(data[i]);</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                <span class="comment">// 如果任意调用失败，则回滚整个事务</span></span><br><span class="line">                assembly &#123;</span><br><span class="line">                    <span class="title function_">revert</span>(<span class="title function_">add</span>(result, <span class="number">32</span>), <span class="title function_">mload</span>(result))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            results[i] = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标合约，处理多重调用中的具体逻辑</span></span><br><span class="line">contract <span class="title class_">TargetContract</span> &#123;</span><br><span class="line">    uint256 public value;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ValueSet</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setValue</span>(<span class="params">uint256 newValue</span>) external &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueSet</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMessage</span>(<span class="params">string memory message</span>) external &#123;</span><br><span class="line">        emit <span class="title class_">MessageSet</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) external pure <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;默认消息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">MessageSet</span>(string message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="预言机-Oracle"><a href="#预言机-Oracle" class="headerlink" title="预言机&#x2F;Oracle"></a>预言机&#x2F;Oracle</h1><p>概述：<br>一种外部服务，用于将真实世界的数据 引入区块链，使合约能够 基于这些数据执行特定逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">PriceConsumerV3</span> is <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="title class_">AggregatorV3Interface</span> internal priceFeed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，设置使用的 Chainlink 预言机地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _priceFeed</span>) &#123;</span><br><span class="line">        priceFeed = <span class="title class_">AggregatorV3Interface</span>(_priceFeed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最新价格。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLatestPrice</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (int) &#123;</span><br><span class="line">        (</span><br><span class="line">            int price,</span><br><span class="line">        ) = priceFeed.<span class="title function_">latestRoundData</span>();</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">executeBasedOnPrice</span>(<span class="params">int threshold</span>) external onlyOwner &#123;</span><br><span class="line">        int currentPrice = <span class="title function_">getLatestPrice</span>();</span><br><span class="line">        <span class="keyword">if</span> (currentPrice &gt; threshold) &#123;</span><br><span class="line">            emit <span class="title class_">PriceThresholdExceeded</span>(currentPrice, threshold);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">PriceThresholdExceeded</span>(int currentPrice, int threshold);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="去中心化交易所-DEX"><a href="#去中心化交易所-DEX" class="headerlink" title="去中心化交易所&#x2F;DEX"></a>去中心化交易所&#x2F;DEX</h1><h2 id="Uniswap-V1"><a href="#Uniswap-V1" class="headerlink" title="Uniswap V1"></a>Uniswap V1</h2><p>机制：</p><ol><li>工厂合约&#x2F;Factory：为每个新的ETH-token对 创建流动性池合约</li><li>流动性池合约&#x2F;Exchange：<br>addLiquidity()：允许用户将ETH-token 存入自身-对应ERC20代币合约中，同时铸造 自身管理的ERC20代币（份额）<br>removeLiquidity()<br>swap__()：允许用户存入ETH&#x2F;token 并取出token&#x2F;ETH，交换比率 基于两者当前储备量，遵循特定公式（CSAMM, PAMM）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">Factory</span> &#123;</span><br><span class="line">    address[] public exchangeContracts;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> address) public tokenToExchange;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">ExchangeCreated</span>(address indexed token, address exchange);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的流动性池合约。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createExchange</span>(<span class="params">address token</span>) external <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="built_in">require</span>(token != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;无效的token地址&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保不会重复创建相同的交易对</span></span><br><span class="line">        <span class="built_in">require</span>(tokenToExchange[token] == <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;已存在该token的流动性池&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Exchange</span> exchange = <span class="keyword">new</span> <span class="title class_">Exchange</span>(token);</span><br><span class="line">        tokenToExchange[token] = <span class="title function_">address</span>(exchange);</span><br><span class="line">        exchangeContracts.<span class="title function_">push</span>(<span class="title function_">address</span>(exchange));</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">ExchangeCreated</span>(token, <span class="title function_">address</span>(exchange));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有流动性池合约的地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getExchangeContracts</span>(<span class="params"></span>) external view <span class="title function_">returns</span> (address[] memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> exchangeContracts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exchange</span> is <span class="title class_">ERC20</span> &#123;</span><br><span class="line">    <span class="title class_">IERC20</span> public token; <span class="comment">// ERC20 代币</span></span><br><span class="line">    uint256 private constant <span class="variable constant_">PRECISION</span> = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _token</span>) <span class="title class_">ERC20</span>(<span class="string">&quot;UniswapV1 LP Token&quot;</span>, <span class="string">&quot;UNI-V1-LP&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(_token != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;无效的token地址&quot;</span>);</span><br><span class="line">        token = <span class="title class_">IERC20</span>(_token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加流动性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addLiquidity</span>(<span class="params">uint256 tokenAmount</span>) external payable <span class="title function_">returns</span> (uint256 liquidityMinted) &#123;</span><br><span class="line">        <span class="built_in">require</span>(tokenAmount &gt; <span class="number">0</span> &amp;&amp; msg.<span class="property">value</span> &gt; <span class="number">0</span>, <span class="string">&quot;需要同时提供ETH和token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 ethBalance = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> - msg.<span class="property">value</span>;</span><br><span class="line">        uint256 tokenReserve = token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint256 totalSupply = <span class="title function_">totalSupply</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (totalSupply == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 初始流动性添加</span></span><br><span class="line">            liquidityMinted = <span class="title function_">sqrt</span>(msg.<span class="property">value</span> * tokenAmount * <span class="variable constant_">PRECISION</span>) / <span class="variable constant_">PRECISION</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 后续流动性添加</span></span><br><span class="line">            uint256 ethReserve = ethBalance;</span><br><span class="line">            <span class="built_in">require</span>(msg.<span class="property">value</span> * tokenReserve &gt;= ethReserve * tokenAmount, <span class="string">&quot;添加比例不正确&quot;</span>);</span><br><span class="line">            liquidityMinted = (msg.<span class="property">value</span> * totalSupply) / ethReserve;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        token.<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), tokenAmount);</span><br><span class="line">        <span class="title function_">_mint</span>(msg.<span class="property">sender</span>, liquidityMinted);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> liquidityMinted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除流动性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeLiquidity</span>(<span class="params">uint256 liquidityAmount</span>) external <span class="title function_">returns</span> (uint256 ethAmount, uint256 tokenAmount) &#123;</span><br><span class="line">        <span class="built_in">require</span>(liquidityAmount &gt; <span class="number">0</span>, <span class="string">&quot;流动性份额必须大于0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 totalSupply = <span class="title function_">totalSupply</span>();</span><br><span class="line">        uint256 ethReserve = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line">        uint256 tokenReserve = token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line"></span><br><span class="line">        ethAmount = (ethReserve * liquidityAmount) / totalSupply;</span><br><span class="line">        tokenAmount = (tokenReserve * liquidityAmount) / totalSupply;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_burn</span>(msg.<span class="property">sender</span>, liquidityAmount);</span><br><span class="line">        <span class="title function_">payable</span>(msg.<span class="property">sender</span>).<span class="title function_">transfer</span>(ethAmount);</span><br><span class="line">        token.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, tokenAmount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (ethAmount, tokenAmount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换 ETH 或 ERC20 代币。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">uint256 inputAmount, bool inputIsEth</span>) external payable <span class="title function_">returns</span> (uint256 outputAmount) &#123;</span><br><span class="line">        uint256 inputReserve;</span><br><span class="line">        uint256 outputReserve;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inputIsEth) &#123;</span><br><span class="line">            <span class="built_in">require</span>(inputAmount == msg.<span class="property">value</span>, <span class="string">&quot;输入金额不匹配&quot;</span>);</span><br><span class="line">            inputReserve = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> - inputAmount;</span><br><span class="line">            outputReserve = token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            token.<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), inputAmount);</span><br><span class="line">            inputReserve = token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)) - inputAmount;</span><br><span class="line">            outputReserve = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用恒定乘积公式计算输出量</span></span><br><span class="line">        uint256 numerator = inputAmount * outputReserve;</span><br><span class="line">        uint256 denominator = inputReserve + inputAmount;</span><br><span class="line">        outputAmount = numerator / denominator;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inputIsEth) &#123;</span><br><span class="line">            token.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, outputAmount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">payable</span>(msg.<span class="property">sender</span>).<span class="title function_">transfer</span>(outputAmount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> outputAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算平方根。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sqrt</span>(<span class="params">uint256 x</span>) internal pure <span class="title function_">returns</span> (uint256 y) &#123;</span><br><span class="line">        uint256 z = (x + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">while</span> (z &lt; y) &#123;</span><br><span class="line">            y = z;</span><br><span class="line">            z = (x / z + z) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Uniswap-V2"><a href="#Uniswap-V2" class="headerlink" title="Uniswap V2"></a>Uniswap V2</h2><p>机制：</p><ol><li>工厂合约：为每个新的 ETH-token、token-token对 创建流动性池合约</li><li>流动性池合约&#x2F;Pair：外围合约中函数的 内部实现</li><li>路由器合约&#x2F;Router：核心合约中函数的 外部封装<br>addLiquidityETH(), addLiquidity()<br>removeLiquidityETH(), removeLiquidity()<br>swap__()：支持闪电交换，借入方需实现 uniswapV2Call()（类似于 IERC3156FlashBorrower.onFlashLoan()）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">Factory</span> &#123;</span><br><span class="line">    address public feeToSetter;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> address)) public getPair;</span><br><span class="line">    address[] public allPairs;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">PairCreated</span>(address indexed token0, address indexed token1, address pair, uint);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        feeToSetter = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createPair</span>(<span class="params">address tokenA, address tokenB</span>) external <span class="title function_">returns</span> (address pair) &#123;</span><br><span class="line">        <span class="built_in">require</span>(tokenA != tokenB, <span class="string">&#x27;UniswapV2: IDENTICAL_ADDRESSES&#x27;</span>);</span><br><span class="line">        (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">        <span class="built_in">require</span>(token0 != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&#x27;UniswapV2: ZERO_ADDRESS&#x27;</span>);</span><br><span class="line">        <span class="built_in">require</span>(getPair[token0][token1] == <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&#x27;UniswapV2: PAIR_EXISTS&#x27;</span>); <span class="comment">// single check is sufficient</span></span><br><span class="line"></span><br><span class="line">        bytes memory bytecode = <span class="title function_">type</span>(<span class="title class_">Pair</span>).<span class="property">creationCode</span>;</span><br><span class="line">        bytes32 salt = <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(token0, token1));</span><br><span class="line">        assembly &#123;</span><br><span class="line">            pair := <span class="title function_">create2</span>(<span class="number">0</span>, <span class="title function_">add</span>(bytecode, <span class="number">32</span>), <span class="title function_">mload</span>(bytecode), salt)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">IERC20</span>(token0).<span class="title function_">approve</span>(pair, <span class="title function_">type</span>(uint256).<span class="property">max</span>);</span><br><span class="line">        <span class="title class_">IERC20</span>(token1).<span class="title function_">approve</span>(pair, <span class="title function_">type</span>(uint256).<span class="property">max</span>);</span><br><span class="line"></span><br><span class="line">        getPair[token0][token1] = pair;</span><br><span class="line">        getPair[token1][token0] = pair; <span class="comment">// populate mapping in the reverse direction</span></span><br><span class="line">        allPairs.<span class="title function_">push</span>(pair);</span><br><span class="line">        emit <span class="title class_">PairCreated</span>(token0, token1, pair, allPairs.<span class="property">length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Pair</span> is <span class="title class_">ERC20</span> &#123;</span><br><span class="line">    <span class="title class_">IERC20</span> public token0;</span><br><span class="line">    <span class="title class_">IERC20</span> public token1;</span><br><span class="line">    uint112 private reserve0;           <span class="comment">// uses single storage slot, accessible via getReserves</span></span><br><span class="line">    uint112 private reserve1;           <span class="comment">// uses single storage slot, accessible via getReserves</span></span><br><span class="line">    uint32  private blockTimestampLast; <span class="comment">// uses single storage slot, accessible via getReserves</span></span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Mint</span>(address indexed sender, uint amount0, uint amount1);</span><br><span class="line">    event <span class="title class_">Burn</span>(address indexed sender, uint amount0, uint amount1, address indexed to);</span><br><span class="line">    event <span class="title class_">Swap</span>(</span><br><span class="line">        address indexed sender,</span><br><span class="line">        uint amount0In, uint amount1In,</span><br><span class="line">        uint amount0Out, uint amount1Out,</span><br><span class="line">        address indexed to</span><br><span class="line">    );</span><br><span class="line">    event <span class="title class_">Sync</span>(uint112 reserve0, uint112 reserve1);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _token0, address _token1</span>) <span class="title class_">ERC20</span>(<span class="string">&quot;Uniswap V2&quot;</span>, <span class="string">&quot;UNI-V2&quot;</span>) &#123;</span><br><span class="line">        token0 = <span class="title class_">IERC20</span>(_token0);</span><br><span class="line">        token1 = <span class="title class_">IERC20</span>(_token1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加流动性逻辑</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">address to</span>) external <span class="title function_">returns</span> (uint liquidity) &#123;</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = <span class="title function_">getReserves</span>(); <span class="comment">// gas savings</span></span><br><span class="line">        uint balance0 = token0.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint balance1 = token1.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint amount0 = balance0 - _reserve0;</span><br><span class="line">        uint amount1 = balance1 - _reserve1;</span><br><span class="line"></span><br><span class="line">        uint _totalSupply = <span class="title function_">totalSupply</span>(); <span class="comment">// gas savings, must be defined here since totalSupply can update in _mintFee</span></span><br><span class="line">        <span class="keyword">if</span> (_totalSupply == <span class="number">0</span>) &#123;</span><br><span class="line">            liquidity = <span class="title function_">sqrt</span>(amount0 * amount1) - <span class="variable constant_">MINIMUM_LIQUIDITY</span>;</span><br><span class="line">           <span class="title function_">_mint</span>(<span class="title function_">address</span>(<span class="number">0</span>), <span class="variable constant_">MINIMUM_LIQUIDITY</span>); <span class="comment">// permanently lock the first MINIMUM_LIQUIDITY tokens</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            liquidity = <span class="title function_">min</span>(amount0 * _totalSupply / _reserve0, amount1 * _totalSupply / _reserve1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">require</span>(liquidity &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED&#x27;</span>);</span><br><span class="line">        <span class="title function_">_mint</span>(to, liquidity);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_update</span>(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        emit <span class="title class_">Mint</span>(msg.<span class="property">sender</span>, amount0, amount1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除流动性逻辑</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">burn</span>(<span class="params">address to</span>) external <span class="title function_">returns</span> (uint amount0, uint amount1) &#123;</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = <span class="title function_">getReserves</span>(); <span class="comment">// gas savings</span></span><br><span class="line">        address _token0 = token0;                                <span class="comment">// gas savings</span></span><br><span class="line">        address _token1 = token1;                                <span class="comment">// gas savings</span></span><br><span class="line">        uint balance0 = <span class="title class_">IERC20</span>(_token0).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint balance1 = <span class="title class_">IERC20</span>(_token1).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        uint liquidity = balanceOf[<span class="title function_">address</span>(<span class="variable language_">this</span>)];</span><br><span class="line"></span><br><span class="line">        uint _totalSupply = <span class="title function_">totalSupply</span>(); <span class="comment">// gas savings, must be defined here since totalSupply can update in _mintFee</span></span><br><span class="line">        amount0 = liquidity * _reserve0 / _totalSupply; <span class="comment">// using balances ensures pro-rata distribution</span></span><br><span class="line">        amount1 = liquidity * _reserve1 / _totalSupply; <span class="comment">// using balances ensures pro-rata distribution</span></span><br><span class="line">        <span class="built_in">require</span>(amount0 &gt; <span class="number">0</span> &amp;&amp; amount1 &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED&#x27;</span>);</span><br><span class="line">        <span class="title function_">_burn</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), liquidity);</span><br><span class="line">        <span class="title function_">_safeTransfer</span>(_token0, to, amount0);</span><br><span class="line">        <span class="title function_">_safeTransfer</span>(_token1, to, amount1);</span><br><span class="line">        balance0 = <span class="title class_">IERC20</span>(_token0).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        balance1 = <span class="title class_">IERC20</span>(_token1).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_update</span>(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) <span class="title function_">_optionalSwapCall</span>(to, data);</span><br><span class="line">        emit <span class="title class_">Burn</span>(msg.<span class="property">sender</span>, amount0, amount1, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换逻辑</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">uint amount0Out, uint amount1Out, address to, bytes calldata data</span>) external &#123;</span><br><span class="line">        <span class="built_in">require</span>(amount0Out &gt; <span class="number">0</span> || amount1Out &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = <span class="title function_">getReserves</span>(); <span class="comment">// gas savings</span></span><br><span class="line">        <span class="built_in">require</span>(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, <span class="string">&#x27;UniswapV2: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        uint balance0;</span><br><span class="line">        uint balance1;</span><br><span class="line">        &#123; <span class="comment">// scope for _token&#123;0,1&#125;, avoids stack too deep errors</span></span><br><span class="line">        address _token0 = token0;</span><br><span class="line">        address _token1 = token1;</span><br><span class="line">        <span class="built_in">require</span>(to != _token0 &amp;&amp; to != _token1, <span class="string">&#x27;UniswapV2: INVALID_TO&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (amount0Out &gt; <span class="number">0</span>) <span class="title function_">_safeTransfer</span>(_token0, to, amount0Out); <span class="comment">// optimistically transfer tokens</span></span><br><span class="line">        <span class="keyword">if</span> (amount1Out &gt; <span class="number">0</span>) <span class="title function_">_safeTransfer</span>(_token1, to, amount1Out); <span class="comment">// optimistically transfer tokens</span></span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) <span class="title function_">_optionalSwapCall</span>(to, data);</span><br><span class="line">        balance0 = <span class="title class_">IERC20</span>(_token0).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        balance1 = <span class="title class_">IERC20</span>(_token1).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        uint amount0In = balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : <span class="number">0</span>;</span><br><span class="line">        uint amount1In = balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">require</span>(amount0In &gt; <span class="number">0</span> || amount1In &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INSUFFICIENT_INPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        &#123; <span class="comment">// scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span></span><br><span class="line">        uint balance0Adjusted = balance0 * <span class="number">1000</span> - amount0In * <span class="number">3</span>;</span><br><span class="line">        uint balance1Adjusted = balance1 * <span class="number">1000</span> - amount1In * <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">require</span>(balance0Adjusted * balance1Adjusted &gt;= <span class="title function_">uint</span>(_reserve0) * <span class="title function_">uint</span>(_reserve1) * <span class="number">1000</span>**<span class="number">2</span>, <span class="string">&#x27;UniswapV2: K&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_update</span>(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        emit <span class="title class_">Swap</span>(msg.<span class="property">sender</span>, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前储备</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getReserves</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) &#123;</span><br><span class="line">        _reserve0 = reserve0;</span><br><span class="line">        _reserve1 = reserve1;</span><br><span class="line">        _blockTimestampLast = blockTimestampLast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新储备</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_update</span>(<span class="params">uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1</span>) private &#123;</span><br><span class="line">        <span class="built_in">require</span>(balance0 &lt;= <span class="title function_">type</span>(uint112).<span class="property">max</span> &amp;&amp; balance1 &lt;= <span class="title function_">type</span>(uint112).<span class="property">max</span>, <span class="string">&#x27;UniswapV2: OVERFLOW&#x27;</span>);</span><br><span class="line">        uint32 blockTimestamp = <span class="title function_">uint32</span>(block.<span class="property">timestamp</span> % <span class="number">2</span>**<span class="number">32</span>);</span><br><span class="line">        uint32 timeElapsed = blockTimestamp - blockTimestampLast; <span class="comment">// overflow is desired</span></span><br><span class="line">        <span class="keyword">if</span> (timeElapsed &gt; <span class="number">0</span> &amp;&amp; _reserve0 != <span class="number">0</span> &amp;&amp; _reserve1 != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// * never overflows, and + overflow is desired</span></span><br><span class="line">            price0CumulativeLast += <span class="title function_">uint</span>(<span class="title class_">UQ112</span>x112.<span class="title function_">encode</span>(_reserve1).<span class="title function_">uqdiv</span>(_reserve0)) * timeElapsed;</span><br><span class="line">            price1CumulativeLast += <span class="title function_">uint</span>(<span class="title class_">UQ112</span>x112.<span class="title function_">encode</span>(_reserve0).<span class="title function_">uqdiv</span>(_reserve1)) * timeElapsed;</span><br><span class="line">        &#125;</span><br><span class="line">        reserve0 = <span class="title function_">uint112</span>(balance0);</span><br><span class="line">        reserve1 = <span class="title function_">uint112</span>(balance1);</span><br><span class="line">        blockTimestampLast = blockTimestamp;</span><br><span class="line">        emit <span class="title class_">Sync</span>(reserve0, reserve1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安全转账</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_safeTransfer</span>(<span class="params">address token, address to, uint value</span>) private &#123;</span><br><span class="line">        (bool success, bytes memory data) = token.<span class="title function_">call</span>(abi.<span class="title function_">encodeWithSelector</span>(<span class="title class_">IERC20</span>.<span class="property">transfer</span>.<span class="property">selector</span>, to, value));</span><br><span class="line">        <span class="built_in">require</span>(success &amp;&amp; (data.<span class="property">length</span> == <span class="number">0</span> || abi.<span class="title function_">decode</span>(data, (bool))), <span class="string">&#x27;UniswapV2: TRANSFER_FAILED&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可选的闪电交换回调</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_optionalSwapCall</span>(<span class="params">address to, bytes memory data</span>) private &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">require</span>(to.<span class="property">code</span>.<span class="property">length</span> &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2: INVALID_CALLBACK&#x27;</span>);</span><br><span class="line">            (bool success, bytes memory returndata) = to.<span class="title function_">delegatecall</span>(abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;uniswapV2Call(address,uint256,uint256,bytes)&quot;</span>, msg.<span class="property">sender</span>, amount0Out, amount1Out, data));</span><br><span class="line">            <span class="built_in">require</span>(success, <span class="string">&#x27;UniswapV2: CALL_FAILED&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sqrt</span>(<span class="params">uint y</span>) internal pure <span class="title function_">returns</span> (uint z) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            z = y;</span><br><span class="line">            uint x = y / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (x &lt; z) &#123;</span><br><span class="line">                z = x;</span><br><span class="line">                x = (y / x + x) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">            z = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">min</span>(<span class="params">uint x, uint y</span>) internal pure <span class="title function_">returns</span> (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt;= y ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Router</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="title class_">SafeERC20</span> <span class="keyword">for</span> <span class="title class_">IERC20</span>;</span><br><span class="line"></span><br><span class="line">    address public immutable factory;</span><br><span class="line">    address public immutable <span class="variable constant_">WETH</span>;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">ensure</span>(<span class="params">uint deadline</span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(deadline &gt;= block.<span class="property">timestamp</span>, <span class="string">&#x27;UniswapV2Router: EXPIRED&#x27;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _factory, address _WETH</span>) &#123;</span><br><span class="line">        factory = _factory;</span><br><span class="line">        <span class="variable constant_">WETH</span> = _WETH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;</span><br><span class="line">        <span class="title function_">assert</span>(msg.<span class="property">sender</span> == <span class="variable constant_">WETH</span>); <span class="comment">// only accept ETH via fallback from the WETH contract</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加流动性（ETH-token）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addLiquidityETH</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint amountTokenDesired,</span></span><br><span class="line"><span class="params">        uint amountTokenMin,</span></span><br><span class="line"><span class="params">        uint amountETHMin,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external payable <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint amountToken, uint amountETH, uint liquidity) &#123;</span><br><span class="line">        (amountToken, amountETH) = <span class="title class_">Pair</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>))).<span class="property">mint</span>&#123;<span class="attr">value</span>: msg.<span class="property">value</span>&#125;(to);</span><br><span class="line">        <span class="built_in">require</span>(amountToken &gt;= amountTokenMin &amp;&amp; amountETH &gt;= amountETHMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">        liquidity = <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>)).<span class="title function_">balanceOf</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加流动性（token-token）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addLiquidity</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address tokenA,</span></span><br><span class="line"><span class="params">        address tokenB,</span></span><br><span class="line"><span class="params">        uint amountADesired,</span></span><br><span class="line"><span class="params">        uint amountBDesired,</span></span><br><span class="line"><span class="params">        uint amountAMin,</span></span><br><span class="line"><span class="params">        uint amountBMin,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint amountA, uint amountB, uint liquidity) &#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(tokenA).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB)), amountADesired);</span><br><span class="line">        <span class="title class_">IERC20</span>(tokenB).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB)), amountBDesired);</span><br><span class="line">        (amountA, amountB) = <span class="title class_">Pair</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB))).<span class="title function_">mint</span>(to);</span><br><span class="line">        <span class="built_in">require</span>(amountA &gt;= amountAMin &amp;&amp; amountB &gt;= amountBMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">        liquidity = <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB)).<span class="title function_">balanceOf</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除流动性（ETH-token）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeLiquidityETH</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint liquidity,</span></span><br><span class="line"><span class="params">        uint amountTokenMin,</span></span><br><span class="line"><span class="params">        uint amountETHMin,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint amountToken, uint amountETH) &#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>))).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>)), liquidity);</span><br><span class="line">        (amountToken, amountETH) = <span class="title class_">Pair</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(token, <span class="variable constant_">WETH</span>))).<span class="title function_">burn</span>(to);</span><br><span class="line">        <span class="built_in">require</span>(amountToken &gt;= amountTokenMin &amp;&amp; amountETH &gt;= amountETHMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除流动性（token-token）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeLiquidity</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address tokenA,</span></span><br><span class="line"><span class="params">        address tokenB,</span></span><br><span class="line"><span class="params">        uint liquidity,</span></span><br><span class="line"><span class="params">        uint amountAMin,</span></span><br><span class="line"><span class="params">        uint amountBMin,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint amountA, uint amountB) &#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB))).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB)), liquidity);</span><br><span class="line">        (amountA, amountB) = <span class="title class_">Pair</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB))).<span class="title function_">burn</span>(to);</span><br><span class="line">        <span class="built_in">require</span>(amountA &gt;= amountAMin &amp;&amp; amountB &gt;= amountBMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换（支持闪电交换）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapExactTokensForTokens</span>(<span class="params"></span></span><br><span class="line"><span class="params">        uint amountIn,</span></span><br><span class="line"><span class="params">        uint amountOutMin,</span></span><br><span class="line"><span class="params">        address[] calldata path,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint[] memory amounts) &#123;</span><br><span class="line">        amounts = <span class="title function_">getAmountsOut</span>(amountIn, path);</span><br><span class="line">        <span class="built_in">require</span>(amounts[amounts.<span class="property">length</span> - <span class="number">1</span>] &gt;= amountOutMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        <span class="title class_">IERC20</span>(path[<span class="number">0</span>]).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(path[<span class="number">0</span>], path[<span class="number">1</span>])), amounts[<span class="number">0</span>]);</span><br><span class="line">        <span class="title function_">_swap</span>(amounts, path, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapExactETHForTokens</span>(<span class="params"></span></span><br><span class="line"><span class="params">        uint amountOutMin,</span></span><br><span class="line"><span class="params">        address[] calldata path,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint deadline</span></span><br><span class="line"><span class="params">    </span>) external payable <span class="title function_">ensure</span>(deadline) <span class="title function_">returns</span> (uint[] memory amounts) &#123;</span><br><span class="line">        <span class="built_in">require</span>(path[<span class="number">0</span>] == <span class="variable constant_">WETH</span>, <span class="string">&#x27;UniswapV2Router: INVALID_PATH&#x27;</span>);</span><br><span class="line">        amounts = <span class="title function_">getAmountsOut</span>(msg.<span class="property">value</span>, path);</span><br><span class="line">        <span class="built_in">require</span>(amounts[amounts.<span class="property">length</span> - <span class="number">1</span>] &gt;= amountOutMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        <span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="property">deposit</span>&#123;<span class="attr">value</span>: amounts[<span class="number">0</span>]&#125;();</span><br><span class="line">        <span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="title function_">transfer</span>(<span class="title class_">Pair</span>(factory.<span class="title function_">getPair</span>(path[<span class="number">0</span>], path[<span class="number">1</span>])), amounts[<span class="number">0</span>]);</span><br><span class="line">        <span class="title function_">_swap</span>(amounts, path, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_swap</span>(<span class="params">uint[] memory amounts, address[] memory path, address _to</span>) internal virtual &#123;</span><br><span class="line">        <span class="keyword">for</span> (uint i; i &lt; path.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            (address input, address output) = (path[i], path[i + <span class="number">1</span>]);</span><br><span class="line">            (address token0,) = <span class="title class_">UniswapV2Library</span>.<span class="title function_">sortTokens</span>(input, output);</span><br><span class="line">            uint amountOut = amounts[i + <span class="number">1</span>];</span><br><span class="line">            (uint amount0Out, uint amount1Out) = input == token0 ? (<span class="title function_">uint</span>(<span class="number">0</span>), amountOut) : (amountOut, <span class="title function_">uint</span>(<span class="number">0</span>));</span><br><span class="line">            address to = i &lt; path.<span class="property">length</span> - <span class="number">2</span> ? <span class="title class_">UniswapV2Library</span>.<span class="title function_">pairFor</span>(factory, input, output) : _to;</span><br><span class="line">            <span class="title class_">Pair</span>(<span class="title class_">UniswapV2Library</span>.<span class="title function_">pairFor</span>(factory, input, output)).<span class="title function_">swap</span>(amount0Out, amount1Out, to, <span class="keyword">new</span> <span class="title function_">bytes</span>(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getAmountsOut</span>(<span class="params">uint amountIn, address[] memory path</span>) public view <span class="title function_">returns</span> (uint[] memory amounts) &#123;</span><br><span class="line">        <span class="built_in">require</span>(path.<span class="property">length</span> &gt;= <span class="number">2</span>, <span class="string">&#x27;UniswapV2Router: INVALID_PATH&#x27;</span>);</span><br><span class="line">        amounts = <span class="keyword">new</span> uint[](path.<span class="property">length</span>);</span><br><span class="line">        amounts[<span class="number">0</span>] = amountIn;</span><br><span class="line">        <span class="keyword">for</span> (uint i; i &lt; path.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            (uint reserveIn, uint reserveOut) = <span class="title class_">UniswapV2Library</span>.<span class="title function_">getReserves</span>(factory, path[i], path[i + <span class="number">1</span>]);</span><br><span class="line">            amounts[i + <span class="number">1</span>] = <span class="title class_">UniswapV2Library</span>.<span class="title function_">getAmountOut</span>(amounts[i], reserveIn, reserveOut);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">library <span class="title class_">UniswapV2Library</span> &#123;</span><br><span class="line">    <span class="comment">// Helper functions and logic used by the router and pair contracts</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sortTokens</span>(<span class="params">address tokenA, address tokenB</span>) internal pure <span class="title function_">returns</span> (address token0, address token1) &#123;</span><br><span class="line">        <span class="built_in">require</span>(tokenA != tokenB, <span class="string">&#x27;UniswapV2Library: IDENTICAL_ADDRESSES&#x27;</span>);</span><br><span class="line">        (token0, token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">        <span class="built_in">require</span>(token0 != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&#x27;UniswapV2Library: ZERO_ADDRESS&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pairFor</span>(<span class="params">address factory, address tokenA, address tokenB</span>) internal pure <span class="title function_">returns</span> (address pair) &#123;</span><br><span class="line">        (address token0, address token1) = <span class="title function_">sortTokens</span>(tokenA, tokenB);</span><br><span class="line">        pair = <span class="title function_">address</span>(<span class="title function_">uint160</span>(<span class="title function_">uint</span>(<span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(</span><br><span class="line">                hex<span class="string">&#x27;ff&#x27;</span>,</span><br><span class="line">                factory,</span><br><span class="line">                <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(token0, token1)),</span><br><span class="line">                hex<span class="string">&#x27;96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f&#x27;</span> <span class="comment">// init code hash</span></span><br><span class="line">            )))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getReserves</span>(<span class="params">address factory, address tokenA, address tokenB</span>) internal view <span class="title function_">returns</span> (uint reserveA, uint reserveB) &#123;</span><br><span class="line">        (address token0,) = <span class="title function_">sortTokens</span>(tokenA, tokenB);</span><br><span class="line">        (uint reserve0, uint reserve1,) = <span class="title class_">IPair</span>(<span class="title class_">IPair</span>(factory.<span class="title function_">getPair</span>(tokenA, tokenB))).<span class="title function_">getReserves</span>();</span><br><span class="line">        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getAmountOut</span>(<span class="params">uint amountIn, uint reserveIn, uint reserveOut</span>) internal pure <span class="title function_">returns</span> (uint amountOut) &#123;</span><br><span class="line">        <span class="built_in">require</span>(amountIn &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#x27;</span>);</span><br><span class="line">        <span class="built_in">require</span>(reserveIn &gt; <span class="number">0</span> &amp;&amp; reserveOut &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">        uint amountInWithFee = amountIn * <span class="number">997</span>;</span><br><span class="line">        uint numerator = amountInWithFee * reserveOut;</span><br><span class="line">        uint denominator = reserveIn * <span class="number">1000</span> + amountInWithFee;</span><br><span class="line">        amountOut = numerator / denominator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.wtf.academy/docs/solidity-103/ProxyContract">https://www.wtf.academy/docs/solidity-103/ProxyContract</a><br><a href="https://developer.baidu.com/article/details/2727890">https://developer.baidu.com/article/details/2727890</a><br><a href="https://blog.csdn.net/llslinliansheng/article/details/129404672">https://blog.csdn.net/llslinliansheng/article/details/129404672</a><br><a href="https://ethereum.org/zh/developers/tutorials/uniswap-v2-annotated-code/#uniswapv2pair">https://ethereum.org/zh/developers/tutorials/uniswap-v2-annotated-code/#uniswapv2pair</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2024</title>
      <link href="/2024/12/19/2024-12-19%20HGAME%202024/"/>
      <url>/2024/12/19/2024-12-19%20HGAME%202024/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="mystery"><a href="#mystery" class="headerlink" title="mystery"></a>mystery</h3><p>加密分析：<br>有代码混淆，但没想到给变量改名，会触发IDA重新生成伪代码，然后虚假控制流部分就被自动优化掉了，属实没绷住<br>加密部分又是个魔改RC4，但有小技俩<br>.init_array中第一次RC4，对第二次RC4的 sbox进行初始化，key进行修改<br>.fini_array中第二次RC4，读取输入，sbox重新初始化</p><p>解密：<br>dump一手Sbox，不过main里有ptrace()反调试，先patch一手<br>解密脚本甚至照搬用上一题的</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Sbox[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x77</span>, <span class="number">0xD3</span>, <span class="number">0x1C</span>, <span class="number">0x30</span>, <span class="number">0xEB</span>, <span class="number">0xDA</span>, <span class="number">0x44</span>, <span class="number">0x34</span>, <span class="number">0xCA</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x9A</span>, <span class="number">0x05</span>, <span class="number">0x99</span>, <span class="number">0xC8</span>, <span class="number">0xC1</span>, <span class="number">0x53</span>, <span class="number">0x1E</span>, <span class="number">0xA9</span>, <span class="number">0xF8</span>, </span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x27</span>, <span class="number">0x83</span>, <span class="number">0xA8</span>, <span class="number">0x28</span>, <span class="number">0x5B</span>, <span class="number">0x76</span>, <span class="number">0xB8</span>, <span class="number">0x88</span>, <span class="number">0x1F</span>, </span><br><span class="line">  <span class="number">0x94</span>, <span class="number">0x0A</span>, <span class="number">0x2D</span>, <span class="number">0xE1</span>, <span class="number">0x74</span>, <span class="number">0xD2</span>, <span class="number">0x0F</span>, <span class="number">0xAA</span>, <span class="number">0xB9</span>, <span class="number">0x0E</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x3A</span>, <span class="number">0xAB</span>, <span class="number">0x58</span>, <span class="number">0xD9</span>, <span class="number">0xDB</span>, <span class="number">0x43</span>, <span class="number">0xBC</span>, <span class="number">0x64</span>, <span class="number">0x1A</span>, </span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x0D</span>, <span class="number">0x4D</span>, <span class="number">0xEF</span>, <span class="number">0x65</span>, <span class="number">0x7D</span>, <span class="number">0x72</span>, <span class="number">0xCD</span>, <span class="number">0xA7</span>, <span class="number">0x4C</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0x2E</span>, <span class="number">0xCB</span>, <span class="number">0xA6</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0xAC</span>, <span class="number">0x37</span>, <span class="number">0x0C</span>, <span class="number">0x50</span>, </span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xC9</span>, <span class="number">0xD8</span>, <span class="number">0xBF</span>, <span class="number">0x19</span>, <span class="number">0x2A</span>, <span class="number">0xF6</span>, <span class="number">0x82</span>, <span class="number">0xFF</span>, <span class="number">0x1B</span>, </span><br><span class="line">  <span class="number">0x66</span>, <span class="number">0x39</span>, <span class="number">0x22</span>, <span class="number">0x36</span>, <span class="number">0xF9</span>, <span class="number">0xEE</span>, <span class="number">0x23</span>, <span class="number">0x56</span>, <span class="number">0x6D</span>, <span class="number">0x0B</span>, </span><br><span class="line">  <span class="number">0xFA</span>, <span class="number">0x3B</span>, <span class="number">0xCF</span>, <span class="number">0xD7</span>, <span class="number">0x9F</span>, <span class="number">0x33</span>, <span class="number">0xE5</span>, <span class="number">0x85</span>, <span class="number">0xDE</span>, <span class="number">0xC0</span>, </span><br><span class="line">  <span class="number">0xE6</span>, <span class="number">0x8E</span>, <span class="number">0x78</span>, <span class="number">0x03</span>, <span class="number">0xCC</span>, <span class="number">0xA0</span>, <span class="number">0x9D</span>, <span class="number">0x06</span>, <span class="number">0x9B</span>, <span class="number">0x45</span>, </span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x8C</span>, <span class="number">0xDC</span>, <span class="number">0x95</span>, <span class="number">0x02</span>, <span class="number">0x14</span>, <span class="number">0x90</span>, <span class="number">0x61</span>, </span><br><span class="line">  <span class="number">0xAF</span>, <span class="number">0x42</span>, <span class="number">0x2F</span>, <span class="number">0x3E</span>, <span class="number">0x81</span>, <span class="number">0x8B</span>, <span class="number">0xD4</span>, <span class="number">0xC6</span>, <span class="number">0x51</span>, <span class="number">0x17</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x4F</span>, <span class="number">0xE4</span>, <span class="number">0xFE</span>, <span class="number">0xC4</span>, <span class="number">0x5F</span>, <span class="number">0x52</span>, <span class="number">0x7F</span>, <span class="number">0xA3</span>, <span class="number">0xB6</span>, </span><br><span class="line">  <span class="number">0x6F</span>, <span class="number">0x24</span>, <span class="number">0xEA</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, <span class="number">0xF7</span>, <span class="number">0xAD</span>, <span class="number">0x2B</span>, <span class="number">0x29</span>, <span class="number">0xFB</span>, </span><br><span class="line">  <span class="number">0xAE</span>, <span class="number">0x79</span>, <span class="number">0xC2</span>, <span class="number">0x7A</span>, <span class="number">0x4B</span>, <span class="number">0x31</span>, <span class="number">0x71</span>, <span class="number">0x09</span>, <span class="number">0x69</span>, <span class="number">0xE2</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0xF5</span>, <span class="number">0xE7</span>, <span class="number">0x35</span>, <span class="number">0x5C</span>, <span class="number">0xD6</span>, <span class="number">0x6C</span>, <span class="number">0xE8</span>, <span class="number">0x4E</span>, <span class="number">0xC3</span>, </span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0xDD</span>, <span class="number">0xEC</span>, <span class="number">0x15</span>, <span class="number">0xB5</span>, <span class="number">0x6E</span>, <span class="number">0xC7</span>, <span class="number">0xD5</span>, <span class="number">0xB0</span>, <span class="number">0x2C</span>, </span><br><span class="line">  <span class="number">0x68</span>, <span class="number">0x5E</span>, <span class="number">0x59</span>, <span class="number">0x84</span>, <span class="number">0x5A</span>, <span class="number">0x40</span>, <span class="number">0x1D</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x5D</span>, </span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0xE3</span>, <span class="number">0x49</span>, <span class="number">0x6A</span>, <span class="number">0xFC</span>, <span class="number">0xED</span>, <span class="number">0x57</span>, <span class="number">0x54</span>, <span class="number">0x92</span>, <span class="number">0x10</span>, </span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0xFD</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x98</span>, <span class="number">0x46</span>, <span class="number">0xC5</span>, <span class="number">0x12</span>, <span class="number">0x41</span>, <span class="number">0x8F</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x13</span>, <span class="number">0xA2</span>, <span class="number">0x62</span>, <span class="number">0xD0</span>, <span class="number">0xA4</span>, <span class="number">0x18</span>, <span class="number">0xB7</span>, <span class="number">0x73</span>, <span class="number">0xF0</span>, </span><br><span class="line">  <span class="number">0xCE</span>, <span class="number">0x7E</span>, <span class="number">0x20</span>, <span class="number">0xF3</span>, <span class="number">0xBD</span>, <span class="number">0x9C</span>, <span class="number">0xDF</span>, <span class="number">0x86</span>, <span class="number">0xF4</span>, <span class="number">0x97</span>, </span><br><span class="line">  <span class="number">0xB2</span>, <span class="number">0x55</span>, <span class="number">0xF2</span>, <span class="number">0x63</span>, <span class="number">0x89</span>, <span class="number">0xBB</span>, <span class="number">0x25</span>, <span class="number">0x7B</span>, <span class="number">0xBE</span>, <span class="number">0x38</span>, </span><br><span class="line">  <span class="number">0x9E</span>, <span class="number">0x8D</span>, <span class="number">0xB4</span>, <span class="number">0x48</span>, <span class="number">0x4A</span>, <span class="number">0x16</span>, <span class="number">0x93</span>, <span class="number">0xBA</span>, <span class="number">0x60</span>, <span class="number">0x3C</span>, </span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0xD1</span>, <span class="number">0x21</span>, <span class="number">0x6B</span>, <span class="number">0x32</span>, <span class="number">0x26</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> cipher[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x42</span>, <span class="number">0x38</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0x54</span>, <span class="number">0x90</span>, <span class="number">0x6F</span>, <span class="number">0xFE</span>, <span class="number">0x6F</span>, </span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0x69</span>, <span class="number">0xB9</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x16</span>, <span class="number">0x8F</span>, <span class="number">0x44</span>, <span class="number">0x38</span>, <span class="number">0x4A</span>, </span><br><span class="line">  <span class="number">0xEF</span>, <span class="number">0x37</span>, <span class="number">0x43</span>, <span class="number">0xC0</span>, <span class="number">0xA2</span>, <span class="number">0xB6</span>, <span class="number">0x34</span>, <span class="number">0x2C</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">size_t</span> cipher_len = <span class="keyword">sizeof</span>(cipher) / <span class="keyword">sizeof</span>(cipher[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_like_algorithm</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">size_t</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *Sbox)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> v2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> v3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (v2 &lt; data_len) &#123;</span><br><span class="line">        v1 = (v1 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        <span class="type">uint8_t</span> v4 = Sbox[v1];</span><br><span class="line">        v3 = (v4 + v3) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">        Sbox[v1] = Sbox[v3];</span><br><span class="line">        Sbox[v3] = v4;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint8_t</span> result = Sbox[(v4 + Sbox[v1]) &amp; <span class="number">0xFF</span>];</span><br><span class="line"></span><br><span class="line">        data[v2] += result;</span><br><span class="line"></span><br><span class="line">        v2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    rc4_like_algorithm(cipher, cipher_len, Sbox);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后数据: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cipher_len; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, cipher[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;I826-2e904t-4t98-9i82&#125;</span></span><br></pre></td></tr></table></figure><h3 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h3><p>dump：<br>Buffer变量起始处藏了个PE<br>且每个原PE的byte被扩充了了dword，所以dump后提取一下</p><p>去花后分析：<br>打开发现还有花指令，所以还得patch一下<br>扔进IDA(32位)，看到是一个魔改RC4<br>因为input[]下标向前溢出（到Sbox[]），所以伪代码显示很奇怪，所以自行先还原一下</p><p>加密部分还原：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v1 = (v1 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v4 = Sbox[v1];</span><br><span class="line">v3 = (v4 + v3) % <span class="number">256</span>;</span><br><span class="line">Sbox[v1] = Sbox[v3];</span><br><span class="line">Sbox[v3] = v4;</span><br><span class="line">result = Sbox[<span class="number">256</span>-(<span class="type">unsigned</span> __int8)(v4 + Sbox[v1])];</span><br><span class="line">input[v2++] += result;</span><br><span class="line">&#125; <span class="keyword">while</span> ( v2 &lt; input );</span><br></pre></td></tr></table></figure><p>exp：<br>这里被一个小失误卡了一些时间————<br>获取Sbox时，dump了 RC4已加密了两个字节时 的Sbox，然而此时Sbox已改变，所以一直解不出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Sbox[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x12</span>, <span class="number">0xEF</span>, <span class="number">0xF8</span>, <span class="number">0x79</span>, <span class="number">0xF9</span>, <span class="number">0xE0</span>, <span class="number">0xEA</span>, <span class="number">0xBE</span>, <span class="number">0xA9</span>, <span class="number">0x26</span>, </span><br><span class="line">  <span class="number">0xED</span>, <span class="number">0x94</span>, <span class="number">0x3E</span>, <span class="number">0xE6</span>, <span class="number">0x8F</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0xBF</span>, <span class="number">0x2A</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0x49</span>, <span class="number">0xDF</span>, <span class="number">0x57</span>, <span class="number">0x5F</span>, <span class="number">0xCA</span>, <span class="number">0x33</span>, <span class="number">0x67</span>, <span class="number">0x6B</span>, <span class="number">0xCD</span>, </span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x97</span>, <span class="number">0xA7</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x7E</span>, <span class="number">0x1A</span>, <span class="number">0xB9</span>, <span class="number">0xE1</span>, <span class="number">0xEC</span>, </span><br><span class="line">  <span class="number">0xBD</span>, <span class="number">0xDD</span>, <span class="number">0x51</span>, <span class="number">0x2E</span>, <span class="number">0xA0</span>, <span class="number">0x28</span>, <span class="number">0xCE</span>, <span class="number">0x52</span>, <span class="number">0x1E</span>, <span class="number">0xD7</span>, </span><br><span class="line">  <span class="number">0xBB</span>, <span class="number">0x63</span>, <span class="number">0x5C</span>, <span class="number">0xFE</span>, <span class="number">0xDB</span>, <span class="number">0x0D</span>, <span class="number">0x8C</span>, <span class="number">0x60</span>, <span class="number">0x39</span>, <span class="number">0x10</span>, </span><br><span class="line">  <span class="number">0xCF</span>, <span class="number">0x9B</span>, <span class="number">0x9A</span>, <span class="number">0x73</span>, <span class="number">0x3C</span>, <span class="number">0x4E</span>, <span class="number">0xDC</span>, <span class="number">0x7A</span>, <span class="number">0x23</span>, <span class="number">0x87</span>, </span><br><span class="line">  <span class="number">0xFC</span>, <span class="number">0x25</span>, <span class="number">0x8A</span>, <span class="number">0xB4</span>, <span class="number">0x9D</span>, <span class="number">0xB6</span>, <span class="number">0x6C</span>, <span class="number">0x2B</span>, <span class="number">0x70</span>, <span class="number">0x78</span>, </span><br><span class="line">  <span class="number">0x1F</span>, <span class="number">0x92</span>, <span class="number">0x83</span>, <span class="number">0x72</span>, <span class="number">0x64</span>, <span class="number">0xCB</span>, <span class="number">0x07</span>, <span class="number">0x3D</span>, <span class="number">0x99</span>, <span class="number">0xC7</span>, </span><br><span class="line">  <span class="number">0xC8</span>, <span class="number">0x58</span>, <span class="number">0x4A</span>, <span class="number">0x65</span>, <span class="number">0x93</span>, <span class="number">0xD6</span>, <span class="number">0x0B</span>, <span class="number">0xAA</span>, <span class="number">0x5B</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0x1C</span>, <span class="number">0xB5</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x08</span>, <span class="number">0xC4</span>, <span class="number">0xAC</span>, <span class="number">0x31</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0x8E</span>, <span class="number">0x3F</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>, <span class="number">0x98</span>, <span class="number">0xD1</span>, <span class="number">0xC1</span>, <span class="number">0xBA</span>, <span class="number">0xAD</span>, <span class="number">0x11</span>, </span><br><span class="line">  <span class="number">0xB3</span>, <span class="number">0x81</span>, <span class="number">0x71</span>, <span class="number">0x35</span>, <span class="number">0xE2</span>, <span class="number">0xB2</span>, <span class="number">0xF6</span>, <span class="number">0xCC</span>, <span class="number">0x21</span>, <span class="number">0xA4</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x56</span>, <span class="number">0xA1</span>, <span class="number">0x61</span>, <span class="number">0x48</span>, <span class="number">0x55</span>, <span class="number">0x27</span>, <span class="number">0x13</span>, <span class="number">0xE3</span>, <span class="number">0x6D</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x6F</span>, <span class="number">0x5D</span>, <span class="number">0xD0</span>, <span class="number">0x14</span>, <span class="number">0x91</span>, <span class="number">0xC6</span>, <span class="number">0xFA</span>, <span class="number">0xBC</span>, <span class="number">0x15</span>, </span><br><span class="line">  <span class="number">0x68</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xA2</span>, <span class="number">0x43</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x06</span>, <span class="number">0x59</span>, </span><br><span class="line">  <span class="number">0x8B</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0xD4</span>, <span class="number">0x46</span>, <span class="number">0x0C</span>, <span class="number">0x20</span>, <span class="number">0x89</span>, <span class="number">0xAE</span>, <span class="number">0xAB</span>, </span><br><span class="line">  <span class="number">0x32</span>, <span class="number">0x69</span>, <span class="number">0xC2</span>, <span class="number">0xEB</span>, <span class="number">0xA8</span>, <span class="number">0xE5</span>, <span class="number">0x22</span>, <span class="number">0x4C</span>, <span class="number">0xE9</span>, <span class="number">0xAF</span>, </span><br><span class="line">  <span class="number">0x2F</span>, <span class="number">0xDA</span>, <span class="number">0x7D</span>, <span class="number">0x77</span>, <span class="number">0x6A</span>, <span class="number">0x36</span>, <span class="number">0x7B</span>, <span class="number">0x2C</span>, <span class="number">0x24</span>, <span class="number">0x42</span>, </span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0x90</span>, <span class="number">0x54</span>, <span class="number">0x05</span>, <span class="number">0xA6</span>, <span class="number">0x0F</span>, <span class="number">0xD8</span>, <span class="number">0x3A</span>, <span class="number">0x0E</span>, <span class="number">0x4F</span>, </span><br><span class="line">  <span class="number">0x7F</span>, <span class="number">0x1D</span>, <span class="number">0xB1</span>, <span class="number">0xA5</span>, <span class="number">0xE8</span>, <span class="number">0xB0</span>, <span class="number">0xC3</span>, <span class="number">0x88</span>, <span class="number">0x9C</span>, <span class="number">0x80</span>, </span><br><span class="line">  <span class="number">0x38</span>, <span class="number">0xF1</span>, <span class="number">0x19</span>, <span class="number">0x45</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0xF7</span>, <span class="number">0x09</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xD5</span>, <span class="number">0xFB</span>, <span class="number">0x9F</span>, <span class="number">0xC5</span>, <span class="number">0x4D</span>, <span class="number">0x62</span>, <span class="number">0x3B</span>, <span class="number">0x82</span>, <span class="number">0x5E</span>, <span class="number">0x1B</span>, </span><br><span class="line">  <span class="number">0x66</span>, <span class="number">0x9E</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0x18</span>, <span class="number">0xD2</span>, <span class="number">0xEE</span>, <span class="number">0x4B</span>, <span class="number">0x30</span>, <span class="number">0x7C</span>, </span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0xC9</span>, <span class="number">0xF5</span>, <span class="number">0xB8</span>, <span class="number">0x2D</span>, <span class="number">0xD9</span>, <span class="number">0xE7</span>, <span class="number">0x03</span>, <span class="number">0xF3</span>, <span class="number">0x86</span>, </span><br><span class="line">  <span class="number">0xF4</span>, <span class="number">0xD3</span>, <span class="number">0xA3</span>, <span class="number">0x44</span>, <span class="number">0xDE</span>, <span class="number">0x5A</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> cipher[] = &#123;</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0x2B</span>, <span class="number">0x43</span>, <span class="number">0xA9</span>, <span class="number">0xB9</span>, <span class="number">0x6B</span>, <span class="number">0x93</span>, <span class="number">0x2D</span>, </span><br><span class="line">    <span class="number">0x9A</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0x51</span>, <span class="number">0x59</span>, <span class="number">0xE9</span>, </span><br><span class="line">    <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x8A</span>, <span class="number">0x45</span>, <span class="number">0x6B</span>, <span class="number">0xBA</span>, <span class="number">0xA7</span>, <span class="number">0x16</span>, </span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0x10</span>, <span class="number">0x74</span>, <span class="number">0xD5</span>, <span class="number">0x41</span>, <span class="number">0x3C</span>, <span class="number">0x67</span>, <span class="number">0x7D</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">size_t</span> cipher_len = <span class="keyword">sizeof</span>(cipher) / <span class="keyword">sizeof</span>(cipher[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_like_algorithm</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">size_t</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *Sbox)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> v2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> v3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (v2 &lt; data_len) &#123;</span><br><span class="line">        v1 = (v1 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        <span class="type">uint8_t</span> v4 = Sbox[v1];</span><br><span class="line">        v3 = (v4 + v3) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">        Sbox[v1] = Sbox[v3];</span><br><span class="line">        Sbox[v3] = v4;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint8_t</span> result = Sbox[<span class="number">256</span> - (v4 + Sbox[v1]) &amp; <span class="number">0xFF</span>];</span><br><span class="line"></span><br><span class="line">        data[v2] -= result;</span><br><span class="line"></span><br><span class="line">        v2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    rc4_like_algorithm(cipher, cipher_len, Sbox);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后数据: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cipher_len; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, cipher[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;Fl0w3rs_Ar3_Very_fr4grant&#125;</span></span><br></pre></td></tr></table></figure><h3 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h3><p>main分析：<br>使用 Windows CryptoAPI 进行加密，优点很明显——标准化，无需面对魔改<br>静态分析，并基于此在关键API处下断点，可得知加密的如下信息——<br>算法：AES-128<br>模式：CBC<br>cipher：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A4 E1 0F 1C 53 BC 42 CD 8E 71 54 B7 F1 75 E3 50 97 20 71 97 A8 3B 77 61 40 69 68 C1 B4 7B 88 54 9F 19 03 44 70 78 24 25 F0 A9 65 35 91 3A 04 9C 4E 66 BE D2 8B 8B 20 73 CE A0 CB E9 39 BD 6D 83</span><br></pre></td></tr></table></figure><p>IV：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">93 6A F2 25 FA 68 10 B8 D0 7C 3E 5E 9E E8 EE 0D</span><br></pre></td></tr></table></figure><p>key获取：<br>非常恶心，这里的 phKey只是一个句柄，来来回回动调了十几次，都找不到 key的具体数据<br>就算在 各个API中下断点，甚至去微软社区看 API文档，还是看不出名堂<br>目前只能想到——自己使用 Windows CryptoAPI，传入题目中的 pbSecret，让其打印 生成的key<br>哦？好像可行？<br>key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4C 9D 7B 3E EC D0 66 1F A0 34 DC 86 3F 5F 1F E2</span><br></pre></td></tr></table></figure><p>AES解密：<br>扔进CyberChef，得到flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hgame&#123;rever5e_wind0ws_4P1_is_1nter3sting&#125;</span></span><br></pre></td></tr></table></figure><h3 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h3><p>main分析：<br>因为是C++，所以可读性差了不少<br>不过不妨碍看出，循环部分是在对（要传入XTEA的）两个int进行提取<br>但伪代码中没看到加密逻辑，因此直接打开 Graph view——查看C++异常处理的 catch部分<br>有一说一，这二维结构，看的还是有点乱，所以打开 Text view</p><p>异常处理逻辑：<br>try语句先后出现在 14000191C,140001942,140001968<br>所以catch语句也是按照如下顺序，在 1400051E1,14000522E,14000527E</p><p>加密逻辑修复：<br>直接把几个代码块的结尾 patch成 jmp，会在伪代码中得到一个比较丑陋的 循环加密逻辑<br><img src="/img/2024-12-19/1.png"><br>因此再nop掉几个和异常处理相关的语句，此时伪代码可读性高了许多<br><img src="/img/2024-12-19/2.png"><br>但因为堆栈不平衡的原因，变量名还是未修复，因此最后粘进VScode里 改几个名，这样和源码就大差不差了<br><img src="/img/2024-12-19/3.png"><br>基于此，粗略还原出完整正向加密逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">uint32 key[<span class="number">4</span>] = [<span class="number">0x4D2</span>, <span class="number">0x929</span>, <span class="number">0xD80</span>, <span class="number">0x11D7</span>]</span><br><span class="line">uint32 delta = <span class="number">0x33221155</span></span><br><span class="line">uint32 sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">uint32 input[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">  uint32 v0 = input[i]</span><br><span class="line">  uint32 v1 = input[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line">    v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    v1 += (((v0 &lt;&lt; <span class="number">5</span>) ^ (v0 &gt;&gt; <span class="number">6</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    sum ^= delta;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cipher[<span class="number">0</span>] = <span class="number">0x32FC31EA</span>;</span><br><span class="line">cipher[<span class="number">1</span>] = <span class="number">0xF0566F42</span>;</span><br><span class="line">cipher[<span class="number">2</span>] = <span class="number">0xF905B0B2</span>;</span><br><span class="line">cipher[<span class="number">3</span>] = <span class="number">0x5F4551BE</span>;</span><br><span class="line">cipher[<span class="number">4</span>] = <span class="number">0xFB3EFCBB</span>;</span><br><span class="line">cipher[<span class="number">5</span>] = <span class="number">0x6B6ADB30</span>;</span><br><span class="line">cipher[<span class="number">6</span>] = <span class="number">0x4839879</span>;</span><br><span class="line">cipher[<span class="number">7</span>] = <span class="number">0x2F4378DF</span>;</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123;<span class="number">0x4D2</span>, <span class="number">0x929</span>, <span class="number">0xD80</span>, <span class="number">0x11D7</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x33221155</span>;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> cipher[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x32FC31EA</span>, <span class="number">0xF0566F42</span>,</span><br><span class="line">        <span class="number">0xF905B0B2</span>, <span class="number">0x5F4551BE</span>,</span><br><span class="line">        <span class="number">0xFB3EFCBB</span>, <span class="number">0x6B6ADB30</span>,</span><br><span class="line">        <span class="number">0x4839879</span>,  <span class="number">0x2F4378DF</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> input[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v0 = cipher[i];</span><br><span class="line">        <span class="type">uint32_t</span> v1 = cipher[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">            sum ^= delta;</span><br><span class="line">            v1 -= (((v0 &lt;&lt; <span class="number">5</span>) ^ (v0 &gt;&gt; <span class="number">6</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">            v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            input[i] = v0;</span><br><span class="line">            input[i + <span class="number">1</span>] = v1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> output[<span class="number">33</span>]; </span><br><span class="line">    output[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> byte = <span class="number">0</span>; byte &lt; <span class="number">4</span>; ++byte) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> ch = (input[i] &gt;&gt; (byte * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">            <span class="type">char</span> printableChar = (ch &gt;= <span class="number">32</span> &amp;&amp; ch &lt;= <span class="number">126</span>) ? ch : <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="built_in">strncat</span>(output, &amp;printableChar, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;C_p1us_plus_exc3pti0n!!!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="crackme2"><a href="#crackme2" class="headerlink" title="crackme2"></a>crackme2</h3><p>main分析：<br>伪代码有个地方报红，看汇编发现 try-except语句<br>直接打开Graph view，右上角发现 except部分<br>然后patch报错位置的jmp，使其跳转到except，这样其逻辑就显示在伪代码中了——SMC<br>直接动调解码，接c+p+f5连招，就能看到逻辑——一堆约束 验证32字节输入<br>无需多言，上z3</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">a1 = [BitVec(<span class="string">f&#x27;a1_<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">known_prefix = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;hgame&#123;&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(known_prefix):</span><br><span class="line">    solver.add(a1[i] == val)</span><br><span class="line"></span><br><span class="line">v1 = a1[<span class="number">25</span>]</span><br><span class="line">v2 = a1[<span class="number">21</span>]</span><br><span class="line">v3 = a1[<span class="number">31</span>]</span><br><span class="line">v4 = a1[<span class="number">29</span>]</span><br><span class="line">v5 = a1[<span class="number">0</span>]</span><br><span class="line">v6 = a1[<span class="number">23</span>]</span><br><span class="line">v7 = a1[<span class="number">8</span>]</span><br><span class="line">v8 = a1[<span class="number">28</span>]</span><br><span class="line">v9 = a1[<span class="number">12</span>]</span><br><span class="line">v10 = a1[<span class="number">3</span>]</span><br><span class="line">v11 = a1[<span class="number">2</span>]</span><br><span class="line">v19 = a1[<span class="number">30</span>]</span><br><span class="line">v15 = a1[<span class="number">18</span>]</span><br><span class="line">v16 = a1[<span class="number">24</span>]</span><br><span class="line">v27 = a1[<span class="number">11</span>]</span><br><span class="line">v17 = a1[<span class="number">26</span>]</span><br><span class="line">v30 = a1[<span class="number">14</span>]</span><br><span class="line">v40 = a1[<span class="number">7</span>]</span><br><span class="line">v26 = a1[<span class="number">20</span>]</span><br><span class="line">v37 = <span class="number">2</span> * v26</span><br><span class="line">v42 = a1[<span class="number">22</span>]</span><br><span class="line">v28 = a1[<span class="number">1</span>]</span><br><span class="line">v25 = a1[<span class="number">27</span>]</span><br><span class="line">v21 = a1[<span class="number">19</span>]</span><br><span class="line">v23 = a1[<span class="number">16</span>]</span><br><span class="line">v31 = a1[<span class="number">13</span>]</span><br><span class="line">v29 = a1[<span class="number">10</span>]</span><br><span class="line">v41 = a1[<span class="number">5</span>]</span><br><span class="line">v24 = a1[<span class="number">4</span>]</span><br><span class="line">v20 = a1[<span class="number">15</span>]</span><br><span class="line">v39 = a1[<span class="number">17</span>]</span><br><span class="line">v22 = a1[<span class="number">6</span>]</span><br><span class="line">v18 = a1[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">expr1 = v18 + <span class="number">201</span> * v24 + <span class="number">194</span> * v10 + <span class="number">142</span> * v20 + <span class="number">114</span> * v39 + <span class="number">103</span> * v11 + <span class="number">52</span> * (v17 + v31) + ((v9 + v23) &lt;&lt; <span class="number">6</span>) + \</span><br><span class="line">        <span class="number">14</span> * (v21 + <span class="number">4</span> * v25 + v25) + <span class="number">9</span> * (v40 + <span class="number">23</span> * v27 + v2 + <span class="number">3</span> * v1 + <span class="number">4</span> * v2 + <span class="number">4</span> * v6) + \</span><br><span class="line">        <span class="number">5</span> * (v16 + <span class="number">23</span> * v30 + <span class="number">2</span> * (v3 + <span class="number">2</span> * v19) + <span class="number">5</span> * v5 + <span class="number">39</span> * v15 + <span class="number">51</span> * v4) + \</span><br><span class="line">        <span class="number">24</span> * (v8 + <span class="number">10</span> * v28 + <span class="number">4</span> * (v42 + v7 + <span class="number">2</span> * v26)) + <span class="number">62</span> * v22 + <span class="number">211</span> * v41 + <span class="number">212</span> * v29</span><br><span class="line">solver.add(expr1 == <span class="number">296473</span>)</span><br><span class="line">v38 = <span class="number">2</span> * v16</span><br><span class="line">expr2 = <span class="number">207</span> * v41 + <span class="number">195</span> * v22 + <span class="number">151</span> * v40 + <span class="number">57</span> * v5 + <span class="number">118</span> * v6 + <span class="number">222</span> * v42 + <span class="number">103</span> * v7 + <span class="number">181</span> * v8 + <span class="number">229</span> * v9 + \</span><br><span class="line">        <span class="number">142</span> * v31 + <span class="number">51</span> * v29 + <span class="number">122</span> * (v26 + v20) + <span class="number">91</span> * (v2 + <span class="number">2</span> * v16) + <span class="number">107</span> * (v27 + v25) + \</span><br><span class="line">        <span class="number">81</span> * (v17 + <span class="number">2</span> * v18 + v18) + <span class="number">45</span> * (v19 + <span class="number">2</span> * (v11 + v24) + v11 + v24) + \</span><br><span class="line">        <span class="number">4</span> * (<span class="number">3</span> * (v23 + a1[<span class="number">19</span>] + <span class="number">2</span> * v23 + <span class="number">5</span> * v4) + v39 + <span class="number">29</span> * (v10 + v1) + <span class="number">25</span> * v15) + \</span><br><span class="line">        <span class="number">26</span> * v28 + <span class="number">101</span> * v30 + <span class="number">154</span> * v3</span><br><span class="line">solver.add(expr2 == <span class="number">354358</span>)</span><br><span class="line">expr3 = <span class="number">177</span> * v40 + <span class="number">129</span> * v26 + <span class="number">117</span> * v42 + <span class="number">143</span> * v28 + <span class="number">65</span> * v8 + <span class="number">137</span> * v25 + <span class="number">215</span> * v21 + <span class="number">93</span> * v31 + <span class="number">235</span> * v39 + \</span><br><span class="line">        <span class="number">203</span> * v11 + <span class="number">15</span> * (v7 + <span class="number">17</span> * v30) + <span class="number">2</span> * (v24 + <span class="number">91</span> * v9 + <span class="number">95</span> * v29 + <span class="number">51</span> * v41 + <span class="number">81</span> * v20 + <span class="number">92</span> * v18 + \</span><br><span class="line">        <span class="number">112</span> * (v10 + v6) + <span class="number">32</span> * (v22 + <span class="number">2</span> * (v1 + v23)) + <span class="number">6</span> * (v2 + <span class="number">14</span> * v16 + <span class="number">19</span> * v15) + <span class="number">83</span> * v5 + <span class="number">53</span> * v4 + \</span><br><span class="line">        <span class="number">123</span> * v19) + v17 + <span class="number">175</span> * v27 + <span class="number">183</span> * v3</span><br><span class="line">solver.add(expr3 == <span class="number">448573</span>)</span><br><span class="line">expr4 = <span class="number">113</span> * v19 + <span class="number">74</span> * v3 + <span class="number">238</span> * v6 + <span class="number">140</span> * v2 + <span class="number">214</span> * v26 + <span class="number">242</span> * v8 + <span class="number">160</span> * v21 + <span class="number">136</span> * v23 + <span class="number">209</span> * v9 + \</span><br><span class="line">        <span class="number">220</span> * v31 + <span class="number">50</span> * v24 + <span class="number">125</span> * v10 + <span class="number">175</span> * v20 + <span class="number">23</span> * v39 + <span class="number">137</span> * v22 + <span class="number">149</span> * v18 + <span class="number">83</span> * (v4 + <span class="number">2</span> * v30) + \</span><br><span class="line">        <span class="number">21</span> * (<span class="number">9</span> * v29 + v16) + <span class="number">59</span> * (<span class="number">4</span> * v27 + v17) + <span class="number">41</span> * (v1 + v41) + <span class="number">13</span> * (v7 + <span class="number">11</span> * (v40 + v15) + <span class="number">6</span> * v42 + \</span><br><span class="line">        <span class="number">4</span> * (v28 + <span class="number">2</span> * v11) + v28 + <span class="number">2</span> * v11 + <span class="number">17</span> * v5) + <span class="number">36</span> * v25</span><br><span class="line">solver.add(expr4 == <span class="number">384306</span>)</span><br><span class="line">expr5 = <span class="number">229</span> * v21 + <span class="number">78</span> * v1 + v2 + v9 + <span class="number">133</span> * v27 + <span class="number">74</span> * v6 + <span class="number">69</span> * v26 + <span class="number">243</span> * v7 + <span class="number">98</span> * v28 + <span class="number">253</span> * v8 + \</span><br><span class="line">        <span class="number">142</span> * v25 + <span class="number">175</span> * v31 + <span class="number">105</span> * v41 + <span class="number">221</span> * v10 + <span class="number">121</span> * v39 + <span class="number">218</span> * (v19 + v29) + <span class="number">199</span> * (v24 + v30) + \</span><br><span class="line">        <span class="number">33</span> * (v40 + <span class="number">7</span> * v17) + <span class="number">4</span> * (<span class="number">27</span> * v20 + <span class="number">50</span> * v11 + <span class="number">45</span> * v18 + <span class="number">19</span> * (v3 + v42) + v16 + <span class="number">16</span> * v23 + <span class="number">52</span> * v4) + \</span><br><span class="line">        <span class="number">195</span> * v22 + <span class="number">211</span> * v5 + <span class="number">153</span> * v15</span><br><span class="line">solver.add(expr5 == <span class="number">424240</span>)</span><br><span class="line">expr6 = <span class="number">181</span> * v25 + <span class="number">61</span> * v2 + <span class="number">65</span> * v21 + <span class="number">58</span> * v31 + <span class="number">170</span> * v29 + <span class="number">143</span> * v24 + <span class="number">185</span> * v10 + <span class="number">86</span> * v11 + <span class="number">97</span> * v22 + \</span><br><span class="line">        <span class="number">235</span> * (v23 + v27) + <span class="number">3</span> * (<span class="number">53</span> * v41 + <span class="number">74</span> * (v8 + v3) + <span class="number">13</span> * (v42 + <span class="number">6</span> * v9) + <span class="number">11</span> * (v39 + <span class="number">7</span> * v20) + \</span><br><span class="line">        <span class="number">15</span> * (v18 + <span class="number">4</span> * v17) + v7 + <span class="number">35</span> * v1 + <span class="number">29</span> * v15) + <span class="number">4</span> * (<span class="number">57</span> * v6 + <span class="number">18</span> * (v5 + v37) + v28 + <span class="number">17</span> * v16 + \</span><br><span class="line">        <span class="number">55</span> * v30) + <span class="number">151</span> * v40 + <span class="number">230</span> * v4 + <span class="number">197</span> * v19</span><br><span class="line">solver.add(expr6 == <span class="number">421974</span>)</span><br><span class="line">v33 = <span class="number">2</span> * v41</span><br><span class="line">expr7 = <span class="number">209</span> * v21 + <span class="number">249</span> * v30 + <span class="number">195</span> * v2 + <span class="number">219</span> * v25 + <span class="number">201</span> * v39 + <span class="number">85</span> * v18 + <span class="number">213</span> * (v17 + v31) + <span class="number">119</span> * (v11 + <span class="number">2</span> * v41) + \</span><br><span class="line">        <span class="number">29</span> * (<span class="number">8</span> * v24 + v40 + <span class="number">4</span> * v27 + v27) + <span class="number">2</span> * (v8 + <span class="number">55</span> * (<span class="number">2</span> * v29 + v19) + <span class="number">3</span> * (v10 + <span class="number">39</span> * v9 + <span class="number">2</span> * (v6 + <span class="number">20</span> * v20) + \</span><br><span class="line">        <span class="number">35</span> * v7) + <span class="number">4</span> * (v5 + <span class="number">31</span> * v42 + <span class="number">28</span> * v3) + <span class="number">26</span> * v28 + <span class="number">46</span> * (v37 + v16) + <span class="number">98</span> * v1) + <span class="number">53</span> * v23 + <span class="number">171</span> * v15 + <span class="number">123</span> * v4</span><br><span class="line">solver.add(expr7 == <span class="number">442074</span>)</span><br><span class="line">v32 = <span class="number">2</span> * v18</span><br><span class="line">expr8 = <span class="number">162</span> * v19 + <span class="number">74</span> * v5 + <span class="number">28</span> * v27 + <span class="number">243</span> * v42 + <span class="number">123</span> * v28 + <span class="number">73</span> * v8 + <span class="number">166</span> * v23 + <span class="number">94</span> * v24 + <span class="number">113</span> * v11 + <span class="number">193</span> * v22 + \</span><br><span class="line">        <span class="number">122</span> * (v6 + <span class="number">2</span> * v7) + <span class="number">211</span> * (v10 + v25) + <span class="number">21</span> * (v17 + <span class="number">7</span> * v41) + <span class="number">11</span> * (v4 + <span class="number">23</span> * (v16 + v39) + <span class="number">2</span> * (v40 + <span class="number">5</span> * v30 + \</span><br><span class="line">        <span class="number">2</span> * (<span class="number">2</span> * v18 + v29) + <span class="number">2</span> * v18 + v29)) + <span class="number">5</span> * (<span class="number">46</span> * v9 + <span class="number">26</span> * v20 + <span class="number">4</span> * (v31 + <span class="number">2</span> * v21) + v15 + <span class="number">27</span> * v2 + <span class="number">10</span> * v1) + \</span><br><span class="line">        <span class="number">36</span> * (v3 + <span class="number">5</span> * v26)</span><br><span class="line">solver.add(expr8 == <span class="number">376007</span>)</span><br><span class="line">v35 = v25 + v30</span><br><span class="line">expr9 = <span class="number">63</span> * v19 + <span class="number">143</span> * v5 + <span class="number">250</span> * v6 + <span class="number">136</span> * v2 + <span class="number">214</span> * v40 + <span class="number">62</span> * v26 + <span class="number">221</span> * v42 + <span class="number">226</span> * v7 + <span class="number">171</span> * v28 + <span class="number">178</span> * v8 + \</span><br><span class="line">        <span class="number">244</span> * v23 + (v9 &lt;&lt; <span class="number">7</span>) + <span class="number">150</span> * v31 + <span class="number">109</span> * v29 + <span class="number">70</span> * v41 + <span class="number">127</span> * v20 + <span class="number">204</span> * v39 + <span class="number">121</span> * v22 + <span class="number">173</span> * v18 + \</span><br><span class="line">        <span class="number">69</span> * (v25 + v30 + v27) + <span class="number">74</span> * (v16 + <span class="number">2</span> * v15 + v15) + <span class="number">22</span> * (<span class="number">7</span> * v24 + v17 + <span class="number">10</span> * v11) + <span class="number">40</span> * (v1 + <span class="number">4</span> * v21 + v21) + \</span><br><span class="line">        <span class="number">81</span> * v10 + <span class="number">94</span> * v4 + <span class="number">84</span> * v3</span><br><span class="line">solver.add(expr9 == <span class="number">411252</span>)</span><br><span class="line">expr10 = <span class="number">229</span> * v15 + <span class="number">121</span> * v4 + <span class="number">28</span> * v30 + <span class="number">206</span> * v16 + <span class="number">145</span> * v27 + <span class="number">41</span> * v1 + <span class="number">247</span> * v6 + <span class="number">118</span> * v26 + <span class="number">241</span> * v28 + <span class="number">79</span> * v8 + \</span><br><span class="line">         <span class="number">102</span> * v25 + <span class="number">124</span> * v23 + <span class="number">65</span> * v9 + <span class="number">68</span> * v31 + <span class="number">239</span> * v17 + <span class="number">148</span> * v24 + <span class="number">245</span> * v39 + <span class="number">115</span> * v11 + <span class="number">163</span> * v22 + <span class="number">137</span> * v18 + \</span><br><span class="line">         <span class="number">53</span> * (v5 + <span class="number">2</span> * v29) + <span class="number">126</span> * (v40 + <span class="number">2</span> * v10) + <span class="number">38</span> * (v7 + v21 + <span class="number">4</span> * v7 + <span class="number">6</span> * v41) + <span class="number">12</span> * (v2 + <span class="number">16</span> * v42) + <span class="number">109</span> * v20 + \</span><br><span class="line">         <span class="number">232</span> * v3 + <span class="number">47</span> * v19</span><br><span class="line">solver.add(expr10 == <span class="number">435012</span>)</span><br><span class="line">expr11 = <span class="number">209</span> * v21 + <span class="number">233</span> * v40 + <span class="number">93</span> * v1 + <span class="number">241</span> * v2 + <span class="number">137</span> * v8 + <span class="number">249</span> * v17 + <span class="number">188</span> * v29 + <span class="number">86</span> * v24 + <span class="number">246</span> * v10 + <span class="number">149</span> * v20 + \</span><br><span class="line">         <span class="number">99</span> * v11 + <span class="number">37</span> * v22 + <span class="number">219</span> * v18 + <span class="number">17</span> * (v6 + <span class="number">10</span> * v25) + <span class="number">49</span> * (v5 + <span class="number">3</span> * v3 + <span class="number">4</span> * v28 + v28) + <span class="number">5</span> * (<span class="number">16</span> * v39 + \</span><br><span class="line">         <span class="number">11</span> * (v41 + <span class="number">2</span> * v27 + v27) + <span class="number">12</span> * v7 + v31 + <span class="number">30</span> * v16 + <span class="number">27</span> * v19) + <span class="number">18</span> * (v23 + <span class="number">2</span> * (v4 + v26 + <span class="number">2</span> * v4) + v4 + v26 + <span class="number">2</span> * v4) + \</span><br><span class="line">         <span class="number">24</span> * v9 + <span class="number">109</span> * v42 + <span class="number">183</span> * v30 + <span class="number">154</span> * v15</span><br><span class="line">solver.add(expr11 == <span class="number">392484</span>)</span><br><span class="line">v34 = <span class="number">2</span> * v31</span><br><span class="line">expr12 = <span class="number">155</span> * v15 + <span class="number">247</span> * v40 + <span class="number">157</span> * v28 + <span class="number">119</span> * v23 + <span class="number">161</span> * v17 + <span class="number">133</span> * v20 + <span class="number">85</span> * v22 + <span class="number">229</span> * (v7 + v24) + <span class="number">123</span> * (<span class="number">2</span> * v31 + v42) + \</span><br><span class="line">         <span class="number">21</span> * (v41 + <span class="number">12</span> * v30) + <span class="number">55</span> * (v9 + v5 + v18 + <span class="number">2</span> * v5) + <span class="number">15</span> * (v3 + <span class="number">16</span> * v10 + <span class="number">9</span> * v21) + <span class="number">2</span> * (v2 + <span class="number">115</span> * v29 + <span class="number">111</span> * v16 + \</span><br><span class="line">         <span class="number">26</span> * v6 + <span class="number">88</span> * v8 + <span class="number">73</span> * v39 + <span class="number">71</span> * v11 + <span class="number">28</span> * (v26 + <span class="number">2</span> * (v25 + <span class="number">2</span> * v1)) + <span class="number">51</span> * v27 + <span class="number">99</span> * v4 + <span class="number">125</span> * v19)</span><br><span class="line">solver.add(expr12 == <span class="number">437910</span>)</span><br><span class="line">expr13 = <span class="number">220</span> * v3 + <span class="number">200</span> * v4 + <span class="number">139</span> * v15 + <span class="number">33</span> * v5 + <span class="number">212</span> * v30 + <span class="number">191</span> * v16 + <span class="number">30</span> * v27 + <span class="number">233</span> * v1 + <span class="number">246</span> * v6 + <span class="number">89</span> * v2 + <span class="number">252</span> * v40 + \</span><br><span class="line">         <span class="number">223</span> * v42 + <span class="number">19</span> * v25 + <span class="number">141</span> * v21 + <span class="number">163</span> * v9 + <span class="number">185</span> * v17 + <span class="number">136</span> * v31 + <span class="number">46</span> * v24 + <span class="number">109</span> * v10 + <span class="number">217</span> * v39 + <span class="number">75</span> * v22 + <span class="number">157</span> * v18 + \</span><br><span class="line">         <span class="number">125</span> * (v11 + v19) + <span class="number">104</span> * (v33 + v20) + <span class="number">43</span> * (v28 + <span class="number">2</span> * v29 + v29) + <span class="number">32</span> * (v8 + v7 + <span class="number">2</span> * v8 + <span class="number">2</span> * (v23 + v26))</span><br><span class="line">solver.add(expr13 == <span class="number">421905</span>)</span><br><span class="line">expr14 = <span class="number">211</span> * v24 + <span class="number">63</span> * v15 + <span class="number">176</span> * v5 + <span class="number">169</span> * v16 + <span class="number">129</span> * v27 + <span class="number">146</span> * v40 + <span class="number">111</span> * v26 + <span class="number">68</span> * v42 + \</span><br><span class="line">         <span class="number">39</span> * v25 + <span class="number">188</span> * v23 + <span class="number">130</span> * v9 + (v31 &lt;&lt; <span class="number">6</span>) + <span class="number">91</span> * v41 + <span class="number">208</span> * v20 + <span class="number">145</span> * v39 + <span class="number">247</span> * v18 + \</span><br><span class="line">         <span class="number">93</span> * (v22 + v17) + <span class="number">71</span> * (v6 + <span class="number">2</span> * v11) + <span class="number">103</span> * (v8 + <span class="number">2</span> * v30) + \</span><br><span class="line">         <span class="number">6</span> * (v21 + <span class="number">10</span> * v28 + <span class="number">28</span> * v7 + <span class="number">9</span> * v29 + <span class="number">19</span> * v2 + <span class="number">24</span> * v1 + <span class="number">22</span> * v3) + \</span><br><span class="line">         <span class="number">81</span> * v10 + <span class="number">70</span> * v4 + <span class="number">23</span> * v19</span><br><span class="line">solver.add(expr14 == <span class="number">356282</span>)</span><br><span class="line">v12 = v10 + <span class="number">2</span> * (v31 + <span class="number">4</span> * (v29 + v17)) + v31 + <span class="number">4</span> * (v29 + v17)</span><br><span class="line">expr15 = <span class="number">94</span> * v42 + <span class="number">101</span> * v2 + <span class="number">152</span> * v40 + <span class="number">200</span> * v7 + <span class="number">226</span> * v8 + <span class="number">211</span> * v23 + <span class="number">121</span> * v24 + <span class="number">74</span> * v11 + \</span><br><span class="line">         <span class="number">166</span> * v18 + ((v6 + <span class="number">3</span> * v28) &lt;&lt; <span class="number">6</span>) + <span class="number">41</span> * (<span class="number">4</span> * v9 + v21) + <span class="number">23</span> * (v39 + <span class="number">11</span> * v41) + \</span><br><span class="line">         <span class="number">7</span> * (v20 + <span class="number">10</span> * v25 + <span class="number">2</span> * v12 + v12) + <span class="number">3</span> * (<span class="number">78</span> * v30 + <span class="number">81</span> * v16 + <span class="number">55</span> * v27 + <span class="number">73</span> * v1 + \</span><br><span class="line">         <span class="number">4</span> * v26 + v15 + <span class="number">85</span> * v3 + <span class="number">65</span> * v19) + <span class="number">62</span> * v22 + <span class="number">88</span> * v5 + <span class="number">110</span> * v4</span><br><span class="line">solver.add(expr15 == <span class="number">423091</span>)</span><br><span class="line">expr16 = <span class="number">133</span> * v22 + <span class="number">175</span> * v15 + <span class="number">181</span> * v30 + <span class="number">199</span> * v16 + <span class="number">123</span> * v27 + <span class="number">242</span> * v1 + <span class="number">75</span> * v6 + <span class="number">69</span> * v2 + \</span><br><span class="line">         <span class="number">153</span> * v40 + <span class="number">33</span> * v26 + <span class="number">100</span> * v42 + <span class="number">229</span> * v7 + <span class="number">177</span> * v8 + <span class="number">134</span> * v31 + <span class="number">179</span> * v29 + <span class="number">129</span> * v41 + \</span><br><span class="line">         <span class="number">14</span> * v10 + <span class="number">247</span> * v24 + <span class="number">228</span> * v20 + <span class="number">92</span> * v11 + <span class="number">86</span> * (v9 + v32) + <span class="number">94</span> * (v23 + v21) + \</span><br><span class="line">         <span class="number">37</span> * (v17 + <span class="number">4</span> * v3) + <span class="number">79</span> * (v25 + <span class="number">2</span> * v28) + <span class="number">72</span> * v5 + <span class="number">93</span> * v39 + <span class="number">152</span> * v4 + <span class="number">214</span> * v19</span><br><span class="line">solver.add(expr16 == <span class="number">391869</span>)</span><br><span class="line">expr17 = <span class="number">211</span> * v24 + <span class="number">213</span> * v18 + <span class="number">197</span> * v40 + <span class="number">159</span> * v25 + <span class="number">117</span> * v21 + <span class="number">119</span> * v9 + <span class="number">98</span> * v17 + <span class="number">218</span> * v41 + \</span><br><span class="line">         <span class="number">106</span> * v39 + <span class="number">69</span> * v11 + <span class="number">43</span> * (v2 + v29 + <span class="number">2</span> * v2) + <span class="number">116</span> * (v4 + v10 + v37) + \</span><br><span class="line">         <span class="number">5</span> * (v42 + <span class="number">9</span> * v23 + <span class="number">35</span> * v20 + <span class="number">37</span> * v31) + <span class="number">11</span> * (v16 + <span class="number">13</span> * v27 + <span class="number">5</span> * v5 + <span class="number">8</span> * v30) + \</span><br><span class="line">         <span class="number">6</span> * (<span class="number">29</span> * v28 + <span class="number">25</span> * v8 + <span class="number">38</span> * v22 + v15 + <span class="number">13</span> * v1 + <span class="number">10</span> * v3) + <span class="number">136</span> * v7 + <span class="number">142</span> * v6 + \</span><br><span class="line">         <span class="number">141</span> * v19</span><br><span class="line">solver.add(expr17 == <span class="number">376566</span>)</span><br><span class="line">expr18 = <span class="number">173</span> * v3 + <span class="number">109</span> * v15 + <span class="number">61</span> * v30 + <span class="number">187</span> * v1 + <span class="number">79</span> * v6 + <span class="number">53</span> * v40 + <span class="number">184</span> * v21 + <span class="number">43</span> * v23 + \</span><br><span class="line">         <span class="number">41</span> * v9 + <span class="number">166</span> * v31 + <span class="number">193</span> * v41 + <span class="number">58</span> * v24 + <span class="number">146</span> * v10 + (v20 &lt;&lt; <span class="number">6</span>) + <span class="number">89</span> * v39 + <span class="number">121</span> * v11 + \</span><br><span class="line">         <span class="number">5</span> * (v17 + <span class="number">23</span> * v8) + <span class="number">7</span> * (<span class="number">29</span> * v18 + v29 + <span class="number">4</span> * v7) + <span class="number">13</span> * (<span class="number">3</span> * v42 + v16 + <span class="number">7</span> * v26 + <span class="number">13</span> * v2) + \</span><br><span class="line">         <span class="number">3</span> * (v4 + <span class="number">83</span> * v5 + <span class="number">51</span> * v27 + <span class="number">33</span> * v22 + <span class="number">8</span> * (v19 + <span class="number">4</span> * v28) + <span class="number">18</span> * v25)</span><br><span class="line">solver.add(expr18 == <span class="number">300934</span>)</span><br><span class="line">v36 = <span class="number">3</span> * v21</span><br><span class="line">expr19 = <span class="number">78</span> * v1 + <span class="number">131</span> * v5 + <span class="number">185</span> * v16 + <span class="number">250</span> * v40 + <span class="number">90</span> * v26 + <span class="number">129</span> * v42 + <span class="number">255</span> * v28 + <span class="number">206</span> * v8 + \</span><br><span class="line">         <span class="number">239</span> * v25 + <span class="number">150</span> * v10 + <span class="number">253</span> * v39 + <span class="number">104</span> * v22 + <span class="number">58</span> * (v2 + <span class="number">2</span> * v7) + <span class="number">96</span> * (v15 + v31) + \</span><br><span class="line">         <span class="number">117</span> * (v9 + <span class="number">2</span> * v4) + <span class="number">27</span> * (v17 + <span class="number">8</span> * v18 + v18) + <span class="number">19</span> * (v23 + <span class="number">3</span> * v21 + <span class="number">4</span> * v29 + v29) + \</span><br><span class="line">         <span class="number">7</span> * (<span class="number">22</span> * v41 + <span class="number">3</span> * (v11 + <span class="number">11</span> * v24) + v3 + <span class="number">29</span> * v6 + <span class="number">14</span> * v27) + <span class="number">109</span> * v20 + <span class="number">102</span> * v30 + \</span><br><span class="line">         <span class="number">100</span> * v19</span><br><span class="line">solver.add(expr19 == <span class="number">401351</span>)</span><br><span class="line">expr20 = <span class="number">233</span> * v19 + <span class="number">71</span> * v5 + <span class="number">209</span> * v27 + <span class="number">82</span> * v6 + <span class="number">58</span> * v26 + <span class="number">53</span> * v25 + <span class="number">113</span> * v23 + <span class="number">206</span> * v31 + \</span><br><span class="line">         <span class="number">39</span> * v41 + <span class="number">163</span> * v20 + <span class="number">222</span> * v11 + <span class="number">191</span> * v18 + <span class="number">123</span> * (v7 + v40) + <span class="number">69</span> * (v9 + <span class="number">2</span> * v22 + v22) + \</span><br><span class="line">         <span class="number">9</span> * (v3 + <span class="number">8</span> * v24 + <span class="number">7</span> * (<span class="number">3</span> * v1 + v28) + <span class="number">5</span> * v16 + <span class="number">19</span> * v30) + <span class="number">4</span> * (v15 + <span class="number">26</span> * v17 + <span class="number">61</span> * v29 + \</span><br><span class="line">         <span class="number">43</span> * v42 + <span class="number">49</span> * v2 + <span class="number">32</span> * v4) + <span class="number">10</span> * (<span class="number">7</span> * (v8 + v36) + v39 + <span class="number">12</span> * v10)</span><br><span class="line">solver.add(expr20 == <span class="number">368427</span>)</span><br><span class="line">expr21 = <span class="number">139</span> * v30 + <span class="number">53</span> * v5 + <span class="number">158</span> * v16 + <span class="number">225</span> * v1 + <span class="number">119</span> * v6 + <span class="number">67</span> * v2 + <span class="number">213</span> * v40 + <span class="number">188</span> * v28 + \</span><br><span class="line">         <span class="number">152</span> * v8 + <span class="number">187</span> * v21 + <span class="number">129</span> * v23 + <span class="number">54</span> * v9 + <span class="number">125</span> * v17 + <span class="number">170</span> * v24 + <span class="number">184</span> * v11 + <span class="number">226</span> * v22 + \</span><br><span class="line">         <span class="number">253</span> * v18 + <span class="number">26</span> * (v29 + v41) + <span class="number">97</span> * (v4 + <span class="number">2</span> * v25) + <span class="number">39</span> * (<span class="number">5</span> * v26 + v27) + <span class="number">21</span> * (v39 + <span class="number">8</span> * v42) + \</span><br><span class="line">         <span class="number">12</span> * (<span class="number">17</span> * v10 + v31 + <span class="number">15</span> * v7 + <span class="number">12</span> * v19) + <span class="number">165</span> * v20 + <span class="number">88</span> * v15 + <span class="number">157</span> * v3</span><br><span class="line">solver.add(expr21 == <span class="number">403881</span>)</span><br><span class="line">expr22 = <span class="number">114</span> * v3 + <span class="number">61</span> * v27 + <span class="number">134</span> * v40 + <span class="number">62</span> * v42 + <span class="number">89</span> * v9 + <span class="number">211</span> * v17 + <span class="number">163</span> * v41 + <span class="number">66</span> * v24 + \</span><br><span class="line">         <span class="number">201</span> * (v7 + v18) + <span class="number">47</span> * (<span class="number">5</span> * v16 + v22) + <span class="number">74</span> * (v4 + v31) + <span class="number">142</span> * (v2 + v28) + <span class="number">35</span> * (v20 + <span class="number">6</span> * v26) + \</span><br><span class="line">         <span class="number">39</span> * (v15 + <span class="number">6</span> * v30) + <span class="number">27</span> * (v25 + <span class="number">9</span> * v23 + <span class="number">8</span> * v6) + <span class="number">4</span> * (v21 + <span class="number">63</span> * v19 + <span class="number">2</span> * (v1 + <span class="number">12</span> * (v10 + v5) + \</span><br><span class="line">         <span class="number">8</span> * v11 + <span class="number">26</span> * v29)) + <span class="number">10</span> * (v8 + <span class="number">4</span> * v39 + v39)</span><br><span class="line">solver.add(expr22 == <span class="number">382979</span>)</span><br><span class="line">expr23 = <span class="number">122</span> * v25 + <span class="number">225</span> * v21 + <span class="number">52</span> * v23 + <span class="number">253</span> * v9 + <span class="number">197</span> * v17 + <span class="number">187</span> * v31 + <span class="number">181</span> * v29 + <span class="number">183</span> * v41 + \</span><br><span class="line">         <span class="number">47</span> * v20 + <span class="number">229</span> * v39 + <span class="number">88</span> * v22 + <span class="number">127</span> * (v10 + v32) + <span class="number">37</span> * (v7 + <span class="number">3</span> * v3) + ((v11 + <span class="number">2</span> * v30 + v30) &lt;&lt; <span class="number">6</span>) + \</span><br><span class="line">         <span class="number">7</span> * (<span class="number">21</span> * v8 + v27 + <span class="number">18</span> * (v4 + v1 + v38)) + <span class="number">6</span> * (<span class="number">23</span> * v24 + v26 + <span class="number">17</span> * v2 + <span class="number">39</span> * v6) + \</span><br><span class="line">         <span class="number">10</span> * (v5 + <span class="number">11</span> * v28 + <span class="number">21</span> * v42) + <span class="number">149</span> * v19 + <span class="number">165</span> * v40 + <span class="number">121</span> * v15</span><br><span class="line">solver.add(expr23 == <span class="number">435695</span>)</span><br><span class="line">expr24 = <span class="number">165</span> * v20 + <span class="number">223</span> * v4 + <span class="number">249</span> * v5 + <span class="number">199</span> * v1 + <span class="number">135</span> * v2 + <span class="number">133</span> * v26 + <span class="number">254</span> * v42 + <span class="number">111</span> * v7 + \</span><br><span class="line">         <span class="number">189</span> * v28 + <span class="number">221</span> * v25 + <span class="number">115</span> * v21 + <span class="number">186</span> * v9 + <span class="number">79</span> * v41 + <span class="number">217</span> * v24 + <span class="number">122</span> * v11 + <span class="number">38</span> * v18 + \</span><br><span class="line">         <span class="number">109</span> * (v34 + v29) + <span class="number">14</span> * (v8 + <span class="number">17</span> * v40 + <span class="number">8</span> * (v6 + v38)) + <span class="number">4</span> * (<span class="number">11</span> * (<span class="number">5</span> * v30 + v39) + <span class="number">6</span> * (v10 + <span class="number">2</span> * v22) + \</span><br><span class="line">         v27 + <span class="number">52</span> * v17 + <span class="number">50</span> * v23) + <span class="number">229</span> * v15 + <span class="number">86</span> * v3 + <span class="number">234</span> * v19</span><br><span class="line">solver.add(expr24 == <span class="number">453748</span>)</span><br><span class="line">expr25 = <span class="number">181</span> * v25 + <span class="number">94</span> * v42 + <span class="number">125</span> * v1 + <span class="number">226</span> * v26 + <span class="number">155</span> * v7 + <span class="number">95</span> * v21 + <span class="number">212</span> * v17 + <span class="number">91</span> * v31 + \</span><br><span class="line">         <span class="number">194</span> * v29 + <span class="number">98</span> * v24 + <span class="number">166</span> * v11 + <span class="number">120</span> * v22 + <span class="number">59</span> * v18 + <span class="number">32</span> * (v9 + v8) + <span class="number">158</span> * (v6 + v5) + \</span><br><span class="line">         <span class="number">101</span> * (v41 + v19) + <span class="number">63</span> * (v4 + <span class="number">2</span> * v23) + <span class="number">67</span> * (v28 + <span class="number">2</span> * v20) + <span class="number">11</span> * (v39 + <span class="number">10</span> * v16 + <span class="number">11</span> * v10) + \</span><br><span class="line">         <span class="number">39</span> * (v30 + <span class="number">4</span> * (v2 + v15)) + <span class="number">233</span> * v40 + <span class="number">56</span> * v27 + <span class="number">225</span> * v3</span><br><span class="line">solver.add(expr25 == <span class="number">358321</span>)</span><br><span class="line">expr26 = <span class="number">229</span> * v21 + <span class="number">135</span> * v4 + <span class="number">197</span> * v15 + <span class="number">118</span> * v5 + <span class="number">143</span> * v16 + <span class="number">134</span> * v6 + <span class="number">204</span> * v40 + <span class="number">173</span> * v26 + \</span><br><span class="line">         <span class="number">81</span> * v7 + <span class="number">60</span> * v28 + <span class="number">58</span> * v8 + <span class="number">179</span> * v23 + <span class="number">142</span> * v9 + <span class="number">178</span> * v17 + <span class="number">230</span> * v31 + <span class="number">148</span> * v29 + \</span><br><span class="line">         <span class="number">224</span> * v41 + <span class="number">194</span> * v24 + <span class="number">223</span> * v10 + <span class="number">87</span> * v20 + <span class="number">200</span> * v39 + <span class="number">233</span> * v11 + <span class="number">49</span> * v22 + <span class="number">127</span> * v35 + \</span><br><span class="line">         <span class="number">31</span> * (<span class="number">4</span> * v27 + v18) + <span class="number">42</span> * (v1 + <span class="number">6</span> * v2) + <span class="number">109</span> * v42 + <span class="number">75</span> * v3 + <span class="number">165</span> * v19</span><br><span class="line">solver.add(expr26 == <span class="number">456073</span>)</span><br><span class="line">expr27 = <span class="number">41</span> * v4 + <span class="number">253</span> * v3 + <span class="number">163</span> * v15 + <span class="number">193</span> * v30 + <span class="number">155</span> * v16 + <span class="number">113</span> * v27 + <span class="number">131</span> * v6 + <span class="number">55</span> * v2 + \</span><br><span class="line">         <span class="number">21</span> * v40 + <span class="number">53</span> * v26 + <span class="number">13</span> * v8 + <span class="number">201</span> * v25 + <span class="number">237</span> * v9 + <span class="number">223</span> * v31 + <span class="number">95</span> * v24 + <span class="number">194</span> * v20 + \</span><br><span class="line">         <span class="number">62</span> * v39 + <span class="number">119</span> * v11 + <span class="number">171</span> * v22 + <span class="number">135</span> * v18 + <span class="number">69</span> * (v10 + <span class="number">3</span> * v28) + <span class="number">211</span> * (v1 + v29) + \</span><br><span class="line">         <span class="number">4</span> * (<span class="number">43</span> * v7 + v42 + <span class="number">40</span> * v17) + <span class="number">6</span> * (v5 + <span class="number">33</span> * v41 + <span class="number">20</span> * (<span class="number">2</span> * v19 + v21) + <span class="number">24</span> * v23)</span><br><span class="line">solver.add(expr27 == <span class="number">407135</span>)</span><br><span class="line">v13 = v6 + v1 + <span class="number">8</span> * v6 + <span class="number">4</span> * (v8 + <span class="number">2</span> * v27)</span><br><span class="line">expr28 = <span class="number">111</span> * v19 + <span class="number">190</span> * v3 + <span class="number">149</span> * v4 + <span class="number">173</span> * v28 + <span class="number">118</span> * v23 + <span class="number">146</span> * v29 + <span class="number">179</span> * v10 + \</span><br><span class="line">         <span class="number">51</span> * v20 + <span class="number">49</span> * v39 + <span class="number">61</span> * v11 + <span class="number">125</span> * v22 + <span class="number">162</span> * v18 + <span class="number">214</span> * v35 + <span class="number">14</span> * (v34 + v24) + \</span><br><span class="line">         <span class="number">178</span> * (v41 + v16) + <span class="number">11</span> * (<span class="number">4</span> * v9 + v21 + <span class="number">17</span> * v42) + <span class="number">65</span> * (v26 + v17 + <span class="number">2</span> * v26 + <span class="number">2</span> * v5) + \</span><br><span class="line">         <span class="number">4</span> * (v7 + <span class="number">38</span> * v15 + <span class="number">4</span> * v13 + v13 + <span class="number">8</span> * v40 + <span class="number">43</span> * v2)</span><br><span class="line">solver.add(expr28 == <span class="number">369835</span>)</span><br><span class="line">expr29 = <span class="number">27</span> * v27 + <span class="number">223</span> * v6 + <span class="number">147</span> * v26 + <span class="number">13</span> * v21 + <span class="number">35</span> * (v17 + <span class="number">7</span> * v4) + <span class="number">57</span> * (v19 + v32 + <span class="number">3</span> * v11) + \</span><br><span class="line">         <span class="number">11</span> * (v1 + <span class="number">17</span> * (v9 + v5) + <span class="number">10</span> * v16 + <span class="number">3</span> * v31) + <span class="number">2</span> * (<span class="number">53</span> * v23 + v25 + <span class="number">38</span> * v15 + <span class="number">43</span> * v42 + \</span><br><span class="line">         <span class="number">115</span> * v29 + <span class="number">61</span> * v22 + <span class="number">111</span> * (v10 + v40) + <span class="number">14</span> * (v20 + v7 + <span class="number">2</span> * v7 + <span class="number">8</span> * v28) + <span class="number">109</span> * v2 + \</span><br><span class="line">         <span class="number">100</span> * v41 + <span class="number">63</span> * v8) + <span class="number">93</span> * v39 + <span class="number">251</span> * v30 + <span class="number">131</span> * v3</span><br><span class="line">solver.add(expr29 == <span class="number">393303</span>)</span><br><span class="line">expr30 = <span class="number">116</span> * v9 + <span class="number">152</span> * v29 + <span class="number">235</span> * v20 + <span class="number">202</span> * v18 + <span class="number">85</span> * (v8 + <span class="number">3</span> * v11) + <span class="number">221</span> * (v16 + v40) + \</span><br><span class="line">         <span class="number">125</span> * (v33 + v24) + <span class="number">7</span> * (<span class="number">19</span> * v4 + <span class="number">9</span> * (v10 + <span class="number">2</span> * v25) + v2 + <span class="number">33</span> * v3 + <span class="number">32</span> * v19) + \</span><br><span class="line">         <span class="number">3</span> * (<span class="number">71</span> * v39 + <span class="number">43</span> * v22 + <span class="number">32</span> * (v17 + v26) + <span class="number">15</span> * (v5 + v6 + <span class="number">2</span> * v23) + v28 + <span class="number">74</span> * v31 + \</span><br><span class="line">         <span class="number">48</span> * v42) + <span class="number">10</span> * (v21 + <span class="number">11</span> * v30 + <span class="number">16</span> * v15) + <span class="number">136</span> * v7 + <span class="number">106</span> * v1 + <span class="number">41</span> * v27</span><br><span class="line">solver.add(expr30 == <span class="number">403661</span>)</span><br><span class="line">expr31 = <span class="number">127</span> * v4 + <span class="number">106</span> * v15 + <span class="number">182</span> * v30 + <span class="number">142</span> * v5 + <span class="number">159</span> * v16 + <span class="number">17</span> * v1 + <span class="number">211</span> * v6 + <span class="number">134</span> * v2 + \</span><br><span class="line">         <span class="number">199</span> * v7 + <span class="number">103</span> * v28 + <span class="number">247</span> * v23 + <span class="number">122</span> * v9 + <span class="number">95</span> * v41 + <span class="number">62</span> * v10 + <span class="number">203</span> * v39 + <span class="number">16</span> * v11 + \</span><br><span class="line">         <span class="number">41</span> * (<span class="number">6</span> * v42 + v25) + <span class="number">9</span> * (<span class="number">22</span> * v24 + v20 + <span class="number">27</span> * v31 + <span class="number">28</span> * v40) + <span class="number">10</span> * (v8 + v22 + v36 + \</span><br><span class="line">         <span class="number">8</span> * v17 + <span class="number">2</span> * (v22 + v36 + <span class="number">8</span> * v17) + <span class="number">13</span> * v29) + <span class="number">6</span> * (<span class="number">23</span> * v27 + v26) + <span class="number">213</span> * v18 + <span class="number">179</span> * v3 + \</span><br><span class="line">         <span class="number">43</span> * v19</span><br><span class="line">solver.add(expr31 == <span class="number">418596</span>)</span><br><span class="line">expr32 = <span class="number">149</span> * v19 + v1 + <span class="number">133</span> * v22 + <span class="number">207</span> * v41 + <span class="number">182</span> * v26 + <span class="number">234</span> * v7 + <span class="number">199</span> * v8 + <span class="number">168</span> * v21 + \</span><br><span class="line">         <span class="number">58</span> * v10 + <span class="number">108</span> * v20 + <span class="number">142</span> * v18 + <span class="number">156</span> * (v9 + v25) + <span class="number">16</span> * (v29 + <span class="number">6</span> * v31) + <span class="number">126</span> * (v17 + <span class="number">2</span> * v39) + \</span><br><span class="line">         <span class="number">127</span> * (v4 + <span class="number">2</span> * v27 + v40) + <span class="number">49</span> * (v30 + <span class="number">4</span> * v16) + <span class="number">11</span> * (v5 + <span class="number">22</span> * v11) + <span class="number">5</span> * (v15 + v42 + <span class="number">45</span> * v24 + \</span><br><span class="line">         <span class="number">50</span> * v28) + <span class="number">109</span> * v2 + <span class="number">124</span> * v6 + <span class="number">123</span> * v3</span><br><span class="line">solver.add(expr32 == <span class="number">418697</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    solution = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(model.evaluate(a1[i]).as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solution found:&quot;</span>, solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution exists&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;SMC_4nd_s0lv1ng_equ4t1Ons&#125;</span></span><br></pre></td></tr></table></figure><h3 id="change"><a href="#change" class="headerlink" title="change"></a>change</h3><p>main分析：<br>scanf()后的第一个函数 sub_7FF6C3AC29A0——<br>传入input；<br>循环中包含两个分支，根据i的奇偶性进入其中一个；<br>其中使用 函数指针调用  sub_7FF6C3AC3670&#x2F;sub_7FF6C3AC3650，对字节进行简单加密<br>然后开始密文校验——<br>共24字节</p><p>加密部分分析：<br>这部分有点小技俩，动调之后甚至都差点被骗<br>一开始看逻辑觉得是 input[i]^i，但解密出来不对；<br>动调看input前几个字节（’hgame{‘）的加密，观察到’h’^’a’，’g’^’m’，就又以为逻辑是 input[i]^input[i+2]；<br>但继续动调又观察到 ‘a’^0x32，’m’^0x71——什么情况？<br>这时候，注意到main中一开始有个奇怪的字符串 “am2qasl”（当作key）<br>这才意识到，逻辑是 input[i]^key[i%7]</p><p>题外话：<br>看flag的信息，说是这题涉及hook<br>嗯？这导入表中没有 VirtualProtect()，我倒是挺好奇这是怎么实现的</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> original_input[<span class="number">24</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> transformed_input[] = &#123;</span><br><span class="line">        <span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x5D</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x23</span>, <span class="number">0x06</span>,</span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x4B</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0x0D</span>, <span class="number">0x1C</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>,</span><br><span class="line">        <span class="number">0x66</span>, <span class="number">0x15</span>, <span class="number">0x48</span>, <span class="number">0x1B</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x4F</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *key = <span class="string">&quot;am2qasl&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">            original_input[i] = transformed_input[i] ^ key[i % <span class="number">7</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            original_input[i] = ((transformed_input[i] - <span class="number">10</span>) ^ key[i % <span class="number">7</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Original input as string: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(original_input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;ugly_Cpp_and_hook&#125;</span></span><br></pre></td></tr></table></figure><h3 id="again"><a href="#again" class="headerlink" title="again!"></a>again!</h3><p>反汇编：<br>现在pycdc不好使，已经是常态了，直接上反汇编<br>大致是取出 bin1.pyc前16字节，流加密后进行md5——有点摸不着头脑</p><p>其他切入点：<br>看看附件下的 bin2，里面频繁出现字符串 “a405b5d321e446459d8f9169d027bd92”</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="week4-1"><a href="#week4-1" class="headerlink" title="week4"></a>week4</h2><h3 id="change-1"><a href="#change-1" class="headerlink" title="change"></a>change</h3><p>我就说这题的Hook不简单吧————VFT Hook<br>C++虚函数表Hook 初体验捏</p><h3 id="again-1"><a href="#again-1" class="headerlink" title="again!"></a>again!</h3><p>真没想到，错在还原出的python代码……<br>怪不得执行后，输出的md5值不是 “a405b5d321e446459d8f9169d027bd92”</p><p>明明已经猜出这bin2原本是个exe了<br>当时看着 文件中间隔出现的一段段 “a405b5d321e446459d8f9169d027bd92”，就觉得很像是exe中 被0x00填充的 padding区域 </p><p>不过说实话，就算当时得出该值，我估计也想不到解密bin2的方法是——将 “a405b5d321e446459d8f9169d027bd92”循环与 bin2每个字节异或</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code># week3    crackme：伪代码缺失、C++（异常处理）、魔改XTEAencrypt：Windows（CryptoAPI）、SIMD | 动调（查看参数）findme：花指令、魔改RC4（最后^变+） | dump（PE）、动调（获取参数）mystery：反调试（ptrace()）、代码混淆（虚假控制流）、魔改RC4（动态修改key、最后^变-）# week4again!：Python（Pyinstaller）、XXTEA | 反汇编change：C++、Hook（VFT） | 动调crackme2：伪代码缺失、SEH、SMC、反调试（NtQueryInformationProcess）| 约束求解</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2023</title>
      <link href="/2024/12/14/2024-12-14%20HGAME%202023/"/>
      <url>/2024/12/14/2024-12-14%20HGAME%202023/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="patchme"><a href="#patchme" class="headerlink" title="patchme"></a>patchme</h3><p>loc_14C6处看到无法识别的机器码，sub_188C()看到内存修改，一眼SMC</p><p>动调修正SMC：<br>sub_188C()先在 &#x2F;proc&#x2F;self&#x2F;status 检测前下断点，断下绕过后，执行SMC<br>然后来到解码处，按以下流程操作生成汇编————<br>1.快捷键d，将前几个db 改为dd&#x2F;dq<br>2.以其为首个元素，将后续转换为Array<br>3.此时可正常 快捷键c</p><p>代码分析：<br>很具有Linux特色，pipe()+fork()<br>不过这都不重要，只需知道 父进程中打印了flag</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 80</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> v8[] = &#123;</span><br><span class="line">        <span class="number">0x5416D999808A28FAL</span>L,</span><br><span class="line">        <span class="number">0x588505094953B563L</span>L,</span><br><span class="line">        <span class="number">0xCE8CF3A0DC669097L</span>L,</span><br><span class="line">        <span class="number">0x4C5CF3E854F44CBDL</span>L,</span><br><span class="line">        <span class="number">0xD144E49916678331L</span>L</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int32_t</span> v9 = <span class="number">-631149652</span>;</span><br><span class="line">    <span class="type">int16_t</span> v10 = <span class="number">-17456</span>;</span><br><span class="line">    <span class="type">char</span> v11 = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> v12[] = &#123;</span><br><span class="line">        <span class="number">0x3B4FA2FCEDEB4F92L</span>L,</span><br><span class="line">        <span class="number">0x7E45A6C3B67EA16L</span>L,</span><br><span class="line">        <span class="number">0xAFE1ACC8BF12D0E7L</span>L,</span><br><span class="line">        <span class="number">0x132EC3B7269138CEL</span>L,</span><br><span class="line">        <span class="number">0x8E2197EB7311E643L</span>L</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int32_t</span> v13 = <span class="number">-1370223935</span>;</span><br><span class="line">    <span class="type">int16_t</span> v14 = <span class="number">-13899</span>;</span><br><span class="line">    <span class="type">char</span> v15 = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buffer1[<span class="keyword">sizeof</span>(v8) + <span class="keyword">sizeof</span>(v9) + <span class="keyword">sizeof</span>(v10) + <span class="keyword">sizeof</span>(v11)];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buffer2[<span class="keyword">sizeof</span>(v12) + <span class="keyword">sizeof</span>(v13) + <span class="keyword">sizeof</span>(v14) + <span class="keyword">sizeof</span>(v15)];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(buffer1, v8, <span class="keyword">sizeof</span>(v8));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer1 + <span class="keyword">sizeof</span>(v8), &amp;v9, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer1 + <span class="keyword">sizeof</span>(v8) + <span class="keyword">sizeof</span>(v9), &amp;v10, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer1 + <span class="keyword">sizeof</span>(v8) + <span class="keyword">sizeof</span>(v9) + <span class="keyword">sizeof</span>(v10), &amp;v11, <span class="keyword">sizeof</span>(v11));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(buffer2, v12, <span class="keyword">sizeof</span>(v12));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer2 + <span class="keyword">sizeof</span>(v12), &amp;v13, <span class="keyword">sizeof</span>(v13));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer2 + <span class="keyword">sizeof</span>(v12) + <span class="keyword">sizeof</span>(v13), &amp;v14, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer2 + <span class="keyword">sizeof</span>(v12) + <span class="keyword">sizeof</span>(v13) + <span class="keyword">sizeof</span>(v14), &amp;v15, <span class="keyword">sizeof</span>(v15));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> total_length = <span class="keyword">sizeof</span>(buffer1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; total_length; ++i) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> byte_from_buffer1 = buffer1[i];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> byte_from_buffer2 = buffer2[i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">putchar</span>(byte_from_buffer1 ^ byte_from_buffer2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;You_4re_a_p@tch_master_0r_reverse_ma5ter&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Kunmusic"><a href="#Kunmusic" class="headerlink" title="Kunmusic"></a>Kunmusic</h3><p>exe, dll各一个，<br>但前者64位，后者32位；前者用VC++，后者用.NET——这是怎么做到的？</p><p>exe分析：<br>IDA中查看，没啥重要逻辑，就是对dll进行各种操作</p><p>dll分析：<br>dnSpy中查看，Main()中有解密逻辑， Resources.data与 104异或<br>说是  Resources.data要去 Resources.resx中找——但是这个文件在哪啊？？<br>找了一圈真没找到<br>能否通过动调，让程序断在 kmusic.dll的解密逻辑处？</p><p>IDA动调：<br>win11上跑不起来，得仍及win10虚拟机中跑<br>然而扔进IDA后动调，不知为啥会抛异常（此时查看模块列表，没看到加载了kmusic.dll）<br>所以先跑起来后attach，这下断在ntdll.dll中（此时查看模块列表，已加载kmusic.dll）<br>（以下为节外生枝——<br>点击任务栏中的程序，界面弹不出来<br>单步几下，执行”call ntdll RtlExitUserThread“，这下界面能弹出来了<br>随便点击其中的按钮，可以从IDA“Output”窗口中得知，一个线程被开启后关闭）<br>不好使啊，此时Main()已执行，无法断在其中了<br>得另寻他法</p><p>x64dbg调试：<br>可以直接扔进x64dbg，然后f9<br>然而还是走前面IDA的老路，此时Main()已执行，无法断在其中了</p><p>x64dbg调试（基于JIT）：<br>先注册表设置一下JIT——<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft.NETFramework：“DbgManagedDebugger”子项，设置x64dbg路径<br>                    ”DbgJITDebugLaunchSetting“子项，值设为0x0<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AeDebug：”Debugger“子项，设置x64dbg路径<br>                            新建”Auto” DWORD子项，值设为0x1<br>然后修改 kmusic.dll，紧接解密逻辑后的语句patch成 0xCC，再替换原 kmusic.dll<br>最后执行exe——哎呦，没反应，我黔驴技穷了……</p><h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><p>最体现C++特性的一集</p><p>大致逻辑：<br>接收输入放到一个结构体里<br>然后把结构体的成员、encrypt1()指针、encrypt2()指针、两字符串、一参数，都存入一个对象的字段<br>最后以对象的字段作为参数，基于函数指针 先后调用上述函数</p><p>动调：<br>输入”hgame{aaaaabbbbbcccccdddddeeeeefffffggg}”<br>到最后三个函数指针处——<br>第一个，不是encrypt1()，而是 sub_7FF6F4721E30；<br>    且通过内存断点发现，先后用到了 ‘hgame{th1s_is_4_fake_fl4g_hahaha}’、0x12345678、’hgame{this_is_another_fake_flag}’<br>第二个，没看懂加密逻辑<br>第三个，sub_7FF6F4723080，看到密文比较逻辑（40字节）<br>又看了好一会，还是很懵逼</p><p>动调逃课：<br>上面sub_7FF6F4723080中 继续深入，断在memcmp()前，内存中查看两个参数——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//预期密文</span><br><span class="line">28 50 C1 23 98 A1 41 36 4C 31 CB 52 90 F1 AC CC 0F 6C 2A 89 7F DF 11 84 7F E6 A2 E0 59 C7 C5 46 5D 29 38 93 ED 15 7A FF </span><br><span class="line">//加密输入</span><br><span class="line">28 50 C1 23 98 A1 63 27 5D 0F 9B 43 AD FE BB CD 04 50 24 DA 6E 88 2A 84 77 E4 A1 B4 5F D7 CC 54 64 3B 36 C1 E4 2D 5E FF </span><br></pre></td></tr></table></figure><p>可以看出，前六个字节和最后一个字节是一致的，也就是“hgame{…}”的部分。由此确定，加密部分是流加密，可进行爆破</p><p>爆破：<br>不断传入hgame{…}，中间部分依次为33个 ‘a’-‘z’, ‘A’-‘Z’, ‘0’-‘9’, ‘_’, ‘!’，以下为每次从内存中dump出的密文——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">28 50 C1 23 98 A1 63 27 5D 0F 9B 40 AE FD B8 CE 06 52 26 D8 6C 8D 2F 81 72 E1 A5 B0 5B D3 C8 53 63 3C 31 C6 E2 2B 58 FF</span><br><span class="line">28 50 C1 23 98 A1 60 24 5E 0C 98 43 AD FE BB CD 05 51 25 DB 6F 8E 2C 82 71 E2 A6 B3 58 D0 CB 50 60 3F 32 C5 E1 28 5B FF</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>最后把这一坨作为字符串放入如下这么个脚本——<br>每次读取字符串的一行，转换为Hex数组，与预期密文的Hex数组 逐个元素比较；<br>对于元素相同的位置，记录其索引index，然后把此第i次循环所输入的字符（数组”abcd…!“的第i个字符）放入flag[index]；<br>遍历完数组”abcd…!“后，打印flag[]</p><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><p>初步分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dword_140005040[<span class="number">0</span>]：input</span><br><span class="line">dword_140005040[…]：para   </span><br><span class="line">dword_140005040[…]：cipher</span><br><span class="line">byte_140005360：bytecode</span><br><span class="line">dword_140005D40：<span class="built_in">stack</span></span><br><span class="line">a1[<span class="number">0</span>]：EAX</span><br><span class="line">a1[<span class="number">1</span>]：EBX</span><br><span class="line">a1[<span class="number">2</span>]：ECX</span><br><span class="line">a1[<span class="number">3</span>]：EDX</span><br><span class="line">a1[<span class="number">6</span>]：EIP</span><br><span class="line">a1[<span class="number">7</span>]：ESP</span><br><span class="line">a1[<span class="number">8</span>]：ZF</span><br></pre></td></tr></table></figure><p>字节码解释：<br>笑死了，来来回回倒腾几个小时写个解释器，跑起来各种毛病，最后发现还不如人工解释<br>不过有一说一，此时对着前面手写的解释器，人工解释起来省事了不少<br>接下来就是对着汇编 写出伪代码，发现加密逻辑很简单</p><p>汇编+伪代码分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> input_para[] = &#123;</span><br><span class="line">    <span class="comment">//input:</span></span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    </span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//51:</span></span><br><span class="line">    <span class="number">0x0000009B</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000002</span>, <span class="number">0x000000BC</span>, <span class="number">0x000000AC</span>, <span class="number">0x0000009C</span>, <span class="number">0x000000CE</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000002</span>, <span class="number">0x000000B9</span>, </span><br><span class="line">    <span class="number">0x000000FF</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000074</span>, <span class="number">0x00000048</span>, <span class="number">0x00000019</span>, <span class="number">0x00000069</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000003</span>, <span class="number">0x000000CB</span>, <span class="number">0x000000C9</span>, </span><br><span class="line">    <span class="number">0x000000FF</span>, <span class="number">0x000000FC</span>, <span class="number">0x00000080</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000D7</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x0000001D</span>, </span><br><span class="line">    <span class="number">0x0000003D</span>, <span class="number">0x00000099</span>, <span class="number">0x00000088</span>, <span class="number">0x00000099</span>, <span class="number">0x000000BF</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000096</span>, <span class="number">0x0000002E</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000057</span>, </span><br><span class="line"></span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//101: </span></span><br><span class="line">    <span class="number">0x000000C9</span>, <span class="number">0x000000A9</span>, <span class="number">0x000000BD</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000017</span>, <span class="number">0x000000C2</span>, <span class="number">0x0000006E</span>, <span class="number">0x000000F8</span>, <span class="number">0x000000F5</span>, <span class="number">0x0000006E</span>, </span><br><span class="line">    <span class="number">0x00000063</span>, <span class="number">0x00000063</span>, <span class="number">0x000000D5</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000016</span>, <span class="number">0x00000098</span>, <span class="number">0x00000038</span>, <span class="number">0x00000030</span>, <span class="number">0x00000073</span>, </span><br><span class="line">    <span class="number">0x00000038</span>, <span class="number">0x000000C1</span>, <span class="number">0x0000005E</span>, <span class="number">0x000000ED</span>, <span class="number">0x000000B0</span>, <span class="number">0x00000029</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000018</span>, <span class="number">0x00000040</span>, <span class="number">0x000000A7</span>, </span><br><span class="line">    <span class="number">0x000000FD</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000078</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000062</span>, <span class="number">0x000000DB</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000008F</span>, <span class="number">0x0000009C</span>, </span><br><span class="line"></span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment">//151:</span></span><br><span class="line">    <span class="number">0x00004800</span>, <span class="number">0x0000F100</span>, <span class="number">0x00004000</span>, <span class="number">0x00002100</span>, <span class="number">0x00003501</span>, <span class="number">0x00006400</span>, <span class="number">0x00007801</span>, <span class="number">0x0000F900</span>, <span class="number">0x00001801</span>, <span class="number">0x00005200</span>, </span><br><span class="line">    <span class="number">0x00002500</span>, <span class="number">0x00005D01</span>, <span class="number">0x00004700</span>, <span class="number">0x0000FD00</span>, <span class="number">0x00006901</span>, <span class="number">0x00005C00</span>, <span class="number">0x0000AF01</span>, <span class="number">0x0000B200</span>, <span class="number">0x0000EC01</span>, <span class="number">0x00005201</span>, </span><br><span class="line">    <span class="number">0x00004F01</span>, <span class="number">0x00001A01</span>, <span class="number">0x00005000</span>, <span class="number">0x00008501</span>, <span class="number">0x0000CD00</span>, <span class="number">0x00002300</span>, <span class="number">0x0000F800</span>, <span class="number">0x00000C00</span>, <span class="number">0x0000CF00</span>, <span class="number">0x00003D01</span>, </span><br><span class="line">    <span class="number">0x00004501</span>, <span class="number">0x00008200</span>, <span class="number">0x0000D201</span>, <span class="number">0x00002901</span>, <span class="number">0x0000D501</span>, <span class="number">0x00000601</span>, <span class="number">0x0000A201</span>, <span class="number">0x0000DE00</span>, <span class="number">0x0000A601</span>, <span class="number">0x0000CA01</span>, </span><br><span class="line"></span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*处理输入</span></span><br><span class="line"><span class="comment">for(i=0; i++; i&lt;40)&#123;</span></span><br><span class="line"><span class="comment">    m = (input_para[i] + input_para[i+50]) ^ input_para[i+100]</span></span><br><span class="line"><span class="comment">    stack[i] = (m &lt;&lt; 8) + (m &gt;&gt; 8)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,   mov ecx <span class="number">0</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,   add ecx edx  </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,   mov eax input_para[ecx]</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,   mov ebx eax</span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x32</span>,   mov ecx <span class="number">50</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,   add ecx edx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,   mov eax input_para[ecx]</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,   add ebx eax </span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x64</span>,   mov ecx <span class="number">100</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,   add ecx edx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,   mov eax input_para[ecx]</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,   xor ebx eax</span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x08</span>,   mov eax <span class="number">8</span></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>,   mov ecx ebx</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,   shl ebx eax</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,   shr ecx eax</span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>,   add ebx ecx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,   mov eax ebx</span><br><span class="line"><span class="number">0x01</span>, <span class="number">0x00</span>,               push eax</span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,   mov eax <span class="number">1</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,   add edx eax </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>,   mov eax edx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x28</span>,   mov ebx <span class="number">40</span></span><br><span class="line"><span class="number">0x04</span>,                     cmp eax ebx</span><br><span class="line"><span class="number">0x06</span>, <span class="number">0x5F</span>,               jnz <span class="number">95</span></span><br><span class="line"><span class="number">0x05</span>, <span class="number">0x00</span>,               jmp <span class="number">0</span></span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————</span><br><span class="line"><span class="comment">/*校验</span></span><br><span class="line"><span class="comment">for(i=0; i++; i&lt;40)&#123;</span></span><br><span class="line"><span class="comment">    if(stack[39-i] != input_para[i+50])</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">95</span>:</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,   mov edx <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">99</span>:</span><br><span class="line"><span class="number">0x02</span>, <span class="number">0x01</span>,               pop ebx</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x96</span>,   mov ecx <span class="number">0</span> </span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,   add ecx edx </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,   mov eax input_para[ecx]</span><br><span class="line"><span class="number">0x04</span>,                     cmp eax ebx</span><br><span class="line"><span class="number">0x07</span>, <span class="number">0x88</span>,               jz <span class="number">136</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,   mov eax <span class="number">1</span></span><br><span class="line"><span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,   add edx eax </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>,   mov eax edx  </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x28</span>,   mov ebx <span class="number">40</span></span><br><span class="line"><span class="number">0x04</span>,                     cmp eax ebx</span><br><span class="line"><span class="number">0x07</span>, <span class="number">0x63</span>,               jz <span class="number">99</span></span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"><span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"><span class="number">136</span>:</span><br><span class="line"><span class="number">0xFF</span></span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uint32_array_to_ascii</span><span class="params">(<span class="type">const</span> <span class="type">uint32_t</span> input[], <span class="type">int</span> length, <span class="type">char</span> output[])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="type">uint8_t</span> byte = (<span class="type">uint8_t</span>)(input[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">        output[i] = (<span class="type">char</span>)byte;</span><br><span class="line">    &#125;</span><br><span class="line">    output[length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> input[<span class="number">40</span>];</span><br><span class="line">    <span class="type">uint32_t</span> para1[<span class="number">40</span>] = &#123;</span><br><span class="line">        <span class="number">0x0000009B</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000002</span>, <span class="number">0x000000BC</span>, <span class="number">0x000000AC</span>, <span class="number">0x0000009C</span>, <span class="number">0x000000CE</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000002</span>, <span class="number">0x000000B9</span>,</span><br><span class="line">        <span class="number">0x000000FF</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000074</span>, <span class="number">0x00000048</span>, <span class="number">0x00000019</span>, <span class="number">0x00000069</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000003</span>, <span class="number">0x000000CB</span>, <span class="number">0x000000C9</span>,</span><br><span class="line">        <span class="number">0x000000FF</span>, <span class="number">0x000000FC</span>, <span class="number">0x00000080</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000D7</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x0000001D</span>,</span><br><span class="line">        <span class="number">0x0000003D</span>, <span class="number">0x00000099</span>, <span class="number">0x00000088</span>, <span class="number">0x00000099</span>, <span class="number">0x000000BF</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000096</span>, <span class="number">0x0000002E</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000057</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> para2[<span class="number">40</span>] = &#123;</span><br><span class="line">        <span class="number">0x000000C9</span>, <span class="number">0x000000A9</span>, <span class="number">0x000000BD</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000017</span>, <span class="number">0x000000C2</span>, <span class="number">0x0000006E</span>, <span class="number">0x000000F8</span>, <span class="number">0x000000F5</span>, <span class="number">0x0000006E</span>,</span><br><span class="line">        <span class="number">0x00000063</span>, <span class="number">0x00000063</span>, <span class="number">0x000000D5</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000016</span>, <span class="number">0x00000098</span>, <span class="number">0x00000038</span>, <span class="number">0x00000030</span>, <span class="number">0x00000073</span>,</span><br><span class="line">        <span class="number">0x00000038</span>, <span class="number">0x000000C1</span>, <span class="number">0x0000005E</span>, <span class="number">0x000000ED</span>, <span class="number">0x000000B0</span>, <span class="number">0x00000029</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000018</span>, <span class="number">0x00000040</span>, <span class="number">0x000000A7</span>,</span><br><span class="line">        <span class="number">0x000000FD</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000078</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000062</span>, <span class="number">0x000000DB</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000008F</span>, <span class="number">0x0000009C</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> cipher[<span class="number">40</span>] = &#123;</span><br><span class="line">        <span class="number">0x00004800</span>, <span class="number">0x0000F100</span>, <span class="number">0x00004000</span>, <span class="number">0x00002100</span>, <span class="number">0x00003501</span>, <span class="number">0x00006400</span>, <span class="number">0x00007801</span>, <span class="number">0x0000F900</span>, <span class="number">0x00001801</span>, <span class="number">0x00005200</span>,</span><br><span class="line">        <span class="number">0x00002500</span>, <span class="number">0x00005D01</span>, <span class="number">0x00004700</span>, <span class="number">0x0000FD00</span>, <span class="number">0x00006901</span>, <span class="number">0x00005C00</span>, <span class="number">0x0000AF01</span>, <span class="number">0x0000B200</span>, <span class="number">0x0000EC01</span>, <span class="number">0x00005201</span>,</span><br><span class="line">        <span class="number">0x00004F01</span>, <span class="number">0x00001A01</span>, <span class="number">0x00005000</span>, <span class="number">0x00008501</span>, <span class="number">0x0000CD00</span>, <span class="number">0x00002300</span>, <span class="number">0x0000F800</span>, <span class="number">0x00000C00</span>, <span class="number">0x0000CF00</span>, <span class="number">0x00003D01</span>,</span><br><span class="line">        <span class="number">0x00004501</span>, <span class="number">0x00008200</span>, <span class="number">0x0000D201</span>, <span class="number">0x00002901</span>, <span class="number">0x0000D501</span>, <span class="number">0x00000601</span>, <span class="number">0x0000A201</span>, <span class="number">0x0000DE00</span>, <span class="number">0x0000A601</span>, <span class="number">0x0000CA01</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> swapped_cipher = (cipher[<span class="number">39</span> - i] &gt;&gt; <span class="number">8</span>) | (cipher[<span class="number">39</span> - i] &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0x0000FFFF</span>;</span><br><span class="line">        input[i] = (swapped_cipher ^ para2[i]) - para1[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> output[<span class="number">41</span>]; </span><br><span class="line">    uint32_array_to_ascii(input, <span class="number">40</span>, output);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Result: %s\n&quot;</span>, output);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;y0ur_rever5e_sk1ll_i5_very_g0od!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>main_main()：<br>从 inputdir读取，进行Base64解密<br>然后创建了两个实例，进行了一些syscall<br>最后写入 outputdir&#x2F;xxx.enc<br>不明所以，只能说一点头绪都没有，只能看着附件中的 flag.enc干瞪眼</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="week3-1"><a href="#week3-1" class="headerlink" title="week3"></a>week3</h2><h3 id="cpp-1"><a href="#cpp-1" class="headerlink" title="cpp"></a>cpp</h3><p>我勒个ChaCha20加密啊，根本看不出来<br>不过确实是流加密， 我那纯纯的非预期解 还是行得通的</p><h3 id="Kunmusic-1"><a href="#Kunmusic-1" class="headerlink" title="Kunmusic"></a>Kunmusic</h3><p>事后诸葛亮：<br>当时以为对 Resources.data进行异或解密后 就能获取flag，结果全程都在找数据，还没找到……<br>现在想想，其实当时可直接对整个 dll进行异或，扔进 010Editor直接找 “hgame”字符串，就不用费这么大劲了<br>不过话又说回来，这样还是搞不到flag，因为此处异或解密的是一个 PE</p><p>Resources.data获取：<br>参考此<a href="https://equinox-shame.github.io/2023/02/01/HGAME2023%20RE%20KunMusic/">文章</a><br>因此心心念念的 Resources.data其实就在“资源”目录下<br><img src="/img/2024-12-14/1.png"><br>右键dump即可</p><h2 id="week4-1"><a href="#week4-1" class="headerlink" title="week4"></a>week4</h2><h3 id="shellcode-1"><a href="#shellcode-1" class="headerlink" title="shellcode"></a>shellcode</h3><p>料到这题会有隐藏在程序中，需要dump后才能显形的逻辑；<br>但没料到是以 加密shellcode 的形式存在，运行时解密shellcode 并载入内存执行</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code># week3cpp：C++、ChaCha20 | 动调（获取传参）、爆破Kunmusic：C++、.NET | dump（PE）、约束求解patchme：Linux、IPC、SMC、反调试（/proc/self/status）# week4shellcode：Golang、Base64、TEA | dump（shellcode）vm：VM（寄存器式）</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio开发</title>
      <link href="/2024/12/11/2024-12-11%20Android%20Studio%E5%BC%80%E5%8F%91/"/>
      <url>/2024/12/11/2024-12-11%20Android%20Studio%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>在此记录本人使用Android Studio开发过程中，经历的各种 操作流程、踩坑体验、心得体会</p><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><ol><li><p>选择创建 Native C++<br><img src="/img/2024-12-11/6.png"></p></li><li><p>选择使用Groovy语言编写 build.gradle<br><img src="/img/2024-12-11/4.png"></p></li></ol><h1 id="JNI配置"><a href="#JNI配置" class="headerlink" title="JNI配置"></a>JNI配置</h1><ol start="0"><li><p>SDK Manager中，下载 ndk-26.1.10909125、cmake-3.31.1<br><img src="/img/2024-12-11/5.png"></p></li><li><p>CMakeLists.txt中配置<br>（若构建系统选择 ndk-build，则无 src\main\cpp\CMakeLists.txt，而是 src\main\jni\Android.mk）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.31.1)</span><br><span class="line"></span><br><span class="line">add_library( </span><br><span class="line">        native-lib<span class="comment"># 名称</span></span><br><span class="line">        SHARED<span class="comment"># 类型 </span></span><br><span class="line">        <span class="comment"># 源文件</span></span><br><span class="line">        <span class="string">&quot;native-lib.cpp&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 liblog 日志记录库</span></span><br><span class="line">find_library( </span><br><span class="line">        log-lib</span><br><span class="line">        <span class="built_in">log</span> )</span><br><span class="line"></span><br><span class="line">target_link_libraries( </span><br><span class="line">        native-lib<span class="comment"># 名称</span></span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span> )</span><br></pre></td></tr></table></figure></li><li><p>build.gradle中配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ndkVersion <span class="string">&quot;26.1.10909125&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    externalNativeBuild&#123;</span><br><span class="line">        cmake&#123;</span><br><span class="line">            version <span class="string">&quot;3.31.1&quot;</span> </span><br><span class="line">            path <span class="string">&quot;src\\main\\cpp\\CMakeLists.txt&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成头文件<br>1）cd app\src\main\java<br>2）javah -jni com.example.myapplication.MainActivity</p></li><li><p>引入头文件<br>1）move com_example_myapplication_MainActivity.h ..\cpp<br>2）native-lib.cpp 中include</p></li></ol><h1 id="ProGuard-R8配置"><a href="#ProGuard-R8配置" class="headerlink" title="ProGuard&#x2F;R8配置"></a>ProGuard&#x2F;R8配置</h1><ol><li><p>proguard-rules.pro中设置规则，指明不要移除或混淆的类和成员</p></li><li><p>build.gradle中配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123; <span class="comment">// 注意，debug版下混淆不会生效</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>混淆结果见 app\build\outputs\mapping\release<br>有以下三个文本————<br>mapping.txt: 包含原始类名、方法名与混淆后名称之间的映射关系<br>seeds.txt: 列出所有未被混淆的类和成员<br>usage.txt:  列出所有被移除的类和成员</p></li></ol><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><h2 id="release版"><a href="#release版" class="headerlink" title="release版"></a>release版</h2><ol start="0"><li><p>使用JDK中的keytool 生成 keystore<br><img src="/img/2024-12-11/7.png"></p></li><li><p>定义release版的签名配置<br><img src="/img/2024-12-11/1.jpg"><br>此时 build.gradle中会自动添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(<span class="string">&#x27;D:\\xxx\\demo.keystore&#x27;</span>)</span><br><span class="line">            storePassword <span class="string">&#x27;111111&#x27;</span></span><br><span class="line">            keyPassword <span class="string">&#x27;111111&#x27;</span></span><br><span class="line">            keyAlias <span class="string">&#x27;mykey&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将签名配置应用到release版<br><img src="/img/2024-12-11/2.jpg"><br>此时 build.gradle中会自动添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定构建类型为release<br><img src="/img/2024-12-11/3.jpg"></p></li></ol><h2 id="arm64-v8a"><a href="#arm64-v8a" class="headerlink" title="arm64-v8a"></a>arm64-v8a</h2><ol><li><p>build.gradle中配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ndk &#123;   <span class="comment">// 不只选&#x27;arm64-v8a&#x27;，发现后续无论ABI指定哪个，模拟器上编译出的so只会包含x86_64</span></span><br><span class="line">            abiFilters <span class="string">&#x27;arm64-v8a&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定构建ABI为arm64-v8a<br><img src="/img/2024-12-11/8.jpg"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>JNI配置<br><a href="https://www.cnblogs.com/aWxvdmVseXc0/p/11564809.html">Anroid逆向学习从编写so到静动态调试分析arm的一次总结</a><br><a href="https://www.cnblogs.com/lxpblogs/p/18209133">Android JNI&#x2F;NDK环境的配置与Demo编译</a></p></li><li><p>ProGuard&#x2F;R8配置<br><a href="https://bbs.kanxue.com/thread-273880.htm#msg_header_h3_0">Android 简单加密壳 - proguard混淆</a></p></li><li><p>release版构建<br><a href="https://blog.csdn.net/qq_54017009/article/details/123897549">在Android studio中生成release版本</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Damn Vulnerable DeFi</title>
      <link href="/2024/12/09/2024-12-9%20Damn%20Vulnerable%20DeFi/"/>
      <url>/2024/12/09/2024-12-9%20Damn%20Vulnerable%20DeFi/</url>
      
        <content type="html"><![CDATA[<p>因为一开始是记录在本地Notepad上，本人较懒，故还未移植至博客。<br>这里暂时只放置 对各题目标签的总结</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>Unstoppable：闪电贷（ERC3156）、ERC4626 | 意外代币发送Naive receiver：闪电贷（ERC3156）、元交易（EIP712）、WETH | 多重调用Truster：闪电贷 | 意外函数调用（functionCall）Side Entrance：闪电贷 | 意外函数调用（interface）The Rewarder：Merkle证明Selfie：闪电贷、时间锁 | 发送方校验绕过（delegatecall()）Compromised：ERC721、预言机（NFT价格）、加密（Base64）| 账户创建（给定私钥）、预言机操纵Puppet：DEX（Uniswap V1）| 流动性池操纵Puppet V2：DEX（Uniswap V2）、WETH | 流动性池操纵Free Rider：ERC721、DEX（Uniswap V2）、WETH | 闪电交换Backdoor：Climber：Wallet Mining：Puppet V3：ABI Smuggling：Shards：Curvy Puppet：Withdrawal：</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2022</title>
      <link href="/2024/12/06/2024-12-6%20HGAME%202022/"/>
      <url>/2024/12/06/2024-12-6%20HGAME%202022/</url>
      
        <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="WOW"><a href="#WOW" class="headerlink" title="WOW"></a>WOW</h3><p>main:<br>输入先进行四轮 sub_401850+sub_401410+sub_4018D0 加密<br>然后sub_6319B0中处理<br>最后与 unk_404D4（32字节，但4个QWORD）进行比较</p><p>这之后还有四轮 sub_631850+suB_631630+sub_6318D0，动调发现是前面加密对应的解密逻辑</p><p>sub_6319B0处理逻辑：<br>sub_631D30中，CS变为33h，CPU模式切到x64<br>将每个QWORD的最低字节 ^0x20<br>sub_631D50中，CS变回23h，CPU模式切回x86</p><p>main动调：<br>46，下断点<br>55，下断点<br>59，下断点</p><p>46，断下后 将EIP设到52行处<br>55，断下后 将Buf2处的32字节替换成cipher<br>59，断下后 可查看内存中input处的flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// hgame&#123;WOWOW_h@ppy_n3w_ye4r_2022&#125;</span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>main_main()：<br>启动一个HTTP服务器</p><p>main_HttpHandleFunc()：<br>通过jmp到自身开头，实现循环执行</p><p>解析HTTP请求的表单数据，获取特定字段的值<br>检查该字段是否为”flag“，并将其中字符串进行格式化、拼接</p><p>main_encrypt()中加密<br>与 unk_69B9F0比较（这里是从cipher[1]开始的，cipher[0]藏在前面）</p><p>main_encrypt()：<br>先RSA，其输出的数转成字符串后 作为参数，和0x66一同参与循环异或运算（包含Golang的 panic-recovery异常处理机制）</p><p>RSA部分——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = &lt;a92582184765240&gt;</span><br><span class="line">q = &lt;a10731052865803&gt;</span><br><span class="line">e = &lt;a950501&gt;</span><br></pre></td></tr></table></figure><p>异或部分——</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RSA_cipher = <span class="string">&quot; &quot;</span>;      </span><br><span class="line">para = <span class="number">0x66L</span>L;</span><br><span class="line"></span><br><span class="line">j = <span class="number">0LL</span>;</span><br><span class="line"><span class="keyword">while</span> ( j &lt; <span class="number">153</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v22 = RSA_cipher[j];</span><br><span class="line">  AAAA[j] = v22 ^ para;</span><br><span class="line">  para = v22;</span><br><span class="line">  j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">153</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v24 = AAAA[i];</span><br><span class="line">  AAAA[i] = v24 ^ para;</span><br><span class="line">  para = v24;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密文部分——</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AAAA_final = [</span><br><span class="line">    ????,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x09</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x03</span>, <span class="number">0x0B</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x04</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>z3求解 RSA_cipher：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">RSA_cipher = [BitVec(<span class="string">f&#x27;p<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">153</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">153</span>):</span><br><span class="line">    solver.add(RSA_cipher[i] &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;1&#x27;</span>), RSA_cipher[i] &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>))</span><br><span class="line"></span><br><span class="line">AAAA_final = [</span><br><span class="line">    <span class="number">0xFF</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x09</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x03</span>, <span class="number">0x0B</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x04</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">solver.add(RSA_cipher[<span class="number">1</span>] ^ RSA_cipher[<span class="number">0</span>] ^ (RSA_cipher[<span class="number">0</span>] ^ <span class="number">0x66</span>) == AAAA_final[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">153</span>):</span><br><span class="line">    solver.add(RSA_cipher[i] ^ RSA_cipher[i-<span class="number">1</span>] ^ (RSA_cipher[i-<span class="number">1</span>] ^ RSA_cipher[i-<span class="number">2</span>]) == AAAA_final[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(model.evaluate(p).as_long()) <span class="keyword">for</span> p <span class="keyword">in</span> RSA_cipher])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;RSA_cipher found:&quot;</span>, result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br></pre></td></tr></table></figure><p>哎呦我服了，就是不对</p><h3 id="hardasm"><a href="#hardasm" class="headerlink" title="hardasm"></a>hardasm</h3><p>32字节输入，加密逻辑全main的在内联汇编中，六七千行AVX2指令<br>直接放弃了</p><h3 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h3><p>一个基于寄存器的VM</p><p>大致分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dword_49F020[<span class="number">0</span>]：EIP</span><br><span class="line">dword_49F020[<span class="number">1</span>]：ESP</span><br><span class="line">dword_49F020[<span class="number">3</span>]：input</span><br><span class="line">dword_49F020[<span class="number">9</span>]：<span class="built_in">stack</span></span><br><span class="line"></span><br><span class="line">dword_49F020[<span class="number">0x6D</span>]（<span class="number">0x49f1d4</span>…）：code</span><br><span class="line">dword_49F020[<span class="number">209</span>]（<span class="number">0x49F37C</span>…）：parameter</span><br><span class="line">dword_49F020[<span class="number">209</span>]（<span class="number">0x49F408</span>…）：cipher</span><br></pre></td></tr></table></figure><p>动调分析逻辑：<br>输入”ABCDEFGHIJKLMNOPQRSTUVWXYZ123456”</p><p>检查输入长度————<br>getchar<br>cmp ‘A’ 0Ah<br>getchar<br>cmp ‘B’ 0Ah<br>getchar<br>cmp ‘C’ 0Ah<br>…</p><p>加密操作————<br>mov<br>shl_input<br>xor input, parameter<br>…</p><p>逻辑就是先检查长度（32字节），然后逐字节加密（左移＋异或），最后逐字节与密文比较（不符合则直接退）</p><p>一开始以为parameter是cipher的，直到发现它被传入xor中<br>cipher一开始以为是从 ”0x15, 0x8E, 0x88, 0xA3…“ 开始算的，直到给他们下内存断点，发现从”0x8E“开始才会退，由此才断定”0x15“不属于cipher</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    unsigned char para[] = &#123;</span><br><span class="line">        <span class="number">0x5E</span>, <span class="number">0x46</span>, <span class="number">0x61</span>, <span class="number">0x43</span>, <span class="number">0x0E</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x1F</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x29</span>, <span class="number">0x41</span>, <span class="number">0x63</span>, <span class="number">0x3B</span>,</span><br><span class="line">        <span class="number">0x64</span>, <span class="number">0x3B</span>, <span class="number">0x15</span>, <span class="number">0x18</span>, <span class="number">0x5B</span>, <span class="number">0x3E</span>, <span class="number">0x22</span>, <span class="number">0x50</span>, <span class="number">0x46</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x4E</span>, <span class="number">0x43</span>, <span class="number">0x23</span>, <span class="number">0x60</span>, <span class="number">0x3B</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    unsigned char output[] = &#123;</span><br><span class="line">        <span class="number">0x8E</span>, <span class="number">0x88</span>, <span class="number">0xA3</span>, <span class="number">0x99</span>, <span class="number">0xC4</span>, <span class="number">0xA5</span>, <span class="number">0xC3</span>, <span class="number">0xDD</span>, <span class="number">0x19</span>, <span class="number">0xEC</span>, <span class="number">0x6C</span>, <span class="number">0x9B</span>, <span class="number">0xF3</span>, <span class="number">0x1B</span>, <span class="number">0x8B</span>, <span class="number">0x5B</span>,</span><br><span class="line">        <span class="number">0x3E</span>, <span class="number">0x9B</span>, <span class="number">0xF1</span>, <span class="number">0x86</span>, <span class="number">0xF3</span>, <span class="number">0xF4</span>, <span class="number">0xA4</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0xAB</span>, <span class="number">0x86</span>, <span class="number">0x89</span>, <span class="number">0x61</span>, <span class="number">0x22</span>, <span class="number">0xC1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> length = sizeof(output) / sizeof(output[<span class="number">0</span>]);</span><br><span class="line">    unsigned char <span class="built_in">input</span>[length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="built_in">input</span>[i] = (output[i] ^ para[i]) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        printf(<span class="string">&quot;%c&quot;</span>, <span class="built_in">input</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;Ea$Y-Vm-t0-PrOTeCT_cOde!!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="week4-1"><a href="#week4-1" class="headerlink" title="week4"></a>week4</h2><h3 id="hardasm-1"><a href="#hardasm-1" class="headerlink" title="hardasm"></a>hardasm</h3><p>事后诸葛亮：<br>我真傻，真的，<br>明知道这几千行AVX2指令可读性为0，本应该想到要使用非常规方法的<br>明知道最后这32字节 是逐字节校验，本应往流加密方向去猜，进而往逐字节爆破方面去切入的</p><p>wp思路：<br>不过有一说一，wp爆破的切入点确实nb，第一次见到这种思路</p><p>patch程序 print()前传入rcx的参数，从而打印 [rsp+70h+var_50]（使用0&#x2F;0xFF记录着每个字节正确与否）<br>这样爆破的目标就有了，即让程序执行后的输出为 32个 0xFF<br>（有点像安卓log插桩）</p><p>不过如果是我的话，估计想到的用unicorn<br>注册个回调，当执行到 print()前的传参逻辑时（0x00007FF73593804E），打印 [rsp+70h+var_50]</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code># week4ezvm：VM（寄存器式）| 动调hardasm：ASM、SIMD | 动调、patch（打印参数）、爆破server：Golang、RSA | 爆破WOW：天堂之门 | 动调（获取flag）</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dex加固及对抗</title>
      <link href="/2024/12/01/2024-12-1%20dex%E5%8A%A0%E5%9B%BA%E5%8F%8A%E5%AF%B9%E6%8A%97/"/>
      <url>/2024/12/01/2024-12-1%20dex%E5%8A%A0%E5%9B%BA%E5%8F%8A%E5%AF%B9%E6%8A%97/</url>
      
        <content type="html"><![CDATA[<p>本文记录了Android中常见的dex加固手段，从原理及对抗两个方面进行总结<br>文章会根据后续的学习进度，持续追加新内容</p><p>默认环境如下：</p><ol><li>系统：Android 9.0.0</li><li>架构：arm64</li></ol><h1 id="加固手段"><a href="#加固手段" class="headerlink" title="加固手段"></a>加固手段</h1><h2 id="一代壳：动态加载"><a href="#一代壳：动态加载" class="headerlink" title="一代壳：动态加载"></a>一代壳：动态加载</h2><h3 id="落地加载"><a href="#落地加载" class="headerlink" title="落地加载"></a>落地加载</h3><h3 id="不落地加载"><a href="#不落地加载" class="headerlink" title="不落地加载"></a>不落地加载</h3><h2 id="二代壳：方法抽取"><a href="#二代壳：方法抽取" class="headerlink" title="二代壳：方法抽取"></a>二代壳：方法抽取</h2><p>在此之前，先来回顾一下dex文件的大致格式<br><img src="/img/2024-12-1/2.jpg"><br>以及dex中 类方法字节码所在位置<br><img src="/img/2024-12-1/1.jpg"></p><ol><li><p>针对编译出的dex，打印目标类方法的ID、指令字节码，然后抽空指令；<br>再重新计算dex的 checksum, signature 字段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sha.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zlib.h&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DexFile.h&quot;</span>    <span class="comment">// 来自 http://androidxref.com/9.0.0_r3/xref/dalvik/libdex/DexFile.h，定义了dex文件结构（包含struct DexCode...）</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DexClass.h&quot;</span>   <span class="comment">// 来自 http://androidxref.com/9.0.0_r3/xref/dalvik/libdex/DexClass.h，对前者进行补充定义（包含struct DexClassData, DexClassDataHeader, DexField, DexMethod）</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 checksum</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">calculateChecksum</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> adler32(<span class="number">0L</span>, data + <span class="number">12</span>, length - <span class="number">12</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 signature</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">calculateSignature</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> length, <span class="type">uint8_t</span>* signature)</span> &#123;</span><br><span class="line">    SHA_CTX sha1Context;</span><br><span class="line">    SHA1_Init(&amp;sha1Context);</span><br><span class="line">    SHA1_Update(&amp;sha1Context, data + <span class="number">32</span>, length - <span class="number">32</span>); </span><br><span class="line">    SHA1_Final(signature, &amp;sha1Context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新dex的 checksum, signature 字段</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">updateDexHeader</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filePath)</span> &#123;</span><br><span class="line">    FILE* file = fopen(filePath, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to open file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">size_t</span> fileSize = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* dexBytes = (<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(fileSize);</span><br><span class="line">    <span class="keyword">if</span> (!dexBytes) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to allocate memory&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fread(dexBytes, <span class="number">1</span>, fileSize, file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 checksum</span></span><br><span class="line">    <span class="type">uint32_t</span> newChecksum = calculateChecksum(dexBytes, fileSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 signature</span></span><br><span class="line">    <span class="type">uint8_t</span> newSignature[SHA_DIGEST_LENGTH];</span><br><span class="line">    calculateSignature(dexBytes, fileSize, newSignature);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新dex</span></span><br><span class="line">    <span class="built_in">memcpy</span>(dexBytes + <span class="number">8</span>, &amp;newChecksum, <span class="keyword">sizeof</span>(newChecksum));</span><br><span class="line">    <span class="built_in">memcpy</span>(dexBytes + <span class="number">12</span>, newSignature, SHA_DIGEST_LENGTH);</span><br><span class="line"></span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    fwrite(dexBytes, <span class="number">1</span>, fileSize, file);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(dexBytes);</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Checksum and signature updated.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化dex</span></span><br><span class="line">DexFile* <span class="title function_">dexFileInit</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filePath)</span> &#123;</span><br><span class="line">    FILE* file = fopen(filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to open file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">size_t</span> fileSize = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* baseAddr = (<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(fileSize);</span><br><span class="line">    <span class="keyword">if</span> (!baseAddr) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to allocate memory&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fread(baseAddr, <span class="number">1</span>, fileSize, file);</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化DexFile结构体</span></span><br><span class="line">    DexFile* dexFile = (DexFile*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DexFile));</span><br><span class="line">    <span class="keyword">if</span> (!dexFile) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to allocate memory&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(baseAddr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dexFile-&gt;baseAddr = baseAddr;</span><br><span class="line">    dexFile-&gt;pHeader = (DexHeader*)baseAddr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析索引表</span></span><br><span class="line">    dexFile-&gt;pStringIds = (DexStringId*)(baseAddr + dexFile-&gt;pHeader-&gt;stringIdsOff);</span><br><span class="line">    dexFile-&gt;pTypeIds = (DexTypeId*)(baseAddr + dexFile-&gt;pHeader-&gt;typeIdsOff);</span><br><span class="line">    dexFile-&gt;pFieldIds = (DexFieldId*)(baseAddr + dexFile-&gt;pHeader-&gt;fieldIdsOff);</span><br><span class="line">    dexFile-&gt;pMethodIds = (DexMethodId*)(baseAddr + dexFile-&gt;pHeader-&gt;methodIdsOff);</span><br><span class="line">    dexFile-&gt;pProtoIds = (DexProtoId*)(baseAddr + dexFile-&gt;pHeader-&gt;protoIdsOff);</span><br><span class="line">    dexFile-&gt;pClassDefs = (DexClassDef*)(baseAddr + dexFile-&gt;pHeader-&gt;classDefsOff);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dexFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取类数据</span></span><br><span class="line">DexClassData* <span class="title function_">readClassData</span><span class="params">(<span class="type">const</span> u1** pData)</span> &#123;</span><br><span class="line">    DexClassDataHeader header;</span><br><span class="line">    dexReadClassDataHeader(pData, &amp;header);</span><br><span class="line"></span><br><span class="line">    DexClassData* classData = (DexClassData*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DexClassData));</span><br><span class="line">    <span class="keyword">if</span> (!classData) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to allocate memory&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    classData-&gt;header = header;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取直接方法</span></span><br><span class="line">    <span class="keyword">if</span> (header.directMethodsSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        classData-&gt;directMethods = (DexMethod*)<span class="built_in">malloc</span>(header.directMethodsSize * <span class="keyword">sizeof</span>(DexMethod));</span><br><span class="line">        <span class="keyword">for</span> (u4 i = <span class="number">0</span>; i &lt; header.directMethodsSize; i++) &#123;</span><br><span class="line">            classData-&gt;directMethods[i].methodIdx = readUnsignedLeb128(pData);</span><br><span class="line">            classData-&gt;directMethods[i].accessFlags = readUnsignedLeb128(pData);</span><br><span class="line">            classData-&gt;directMethods[i].codeOff = readUnsignedLeb128(pData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        classData-&gt;directMethods = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取虚方法</span></span><br><span class="line">    <span class="keyword">if</span> (header.virtualMethodsSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        classData-&gt;virtualMethods = (DexMethod*)<span class="built_in">malloc</span>(header.virtualMethodsSize * <span class="keyword">sizeof</span>(DexMethod));</span><br><span class="line">        <span class="keyword">for</span> (u4 i = <span class="number">0</span>; i &lt; header.virtualMethodsSize; i++) &#123;</span><br><span class="line">            classData-&gt;virtualMethods[i].methodIdx = readUnsignedLeb128(pData);</span><br><span class="line">            classData-&gt;virtualMethods[i].accessFlags = readUnsignedLeb128(pData);</span><br><span class="line">            classData-&gt;virtualMethods[i].codeOff = readUnsignedLeb128(pData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        classData-&gt;virtualMethods = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> classData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否是目标方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isTargetMethod</span><span class="params">(DexFile* dexFile, DexClassDef* classDef, DexMethod* method, <span class="type">const</span> <span class="type">char</span>* targetMethodName)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取类名</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* className = (<span class="type">const</span> <span class="type">char</span>*)(dexFile-&gt;baseAddr + dexFile-&gt;pStringIds[classDef-&gt;classIdx].stringDataOff);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取方法名</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* methodName = (<span class="type">const</span> <span class="type">char</span>*)(dexFile-&gt;baseAddr + dexFile-&gt;pStringIds[dexFile-&gt;pMethodIds[method-&gt;methodIdx].nameIdx].stringDataOff);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> fullMethodName[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">snprintf</span>(fullMethodName, <span class="keyword">sizeof</span>(fullMethodName), <span class="string">&quot;%s.%s&quot;</span>, className, methodName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(fullMethodName, targetMethodName) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印方法信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printMethodInfo</span><span class="params">(DexFile* dexFile, DexMethod* method)</span> &#123;</span><br><span class="line">    DexCode* code = (DexCode*)(dexFile-&gt;baseAddr + method-&gt;codeOff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Method ID: %u\n&quot;</span>, method-&gt;methodIdx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bytecode:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (u4 i = <span class="number">0</span>; i &lt; code-&gt;insnsSize; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04x &quot;</span>, code-&gt;insns[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充字节码为0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fillMethodBytecodeWithZero</span><span class="params">(DexFile* dexFile, DexMethod* method)</span> &#123;</span><br><span class="line">    DexCode* code = (DexCode*)(dexFile-&gt;baseAddr + method-&gt;codeOff);</span><br><span class="line">    u4 insnsOffset = method-&gt;codeOff + <span class="number">16</span>;</span><br><span class="line">    <span class="built_in">memset</span>((<span class="type">void</span>*)(dexFile-&gt;baseAddr + insnsOffset), <span class="number">0</span>, code-&gt;insnsSize * <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bytecode filled with 0x0.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽空目标方法指令</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">extractSpecificMethod</span><span class="params">(DexFile* dexFile, <span class="type">const</span> <span class="type">char</span>* targetMethodName)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (u4 i = <span class="number">0</span>; i &lt; dexFile-&gt;pHeader-&gt;classDefsSize; i++) &#123;</span><br><span class="line">        DexClassDef* classDef = &amp;dexFile-&gt;pClassDefs[i];</span><br><span class="line">        <span class="keyword">if</span> (classDef-&gt;classDataOff == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Class &#x27;%u&#x27; data offset is zero\n&quot;</span>, i);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取类数据</span></span><br><span class="line">        <span class="type">const</span> u1* classDataPtr = dexFile-&gt;baseAddr + classDef-&gt;classDataOff;</span><br><span class="line">        DexClassData* classData = readClassData(&amp;classDataPtr);</span><br><span class="line">        <span class="keyword">if</span> (!classData) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 针对直接方法</span></span><br><span class="line">        <span class="keyword">for</span> (u4 j = <span class="number">0</span>; j &lt; classData-&gt;header.directMethodsSize; j++) &#123;</span><br><span class="line">            DexMethod* method = &amp;classData-&gt;directMethods[j];</span><br><span class="line">            <span class="keyword">if</span> (isTargetMethod(dexFile, classDef, method, targetMethodName)) &#123;</span><br><span class="line">                printMethodInfo(dexFile, method);</span><br><span class="line">                fillMethodBytecodeWithZero(dexFile, method);</span><br><span class="line">                <span class="built_in">free</span>(classData);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 针对虚方法</span></span><br><span class="line">        <span class="keyword">for</span> (u4 j = <span class="number">0</span>; j &lt; classData-&gt;header.virtualMethodsSize; j++) &#123;</span><br><span class="line">            DexMethod* method = &amp;classData-&gt;virtualMethods[j];</span><br><span class="line">            <span class="keyword">if</span> (isTargetMethod(dexFile, classDef, method, targetMethodName)) &#123;</span><br><span class="line">                printMethodInfo(dexFile, method);</span><br><span class="line">                fillMethodBytecodeWithZero(dexFile, method);</span><br><span class="line">                <span class="built_in">free</span>(classData);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(classData);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Target method not found.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filePath = <span class="string">&quot;classes.dex&quot;</span>; <span class="comment">// 目标dex</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* targetMethodName = <span class="string">&quot;com.example.myapplication3.MainActivity.showInvalidCredentialsDialog&quot;</span>; <span class="comment">// 目标方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化dex</span></span><br><span class="line">    DexFile* dexFile = dexFileInit(filePath);</span><br><span class="line">    <span class="keyword">if</span> (!dexFile) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽空目标方法指令</span></span><br><span class="line">    extractSpecificMethod(dexFile, targetMethodName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新dex的 checksum, signature 字段</span></span><br><span class="line">    updateDexHeader(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dexFile-&gt;baseAddr) &#123;</span><br><span class="line">        <span class="built_in">free</span>((<span class="type">void</span>*)dexFile-&gt;baseAddr);</span><br><span class="line">        dexFile-&gt;baseAddr = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(dexFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>源码中，在_init()中先hook libc.so的 execve()，禁用dex2oat功能；<br>以及hook mmap64()，为加载的dex添加修改可写属性；<br>然后hook libart.so的 LoadMethod()，基于目标类方法的ID、指令字节码，进行指令回填</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bytehook.h&quot;</span>   <span class="comment">// 来自 https://github.com/bytedance/bhook/blob/main/bytehook/src/main/cpp/include/bytehook.h</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基于 http://androidxref.com/9.0.0_r3/xref/art/libdexfile/dex/dex_file.h#68 中用于存储dex内存信息的 class DexFile，</span></span><br><span class="line"><span class="comment">抽象出的 具有相同内存结构的 struct DexFile</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexFile</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* location_;</span><br><span class="line">    <span class="type">uint8_t</span>* begin_;  <span class="comment">// 指向内存映射的起始位置</span></span><br><span class="line">    <span class="type">size_t</span> size_;   <span class="comment">// 内存分配的总大小</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基于 http://androidxref.com/9.0.0_r3/xref/art/runtime/art_method.h#69 中的 class ArtMethod，</span></span><br><span class="line"><span class="comment">抽象出的 具有相同内存结构的 struct ArtMethod</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArtMethod</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> declaring_class_;  </span><br><span class="line">    <span class="type">uint32_t</span> access_flags_;    </span><br><span class="line">    <span class="type">uint32_t</span> dex_code_item_offset_;  <span class="comment">// 该方法在dex中的 CodeItem 偏移量</span></span><br><span class="line">    <span class="type">uint32_t</span> dex_method_index_;      <span class="comment">// 该方法在dex的 method_ids 表中的索引</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="title function_">int</span> <span class="params">(*orig_execve)</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *, <span class="type">char</span> *<span class="type">const</span> *, <span class="type">char</span> *<span class="type">const</span> *)</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *(*orig_mmap64)(<span class="type">void</span> *, <span class="type">size_t</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">off_t</span>) = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *__file, <span class="type">char</span> *<span class="type">const</span> *__argv, <span class="type">char</span> *<span class="type">const</span> *__envp)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(__file, <span class="string">&quot;dex2oat&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = BYTEHOOK_CALL_PREV(my_execve, orig_execve, __file, __argv, __envp);</span><br><span class="line">    BYTEHOOK_POP_STACK();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">my_mmap64</span><span class="params">(<span class="type">void</span> *__addr, <span class="type">size_t</span> __size, <span class="type">int</span> __prot, <span class="type">int</span> __flags, <span class="type">int</span> __fd, <span class="type">off_t</span> __offset)</span> &#123;</span><br><span class="line">    BYTEHOOK_STACK_SCOPE();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> hasRead = (__prot &amp; PROT_READ) == PROT_READ;</span><br><span class="line">    <span class="type">int</span> hasWrite = (__prot &amp; PROT_WRITE) == PROT_WRITE;</span><br><span class="line">    <span class="type">int</span> prot = __prot;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasRead &amp;&amp; !hasWrite) &#123;</span><br><span class="line">        prot = prot | PROT_WRITE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *addr = BYTEHOOK_CALL_PREV(my_mmap64, orig_mmap64, __addr, __size, prot, __flags, __fd, __offset);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hook_libc</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">bytehook_stub_t</span> execve_stub = bytehook_hook_all(</span><br><span class="line">        <span class="string">&quot;libc.so&quot;</span>,    </span><br><span class="line">        <span class="string">&quot;execve&quot;</span>,       </span><br><span class="line">        (<span class="type">void</span> *)my_execve,</span><br><span class="line">        <span class="literal">NULL</span>,          </span><br><span class="line">        <span class="literal">NULL</span>          </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (execve_stub != nullptr) &#123;</span><br><span class="line">        orig_execve = (<span class="type">int</span> (*)(<span class="type">const</span> <span class="type">char</span> *, <span class="type">char</span> *<span class="type">const</span> *, <span class="type">char</span> *<span class="type">const</span> *)) bytehook_get_prev_func(execve_stub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bytehook_stub_t</span> mmap64_stub = bytehook_hook_all(</span><br><span class="line">        <span class="string">&quot;libc.so&quot;</span>,    </span><br><span class="line">        <span class="string">&quot;mmap64&quot;</span>,       </span><br><span class="line">        (<span class="type">void</span> *)my_mmap64,</span><br><span class="line">        <span class="literal">NULL</span>,          </span><br><span class="line">        <span class="literal">NULL</span>          </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmap64_stub != nullptr) &#123;</span><br><span class="line">        orig_mmap64 = (<span class="type">void</span> *(*)(<span class="type">void</span> *, <span class="type">size_t</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">off_t</span>)) bytehook_get_prev_func(mmap64_stub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">http://androidxref.com/9.0.0_r3/xref/art/runtime/class_linker.cc#3289 中的申明确实是四个参数，</span></span><br><span class="line"><span class="comment">但作为ClassLinker类的非静态成员函数，其实际调用时会隐式传递一个this指针作为第一个参数，这里要加上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *(*orig_LoadMethod)(<span class="type">void</span> *, <span class="type">void</span> *, <span class="type">void</span> *, <span class="type">void</span> *, <span class="type">void</span> *) = nullptr;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">my_LoadMethod</span><span class="params">(<span class="type">void</span> *a, <span class="type">void</span> *b, <span class="type">void</span> *c, <span class="type">void</span> *d, <span class="type">void</span> *e)</span> &#123;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DexFile</span> *<span class="title">dexfile</span> =</span> (<span class="keyword">struct</span> DexFile *) b;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArtMethod</span> *<span class="title">artmethod</span> =</span> (<span class="keyword">struct</span> ArtMethod *) e;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *result = orig_LoadMethod(a, b, c, d, e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填入之前打印出的 目标类方法的ID、指令字节码</span></span><br><span class="line">    <span class="type">int</span> method_idx = <span class="number">24</span>;    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> inst[<span class="number">36</span>] = &#123;</span><br><span class="line">        <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">        <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x1A</span>, <span class="number">0x01</span>, <span class="number">0x55</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x20</span>,</span><br><span class="line">        <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x1A</span>, <span class="number">0x01</span>,</span><br><span class="line">        <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x20</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>,</span><br><span class="line">        <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x01</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (artmethod-&gt;dex_method_index_ == method_idx) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *code_item_addr = (<span class="type">unsigned</span> <span class="type">char</span> *) dexfile-&gt;begin_ + artmethod-&gt;dex_code_item_offset_;</span><br><span class="line"></span><br><span class="line">        mprotect(dexfile-&gt;begin_, dexfile-&gt;size_, PROT_READ | PROT_WRITE);</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *code_item_start = code_item_addr + <span class="number">16</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(code_item_start, inst, <span class="keyword">sizeof</span>(inst));</span><br><span class="line"></span><br><span class="line">        mprotect(dexfile-&gt;begin_, dexfile-&gt;size_, PROT_READ);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hook_libart</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">bytehook_stub_t</span> stub = bytehook_hook_single(</span><br><span class="line">        <span class="string">&quot;libart.so&quot;</span>,  </span><br><span class="line">        nullptr,                 </span><br><span class="line">        <span class="string">&quot;_ZN3art11ClassLinker10LoadMethodERKNS_7DexFileERKNS_21ClassDataItemIteratorENS_6HandleINS_6mirror5ClassEEEPNS_9ArtMethodE&quot;</span>,</span><br><span class="line">        (<span class="type">void</span> *)my_LoadMethod,  </span><br><span class="line">        nullptr,                 </span><br><span class="line">        nullptr                 </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stub != nullptr) &#123;</span><br><span class="line">        orig_LoadMethod = (<span class="type">void</span> *(*)(<span class="type">void</span> *, <span class="type">void</span> *, <span class="type">void</span> *, <span class="type">void</span> *, <span class="type">void</span> *)) bytehook_get_prev_func(stub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">void</span> _init() &#123;</span><br><span class="line">    hook_libc();</span><br><span class="line">    hook_libart();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对原dex进行替换，再重打包及签名</p></li></ol><h2 id="三代壳：指令转换"><a href="#三代壳：指令转换" class="headerlink" title="三代壳：指令转换"></a>三代壳：指令转换</h2><h3 id="Dex2C"><a href="#Dex2C" class="headerlink" title="Dex2C"></a>Dex2C</h3><p>大致原理是————<br>将目标java方法转换为等效native函数，原本对该java方法的调用变为了JNI调用<br>同时，该方法中原本对java方法的调用变为了JNI调用；原本对native函数的调用变为了直接调用</p><h3 id="DexVMP"><a href="#DexVMP" class="headerlink" title="DexVMP"></a>DexVMP</h3><p>大致原理是————<br>从dex中获取 目标方法的字节码信息（struct DexCode）<br>1.其中方法的字节码加密保存（操作码重新映射）<br>2.同时将原处替换成 调用解释器入口函数的逻辑（传参为该方法的编号）</p><p>当该方法被调用时，会触发native中 字节码信息获取、虚拟寄存器初始化、解释执行</p><p>对于解释执行，设计思路参考ART<br>1.寄存器式<br>2.Switch 或 Goto 结构<br>3.操作字符串、类型、字段、方法、类时，<br>可以基于索引信息 直接从dex中访问目标（struct DexStringId, DexTypeId, DexFieldId, DexMethodId, DexClassDef）；<br>也可以像常规native开发 使用ART提供的JNI函数（此时会来到ART中执行）</p><h4 id="Switch解释器"><a href="#Switch解释器" class="headerlink" title="Switch解释器"></a>Switch解释器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DexFile.h&quot;</span>    <span class="comment">// 来自 http://androidxref.com/9.0.0_r3/xref/dalvik/libdex/DexFile.h，定义了dex文件结构</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原始字节码</span></span><br><span class="line"><span class="comment">92000606            |0000: mul-int v0, v6, v6</span></span><br><span class="line"><span class="comment">92010607            |0002: mul-int v1, v6, v7</span></span><br><span class="line"><span class="comment">91020607            |0004: sub-int v2, v6, v7</span></span><br><span class="line"><span class="comment">93030607            |0006: div-int v3, v6, v7</span></span><br><span class="line"><span class="comment">90040001            |0008: add-int v4, v0, v1</span></span><br><span class="line"><span class="comment">b024                |000a: add-int/2addr v4, v2</span></span><br><span class="line"><span class="comment">b034                |000b: add-int/2addr v4, v3</span></span><br><span class="line"><span class="comment">0f04                |000c: return v4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新映射操作码，实现加密</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Opcode</span> &#123;</span><br><span class="line">    ADD_INT = <span class="number">0x00</span>,         <span class="comment">// 0x90 -&gt; 0x09     </span></span><br><span class="line">    SUB_INT = <span class="number">0x19</span>,         <span class="comment">// 0x91 -&gt; 0x19</span></span><br><span class="line">    MUL_INT = <span class="number">0x29</span>,         <span class="comment">// 0x92 -&gt; 0x29</span></span><br><span class="line">    DIV_INT = <span class="number">0x39</span>,         <span class="comment">// 0x93 -&gt; 0x39</span></span><br><span class="line">    ADD_INT_2ADDR = <span class="number">0x0b</span>,   <span class="comment">// 0xb0 -&gt; 0x0b</span></span><br><span class="line">    RETURN = <span class="number">0xf0</span>           <span class="comment">// 0x0f -&gt; 0xf0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct DexCode &#123;</span></span><br><span class="line"><span class="comment">    u2  registersSize;      // 使用的寄存器总数</span></span><br><span class="line"><span class="comment">    u2  insSize;            // 参数个数</span></span><br><span class="line"><span class="comment">    u2  outsSize;           // 调用其他方法时使用寄存器的个数</span></span><br><span class="line"><span class="comment">    u2  triesSize;          // try-catch 块的数量</span></span><br><span class="line"><span class="comment">    u4  debugInfoOff;       // 指令调试信息的偏移         </span></span><br><span class="line"><span class="comment">    u4  insnsSize;          // 指令集个数，以2字节为单位</span></span><br><span class="line"><span class="comment">    u2  insns[1];           // 字节码数组起始处</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> dexcode[] = &#123;</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x00</span>,                 <span class="comment">// registersSize</span></span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x00</span>,                 <span class="comment">// insSize</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>,                 <span class="comment">// outsSize</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>,                 <span class="comment">// triesSize</span></span><br><span class="line">    <span class="number">0x6e</span>, <span class="number">0x77</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,     <span class="comment">// debugInfoOff</span></span><br><span class="line">    <span class="number">0x0d</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,     <span class="comment">// insnsSize</span></span><br><span class="line">    <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x06</span>,     <span class="comment">// insns[1]      </span></span><br><span class="line">    <span class="number">0x29</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,                     </span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,                     </span><br><span class="line">    <span class="number">0x39</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,                     </span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,                      </span><br><span class="line">    <span class="number">0x0b</span>, <span class="number">0x24</span>,                                 </span><br><span class="line">    <span class="number">0x0b</span>, <span class="number">0x34</span>,                                </span><br><span class="line">    <span class="number">0xf0</span>, <span class="number">0x04</span>                                 </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SwitchInterpret</span><span class="params">(JNIEnv *env, jobject obj, jint a, jint b)</span> </span>&#123;</span><br><span class="line">    DexCode *code = (DexCode *) dexcode;</span><br><span class="line">    <span class="type">int</span> registerssize = code-&gt;registersSize;   </span><br><span class="line">    <span class="type">int</span> *VREG = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span> *&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * registerssize));   <span class="comment">// 开辟一块连续内存用于虚拟寄存器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (VREG != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(VREG, <span class="number">0</span>, registerssize * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="type">int</span> inssize = code-&gt;insSize;</span><br><span class="line">        <span class="type">int</span> localsize = registerssize - inssize; <span class="comment">// 存储局部变量的虚拟寄存器 的个数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> firstParaIndex = localsize;          <span class="comment">// 首个存储参数的虚拟寄存器 的索引</span></span><br><span class="line">        VREG[firstParaIndex] = <span class="number">0</span>;                <span class="comment">// 开始存储参数</span></span><br><span class="line">        VREG[++firstParaIndex] = a;</span><br><span class="line">        VREG[++firstParaIndex] = b;</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *PC = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">char</span> *&gt;((<span class="type">unsigned</span> <span class="type">long</span>)dexcode + <span class="number">16</span>);  <span class="comment">// 指向字节码起始处</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始解释</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> opcode = *PC;</span><br><span class="line">            <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line">                <span class="keyword">case</span> ADD_INT: &#123;    </span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> src0 = *(PC + <span class="number">2</span>);</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> src1 = *(PC + <span class="number">3</span>);</span><br><span class="line">                    VREG[des] = VREG[src0] + VREG[src1];</span><br><span class="line">                    PC = PC + <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> SUB_INT: &#123;    </span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> src0 = *(PC + <span class="number">2</span>);</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> src1 = *(PC + <span class="number">3</span>);</span><br><span class="line">                    VREG[des] = VREG[src0] - VREG[src1];</span><br><span class="line">                    PC = PC + <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> MUL_INT: &#123;   </span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> src0 = *(PC + <span class="number">2</span>);</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> src1 = *(PC + <span class="number">3</span>);</span><br><span class="line">                    VREG[des] = VREG[src0] * VREG[src1];</span><br><span class="line">                    PC = PC + <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> DIV_INT: &#123;   </span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> src0 = *(PC + <span class="number">2</span>);</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> src1 = *(PC + <span class="number">3</span>);</span><br><span class="line">                    VREG[des] = VREG[src0] / VREG[src1];</span><br><span class="line">                    PC = PC + <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> ADD_INT_2ADDR: &#123;   </span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">                    <span class="type">int</span> src0 = des &amp; <span class="number">0x0F</span>;</span><br><span class="line">                    <span class="type">int</span> src1 = des &gt;&gt; <span class="number">4</span>;</span><br><span class="line">                    VREG[src0] = VREG[src0] + VREG[src1];</span><br><span class="line">                    PC = PC + <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> RETURN: &#123;    </span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> VREG[des];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Goto解释器"><a href="#Goto解释器" class="headerlink" title="Goto解释器"></a>Goto解释器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DexFile.h&quot;</span>    <span class="comment">// 来自 http://androidxref.com/9.0.0_r3/xref/dalvik/libdex/DexFile.h，定义了dex文件结构</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新映射操作码，实现加密</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Opcode</span> &#123;</span><br><span class="line">    ADD_INT = <span class="number">0x00</span>,         <span class="comment">// 0x90 -&gt; 0x00     </span></span><br><span class="line">    SUB_INT = <span class="number">0x01</span>,         <span class="comment">// 0x91 -&gt; 0x01</span></span><br><span class="line">    MUL_INT = <span class="number">0x02</span>,         <span class="comment">// 0x92 -&gt; 0x02</span></span><br><span class="line">    DIV_INT = <span class="number">0x03</span>,         <span class="comment">// 0x93 -&gt; 0x03</span></span><br><span class="line">    ADD_INT_2ADDR = <span class="number">0x04</span>,   <span class="comment">// 0xb0 -&gt; 0x04</span></span><br><span class="line">    RETURN = <span class="number">0x05</span>           <span class="comment">// 0x0f -&gt; 0x05</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> dexcode[] = &#123;</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x00</span>,                 <span class="comment">// registersSize</span></span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x00</span>,                 <span class="comment">// insSize</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>,                 <span class="comment">// outsSize</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>,                 <span class="comment">// triesSize</span></span><br><span class="line">    <span class="number">0x6e</span>, <span class="number">0x77</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,     <span class="comment">// debugInfoOff</span></span><br><span class="line">    <span class="number">0x0d</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,     <span class="comment">// insnsSize</span></span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x06</span>,     <span class="comment">// insns[1]      </span></span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,                     </span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,                     </span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,                     </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,                      </span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x24</span>,                                 </span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x34</span>,                                </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x04</span>                                 </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *PC = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">char</span> *&gt;((<span class="type">unsigned</span> <span class="type">long</span>)dexcode + <span class="number">16</span>);  <span class="comment">// 指向字节码起始处</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HANDLE_OPCODE(_op) op_##_op:            <span class="comment">// 定义操作码handler前的标签，例如 HANDLE_OPCODE(ADD_INT) 展开为 op_ADD_INT:</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> H(_op) &amp;&amp;op_##_op                       <span class="comment">// 生成标签的地址，例如 H(ADD_INT) 展开为 &amp;&amp;op_ADD_INT</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADJUST_PC(_offset)  (PC += (_offset))   <span class="comment">// 更新 PC</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FETCH(_offset)     (PC[(_offset)])      <span class="comment">// 读取下一操作码</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FINISH(_offset) &#123;                       \</span></span><br><span class="line"><span class="meta">    ADJUST_PC(_offset);                         \</span></span><br><span class="line"><span class="meta">    unsigned char inst = FETCH(0);              \</span></span><br><span class="line"><span class="meta">    goto *handlersTable[inst];                  \</span></span><br><span class="line"><span class="meta">&#125;                                               <span class="comment">// 跳转到下一个操作码的handler </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_HANDLERS_TABLE(_ops...) static const void* const handlersTable[] = &#123; _ops &#125;  <span class="comment">// 用于定义跳转表</span></span></span><br><span class="line">                                                </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GotoInterpret</span><span class="params">(JNIEnv *env, jobject obj, jint a, jint b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义跳转表</span></span><br><span class="line">    <span class="built_in">DEFINE_HANDLERS_TABLE</span>(</span><br><span class="line">        <span class="built_in">H</span>(ADD_INT),          </span><br><span class="line">        <span class="built_in">H</span>(SUB_INT),           </span><br><span class="line">        <span class="built_in">H</span>(MUL_INT),         </span><br><span class="line">        <span class="built_in">H</span>(DIV_INT),   </span><br><span class="line">        <span class="built_in">H</span>(ADD_INT_2ADDR),    </span><br><span class="line">        <span class="built_in">H</span>(RETURN)             </span><br><span class="line">    );  <span class="comment">// 要求操作码handler的标签地址 在其中的索引，与该操作码的值相同（实现传入操作码，映射得到标签地址）</span></span><br><span class="line"></span><br><span class="line">    DexCode *code = (DexCode *) dexcode;</span><br><span class="line">    <span class="type">int</span> registerssize = code-&gt;registersSize;</span><br><span class="line">    <span class="type">int</span> *VREG = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span> *&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * registerssize));   <span class="comment">// 开辟一块连续内存用于虚拟寄存器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (VREG != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(VREG, <span class="number">0</span>, registerssize * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="type">int</span> inssize = code-&gt;insSize;</span><br><span class="line">        <span class="type">int</span> localsize = registerssize - inssize; <span class="comment">// 存储局部变量的虚拟寄存器 的个数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> firstParaIndex = localsize;          <span class="comment">// 首个存储参数的虚拟寄存器 的索引</span></span><br><span class="line">        VREG[firstParaIndex] = <span class="number">0</span>;                <span class="comment">// 开始存储参数</span></span><br><span class="line">        VREG[++firstParaIndex] = a;</span><br><span class="line">        VREG[++firstParaIndex] = b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始解释</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> inst = <span class="built_in">FETCH</span>(<span class="number">0</span>);          <span class="comment">// 读取第一个操作码</span></span><br><span class="line">        <span class="keyword">goto</span> *handlersTable[inst];              <span class="comment">// 跳转到对应的handler</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">HANDLE_OPCODE</span>(ADD_INT) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> src0 = *(PC + <span class="number">2</span>);</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> src1 = *(PC + <span class="number">3</span>);</span><br><span class="line">            VREG[des] = VREG[src0] + VREG[src1];</span><br><span class="line">            <span class="built_in">FINISH</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">HANDLE_OPCODE</span>(SUB_INT) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> src0 = *(PC + <span class="number">2</span>);</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> src1 = *(PC + <span class="number">3</span>);</span><br><span class="line">            VREG[des] = VREG[src0] - VREG[src1];</span><br><span class="line">            <span class="built_in">FINISH</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">HANDLE_OPCODE</span>(MUL_INT) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> src0 = *(PC + <span class="number">2</span>);</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> src1 = *(PC + <span class="number">3</span>);</span><br><span class="line">            VREG[des] = VREG[src0] * VREG[src1];</span><br><span class="line">            <span class="built_in">FINISH</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">HANDLE_OPCODE</span>(DIV_INT) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> src0 = *(PC + <span class="number">2</span>);</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> src1 = *(PC + <span class="number">3</span>);</span><br><span class="line">            VREG[des] = VREG[src0] / VREG[src1];</span><br><span class="line">            <span class="built_in">FINISH</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">HANDLE_OPCODE</span>(ADD_INT_2ADDR) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> src0 = des &amp; <span class="number">0x0F</span>;</span><br><span class="line">            <span class="type">int</span> src1 = des &gt;&gt; <span class="number">4</span>;</span><br><span class="line">            VREG[src0] = VREG[src0] + VREG[src1];</span><br><span class="line">            <span class="built_in">FINISH</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">HANDLE_OPCODE</span>(RETURN) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> des = *(PC + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> VREG[des];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对抗"><a href="#对抗" class="headerlink" title="对抗"></a>对抗</h1><h2 id="拦截关键函数"><a href="#拦截关键函数" class="headerlink" title="拦截关键函数"></a>拦截关键函数</h2><ul><li><p>art::ArtDexFileLoader::OpenCommon</p></li><li><p>art::ClassLinker::LoadMethod</p></li><li><p>art::JNI::RegisterNatives</p></li></ul><p>打印每个类所有native方法的信息<br>包括名称、签名、地址、所属模块信息、在模块中偏移</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">find_natives</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">RegisterNatives</span>_addr = <span class="variable constant_">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; symbols.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            <span class="keyword">const</span> symbol = symbols[index];</span><br><span class="line">            <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span> &amp;&amp; symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title class_">RegisterNatives</span>_addr = symbol.<span class="property">address</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">RegisterNatives</span>_addr, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>();</span><br><span class="line">                <span class="keyword">var</span> class_name = env.<span class="title function_">getClassName</span>(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;class_name:&quot;</span>, class_name);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> method_count = args[<span class="number">3</span>].<span class="title function_">toInt32</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; method_count; index++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> method_name = args[<span class="number">2</span>].<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> * index).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; method_name:&quot;</span>, method_name);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> signature = args[<span class="number">2</span>].<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> * index).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; signature:&quot;</span>, signature);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> fnPtr = args[<span class="number">2</span>].<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> * index).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; fnPtr:&quot;</span>, fnPtr);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> modeule = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; modeule:&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(modeule));</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt; func_addr:&quot;</span>, fnPtr.<span class="title function_">sub</span>(modeule.<span class="property">base</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>具体见此项目 <a href="https://github.com/hluwa/frida-dexdump">frida-dexdump</a></p><h2 id="虚拟化运行"><a href="#虚拟化运行" class="headerlink" title="虚拟化运行"></a>虚拟化运行</h2><p>具体见此项目 <a href="https://github.com/CodingGay/BlackDex">BlackDex</a></p><h2 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h2><p>具体见此项目 <a href="https://github.com/hanbinglengyue/FART">FART</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>二代壳：方法抽取<br><a href="https://www.freebuf.com/articles/terminal/205079.html">DEX保护之指令抽取</a><br><a href="https://www.jianshu.com/p/ae66be381e6f">Android 一二三代壳加固原理分析</a><br><a href="https://www.cnblogs.com/luoyesiqiu/p/dpt.html">Android函数抽取壳的实现</a><br><a href="https://bbs.kanxue.com/thread-282460.htm">手搓函数抽取加固(上)</a></p></li><li><p>三代壳：指令转换<br><a href="https://github.com/amimo/dcc">dcc</a><br><a href="https://nemozqqz.github.io/2022/06/15/VMProtect-and-Android-DEX-VMP.html">VMProtect and Android DEX-VMP</a>   # VMP还原前后对比<br><a href="https://geneblue.github.io/2019/09/13/android/sec--android-dex-vmp">Android DEX-VMP 虚拟保护技术</a>              # Switch解释器简单实现<br><a href="https://www.cnblogs.com/theseventhson/p/14933920.html">android逆向奇技淫巧十二：dexVMP解释器原理及简易模拟实现</a>   # Switch解释器简单实现<br><a href="https://github.com/maoabc/nmmp">nmmp</a>                                                                         # Goto解释器具体实现</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 保护与对抗 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ChainFlag</title>
      <link href="/2024/11/04/2024-11-4%20ChainFlag/"/>
      <url>/2024/11/04/2024-11-4%20ChainFlag/</url>
      
        <content type="html"><![CDATA[<p>因为一开始是记录在本地Notepad上，本人较懒，故还未移植至博客。<br>这里暂时只放置 对各题目标签的总结</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code># opcodesEasyAssembly：| 字节码编写BoxGame：虚假逻辑、沙盒 | 字节码编写、意外事件触发EasySandbox：沙盒 | storage任意写、字节码编写（CREATE2）StArNDBOX：发送方校验（tx.origin）、沙盒 | 字节码编写（CALL）AcoraidaMonica：虚假逻辑 | 交易查询、字节码反编译、地址爆破、JOP、calldata构造、意外函数调用（DELEGATECALL）Re-Montagy：加密（魔改TEA）| 哈希碰撞Creativity：| 同地址部署、意外事件触发# storageHappy_DOuble_Eleven：发送方校验（extcodesize()）| 字节码反编译、地址爆破、意外函数调用（interface）、storage任意写、薅羊毛攻击、重入攻击cow：未初始化storage指针 | 地址爆破、整数溢出rise：未初始化storage指针 | 薅羊毛攻击roiscoin：发送方校验（tx.origin）、未初始化storage指针 | 地址爆破、storage任意写Bank：未初始化storage指针 | storage任意写、JOP# reentrancybabybank： | 地址爆破、storage任意读、重入攻击、整数溢出h4ck：| 重入攻击、整数溢出# cryptoEVMEnc：加密（TEA）EthEnc：加密（XTEA）HappyTree：Merkle证明# integer overflowbet：| 整数溢出hf：未初始化storage指针 | 整数溢出# delegatecallcounter strike：发送方校验（extcodesize()、tx.origin）| storage任意读、calldata构造、意外状态修改、意外函数调用（delegatecall()）SafeDelegatecall：| Returndata构造、JOP# bad randomnessEOSGame：伪随机ZeroLottery：伪随机 | 回滚攻击# airdrop huntingCoinFlip：| 薅羊毛攻击Fake3D：发送方校验（extcodesize()、tx.origin）、虚假逻辑 | 字节码反编译、地址爆破babybet：babybet：伪随机 | 薅羊毛攻击</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut 22-31</title>
      <link href="/2024/10/13/2024-10-13%20Ethernaut%2022-31/"/>
      <url>/2024/10/13/2024-10-13%20Ethernaut%2022-31/</url>
      
        <content type="html"><![CDATA[<p>因为一开始是记录在本地Notepad上，本人较懒，故还未移植至博客。<br>这里暂时只放置 对各题目标签的总结</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>22_Dex：DEX | 流动性池操纵23_Dex-Two：DEX | 流动性池操纵（自定义代币）24_Puzzle-Wallet：代理模式（合约升级）| 意外状态修改25_Motorbike：代理模式（合约升级、UUPS、ERC1967）| 意外状态修改（逻辑合约）26_DoubleEntryPoint：27_Good-Samaritan：| 意外函数调用（interface）28_Gatekeeper-Three：发送方校验（tx.origin）| storage任意读、回滚攻击29_Switch：| calldata构造30_HigherOrder：| calldata构造31_Stake：WETH</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EVM基础</title>
      <link href="/2024/10/12/2024-10-12%20EVM%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/10/12/2024-10-12%20EVM%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="栈式架构"><a href="#栈式架构" class="headerlink" title="栈式架构"></a>栈式架构</h1><p>EVM本质上是一个栈式虚拟机，这里简单介绍一下栈机</p><p>机制：<br><img src="/img/2024-10-12/4.png"></p><p>演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StackVirtualMachine</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack.append(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Stack underflow&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not enough operands for addition&quot;</span>)</span><br><span class="line">        b = <span class="variable language_">self</span>.pop()</span><br><span class="line">        a = <span class="variable language_">self</span>.pop()</span><br><span class="line">        <span class="variable language_">self</span>.push(a + b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not enough operands for subtraction&quot;</span>)</span><br><span class="line">        b = <span class="variable language_">self</span>.pop()</span><br><span class="line">        a = <span class="variable language_">self</span>.pop()</span><br><span class="line">        <span class="variable language_">self</span>.push(a - b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not enough operands for multiplication&quot;</span>)</span><br><span class="line">        b = <span class="variable language_">self</span>.pop()</span><br><span class="line">        a = <span class="variable language_">self</span>.pop()</span><br><span class="line">        <span class="variable language_">self</span>.push(a * b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, instructions</span>):</span><br><span class="line">        <span class="keyword">for</span> instruction <span class="keyword">in</span> instructions:</span><br><span class="line">            op, *args = instruction</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.push(*args)</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.add()</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.sub()</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.mul()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown instruction: <span class="subst">&#123;op&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dump_stack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Stack: <span class="subst">&#123;self.stack&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vm = StackVirtualMachine()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一些指令来计算 A * (B - C) + (D + E)</span></span><br><span class="line">instructions = [</span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">5</span>),   <span class="comment"># A = 5</span></span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">3</span>),   <span class="comment"># B = 3</span></span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">2</span>),   <span class="comment"># C = 2</span></span><br><span class="line">    (<span class="string">&#x27;sub&#x27;</span>,),      <span class="comment"># B - C</span></span><br><span class="line">    (<span class="string">&#x27;mul&#x27;</span>,),      <span class="comment"># A * (B - C)</span></span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">4</span>),   <span class="comment"># D = 4</span></span><br><span class="line">    (<span class="string">&#x27;push&#x27;</span>, <span class="number">1</span>),   <span class="comment"># E = 1</span></span><br><span class="line">    (<span class="string">&#x27;add&#x27;</span>,),      <span class="comment"># D + E</span></span><br><span class="line">    (<span class="string">&#x27;add&#x27;</span>,)       <span class="comment"># A * (B - C) + (D + E)</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行虚拟机</span></span><br><span class="line">vm.run(instructions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印栈状态</span></span><br><span class="line">vm.dump_stack()</span><br></pre></td></tr></table></figure><h1 id="数据存放位置"><a href="#数据存放位置" class="headerlink" title="数据存放位置"></a>数据存放位置</h1><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><p>数据布局：</p><ol><li>mapping<br><img src="/img/2024-10-12/1.jpg"></li><li>dynamic array<br><img src="/img/2024-10-12/2.jpg"></li><li>struct<br><img src="/img/2024-10-12/3.jpg"></li></ol><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>数据布局：<br>具体见此<a href="https://learnblockchain.cn/docs/solidity/internals/layout_in_memory.html">文章</a></p><p>注：Memory中前0x7f个字节被保留，因此使用 mstore()时，offset至少为0x80</p><h2 id="Calldata-Returndata"><a href="#Calldata-Returndata" class="headerlink" title="Calldata&#x2F;Returndata"></a>Calldata&#x2F;Returndata</h2><h3 id="Calldata"><a href="#Calldata" class="headerlink" title="Calldata"></a>Calldata</h3><p>数据布局&#x2F;ABI编码规范：</p><ol><li>函数选择器：4字节</li><li>静态类型：32字节（data）<br>动态类型(string, bytes, dynamic array, struct)：32+32+n*32字节（offset+length+data）</li></ol><p>具体见此<a href="https://hitcxy.com/2021/argument-encoding">文章</a></p><h3 id="Returndata"><a href="#Returndata" class="headerlink" title="Returndata"></a>Returndata</h3><p>数据布局：</p><ol><li>错误返回时：错误选择器+ABI编码数据（被try-catch视作异常捕获）</li><li>正常返回时：ABI编码数据</li></ol><p>运行时错误类型 与对应签名、选择器：<br>具体见此<a href="https://learnblockchain.cn/article/6251">文章</a></p><p>注：仅代表最近一次外部函数调用的Returndata</p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>合约字节码 构成：</p><ol><li>创建字节码&#x2F;Creation Code）：constructor逻辑 + codecopy()将运行时字节码存入Memory，return()返回该处数据</li><li>运行时字节码&#x2F;Runtime Code）：除 constructor以外的逻辑</li></ol><p>具体见此<a href="https://learnblockchain.cn/question/3052">文章</a></p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="数据移动"><a href="#数据移动" class="headerlink" title="数据移动"></a>数据移动</h2><p>&#x2F;&#x2F; store<br>sstore(offset, value)：…-&gt;Storage<br>mstore(offset, value)：…-&gt;Memory</p><p>&#x2F;&#x2F; load       <br>sload(offset)：Storage-&gt;Stack<br>mload(offset)：Memory-&gt;Stack<br>calldataload(offset)：Calldata-&gt;Stack</p><p>&#x2F;&#x2F; copy<br>calldatacopy(mem_offset, offset, length)：Calldata-&gt;Memory<br>returndatacopy(mem_offset, offset, length)： Returndata-&gt;Memory<br>codecopy(mem_offset, offset, length)：Code(Creation+Runtime)-&gt;Memory<br>extcodecopy(addr, mem_offset, offset, length)：Code(Runtime)-&gt;Memory</p><p>&#x2F;&#x2F; return<br>return&#x2F;revert(mem_offset, length)：Memory-&gt;Returndata</p><h2 id="合约创建"><a href="#合约创建" class="headerlink" title="合约创建"></a>合约创建</h2><p>create(value, offset, length)：Memory-&gt;…<br>注：<br>新合约地址基于创建者address、交易nonce；<br>address &#x3D; keccak256(rlp([sender_address,sender_nonce]))[12:]）</p><p>create2(value, offset, length, salt)：Memory-&gt;…<br>注：<br>新合约地址基于创建者address、盐值、字节码；<br>address &#x3D; keccak256( 0xff + sender_address + salt + keccak256(init_code))[12:]</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>jump(offset)：…-&gt;Code(Creation+Runtime)</p><h1 id="合约部署原理"><a href="#合约部署原理" class="headerlink" title="合约部署原理"></a>合约部署原理</h1><ol><li>账户 编译合约，生成字节码</li><li>账户 发送交易，其中to字段为空，data字段为 “字节码+constructor参数”</li><li>矿工节点 接收交易</li><li>运行其中的EVM 先基于from,nonce字段 生成新合约地址；<br>然后将data字段存入 Code，执行创建字节码，返回运行时字节码；<br>最后将两者相关联，存入区块链</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://learnblockchain.cn/article/4864">https://learnblockchain.cn/article/4864</a><br><a href="https://learnblockchain.cn/docs/solidity/internals/layout_in_memory.html">https://learnblockchain.cn/docs/solidity/internals/layout_in_memory.html</a><br><a href="https://hitcxy.com/2021/argument-encoding">https://hitcxy.com/2021/argument-encoding</a><br><a href="https://learnblockchain.cn/article/6251">https://learnblockchain.cn/article/6251</a><br><a href="https://learnblockchain.cn/question/3052">https://learnblockchain.cn/question/3052</a><br><a href="https://learnblockchain.cn/docs/foundry/i18n/zh/tutorials/create2-tutorial.html?search=">https://learnblockchain.cn/docs/foundry/i18n/zh/tutorials/create2-tutorial.html?search=</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ARM64指令与调用约定</title>
      <link href="/2024/10/05/2024-10-5%20ARM64%E6%8C%87%E4%BB%A4%E4%B8%8E%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
      <url>/2024/10/05/2024-10-5%20ARM64%E6%8C%87%E4%BB%A4%E4%B8%8E%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>长期接触的都是x86指令，对于arm指令，一直以来都是处于看得懂又看不懂的 模棱两可的状态<br>即使遇到某个看不懂的指令时可以现查，但很影响分析的效率，而且看完之后记忆又会回归于模糊<br>因此，在此系统地记录那些自己含糊不清过的arm指令，算是一网打尽吧<br>文章会根据后续的学习进度，持续追加新内容</p><p>注：</p><ol><li>不额外记录该指令 操作各类型数据时 的变形指令。比如中间加 U(Unscaled)；最后加 L(Long), B(Byte)</li></ol><h1 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h1><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><ul><li><p>B（Branch）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B .+<span class="number">8</span>  <span class="comment">// 跳转到当前指令地址 + 8 的位置</span></span><br></pre></td></tr></table></figure></li><li><p>BL（Branch with Link） </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BL my_function  <span class="comment">// 调用 my_function，并将返回地址（下一条指令的地址）保存到 X30</span></span><br></pre></td></tr></table></figure></li><li><p>BR（Branch to Register）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BR X0  <span class="comment">// 跳转到 X0 中存储的地址</span></span><br></pre></td></tr></table></figure></li><li><p>BLR（Branch with Link to Register）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BLR X0  <span class="comment">// 跳转到 X0 中存储的地址，并将返回地址（下一条指令的地址）保存到 X30</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><ul><li>RET（Return）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RET   <span class="comment">// 将 PC 设置为 X30 中的值（等同于 MOV PC, X30）</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul><li><p>CSEL（Conditional Select）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMP X6, X7    </span><br><span class="line">CSEL X8, X9, X10, EQ <span class="comment">// 如果 EQ（相等）条件为真，X8 = X9；否则 X8 = X10</span></span><br></pre></td></tr></table></figure></li><li><p>CSET（Conditional Set）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMP X2, X3      </span><br><span class="line">CSET X4, NE     <span class="comment">// 如果 NE（不相等）条件为真，X4 = 1；否则 X4 = 0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h2><h3 id="A（伪指令）"><a href="#A（伪指令）" class="headerlink" title="A（伪指令）"></a>A（伪指令）</h3><ul><li><p>ADR（Address Load）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADR R0, my_function  <span class="comment">// 将 my_function 的地址加载到 R0</span></span><br></pre></td></tr></table></figure></li><li><p>ADRP（Address of Page）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADRP X0, my_data       <span class="comment">// 将 my_data 所在页的基地址加载到 X0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><ul><li><p>LDR（Load Register）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LDR X0, [X1, W2, UXTW #<span class="number">3</span>]       <span class="comment">// 从 X1 + (UnsignedExtend(W2) &lt;&lt; 3) 的内存地址加载数据到 X0</span></span><br><span class="line">                                <span class="comment">// 通常用于基于索引的 数组元素读取</span></span><br></pre></td></tr></table></figure></li><li><p>LDP（Load Pair of Registers）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LDP X29, X30, [SP], #<span class="number">48</span>     <span class="comment">// 分别从 SP 和 SP + 8 的内存地址加载数据到 X29 和 X30，然后更新 SP 的值</span></span><br><span class="line">                            <span class="comment">// 函数调用过程中，被调用方在结尾用此方式恢复 FP 和 LR 的值，并释放其栈空间</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="S"><a href="#S" class="headerlink" title="S"></a>S</h3><ul><li><p>STR（Store Register）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STR X0, [X1, X2, LSL #<span class="number">2</span>]        <span class="comment">// 将 X0 的值存储到 X1 + (X2 &lt;&lt; 2) 的内存地址</span></span><br><span class="line">                                <span class="comment">// 通常用于基于索引的 数组元素存储</span></span><br></pre></td></tr></table></figure></li><li><p>STP（Store Pair of Registers）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STP X29, X30, [SP, #-<span class="number">48</span>]!    <span class="comment">// 分别将 X29 和 X30 的值存储到 SP - 48 和 X2 - 48 + 8 的内存地址，然后更新 SP 的值</span></span><br><span class="line">                             <span class="comment">// 函数调用过程中，被调用方在开头用此方式保存 FP 和 LR 的值，并一次性开辟其栈帧</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><ul><li>MRS（Move to Register from System register）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MRS X23, #<span class="number">3</span>, c13, c0, #<span class="number">2</span>    <span class="comment">// 将系统寄存器 TPIDR_EL0（由 op1=3, CRn=c13, CRm=c0, op2=2 指定）的值读取到通用寄存器 X23</span></span><br><span class="line">                            <span class="comment">// IDA伪代码中表现为 _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2))</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h1><h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">function2</span><span class="params">(<span class="type">int</span> c, <span class="type">int</span> d)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = c + d;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">function1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = a - b;</span><br><span class="line">    ret = function2(a, ret);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">3</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = function1(i, j);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000000007b0 &lt;main&gt;:</span><br><span class="line">main():</span><br><span class="line"> 7b0:a9be7bfd stpx29, x30, [sp, #-<span class="number">32</span>]!   <span class="comment">// 保存caller的FP和LR，同时开辟自己的栈空间</span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7b4:910003fd movx29, sp     <span class="comment">// 更新FP</span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7b8:<span class="number">52800060</span> movw0, #<span class="number">0x3</span>    <span class="comment">// 为局部变量赋值  </span></span><br><span class="line">7bc:b9001fe0 strw0, [sp, #<span class="number">28</span>]</span><br><span class="line">7c0:<span class="number">52800020</span> movw0, #<span class="number">0x1</span>                  </span><br><span class="line">7c4:b9001be0 strw0, [sp, #<span class="number">24</span>]</span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7c8:b9401be1 ldrw1, [sp, #<span class="number">24</span>]   <span class="comment">// 将局部变量的值存入寄存器作为传参（前八个参数分别保存在 X0-X7 ，剩下参数从右往左依次入栈）</span></span><br><span class="line">7cc:b9401fe0 ldrw0, [sp, #<span class="number">28</span>]</span><br><span class="line">7d0:97ffffe9 bl<span class="number">774</span> &lt;function1&gt; <span class="comment">// 调用function1</span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/4.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7d4:b90017e0 strw0, [sp, #<span class="number">20</span>]   <span class="comment">// 将function1返回值（返回值存放在 X0）赋值给局部变量</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7d8:<span class="number">52800000</span> movw0, #<span class="number">0x0</span>    <span class="comment">// 准备返回值                 </span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/6.png"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7dc:a8c27bfd ldpx29, x30, [sp], #<span class="number">32</span> <span class="comment">// 从栈上恢复FP和LR寄存器并释放栈空间，最后返回</span></span><br><span class="line"><span class="number">7e0</span>:d65f03c0 ret</span><br></pre></td></tr></table></figure><h3 id="function1"><a href="#function1" class="headerlink" title="function1"></a>function1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000000000000774</span> &lt;function1&gt;:</span><br><span class="line">function1():</span><br><span class="line"> <span class="number">774</span>:a9bd7bfd stpx29, x30, [sp, #-<span class="number">48</span>]!   <span class="comment">// 保存caller的FP和LR，同时开辟自己的栈空间</span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/7.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">778</span>:910003fd movx29, sp     <span class="comment">// 更新FP</span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/8.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">77c:b9001fe0 strw0, [sp, #<span class="number">28</span>]   <span class="comment">// 保存传参的值</span></span><br><span class="line"><span class="number">780</span>:b9001be1 strw1, [sp, #<span class="number">24</span>]</span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">784</span>:b9401fe1 ldrw1, [sp, #<span class="number">28</span>]   <span class="comment">// 进行运算，并将结果赋值给局部变量</span></span><br><span class="line"><span class="number">788</span>:b9401be0 ldrw0, [sp, #<span class="number">24</span>]</span><br><span class="line">78c:4b000020 subw0, w1, w0</span><br><span class="line"><span class="number">790</span>:b9002fe0 strw0, [sp, #<span class="number">44</span>]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">794</span>:b9402fe1 ldrw1, [sp, #<span class="number">44</span>]   <span class="comment">// 将局部变量的值存入寄存器作为传参</span></span><br><span class="line"><span class="number">798</span>:b9401fe0 ldrw0, [sp, #<span class="number">28</span>]</span><br><span class="line">79c:97ffffec bl74c &lt;function2&gt; <span class="comment">// 调用function2</span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/10.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7a0:b9002fe0 strw0, [sp, #<span class="number">44</span>]   <span class="comment">// 将function2返回值赋值给局部变量</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7a4:b9402fe0 ldrw0, [sp, #<span class="number">44</span>]   <span class="comment">// 准备返回值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7a8:a8c37bfd ldpx29, x30, [sp], #<span class="number">48</span> <span class="comment">// 从栈上恢复FP和LR寄存器并释放栈空间，最后返回</span></span><br><span class="line">7ac:d65f03c0 ret</span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/11.png"></p><h3 id="function2"><a href="#function2" class="headerlink" title="function2"></a>function2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">000000000000074c &lt;function2&gt;:</span><br><span class="line">function2():</span><br><span class="line"> 74c:d10083ff subsp, sp, #<span class="number">0x20</span>   <span class="comment">// 开辟自己的栈空间</span></span><br><span class="line">                                        <span class="comment">// 作为叶子函数没有callee，接下来不会被修改FP和LR寄存器，因此无需保存其值</span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/12.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">750</span>:b9000fe0 strw0, [sp, #<span class="number">12</span>]   <span class="comment">// 保存传参的值</span></span><br><span class="line"><span class="number">754</span>:b9000be1 strw1, [sp, #<span class="number">8</span>]</span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/13.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">758</span>:b9400fe1 ldrw1, [sp, #<span class="number">12</span>]   <span class="comment">// 进行运算，并将结果赋值给局部变量</span></span><br><span class="line">75c:b9400be0 ldrw0, [sp, #<span class="number">8</span>]</span><br><span class="line"><span class="number">760</span>:0b000020 addw0, w1, w0</span><br><span class="line"><span class="number">764</span>:b9001fe0 strw0, [sp, #<span class="number">28</span>]</span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/14.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">768</span>:b9401fe0 ldrw0, [sp, #<span class="number">28</span>]   <span class="comment">// 准备返回值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">76c:910083ff addsp, sp, #<span class="number">0x20</span>   <span class="comment">// 从栈上恢复FP和LR寄存器并释放栈空间，最后返回</span></span><br><span class="line"><span class="number">770</span>:d65f03c0 ret</span><br></pre></td></tr></table></figure><p><img src="/img/2024-10-5/15.png"></p>]]></content>
      
      
      <categories>
          
          <category> 硬核知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见ERC标准</title>
      <link href="/2024/10/01/2024-10-1%20%E5%B8%B8%E8%A7%81ERC%E6%A0%87%E5%87%86/"/>
      <url>/2024/10/01/2024-10-1%20%E5%B8%B8%E8%A7%81ERC%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<h1 id="ERC-20"><a href="#ERC-20" class="headerlink" title="ERC-20"></a>ERC-20</h1><p>同质化代币</p><p>机制：<br>继承后，可初始化某种代币，并成为此代币的管理合约；<br>其他合约想引入此代币，只需引入上述管理合约的实例</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">MyERC20</span> is <span class="title class_">Context</span>, <span class="title class_">IERC20</span> &#123;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) private _balances;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256)) private _allowances;</span><br><span class="line"></span><br><span class="line">    uint256 private _totalSupply;</span><br><span class="line">    string private _name;</span><br><span class="line">    string private _symbol;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 构造函数，初始化代币名称、符号和总供应量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory name_, string memory symbol_</span>) &#123;</span><br><span class="line">        _name = name_;</span><br><span class="line">        _symbol = symbol_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 查看账户余额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address account</span>) public view virtual override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> _balances[account];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 返回当前的总供应量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">totalSupply</span>(<span class="params"></span>) public view virtual override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> _totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 铸造新的代币并分配给指定账户。</span></span><br><span class="line"><span class="comment">     * 注意：此函数应由合约所有者或其他授权实体调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_mint</span>(<span class="params">address account, uint256 amount</span>) internal virtual &#123;</span><br><span class="line">        <span class="built_in">require</span>(account != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: mint to the zero address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_beforeTokenTransfer</span>(<span class="title function_">address</span>(<span class="number">0</span>), account, amount);</span><br><span class="line"></span><br><span class="line">        _totalSupply += amount;</span><br><span class="line">        _balances[account] += amount;</span><br><span class="line">        emit <span class="title class_">Transfer</span>(<span class="title function_">address</span>(<span class="number">0</span>), account, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 批准spender代表msg.sender转移一定数量的代币。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint256 amount</span>) public virtual override <span class="title function_">returns</span> (bool) &#123;</span><br><span class="line">        <span class="title function_">_approve</span>(<span class="title function_">_msgSender</span>(), spender, amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 设置或重置允许spender从owner那里转移的代币数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_approve</span>(<span class="params">address owner, address spender, uint256 amount</span>) internal virtual &#123;</span><br><span class="line">        <span class="built_in">require</span>(owner != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: approve from the zero address&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(spender != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: approve to the zero address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _allowances[owner][spender] = amount;</span><br><span class="line">        emit <span class="title class_">Approval</span>(owner, spender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 根据之前设置的批准额度，从一个地址转账到另一个地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address sender,</span></span><br><span class="line"><span class="params">        address recipient,</span></span><br><span class="line"><span class="params">        uint256 amount</span></span><br><span class="line"><span class="params">    </span>) public virtual override <span class="title function_">returns</span> (bool) &#123;</span><br><span class="line">        uint256 currentAllowance = _allowances[sender][<span class="title function_">_msgSender</span>()];</span><br><span class="line">        <span class="built_in">require</span>(currentAllowance &gt;= amount, <span class="string">&quot;ERC20: transfer amount exceeds allowance&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_transfer</span>(sender, recipient, amount);</span><br><span class="line">        <span class="title function_">_approve</span>(sender, <span class="title function_">_msgSender</span>(), currentAllowance - amount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 实际执行代币转移的内部函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_transfer</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address sender,</span></span><br><span class="line"><span class="params">        address recipient,</span></span><br><span class="line"><span class="params">        uint256 amount</span></span><br><span class="line"><span class="params">    </span>) internal virtual &#123;</span><br><span class="line">        <span class="built_in">require</span>(sender != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: transfer from the zero address&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(recipient != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: transfer to the zero address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 senderBalance = _balances[sender];</span><br><span class="line">        <span class="built_in">require</span>(senderBalance &gt;= amount, <span class="string">&quot;ERC20: transfer amount exceeds balance&quot;</span>);</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            _balances[sender] = senderBalance - amount;</span><br><span class="line">        &#125;</span><br><span class="line">        _balances[recipient] += amount;</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Transfer</span>(sender, recipient, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 在每次代币转移前调用的钩子函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_beforeTokenTransfer</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 amount</span></span><br><span class="line"><span class="params">    </span>) internal virtual &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-223"><a href="#ERC-223" class="headerlink" title="ERC-223"></a>ERC-223</h1><p>同质化代币<br>概述：<br>与ERC20相互兼容，安全性有所增加</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">ERC223</span> &#123;</span><br><span class="line">    string public name;</span><br><span class="line">    string public symbol;</span><br><span class="line">    uint8 public decimals;</span><br><span class="line">    uint256 private _totalSupply;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) private _balances;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Transfer</span>(address indexed <span class="keyword">from</span>, address indexed to, uint256 value, bytes data);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _name, string memory _symbol, uint8 _decimals, uint256 initialSupply</span>) &#123;</span><br><span class="line">        name = _name;</span><br><span class="line">        symbol = _symbol;</span><br><span class="line">        decimals = _decimals;</span><br><span class="line">        _totalSupply = initialSupply * (<span class="number">10</span> ** <span class="title function_">uint256</span>(decimals));</span><br><span class="line">        _balances[msg.<span class="property">sender</span>] = _totalSupply;</span><br><span class="line">        emit <span class="title class_">Transfer</span>(<span class="title function_">address</span>(<span class="number">0</span>), msg.<span class="property">sender</span>, _totalSupply, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> <span class="variable">IERC223Recipient</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 接收 ERC-223 代币的合约需要实现此接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">IERC223Recipient</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 当合约接收到 ERC-223 代币时调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tokenFallback</span>(<span class="params">address <span class="keyword">from</span>, uint256 value, bytes calldata data</span>) external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-721"><a href="#ERC-721" class="headerlink" title="ERC-721"></a>ERC-721</h1><p>非同质化代币&#x2F;NFT</p><p>机制：<br>允许在一个合约中创建和管理多个 NFT，每个NFT可以代表不同的资产。完全不同的物品，比如一个房产和一个艺术品，可以放在同一个ERC721合约中。<br>每个NFT都有一个唯一的 tokenId，这个tokenId可以用来区分不同的资产。<br>每个NFT可以通过其 tokenURI 指向不同的元数据文件，这些元数据文件可以包含不同的信息。例如，房产的元数据文件可以包含地址、面积等信息，而艺术品的元数据文件可以包含作者、创作年份等信息。</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">MyERC721</span> is <span class="title class_">ERC721</span>, <span class="title class_">ERC721URIStorage</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化合约并设置名称和符号。</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _name, string memory _symbol</span>) <span class="title class_">ERC721</span>(_name, _symbol) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 查询指定地址持有的NFT数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address owner</span>) public view virtual override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="built_in">require</span>(owner != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC721: 查询零地址的余额&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">balanceOf</span>(owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 获取给定token ID对应的持有者地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ownerOf</span>(<span class="params">uint256 tokenId</span>) public view virtual override <span class="title function_">returns</span> (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">ownerOf</span>(tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 安全铸造一个新的NFT，并确保接收方可以处理该NFT（如果接收方是合约）。</span></span><br><span class="line"><span class="comment">     * 只有合约所有者能调用此方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">safeMint</span>(<span class="params">address to, uint256 tokenId</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_safeMint</span>(to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 铸造一个新的NFT。只有合约所有者能调用此方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">address to, uint256 tokenId</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_mint</span>(to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 设置或更新特定NFT的元数据URI。仅限合约所有者调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setTokenURI</span>(<span class="params">uint256 tokenId, string memory _tokenURI</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_setTokenURI</span>(tokenId, _tokenURI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 将NFT从一个地址转移到另一个地址。调用者必须是NFT的所有者或被授权者。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 tokenId</span></span><br><span class="line"><span class="params">    </span>) public virtual override &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">_isApprovedOrOwner</span>(<span class="title function_">_msgSender</span>(), tokenId), <span class="string">&quot;ERC721: 转移发起人不是所有者也不是授权方&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_transfer</span>(<span class="keyword">from</span>, to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 安全地转移NFT，并检查接收方是否可以安全接收（如果接收方是合约）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">safeTransferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 tokenId</span></span><br><span class="line"><span class="params">    </span>) public virtual override &#123;</span><br><span class="line">        <span class="title function_">safeTransferFrom</span>(<span class="keyword">from</span>, to, tokenId, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 与`safeTransferFrom`相同，但允许附加数据在转移时传递给接收方。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">safeTransferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 tokenId,</span></span><br><span class="line"><span class="params">        bytes memory _data</span></span><br><span class="line"><span class="params">    </span>) public virtual override &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">_isApprovedOrOwner</span>(<span class="title function_">_msgSender</span>(), tokenId), <span class="string">&quot;ERC721: 转移发起人不是所有者也不是授权方&quot;</span>);</span><br><span class="line">        <span class="title function_">_safeTransfer</span>(<span class="keyword">from</span>, to, tokenId, _data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 销毁指定ID的NFT，并同时删除其关联的元数据URI。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_burn</span>(<span class="params">uint256 tokenId</span>) internal virtual <span class="title function_">override</span>(<span class="params">ERC721, ERC721URIStorage</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">_burn</span>(tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 获取指定NFT的元数据URI。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tokenURI</span>(<span class="params">uint256 tokenId</span>) public view virtual <span class="title function_">override</span>(<span class="title class_">ERC721</span>, <span class="title class_">ERC721URIStorage</span>) <span class="title function_">returns</span> (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">tokenURI</span>(tokenId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-1967"><a href="#ERC-1967" class="headerlink" title="ERC-1967"></a>ERC-1967</h1><p>通用可升级代理&#x2F;UUPS</p><p>机制：<br>继承后，逻辑合约的地址 一律存储在 slot[_IMPLEMENTATION_SLOT]<br>（ _IMPLEMENTATION_SLOT &#x3D; bytes32(uint256(keccak256(‘eip1967.proxy.implementation’))-1) ）</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">MyUUPSProxy</span> is <span class="title class_">Initializable</span>, <span class="title class_">UUPSUpgradeable</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="comment">// 实现地址的存储槽。</span></span><br><span class="line">    bytes32 internal constant _IMPLEMENTATION_SLOT = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;eip1967.proxy.implementation&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @custom:oz-upgrades-unsafe-allow constructor</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) initializer &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) initializer public &#123;</span><br><span class="line">        <span class="title function_">__Ownable_init</span>();</span><br><span class="line">        <span class="title function_">__UUPSUpgradeable_init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 升级代理的实现。</span></span><br><span class="line"><span class="comment">     * 只有合约所有者可以调用此函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address newImplementation</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_upgradeToAndCall</span>(newImplementation, <span class="title function_">bytes</span>(<span class="string">&quot;&quot;</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 内部函数，用于设置实现地址。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_authorizeUpgrade</span>(<span class="params">address</span>) internal override onlyOwner &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-3156"><a href="#ERC-3156" class="headerlink" title="ERC-3156"></a>ERC-3156</h1><p>闪电贷&#x2F;FlashLoan</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> <span class="variable">IERC3156FlashLender</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 闪电贷放款人接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">IERC3156FlashLender</span> is <span class="title class_">IERC165</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 查询可用于闪电贷的最大货币数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">maxFlashLoan</span>(<span class="params">address token</span>) external view <span class="title function_">returns</span> (uint256);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 获取给定贷款的费用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">flashFee</span>(<span class="params">address token, uint256 amount</span>) external view <span class="title function_">returns</span> (uint256);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 发起一笔闪电贷，允许在同一个交易中借款并在交易结束前还款。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">flashLoan</span>(<span class="params"></span></span><br><span class="line"><span class="params">        IERC3156FlashBorrower receiver,</span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint256 amount,</span></span><br><span class="line"><span class="params">        bytes calldata data</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">returns</span> (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> <span class="variable">IERC3156FlashBorrower</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 支持闪电贷的任何合约的接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">IERC3156FlashBorrower</span> is <span class="title class_">IERC165</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 接收闪电贷，并处理回调逻辑。</span></span><br><span class="line"><span class="comment">     * 实现此方法的合约必须返回特定的哈希值以确认操作成功。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onFlashLoan</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address initiator,</span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint256 amount,</span></span><br><span class="line"><span class="params">        uint256 fee,</span></span><br><span class="line"><span class="params">        bytes calldata data</span></span><br><span class="line"><span class="params">    </span>) external <span class="title function_">returns</span> (bytes32);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ERC-4626"><a href="#ERC-4626" class="headerlink" title="ERC-4626"></a>ERC-4626</h1><p>代币化金库&#x2F;Vault</p><p>机制：<br>继承后，可接收 用户的ERC20代币（资产&#x2F;assets），存入 对应ERC20代币合约中；<br>同时铸造 自身管理的ERC20代币（份额&#x2F;shares）</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">contract <span class="title class_">SimpleVault</span> is <span class="title class_">IERC4626</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="title class_">SafeERC20</span> <span class="keyword">for</span> <span class="title class_">IERC20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">IERC20</span> public immutable asset;</span><br><span class="line">    uint256 private _totalSupply;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) private _balances;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">IERC20 _asset</span>) &#123;</span><br><span class="line">        asset = _asset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 返回由本合约“管理”的基础资产的总数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">totalAssets</span>(<span class="params"></span>) public view override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> asset.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 将一定数量的基础资产转换为份额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">convertToShares</span>(<span class="params">uint256 assets</span>) public view override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_totalSupply == <span class="number">0</span> || <span class="title function_">totalAssets</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> assets;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> assets * _totalSupply / <span class="title function_">totalAssets</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 将一定数量的份额转换为基础资产。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">convertToAssets</span>(<span class="params">uint256 shares</span>) public view override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_totalSupply == <span class="number">0</span> || <span class="title function_">totalAssets</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> shares;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shares * <span class="title function_">totalAssets</span>() / _totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 将资产存入金库，并铸造份额给接收者。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params">uint256 assets, address receiver</span>) public override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="built_in">require</span>(assets &lt;= <span class="title function_">maxDeposit</span>(receiver), <span class="string">&quot;SimpleVault: 存款超过最大值&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 shares = <span class="title function_">previewDeposit</span>(assets);</span><br><span class="line">        <span class="title function_">_mint</span>(receiver, shares);</span><br><span class="line">        asset.<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), assets);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Deposit</span>(msg.<span class="property">sender</span>, receiver, assets, shares);</span><br><span class="line">        <span class="keyword">return</span> shares;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 从金库中提取资产并从所有者账户中销毁份额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint256 assets, address receiver, address owner</span>) public override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="built_in">require</span>(assets &lt;= <span class="title function_">maxWithdraw</span>(owner), <span class="string">&quot;SimpleVault: 提取超过最大值&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 shares = <span class="title function_">previewWithdraw</span>(assets);</span><br><span class="line">        <span class="title function_">_burn</span>(owner, shares);</span><br><span class="line">        asset.<span class="title function_">safeTransfer</span>(receiver, assets);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Withdraw</span>(msg.<span class="property">sender</span>, receiver, owner, assets, shares);</span><br><span class="line">        <span class="keyword">return</span> shares;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 铸造份额给接收者以换取一定数量的资产。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">uint256 shares, address receiver</span>) public override <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="built_in">require</span>(shares &lt;= <span class="title function_">maxMint</span>(receiver), <span class="string">&quot;SimpleVault: 铸造超过最大值&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uint256 assets = <span class="title function_">previewMint</span>(shares);</span><br><span class="line">        <span class="title function_">_mint</span>(receiver, shares);</span><br><span class="line">        asset.<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), assets);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Deposit</span>(msg.<span class="property">sender</span>, receiver, assets, shares);</span><br><span class="line">        <span class="keyword">return</span> assets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 内部函数用于铸造份额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_mint</span>(<span class="params">address account, uint256 amount</span>) internal &#123;</span><br><span class="line">        _totalSupply += amount;</span><br><span class="line">        _balances[account] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 返回某个账户持有的份额余额。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address account</span>) public view <span class="title function_">returns</span> (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> _balances[account];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut 01-21</title>
      <link href="/2024/09/13/2024-9-13%20Ethernaut%2001-21/"/>
      <url>/2024/09/13/2024-9-13%20Ethernaut%2001-21/</url>
      
        <content type="html"><![CDATA[<p>因为一开始是记录在本地Notepad上，本人较懒，故还未移植至博客。<br>这里暂时只放置 对各题目标签的总结</p><h1 id="题目标签"><a href="#题目标签" class="headerlink" title="题目标签"></a>题目标签</h1><pre><code>02_Fallout：constructor命名04_Telephone：发送方校验（tx.origin）05_Token：| 整数溢出07_Force：| 意外以太发送09_King：| 回滚攻击10_Re-entrancy：| 重入攻击11_Elevator：| 意外函数调用（interface）12_Privacy：| storage任意读13_Gatekeeper-One：发送方校验（tx.origin）14_Gatekeeper-Two：发送方校验（tx.origin、extcodesize()）15_Naught-Coin：时间锁16_Preservation：| 意外状态修改17_Recovery：返回值未接收 | 交易查询18_MagicNumber：| 字节码编写19_Alien-Codex：| storage任意写20_Denial：| DoS攻击（receive()耗尽gas）21_Shop：| 意外函数调用（interface）</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯游戏安全 2024 PC 决赛</title>
      <link href="/2024/09/09/2024-9-9%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20PC%20%E5%86%B3%E8%B5%9B/"/>
      <url>/2024/09/09/2024-9-9%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20PC%20%E5%86%B3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>决赛的题真的比初赛要复杂不少，踩了更多的坑，也遇到了更多难以解决的问题<br>鉴于本人当前能力有限，再加上课内学业原因，只搞到一半多的位置就鸽了<br>但还是想把整个过程记录下来，希望未来回过头来看时，知识体系更完善的自己 能够有新的思路</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/2024-9-9/4.jpg"></p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>题目运行逻辑：<br>1.C:\card.txt中，存放着”username-KEY”格式的数据<br>2.Loader.sys加载后，读取card.txt的内容，并通过检索”-“提取其中的username、KEY部分<br>3.username经过运算后，得到对应的KEY，并与card.txt内的KEY 比较<br>4.至此，实现用户KEY的校验</p><h2 id="题-1-2"><a href="#题-1-2" class="headerlink" title="题(1)(2)"></a>题(1)(2)</h2><p>就是一件事，找到Loader.sys在内存里的 注册机逻辑 </p><h3 id="Loader-sys加载"><a href="#Loader-sys加载" class="headerlink" title="Loader.sys加载"></a>Loader.sys加载</h3><p>先在普通模式下加载————</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create AAA binPath= <span class="string">&quot;C:\Users\12467\Desktop\Loader.sys&quot;</span> <span class="built_in">type</span>= kernel start= demand</span><br><span class="line">sc start AAA </span><br></pre></td></tr></table></figure><p>正常的返回了，且无事发生。</p><p>再在调试模式下加载————<br>发现会触发蓝屏（蓝屏代码0x00000ace），原来这里还有双击调试检测。</p><p>蓝屏分析：<br>此次的蓝屏代码，和初赛中 “加载ace.sys时候打开windbg” 跳出的蓝屏代码一致。<br>扔进windbg分析，发现原来是进程检测到被调试后，调用 nt!KeBugCheckEx()主动触发蓝屏，且参数”BugCheckCode”传入了”0x00000ace”</p><h3 id="内核hook"><a href="#内核hook" class="headerlink" title="内核hook"></a>内核hook</h3><p>因为有txt，必涉及文件操作，因此对NtCreateFile()、NtReadFile()进行hook。<br>hack1.sys实现上述内核函数被调用时，若传入参数满足某条件，则打印其参数，并触发调试器中断。</p><p>hack1.sys先在普通模式中加载————</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create BBB binPath= <span class="string">&quot;C:\Users\12467\Desktop\hack1.sys&quot;</span> <span class="built_in">type</span>= kernel start= demand</span><br><span class="line">sc start BBB</span><br></pre></td></tr></table></figure><p>结果直接蓝屏了，得到dmp文件。</p><p>hack1.sys蓝屏分析：<br>分析dmp文件，发现和初赛题加载hack2.sys时遇到的问题一样————<br>1.都有相同的异常码 0xc0000096<br>2.都是因为”mov cr0,rax”的执行</p><p>既然如此，能否试修改一手？<br>查阅帖子和评论，似乎找到一个无关紧要的修改方向————<br>1.近几代intel处理器中，CR0.WP位的设置，还与CR4.CET位的启用有关<br>2.作者的代码中，默认虚拟机没应用CR4.CET位，所以没写启用逻辑</p><p>所以初步得出代码修改方案————<br>1.WPOFFx64()中，在 CR0.WP位禁用前，启用 CR4.CET位<br>2.WPONx64()中，在 CR0.WP位重新启用后，重新禁用 CR4.CET位</p><p>以下为自行修改后的hack1.sys（据观察部分逻辑删去不影响程序功能，没明白作者的用途，因此注释起来了）————</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1916220-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MAX_BACKTRACE_DEPTH 20</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL <span class="string">L&quot;\\??\\xia0ji2333&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UINT64 BaseAddr=NULL, DLLSize=0;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">HANDLE FileHandler = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct _LDR_DATA_TABLE_ENTRY &#123;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY InLoadOrderLinks;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY InMemoryOrderLinks;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY InInitializationOrderLinks;</span></span><br><span class="line"><span class="comment">    PVOID DllBase;</span></span><br><span class="line"><span class="comment">    PVOID EntryPoint;           </span></span><br><span class="line"><span class="comment">    ULONG SizeOfImage;</span></span><br><span class="line"><span class="comment">    UNICODE_STRING FullDllName;  </span></span><br><span class="line"><span class="comment">    UNICODE_STRING BaseDllName;</span></span><br><span class="line"><span class="comment">    ULONG Flags;</span></span><br><span class="line"><span class="comment">    USHORT LoadCount;</span></span><br><span class="line"><span class="comment">    USHORT TlsIndex;</span></span><br><span class="line"><span class="comment">    union &#123;</span></span><br><span class="line"><span class="comment">        LIST_ENTRY HashLinks;</span></span><br><span class="line"><span class="comment">        struct &#123;</span></span><br><span class="line"><span class="comment">            PVOID SectionPointer;</span></span><br><span class="line"><span class="comment">            ULONG CheckSum;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    union &#123;</span></span><br><span class="line"><span class="comment">        struct &#123;</span></span><br><span class="line"><span class="comment">            ULONG TimeDateStamp;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        struct &#123;</span></span><br><span class="line"><span class="comment">            PVOID LoadedImports;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> newcode[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> newcode2[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode2[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* target;</span><br><span class="line"><span class="type">char</span>* target2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">KIRQL <span class="title function_">WPOFFx64</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    KIRQL irql = KeRaiseIrqlToDpcLevel(); </span><br><span class="line">    UINT64 cr0 = __readcr0();           </span><br><span class="line">    UINT64 cr4 = __readcr4();             </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(cr4 &amp; (<span class="number">1ULL</span> &lt;&lt; <span class="number">23</span>))) </span><br><span class="line">    &#123;</span><br><span class="line">        cr4 |= (<span class="number">1ULL</span> &lt;&lt; <span class="number">23</span>);  <span class="comment">// 启用 CR4.CET 位</span></span><br><span class="line">        __writecr4(cr4); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cr0 &amp;= <span class="number">0xfffffffffffeffff</span>;<span class="comment">// 禁用 CR0.WP 位</span></span><br><span class="line">    __writecr0(cr0);          </span><br><span class="line">    _disable();               </span><br><span class="line">    <span class="keyword">return</span> irql;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WPONx64</span><span class="params">(KIRQL irql)</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT64 cr0 = __readcr0(); </span><br><span class="line">    cr0 |= <span class="number">0x10000</span>;           <span class="comment">// 启用 CR0.WP 位</span></span><br><span class="line">    _enable();                </span><br><span class="line">    __writecr0(cr0);          </span><br><span class="line"></span><br><span class="line">    UINT64 cr4 = __readcr4(); </span><br><span class="line">    cr4 &amp;= ~(<span class="number">1ULL</span> &lt;&lt; <span class="number">23</span>);     <span class="comment">// 禁用 CR4.CET 位</span></span><br><span class="line">    __writecr4(cr4);         </span><br><span class="line"></span><br><span class="line">    KeLowerIrql(irql);       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = oldcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Unhook2</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode2); i++) &#123;</span><br><span class="line">        target2[i] = oldcode2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Hook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = newcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Hook2</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode2); i++) &#123;</span><br><span class="line">        target2[i] = newcode2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(* FuncPtr)</span> <span class="params">(</span></span><br><span class="line"><span class="params">    _Out_ PHANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="line"><span class="params">    _In_ ULONG FileAttributes,</span></span><br><span class="line"><span class="params">    _In_ ULONG ShareAccess,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateDisposition,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateOptions,</span></span><br><span class="line"><span class="params">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG EaLength</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(* FuncPtr2 )</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ HANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE Event,</span></span><br><span class="line"><span class="params">    _In_opt_ PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">    _In_opt_ PVOID ApcContext,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_(Length) PVOID Buffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG Length,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER ByteOffset,</span></span><br><span class="line"><span class="params">    _In_opt_ PULONG Key</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">ULONG  <span class="title function_">myCreateFile</span><span class="params">(_Out_ PHANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="line"><span class="params">    _In_ ULONG FileAttributes,</span></span><br><span class="line"><span class="params">    _In_ ULONG ShareAccess,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateDisposition,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateOptions,</span></span><br><span class="line"><span class="params">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG EaLength)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Unhook();</span><br><span class="line">    FuncPtr func = (FuncPtr)target;</span><br><span class="line"></span><br><span class="line">    NTSTATUS s = func(FileHandle,DesiredAccess,ObjectAttributes,IoStatusBlock,AllocationSize,FileAttributes,ShareAccess,CreateDisposition,CreateOptions,EaBuffer,EaLength);</span><br><span class="line">    <span class="keyword">if</span> (!wcscmp(ObjectAttributes-&gt;ObjectName-&gt;Buffer, <span class="string">L&quot;\\??\\C:\\card.txt&quot;</span>)) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;call NtCreateFile(%p,%p,%S,%p,%p,%p,%p,%p,%p,%p,%p)\n&quot;</span>), FileHandle,DesiredAccess,ObjectAttributes-&gt;ObjectName-&gt;Buffer,IoStatusBlock,AllocationSize,FileAttributes,ShareAccess,CreateDisposition,CreateOptions,EaBuffer,EaLength);</span><br><span class="line">        DbgBreakPoint();</span><br><span class="line">        FileHandler = *FileHandle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Hook();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ULONG <span class="title function_">myReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ HANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE Event,</span></span><br><span class="line"><span class="params">    _In_opt_ PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">    _In_opt_ PVOID ApcContext,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_(Length) PVOID Buffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG Length,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER ByteOffset,</span></span><br><span class="line"><span class="params">    _In_opt_ PULONG Key)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Unhook2();</span><br><span class="line">    FuncPtr2 func = (FuncPtr2)target2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FileHandler &amp;&amp; FileHandler == FileHandle) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;call NtReadFile(%p,%p,%p,%p,%p,%p,%p,%p,%p)\n&quot;</span>), FileHandle, Event, ApcRoutine, ApcContext, IoStatusBlock, Buffer, Length, ByteOffset, Key);</span><br><span class="line">        DbgBreakPoint();</span><br><span class="line">        FileHandler = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NTSTATUS s = func(FileHandle,Event,ApcRoutine,ApcContext,IoStatusBlock,Buffer,Length,ByteOffset,Key);</span><br><span class="line"></span><br><span class="line">    Hook2();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteDevice</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start delete device\n&quot;</span>), __LINE__);</span><br><span class="line">    <span class="keyword">if</span> (pDriver-&gt;DeviceObject) &#123;</span><br><span class="line">        UNICODE_STRING Sym;</span><br><span class="line">        RtlInitUnicodeString(&amp;Sym, SYMBOL);<span class="comment">//CreateFile </span></span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Symbol\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteSymbolicLink(&amp;Sym);</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Device\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">    &#125;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: end delete device\n&quot;</span>), __LINE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start unload\n&quot;</span>), __LINE__);</span><br><span class="line">    Unhook();</span><br><span class="line">    Unhook2();</span><br><span class="line">    DeleteDevice(pDriver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: RegistryPath = %S\n&quot;</span>), __LINE__, RegistryPath-&gt;Buffer);</span><br><span class="line">    target = NtCreateFile;</span><br><span class="line">    target2 = NtReadFile;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: NtCreateFile=%p NtReadFile=%p\n&quot;</span>), __LINE__, target,target2);</span><br><span class="line">    g_Object = DriverObject;</span><br><span class="line">    <span class="keyword">if</span> (target&amp;&amp;target2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(oldcode); i++) &#123;</span><br><span class="line">            oldcode[i] = target[i];</span><br><span class="line">            oldcode2[i] = target2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        *(UINT64*)(newcode + <span class="number">2</span>) = myCreateFile;</span><br><span class="line">        *(UINT64*)(newcode2 + <span class="number">2</span>) = myReadFile;</span><br><span class="line">        Hook();</span><br><span class="line">        Hook2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;xia0ji233:hahaha&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而还是失败，没办法，只能换个思路了</p><h3 id="内核调试"><a href="#内核调试" class="headerlink" title="内核调试"></a>内核调试</h3><p>在 NtCreateFile()、NtReadFile()处下断点如何呢？<br>然而，这两个API每刻都在被系统调用。每次系统一恢复运行，又立刻断下……</p><p>那就在NtCreateFile()处下条件断点，当传入的参数”ObjectAttributes”的”ObjectName”【3】的”Buffer”，指向的值为”??\C:\card.txt”时断下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bu nt!NtCreateFile <span class="string">&quot;.if (poi(poi(poi(@rcx+0x10)+0x8)) == \&quot;\\\\??\\\\C:\\\\card.txt\&quot;) &#123; .echo \&quot;Break!\&quot;; .if (0) &#123;&#125; else &#123; g &#125; &#125;&quot;</span></span><br></pre></td></tr></table></figure><p>然而，报错”Memory access erro”，只能再换个思路了</p><h3 id="内核callback"><a href="#内核callback" class="headerlink" title="内核callback"></a>内核callback</h3><p>hack4.sys大致逻辑————<br>注册文件对象的回调函数，监控文件操作，当检测到文件名为”\card.txt”时，打印Loader.sys基址，并触发断点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1916220-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define SystemModuleInformation 11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">PVOID obHandle;</span><br><span class="line">DRIVER_INITIALIZE DriverEntry;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct _CALLBACK_ENTRY</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY CallbackList;</span></span><br><span class="line"><span class="comment">    OB_OPERATION  Operations;</span></span><br><span class="line"><span class="comment">    ULONG Active;</span></span><br><span class="line"><span class="comment">    PVOID Handle;</span></span><br><span class="line"><span class="comment">    POBJECT_TYPE ObjectType;</span></span><br><span class="line"><span class="comment">    POB_PRE_OPERATION_CALLBACK  PreOperation;</span></span><br><span class="line"><span class="comment">    POB_POST_OPERATION_CALLBACK PostOperation;</span></span><br><span class="line"><span class="comment">    ULONG unknown;</span></span><br><span class="line"><span class="comment">&#125; CALLBACK_ENTRY, *PCALLBACK_ENTRY;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_PROCESS_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    ULONG NextEntryOffset;</span></span><br><span class="line"><span class="comment">    ULONG NumberOfThreads;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER Reserved[3];</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    UNICODE_STRING ImageName;</span></span><br><span class="line"><span class="comment">    ULONG BasePriority;</span></span><br><span class="line"><span class="comment">    HANDLE ProcessId;</span></span><br><span class="line"><span class="comment">    HANDLE InheritedFromProcessId;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_THREAD_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    ULONG WaitTime;</span></span><br><span class="line"><span class="comment">    PVOID StartAddress;</span></span><br><span class="line"><span class="comment">    CLIENT_ID ClientId;</span></span><br><span class="line"><span class="comment">    ULONG Priority;</span></span><br><span class="line"><span class="comment">    LONG BasePriority;</span></span><br><span class="line"><span class="comment">    ULONG ContextSwitchCount;</span></span><br><span class="line"><span class="comment">    LONG State;</span></span><br><span class="line"><span class="comment">    LONG WaitReason;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef enum _SYSTEM_INFORMATION_CLASS &#123;</span></span><br><span class="line"><span class="comment">    SystemProcessInformation = 5</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_INFORMATION_CLASS;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA</span>                         // 24 <span class="title">elements</span>, 0<span class="title">xE0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InLoadOrderLinks</span>;</span>                     <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x010*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InMemoryOrderLinks</span>;</span>                   <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x020*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InInitializationOrderLinks</span>;</span>           <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x030*/</span>     VOID*        DllBase;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     VOID*        EntryPoint;</span><br><span class="line">    <span class="comment">/*0x040*/</span>     ULONG32      SizeOfImage;</span><br><span class="line">    <span class="comment">/*0x044*/</span>     UINT8        _PADDING0_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x048*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">FullDllName</span>;</span>                      <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x058*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">BaseDllName</span>;</span>                      <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x068*/</span>     ULONG32      Flags;</span><br><span class="line">    <span class="comment">/*0x06C*/</span>     UINT16       LoadCount;</span><br><span class="line">    <span class="comment">/*0x06E*/</span>     UINT16       TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                    // 2 <span class="title">elements</span>, 0<span class="title">x10</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x070*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">HashLinks</span>;</span>                        <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                                               // 2 <span class="title">elements</span>, 0<span class="title">x10</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x070*/</span>             VOID*        SectionPointer;</span><br><span class="line">            <span class="comment">/*0x078*/</span>             ULONG32      CheckSum;</span><br><span class="line">            <span class="comment">/*0x07C*/</span>             UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                    // 2 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x080*/</span>         ULONG32      TimeDateStamp;</span><br><span class="line">        <span class="comment">/*0x080*/</span>         VOID*        LoadedImports;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*0x088*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ACTIVATION_CONTEXT</span>* <span class="title">EntryPointActivationContext</span>;</span></span><br><span class="line">    <span class="comment">/*0x090*/</span>     VOID*        PatchInformation;</span><br><span class="line">    <span class="comment">/*0x098*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ForwarderLinks</span>;</span>                       <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0A8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ServiceTagLinks</span>;</span>                      <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">StaticLinks</span>;</span>                          <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0C8*/</span>     VOID*        ContextInformation;</span><br><span class="line">    <span class="comment">/*0x0D0*/</span>     UINT64       OriginalBase;</span><br><span class="line">    <span class="comment">/*0x0D8*/</span>     <span class="class"><span class="keyword">union</span> _<span class="title">LARGE_INTEGER</span> <span class="title">LoadTime</span>;</span>                           <span class="comment">// 4 elements, 0x8 bytes (sizeof)</span></span><br><span class="line">&#125;LDR_DATA, *PLDR_DATA;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INITIALIZER</span>                                                                                                                                         // 25 <span class="title">elements</span>, 0<span class="title">x70</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     UINT16       Length;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                                                                                                                                       // 2 <span class="title">elements</span>, 0<span class="title">x1</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x002*/</span>         UINT8        ObjectTypeFlags;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                                                                                                                                                                  // 7 <span class="title">elements</span>, 0<span class="title">x1</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        CaseInsensitive : <span class="number">1</span>;                                                                                                                                   <span class="comment">// 0 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        UnnamedObjectsOnly : <span class="number">1</span>;                                                                                                                                <span class="comment">// 1 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        UseDefaultObject : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 2 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        SecurityRequired : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 3 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        MaintainHandleCount : <span class="number">1</span>;                                                                                                                               <span class="comment">// 4 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        MaintainTypeList : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 5 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        SupportsObjectCallbacks : <span class="number">1</span>;                                                                                                                           <span class="comment">// 6 BitPosition</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*0x004*/</span>     ULONG32      ObjectTypeCode;</span><br><span class="line">    <span class="comment">/*0x008*/</span>     ULONG32      InvalidAttributes;</span><br><span class="line">    <span class="comment">/*0x00C*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">GENERIC_MAPPING</span> <span class="title">GenericMapping</span>;</span>                                                                                                                                     <span class="comment">// 4 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x01C*/</span>     ULONG32      ValidAccessMask;</span><br><span class="line">    <span class="comment">/*0x020*/</span>     ULONG32      RetainAccess;</span><br><span class="line">    <span class="comment">/*0x024*/</span>     <span class="class"><span class="keyword">enum</span> _<span class="title">POOL_TYPE</span> <span class="title">PoolType</span>;</span></span><br><span class="line">    <span class="comment">/*0x028*/</span>     ULONG32      DefaultPagedPoolCharge;</span><br><span class="line">    <span class="comment">/*0x02C*/</span>     ULONG32      DefaultNonPagedPoolCharge;</span><br><span class="line">    <span class="comment">/*0x030*/</span>     PVOID DumpProcedure;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     PVOID OpenProcedure;</span><br><span class="line">    <span class="comment">/*0x040*/</span>     PVOID CloseProcedure;</span><br><span class="line">    <span class="comment">/*0x048*/</span>     PVOID DeleteProcedure;</span><br><span class="line">    <span class="comment">/*0x050*/</span>     PVOID ParseProcedure;</span><br><span class="line">    <span class="comment">/*0x058*/</span>     PVOID SecurityProcedure;</span><br><span class="line">    <span class="comment">/*0x060*/</span>     PVOID QueryNameProcedure;</span><br><span class="line">    <span class="comment">/*0x068*/</span>     PVOID OkayToCloseProcedure;</span><br><span class="line">&#125;OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span>                 // 7 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                    // 3 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                               // 5 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Locked : <span class="number">1</span>;         <span class="comment">// 0 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Waiting : <span class="number">1</span>;        <span class="comment">// 1 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Waking : <span class="number">1</span>;         <span class="comment">// 2 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       MultipleShared : <span class="number">1</span>; <span class="comment">// 3 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Shared : <span class="number">60</span>;        <span class="comment">// 4 BitPosition</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/*0x000*/</span>         UINT64       Value;</span><br><span class="line">        <span class="comment">/*0x000*/</span>         VOID*        Ptr;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MY_OBJECT_TYPE</span>                   // 12 <span class="title">elements</span>, 0<span class="title">xD0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">TypeList</span>;</span>              <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x010*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">Name</span>;</span>              <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x020*/</span>     VOID*        DefaultObject;</span><br><span class="line">    <span class="comment">/*0x028*/</span>     UINT8        Index;</span><br><span class="line">    <span class="comment">/*0x029*/</span>     UINT8        _PADDING0_[<span class="number">0x3</span>];</span><br><span class="line">    <span class="comment">/*0x02C*/</span>     ULONG32      TotalNumberOfObjects;</span><br><span class="line">    <span class="comment">/*0x030*/</span>     ULONG32      TotalNumberOfHandles;</span><br><span class="line">    <span class="comment">/*0x034*/</span>     ULONG32      HighWaterNumberOfObjects;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     ULONG32      HighWaterNumberOfHandles;</span><br><span class="line">    <span class="comment">/*0x03C*/</span>     UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x040*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INITIALIZER</span> <span class="title">TypeInfo</span>;</span> <span class="comment">// 25 elements, 0x70 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">TypeLock</span>;</span>            <span class="comment">// 7 elements, 0x8 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B8*/</span>     ULONG32      Key;</span><br><span class="line">    <span class="comment">/*0x0BC*/</span>     UINT8        _PADDING2_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x0C0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">CallbackList</span>;</span>          <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">&#125;MY_OBJECT_TYPE, *PMY_OBJECT_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">typedef NTSTATUS (*ZWQUERYSYSTEMINFORMATION)(ULONG, PVOID, ULONG, PULONG);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件回调</span></span><br><span class="line">OB_PREOP_CALLBACK_STATUS <span class="title function_">FileObjectpreCall</span><span class="params">(PVOID RegistrationContext, POB_PRE_OPERATION_INFORMATION OperationInformation)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNICODE_STRING DosName;</span><br><span class="line">    PFILE_OBJECT fileo = OperationInformation-&gt;Object;</span><br><span class="line">    HANDLE CurrentProcessId = PsGetCurrentProcessId();</span><br><span class="line">    UNREFERENCED_PARAMETER(RegistrationContext);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (OperationInformation-&gt;ObjectType != *IoFileObjectType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 过滤无效指针</span></span><br><span class="line">    <span class="keyword">if</span> (fileo-&gt;FileName.Buffer == <span class="literal">NULL</span> ||</span><br><span class="line">        !MmIsAddressValid(fileo-&gt;FileName.Buffer) ||</span><br><span class="line">        fileo-&gt;DeviceObject == <span class="literal">NULL</span> ||</span><br><span class="line">        !MmIsAddressValid(fileo-&gt;DeviceObject))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 过滤无效路径</span></span><br><span class="line">    <span class="keyword">if</span> (!_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\Endpoint&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;?&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\.\\.&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将对象转为DOS路径</span></span><br><span class="line">    RtlVolumeDeviceToDosName(fileo-&gt;DeviceObject, &amp;DosName);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (!wcscmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\card.txt&quot;</span>)) &#123;</span><br><span class="line">        PETHREAD pct=PsGetCurrentThread();</span><br><span class="line">        PVOID addr=*(ULONG64*)((<span class="type">char</span>*)pct + <span class="number">0x450</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        DbgBreakPoint();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">UnDriver</span><span class="params">(PDRIVER_OBJECT driver)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(driver);</span><br><span class="line">    ObUnRegisterCallbacks(obHandle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VOID UnloadDriver(PDRIVER_OBJECT DriverObject);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">EnableObType</span><span class="params">(POBJECT_TYPE ObjectType)</span></span><br><span class="line">&#123;</span><br><span class="line">    PMY_OBJECT_TYPE myobtype = (PMY_OBJECT_TYPE)ObjectType;</span><br><span class="line">    myobtype-&gt;TypeInfo.SupportsObjectCallbacks = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(IN PDRIVER_OBJECT Driver, PUNICODE_STRING RegistryPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line">    PLDR_DATA ldr;</span><br><span class="line"> </span><br><span class="line">    kprintf((<span class="string">&quot;hello xia0ji233\n&quot;</span>));</span><br><span class="line">    g_Object = Driver;</span><br><span class="line">    OB_CALLBACK_REGISTRATION obRegFileCallBack;</span><br><span class="line">    OB_OPERATION_REGISTRATION opRegFileCallBack;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// enable IoFileObjectType</span></span><br><span class="line">    EnableObType(*IoFileObjectType);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// bypass MmVerifyCallbackFunction</span></span><br><span class="line">    ldr = (PLDR_DATA)Driver-&gt;DriverSection;</span><br><span class="line">    ldr-&gt;Flags |= <span class="number">0x20</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化回调</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;obRegFileCallBack, <span class="number">0</span>, <span class="keyword">sizeof</span>(obRegFileCallBack));</span><br><span class="line">    obRegFileCallBack.Version = ObGetFilterVersion();</span><br><span class="line">    obRegFileCallBack.OperationRegistrationCount = <span class="number">1</span>;</span><br><span class="line">    obRegFileCallBack.RegistrationContext = <span class="literal">NULL</span>;</span><br><span class="line">    RtlInitUnicodeString(&amp;obRegFileCallBack.Altitude, <span class="string">L&quot;321000&quot;</span>);</span><br><span class="line">    obRegFileCallBack.OperationRegistration = &amp;opRegFileCallBack;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">memset</span>(&amp;opRegFileCallBack, <span class="number">0</span>, <span class="keyword">sizeof</span>(opRegFileCallBack));</span><br><span class="line">    opRegFileCallBack.ObjectType = IoFileObjectType;</span><br><span class="line">    opRegFileCallBack.Operations = OB_OPERATION_HANDLE_CREATE | OB_OPERATION_HANDLE_DUPLICATE;</span><br><span class="line">    opRegFileCallBack.PreOperation = (POB_PRE_OPERATION_CALLBACK)&amp;FileObjectpreCall;</span><br><span class="line"> </span><br><span class="line">    status = ObRegisterCallbacks(&amp;obRegFileCallBack, &amp;obHandle);</span><br><span class="line">    <span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">    &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;注册回调错误 \n&quot;</span>));</span><br><span class="line">        status = STATUS_UNSUCCESSFUL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    UNREFERENCED_PARAMETER(RegistryPath);</span><br><span class="line">    Driver-&gt;DriverUnload = &amp;UnDriver;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下可以通过打印出的Loader.sys基址，定位到其中的注册机逻辑</p><h2 id="题-3"><a href="#题-3" class="headerlink" title="题(3)"></a>题(3)</h2><p>要实现对任意username-key均能正常启动，得对内存进行patch<br>这里有两种方法</p><h3 id="内核hook-1"><a href="#内核hook-1" class="headerlink" title="内核hook"></a>内核hook</h3><p>第一种是通过内核hook，其在实现上和hack1.sys类似</p><p>hack2.sys大致逻辑————<br>在hack1.sys的基础上，实现 NtReadFile()被调用时，还会对Loader.sys指定偏移处进行patch。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1916220-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MAX_BACKTRACE_DEPTH 20</span></span><br><span class="line"><span class="comment">#define SystemModuleInformation 11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL <span class="string">L&quot;\\??\\xia0ji2333&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UINT64 BaseAddr=NULL, DLLSize=0;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">HANDLE FileHandler = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;</span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_PROCESS_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    ULONG NextEntryOffset;</span></span><br><span class="line"><span class="comment">    ULONG NumberOfThreads;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER Reserved[3];</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    UNICODE_STRING ImageName;</span></span><br><span class="line"><span class="comment">    ULONG BasePriority;</span></span><br><span class="line"><span class="comment">    HANDLE ProcessId;</span></span><br><span class="line"><span class="comment">    HANDLE InheritedFromProcessId;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_THREAD_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    ULONG WaitTime;</span></span><br><span class="line"><span class="comment">    PVOID StartAddress;</span></span><br><span class="line"><span class="comment">    CLIENT_ID ClientId;</span></span><br><span class="line"><span class="comment">    ULONG Priority;</span></span><br><span class="line"><span class="comment">    LONG BasePriority;</span></span><br><span class="line"><span class="comment">    ULONG ContextSwitchCount;</span></span><br><span class="line"><span class="comment">    LONG State;</span></span><br><span class="line"><span class="comment">    LONG WaitReason;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef enum _SYSTEM_INFORMATION_CLASS &#123;</span></span><br><span class="line"><span class="comment">    SystemProcessInformation = 5</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_INFORMATION_CLASS;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> newcode[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">char</span> newcode2[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode2[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">char</span>* target;</span><br><span class="line"><span class="type">char</span>* target2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">KIRQL <span class="title function_">WPOFFx64</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    KIRQL irql = KeRaiseIrqlToDpcLevel();</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 &amp;= <span class="number">0xfffffffffffeffff</span>;</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    _disable();</span><br><span class="line">    <span class="keyword">return</span> irql;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">WPONx64</span><span class="params">(KIRQL irql)</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 |= <span class="number">0x10000</span>;</span><br><span class="line">    _enable();</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    KeLowerIrql(irql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">Unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = oldcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">Unhook2</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode2); i++) &#123;</span><br><span class="line">        target2[i] = oldcode2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">Hook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = newcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">Hook2</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode2); i++) &#123;</span><br><span class="line">        target2[i] = newcode2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(* FuncPtr)</span> <span class="params">(</span></span><br><span class="line"><span class="params">    _Out_ PHANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="line"><span class="params">    _In_ ULONG FileAttributes,</span></span><br><span class="line"><span class="params">    _In_ ULONG ShareAccess,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateDisposition,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateOptions,</span></span><br><span class="line"><span class="params">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG EaLength</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(* FuncPtr2 )</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ HANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE Event,</span></span><br><span class="line"><span class="params">    _In_opt_ PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">    _In_opt_ PVOID ApcContext,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_(Length) PVOID Buffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG Length,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER ByteOffset,</span></span><br><span class="line"><span class="params">    _In_opt_ PULONG Key</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef NTSTATUS (*ZWQUERYSYSTEMINFORMATION)(ULONG, PVOID, ULONG, PULONG);</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">ULONG  <span class="title function_">myCreateFile</span><span class="params">(_Out_ PHANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="line"><span class="params">    _In_ ULONG FileAttributes,</span></span><br><span class="line"><span class="params">    _In_ ULONG ShareAccess,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateDisposition,</span></span><br><span class="line"><span class="params">    _In_ ULONG CreateOptions,</span></span><br><span class="line"><span class="params">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG EaLength)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    Unhook();</span><br><span class="line">    FuncPtr func = (FuncPtr)target;</span><br><span class="line"> </span><br><span class="line">    NTSTATUS s = func(FileHandle,DesiredAccess,ObjectAttributes,IoStatusBlock,AllocationSize,FileAttributes,ShareAccess,CreateDisposition,CreateOptions,EaBuffer,EaLength);</span><br><span class="line">    <span class="keyword">if</span> (!wcscmp(ObjectAttributes-&gt;ObjectName-&gt;Buffer, <span class="string">L&quot;\\??\\C:\\card.txt&quot;</span>)) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;call NtCreateFile(%p,%p,%S,%p,%p,%p,%p,%p,%p,%p,%p)\n&quot;</span>), FileHandle,DesiredAccess,ObjectAttributes-&gt;ObjectName-&gt;Buffer,IoStatusBlock,AllocationSize,FileAttributes,ShareAccess,CreateDisposition,CreateOptions,EaBuffer,EaLength);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        DbgBreakPoint();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        FileHandler = *FileHandle;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    Hook();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int Filter(ULONG Start)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    LDR_DATA_TABLE_ENTRY *TE, *Tmp;</span></span><br><span class="line"><span class="comment">    TE = (LDR_DATA_TABLE_ENTRY*)g_Object-&gt;DriverSection;</span></span><br><span class="line"><span class="comment">    PLIST_ENTRY LinkList;</span></span><br><span class="line"><span class="comment">    ;</span></span><br><span class="line"><span class="comment">    int i = 0;</span></span><br><span class="line"><span class="comment">    LinkList = TE-&gt;InLoadOrderLinks.Flink; </span></span><br><span class="line"><span class="comment">    while (LinkList != &amp;TE-&gt;InLoadOrderLinks)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        Tmp = (LDR_DATA_TABLE_ENTRY*)LinkList;</span></span><br><span class="line"><span class="comment">        ULONG BASE = Tmp-&gt;DllBase;</span></span><br><span class="line"><span class="comment">        ULONG Size = Tmp-&gt;SizeOfImage;</span></span><br><span class="line"><span class="comment">        if (Start &gt;= BASE &amp;&amp; Start &lt; BASE + Size) &#123;</span></span><br><span class="line"><span class="comment">            return 0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        LinkList = LinkList-&gt;Flink;</span></span><br><span class="line"><span class="comment">        i++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    return 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">MDLWriteMemory(PVOID pBaseAddress, PVOID pWriteData, SIZE_T writeDataSize)</span><br><span class="line">&#123;</span><br><span class="line">    PMDL pMdl = <span class="literal">NULL</span>;</span><br><span class="line">    PVOID pNewAddress = <span class="literal">NULL</span>;</span><br><span class="line">    pMdl = MmCreateMdl(<span class="literal">NULL</span>, pBaseAddress, writeDataSize);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pMdl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    MmBuildMdlForNonPagedPool(pMdl);</span><br><span class="line">    pNewAddress = MmMapLockedPages(pMdl, KernelMode);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pNewAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        IoFreeMdl(pMdl);</span><br><span class="line">    &#125;</span><br><span class="line">    RtlCopyMemory(pNewAddress, pWriteData, writeDataSize);</span><br><span class="line">    MmUnmapLockedPages(pNewAddress, pMdl);</span><br><span class="line">    IoFreeMdl(pMdl);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">VOID <span class="title function_">PatchInstr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LDR_DATA_TABLE_ENTRY *TE, *Tmp;</span><br><span class="line">    TE = (LDR_DATA_TABLE_ENTRY*)g_Object-&gt;DriverSection;</span><br><span class="line">    PLIST_ENTRY LinkList;</span><br><span class="line">    ;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList = TE-&gt;InLoadOrderLinks.Flink; </span><br><span class="line">    UNICODE_STRING name;</span><br><span class="line">    RtlInitUnicodeString(&amp;name,<span class="string">L&quot;Loader.sys&quot;</span>);</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">while</span> (LinkList != &amp;TE-&gt;InLoadOrderLinks)</span><br><span class="line">    &#123;</span><br><span class="line">        Tmp = (LDR_DATA_TABLE_ENTRY*)LinkList;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> (RtlEqualUnicodeString(&amp;Tmp-&gt;BaseDllName, &amp;name,FALSE)) &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;DLLname:%S DLLBase=%p nowcode=%p\n&quot;</span>), Tmp-&gt;BaseDllName.Buffer,Tmp-&gt;DllBase,(ULONG64)(Tmp-&gt;DllBase) + <span class="number">0xa27e</span>);</span><br><span class="line">            <span class="type">char</span> buffer[] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">            MDLWriteMemory((ULONG64)(Tmp-&gt;DllBase) + <span class="number">0xa27e</span>, buffer, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkList = LinkList-&gt;Flink;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ULONG <span class="title function_">myReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ HANDLE FileHandle,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE Event,</span></span><br><span class="line"><span class="params">    _In_opt_ PIO_APC_ROUTINE ApcRoutine,</span></span><br><span class="line"><span class="params">    _In_opt_ PVOID ApcContext,</span></span><br><span class="line"><span class="params">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_(Length) PVOID Buffer,</span></span><br><span class="line"><span class="params">    _In_ ULONG Length,</span></span><br><span class="line"><span class="params">    _In_opt_ PLARGE_INTEGER ByteOffset,</span></span><br><span class="line"><span class="params">    _In_opt_ PULONG Key)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    Unhook2();</span><br><span class="line">    FuncPtr2 func = (FuncPtr2)target2;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (FileHandler &amp;&amp; FileHandler == FileHandle) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;call NtReadFile(%p,%p,%p,%p,%p,%p,%p,%p,%p)\n&quot;</span>), FileHandle, Event, ApcRoutine, ApcContext, IoStatusBlock, Buffer, Length, ByteOffset, Key);</span><br><span class="line">        kprintf((<span class="string">&quot;buffer in %p\n&quot;</span>), Buffer);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        DbgBreakPoint();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        PatchInstr();</span><br><span class="line">        FileHandler = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTSTATUS s = func(FileHandle,Event,ApcRoutine,ApcContext,IoStatusBlock,Buffer,Length,ByteOffset,Key);</span><br><span class="line">     </span><br><span class="line">    Hook2();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteDevice</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start delete device\n&quot;</span>), __LINE__);</span><br><span class="line">    <span class="keyword">if</span> (pDriver-&gt;DeviceObject) &#123;</span><br><span class="line">        UNICODE_STRING Sym;</span><br><span class="line">        RtlInitUnicodeString(&amp;Sym, SYMBOL);<span class="comment">//CreateFile</span></span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Symbol\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteSymbolicLink(&amp;Sym);</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Device\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">    &#125;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: end delete device\n&quot;</span>), __LINE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start unload\n&quot;</span>), __LINE__);</span><br><span class="line">    Unhook();</span><br><span class="line">    Unhook2();</span><br><span class="line">    DeleteDevice(pDriver);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"> </span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: RegistryPath = %S\n&quot;</span>), __LINE__, RegistryPath-&gt;Buffer);</span><br><span class="line">    target = NtCreateFile;</span><br><span class="line">    target2 = NtReadFile;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: NtCreateFile=%p NtReadFile=%p\n&quot;</span>), __LINE__, target,target2);</span><br><span class="line">    g_Object = DriverObject;</span><br><span class="line">    <span class="keyword">if</span> (target&amp;&amp;target2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(oldcode); i++) &#123;</span><br><span class="line">            oldcode[i] = target[i];</span><br><span class="line">            oldcode2[i] = target2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        *(UINT64*)(newcode + <span class="number">2</span>) = myCreateFile;</span><br><span class="line">        *(UINT64*)(newcode2 + <span class="number">2</span>) = myReadFile;</span><br><span class="line">        Hook();</span><br><span class="line">        Hook2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;xia0ji233:hahaha&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而”mov cr0,rax”的报错，我无力回天</p><h3 id="内核callback-1"><a href="#内核callback-1" class="headerlink" title="内核callback"></a>内核callback</h3><p>第二种是通过内核回调的方式</p><p>hack3.sys大致逻辑————<br>注册文件对象的回调函数，监控文件操作，当检测到文件名为”\card.txt”时，会对Loader.sys指定偏移处进行patch，并触发断点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1916220-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define SystemModuleInformation 11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">PVOID obHandle;</span><br><span class="line">DRIVER_INITIALIZE DriverEntry;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName; </span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct _CALLBACK_ENTRY</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    LIST_ENTRY CallbackList;</span></span><br><span class="line"><span class="comment">    OB_OPERATION  Operations;</span></span><br><span class="line"><span class="comment">    ULONG Active;</span></span><br><span class="line"><span class="comment">    PVOID Handle;</span></span><br><span class="line"><span class="comment">    POBJECT_TYPE ObjectType;</span></span><br><span class="line"><span class="comment">    POB_PRE_OPERATION_CALLBACK  PreOperation;</span></span><br><span class="line"><span class="comment">    POB_POST_OPERATION_CALLBACK PostOperation;</span></span><br><span class="line"><span class="comment">    ULONG unknown;</span></span><br><span class="line"><span class="comment">&#125; CALLBACK_ENTRY, *PCALLBACK_ENTRY;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_PROCESS_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    ULONG NextEntryOffset;</span></span><br><span class="line"><span class="comment">    ULONG NumberOfThreads;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER Reserved[3];</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    UNICODE_STRING ImageName;</span></span><br><span class="line"><span class="comment">    ULONG BasePriority;</span></span><br><span class="line"><span class="comment">    HANDLE ProcessId;</span></span><br><span class="line"><span class="comment">    HANDLE InheritedFromProcessId;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct _SYSTEM_THREAD_INFORMATION &#123;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER KernelTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER UserTime;</span></span><br><span class="line"><span class="comment">    LARGE_INTEGER CreateTime;</span></span><br><span class="line"><span class="comment">    ULONG WaitTime;</span></span><br><span class="line"><span class="comment">    PVOID StartAddress;</span></span><br><span class="line"><span class="comment">    CLIENT_ID ClientId;</span></span><br><span class="line"><span class="comment">    ULONG Priority;</span></span><br><span class="line"><span class="comment">    LONG BasePriority;</span></span><br><span class="line"><span class="comment">    ULONG ContextSwitchCount;</span></span><br><span class="line"><span class="comment">    LONG State;</span></span><br><span class="line"><span class="comment">    LONG WaitReason;</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef enum _SYSTEM_INFORMATION_CLASS &#123;</span></span><br><span class="line"><span class="comment">    SystemProcessInformation = 5</span></span><br><span class="line"><span class="comment">&#125; SYSTEM_INFORMATION_CLASS;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA</span>                         // 24 <span class="title">elements</span>, 0<span class="title">xE0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InLoadOrderLinks</span>;</span>                     <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x010*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InMemoryOrderLinks</span>;</span>                   <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x020*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InInitializationOrderLinks</span>;</span>           <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x030*/</span>     VOID*        DllBase;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     VOID*        EntryPoint;</span><br><span class="line">    <span class="comment">/*0x040*/</span>     ULONG32      SizeOfImage;</span><br><span class="line">    <span class="comment">/*0x044*/</span>     UINT8        _PADDING0_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x048*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">FullDllName</span>;</span>                      <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x058*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">BaseDllName</span>;</span>                      <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x068*/</span>     ULONG32      Flags;</span><br><span class="line">    <span class="comment">/*0x06C*/</span>     UINT16       LoadCount;</span><br><span class="line">    <span class="comment">/*0x06E*/</span>     UINT16       TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                    // 2 <span class="title">elements</span>, 0<span class="title">x10</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x070*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">HashLinks</span>;</span>                        <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                                               // 2 <span class="title">elements</span>, 0<span class="title">x10</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x070*/</span>             VOID*        SectionPointer;</span><br><span class="line">            <span class="comment">/*0x078*/</span>             ULONG32      CheckSum;</span><br><span class="line">            <span class="comment">/*0x07C*/</span>             UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                    // 2 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x080*/</span>         ULONG32      TimeDateStamp;</span><br><span class="line">        <span class="comment">/*0x080*/</span>         VOID*        LoadedImports;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*0x088*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ACTIVATION_CONTEXT</span>* <span class="title">EntryPointActivationContext</span>;</span></span><br><span class="line">    <span class="comment">/*0x090*/</span>     VOID*        PatchInformation;</span><br><span class="line">    <span class="comment">/*0x098*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ForwarderLinks</span>;</span>                       <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0A8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ServiceTagLinks</span>;</span>                      <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">StaticLinks</span>;</span>                          <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0C8*/</span>     VOID*        ContextInformation;</span><br><span class="line">    <span class="comment">/*0x0D0*/</span>     UINT64       OriginalBase;</span><br><span class="line">    <span class="comment">/*0x0D8*/</span>     <span class="class"><span class="keyword">union</span> _<span class="title">LARGE_INTEGER</span> <span class="title">LoadTime</span>;</span>                           <span class="comment">// 4 elements, 0x8 bytes (sizeof)</span></span><br><span class="line">&#125;LDR_DATA, *PLDR_DATA;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INITIALIZER</span>                                                                                                                                         // 25 <span class="title">elements</span>, 0<span class="title">x70</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     UINT16       Length;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                                                                                                                                                       // 2 <span class="title">elements</span>, 0<span class="title">x1</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/*0x002*/</span>         UINT8        ObjectTypeFlags;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                                                                                                                                                                  // 7 <span class="title">elements</span>, 0<span class="title">x1</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        CaseInsensitive : <span class="number">1</span>;                                                                                                                                   <span class="comment">// 0 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        UnnamedObjectsOnly : <span class="number">1</span>;                                                                                                                                <span class="comment">// 1 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        UseDefaultObject : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 2 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        SecurityRequired : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 3 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        MaintainHandleCount : <span class="number">1</span>;                                                                                                                               <span class="comment">// 4 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        MaintainTypeList : <span class="number">1</span>;                                                                                                                                  <span class="comment">// 5 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x002*/</span>             UINT8        SupportsObjectCallbacks : <span class="number">1</span>;                                                                                                                           <span class="comment">// 6 BitPosition</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*0x004*/</span>     ULONG32      ObjectTypeCode;</span><br><span class="line">    <span class="comment">/*0x008*/</span>     ULONG32      InvalidAttributes;</span><br><span class="line">    <span class="comment">/*0x00C*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">GENERIC_MAPPING</span> <span class="title">GenericMapping</span>;</span>                                                                                                                                     <span class="comment">// 4 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x01C*/</span>     ULONG32      ValidAccessMask;</span><br><span class="line">    <span class="comment">/*0x020*/</span>     ULONG32      RetainAccess;</span><br><span class="line">    <span class="comment">/*0x024*/</span>     <span class="class"><span class="keyword">enum</span> _<span class="title">POOL_TYPE</span> <span class="title">PoolType</span>;</span></span><br><span class="line">    <span class="comment">/*0x028*/</span>     ULONG32      DefaultPagedPoolCharge;</span><br><span class="line">    <span class="comment">/*0x02C*/</span>     ULONG32      DefaultNonPagedPoolCharge;</span><br><span class="line">    <span class="comment">/*0x030*/</span>     PVOID DumpProcedure;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     PVOID OpenProcedure;</span><br><span class="line">    <span class="comment">/*0x040*/</span>     PVOID CloseProcedure;</span><br><span class="line">    <span class="comment">/*0x048*/</span>     PVOID DeleteProcedure;</span><br><span class="line">    <span class="comment">/*0x050*/</span>     PVOID ParseProcedure;</span><br><span class="line">    <span class="comment">/*0x058*/</span>     PVOID SecurityProcedure;</span><br><span class="line">    <span class="comment">/*0x060*/</span>     PVOID QueryNameProcedure;</span><br><span class="line">    <span class="comment">/*0x068*/</span>     PVOID OkayToCloseProcedure;</span><br><span class="line">&#125;OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span>                 // 7 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>                                    // 3 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>                               // 5 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Locked : <span class="number">1</span>;         <span class="comment">// 0 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Waiting : <span class="number">1</span>;        <span class="comment">// 1 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Waking : <span class="number">1</span>;         <span class="comment">// 2 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       MultipleShared : <span class="number">1</span>; <span class="comment">// 3 BitPosition</span></span><br><span class="line">            <span class="comment">/*0x000*/</span>             UINT64       Shared : <span class="number">60</span>;        <span class="comment">// 4 BitPosition</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/*0x000*/</span>         UINT64       Value;</span><br><span class="line">        <span class="comment">/*0x000*/</span>         VOID*        Ptr;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MY_OBJECT_TYPE</span>                   // 12 <span class="title">elements</span>, 0<span class="title">xD0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">TypeList</span>;</span>              <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x010*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">Name</span>;</span>              <span class="comment">// 3 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x020*/</span>     VOID*        DefaultObject;</span><br><span class="line">    <span class="comment">/*0x028*/</span>     UINT8        Index;</span><br><span class="line">    <span class="comment">/*0x029*/</span>     UINT8        _PADDING0_[<span class="number">0x3</span>];</span><br><span class="line">    <span class="comment">/*0x02C*/</span>     ULONG32      TotalNumberOfObjects;</span><br><span class="line">    <span class="comment">/*0x030*/</span>     ULONG32      TotalNumberOfHandles;</span><br><span class="line">    <span class="comment">/*0x034*/</span>     ULONG32      HighWaterNumberOfObjects;</span><br><span class="line">    <span class="comment">/*0x038*/</span>     ULONG32      HighWaterNumberOfHandles;</span><br><span class="line">    <span class="comment">/*0x03C*/</span>     UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x040*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INITIALIZER</span> <span class="title">TypeInfo</span>;</span> <span class="comment">// 25 elements, 0x70 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">TypeLock</span>;</span>            <span class="comment">// 7 elements, 0x8 bytes (sizeof)</span></span><br><span class="line">    <span class="comment">/*0x0B8*/</span>     ULONG32      Key;</span><br><span class="line">    <span class="comment">/*0x0BC*/</span>     UINT8        _PADDING2_[<span class="number">0x4</span>];</span><br><span class="line">    <span class="comment">/*0x0C0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">CallbackList</span>;</span>          <span class="comment">// 2 elements, 0x10 bytes (sizeof)</span></span><br><span class="line">&#125;MY_OBJECT_TYPE, *PMY_OBJECT_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">typedef NTSTATUS (*ZWQUERYSYSTEMINFORMATION)(ULONG, PVOID, ULONG, PULONG);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"> </span><br><span class="line">MDLWriteMemory(PVOID pBaseAddress, PVOID pWriteData, SIZE_T writeDataSize)</span><br><span class="line">&#123;</span><br><span class="line">    PMDL pMdl = <span class="literal">NULL</span>;</span><br><span class="line">    PVOID pNewAddress = <span class="literal">NULL</span>;</span><br><span class="line">    pMdl = MmCreateMdl(<span class="literal">NULL</span>, pBaseAddress, writeDataSize);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pMdl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    MmBuildMdlForNonPagedPool(pMdl);</span><br><span class="line">    pNewAddress = MmMapLockedPages(pMdl, KernelMode);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pNewAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        IoFreeMdl(pMdl);</span><br><span class="line">    &#125;</span><br><span class="line">    RtlCopyMemory(pNewAddress, pWriteData, writeDataSize);</span><br><span class="line">    MmUnmapLockedPages(pNewAddress, pMdl);</span><br><span class="line">    IoFreeMdl(pMdl);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">VOID <span class="title function_">PatchInstr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LDR_DATA_TABLE_ENTRY *TE, *Tmp;</span><br><span class="line">    TE = (LDR_DATA_TABLE_ENTRY*)g_Object-&gt;DriverSection;</span><br><span class="line">    PLIST_ENTRY LinkList;</span><br><span class="line">    ;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList = TE-&gt;InLoadOrderLinks.Flink; </span><br><span class="line">    UNICODE_STRING name;</span><br><span class="line">    RtlInitUnicodeString(&amp;name,<span class="string">L&quot;Loader.sys&quot;</span>);</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">while</span> (LinkList != &amp;TE-&gt;InLoadOrderLinks)</span><br><span class="line">    &#123;</span><br><span class="line">        Tmp = (LDR_DATA_TABLE_ENTRY*)LinkList;</span><br><span class="line">        <span class="keyword">if</span> (RtlEqualUnicodeString(&amp;Tmp-&gt;BaseDllName, &amp;name,FALSE)) &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;DLLname:%S DLLBase=%p nowcode=%p\n&quot;</span>), Tmp-&gt;BaseDllName.Buffer,Tmp-&gt;DllBase,(ULONG64)(Tmp-&gt;DllBase) + <span class="number">0xa27e</span>);</span><br><span class="line">            <span class="type">char</span> buffer[] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">            MDLWriteMemory((ULONG64)(Tmp-&gt;DllBase) + <span class="number">0xa27e</span>, buffer, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkList = LinkList-&gt;Flink;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件回调</span></span><br><span class="line">OB_PREOP_CALLBACK_STATUS <span class="title function_">FileObjectpreCall</span><span class="params">(PVOID RegistrationContext, POB_PRE_OPERATION_INFORMATION OperationInformation)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNICODE_STRING DosName;</span><br><span class="line">    PFILE_OBJECT fileo = OperationInformation-&gt;Object;</span><br><span class="line">    HANDLE CurrentProcessId = PsGetCurrentProcessId();</span><br><span class="line">    UNREFERENCED_PARAMETER(RegistrationContext);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (OperationInformation-&gt;ObjectType != *IoFileObjectType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 过滤无效指针</span></span><br><span class="line">    <span class="keyword">if</span> (fileo-&gt;FileName.Buffer == <span class="literal">NULL</span> ||</span><br><span class="line">        !MmIsAddressValid(fileo-&gt;FileName.Buffer) ||</span><br><span class="line">        fileo-&gt;DeviceObject == <span class="literal">NULL</span> ||</span><br><span class="line">        !MmIsAddressValid(fileo-&gt;DeviceObject))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 过滤无效路径</span></span><br><span class="line">    <span class="keyword">if</span> (!_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\Endpoint&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;?&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\.\\.&quot;</span>) ||</span><br><span class="line">        !_wcsicmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将对象转为DOS路径</span></span><br><span class="line">    RtlVolumeDeviceToDosName(fileo-&gt;DeviceObject, &amp;DosName);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (!wcscmp(fileo-&gt;FileName.Buffer, <span class="string">L&quot;\\card.txt&quot;</span>)) &#123;</span><br><span class="line">        PETHREAD pct=PsGetCurrentThread();</span><br><span class="line">        PVOID addr=*(ULONG64*)((<span class="type">char</span>*)pct + <span class="number">0x450</span>);</span><br><span class="line">        PatchInstr();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        EnumerateKernelThreads();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        DbgBreakPoint();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> OB_PREOP_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">UnDriver</span><span class="params">(PDRIVER_OBJECT driver)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(driver);</span><br><span class="line">    ObUnRegisterCallbacks(obHandle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VOID UnloadDriver(PDRIVER_OBJECT DriverObject);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">EnableObType</span><span class="params">(POBJECT_TYPE ObjectType)</span></span><br><span class="line">&#123;</span><br><span class="line">    PMY_OBJECT_TYPE myobtype = (PMY_OBJECT_TYPE)ObjectType;</span><br><span class="line">    myobtype-&gt;TypeInfo.SupportsObjectCallbacks = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(IN PDRIVER_OBJECT Driver, PUNICODE_STRING RegistryPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line">    PLDR_DATA ldr;</span><br><span class="line"> </span><br><span class="line">    kprintf((<span class="string">&quot;hello xia0ji233\n&quot;</span>));</span><br><span class="line">    g_Object = Driver;</span><br><span class="line">    OB_CALLBACK_REGISTRATION obRegFileCallBack;</span><br><span class="line">    OB_OPERATION_REGISTRATION opRegFileCallBack;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// enable IoFileObjectType</span></span><br><span class="line">    EnableObType(*IoFileObjectType);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// bypass MmVerifyCallbackFunction</span></span><br><span class="line">    ldr = (PLDR_DATA)Driver-&gt;DriverSection;</span><br><span class="line">    ldr-&gt;Flags |= <span class="number">0x20</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化回调</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;obRegFileCallBack, <span class="number">0</span>, <span class="keyword">sizeof</span>(obRegFileCallBack));</span><br><span class="line">    obRegFileCallBack.Version = ObGetFilterVersion();</span><br><span class="line">    obRegFileCallBack.OperationRegistrationCount = <span class="number">1</span>;</span><br><span class="line">    obRegFileCallBack.RegistrationContext = <span class="literal">NULL</span>;</span><br><span class="line">    RtlInitUnicodeString(&amp;obRegFileCallBack.Altitude, <span class="string">L&quot;321000&quot;</span>);</span><br><span class="line">    obRegFileCallBack.OperationRegistration = &amp;opRegFileCallBack;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">memset</span>(&amp;opRegFileCallBack, <span class="number">0</span>, <span class="keyword">sizeof</span>(opRegFileCallBack));</span><br><span class="line">    opRegFileCallBack.ObjectType = IoFileObjectType;</span><br><span class="line">    opRegFileCallBack.Operations = OB_OPERATION_HANDLE_CREATE | OB_OPERATION_HANDLE_DUPLICATE;</span><br><span class="line">    opRegFileCallBack.PreOperation = (POB_PRE_OPERATION_CALLBACK)&amp;FileObjectpreCall;</span><br><span class="line"> </span><br><span class="line">    status = ObRegisterCallbacks(&amp;obRegFileCallBack, &amp;obHandle);</span><br><span class="line">    <span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">    &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;注册回调错误 \n&quot;</span>));</span><br><span class="line">        status = STATUS_UNSUCCESSFUL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    UNREFERENCED_PARAMETER(RegistryPath);</span><br><span class="line">    Driver-&gt;DriverUnload = &amp;UnDriver;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先加载hack3.sys————</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create CCC binPath= <span class="string">&quot;C:\Users\12467\Desktop\hack3.sys&quot;</span> <span class="built_in">type</span>= kernel start= demand</span><br><span class="line">sc start CCC </span><br></pre></td></tr></table></figure><p>然后加载Loader.sys，可以看到断在了 hack3.sys中的 int3处，同时打印了 Loader.sys基址等信息<br><img src="/img/2024-9-9/1.png"><br>再查看”基址+0xa27e”处反汇编，可以看到，用于判断 “username是否校验成功”的jne指令，已经被patch了<br><img src="/img/2024-9-9/2.png"></p><h2 id="题-4"><a href="#题-4" class="headerlink" title="题(4)"></a>题(4)</h2><p>……</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.52pojie.cn/thread-1916220-1-1.html">https://www.52pojie.cn/thread-1916220-1-1.html</a><br><a href="https://bbs.kanxue.com/thread-281455.htm">https://bbs.kanxue.com/thread-281455.htm</a><br><a href="https://bbs.kanxue.com/thread-281452.htm">https://bbs.kanxue.com/thread-281452.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯游戏安全 2024 PC 初赛</title>
      <link href="/2024/09/01/2024-9-1%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20PC%20%E5%88%9D%E8%B5%9B/"/>
      <url>/2024/09/01/2024-9-1%20%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%202024%20PC%20%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>入这个坑的第一篇，只能说每一步都是初体验，每一步都觉得巨难，因此许多细枝末节的东西也一并记录下来了<br>尽管一边还看着大佬们的帖子，但每一步都会踩坑，每一步都要卡上好久<br>但没办法，智商有限，急不来只能蹒跚前行</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/2024-9-1/61.jpg"></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="win10虚拟机安装及激活"><a href="#win10虚拟机安装及激活" class="headerlink" title="win10虚拟机安装及激活"></a>win10虚拟机安装及激活</h2><p>装个win10虚拟机，给初始状态设个快照。</p><p>然后再激活一手，预备操作参考<a href="https://www.cnblogs.com/brf-test/p/16572521.html">这篇</a>；激活码获取参考<a href="https://www.bilibili.com/video/BV11z411v73c/?spm_id_from=333.337.search-card.all.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">这篇</a></p><h2 id="系统防护关闭"><a href="#系统防护关闭" class="headerlink" title="系统防护关闭"></a>系统防护关闭</h2><p>关闭 Windows防火墙和病毒防护，及其通知，给exe提供运行环境（不然放上去运行不了，然后被秒删）。<br><img src="/img/2024-9-1/3.jpg"></p><h2 id="WDK安装及使用"><a href="#WDK安装及使用" class="headerlink" title="WDK安装及使用"></a>WDK安装及使用</h2><p>引入头文件测试：<br>装完后，引入头文件测试一下，发现位于”C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0”目录下的 ntifs.h, ntddk.h却报错”编译器找不到”。</p><p>解决方案————在项目的包含路径中添上（要精确到”10.0.26100.0”下的子目录）<br><img src="/img/2024-9-1/11.png"></p><p>但还没完，接下来这次报错的来源还多了ntdef.h, wdm.h<br>看了看头文件中报错的代码，<br><img src="/img/2024-9-1/14.jpg"><br>再看看b站教程，知道问题所在了：装Visual Studio时下的”Windows 11 SDK (10.0.22621.0)”，和我后来下的”WDK - Windows 10.0.26100.1”，版本不兼容……<br>这也是为什么之前头文件引入时 会出现”编译器找不到”的错误————如果后下载的WDK，其版本和SDK一致的话，自然也会把头文件下载到”10.0.22621.0”的目录中，根本不需要在项目的包含路径上 添加”10.0.26100.0”目录。</p><p>解决方案————Visual Studio Installer中移除现有的WDK<br><img src="/img/2024-9-1/15.png"><br>然后在官网上下载版本正确的WDK<br><img src="/img/2024-9-1/16.png"><br>在项目的包含路径上删除之前的<br><img src="/img/2024-9-1/17.jpg"></p><p>但还没结束，又报错”缺少缓解Spectre漏洞的库”。<br>试了十多遍，终于找到完整的 解决方案————Visual Studio Installer中下载这些组件（”MSVC”那个一定要下）<br><img src="/img/2024-9-1/18.png"><br>再关闭所有警告（不然编译器一直把某些警告视为报错）<br><img src="/img/2024-9-1/19.jpg"></p><p>驱动模板选择：<br>创建项目时，选择”Kernel Mode Driver, Empty (KMDF)”模板<br><img src="/img/2024-9-1/10.jpg"></p><h2 id="工具下载及使用"><a href="#工具下载及使用" class="headerlink" title="工具下载及使用"></a>工具下载及使用</h2><p>KmdManager（驱动加载卸载）、Dbgview（驱动输出查看）、Winobj（内核对象查看）、Xenos（dll注入器）：<br>真是人给找麻了————一个看雪的，一个CSDN的，一个微软官网的，一个github的 </p><p>装WinDbg前，还要给Win10虚拟机磁盘 扩个容，不然装不下。</p><p>Dbgview使用：<br>使用前需先设置要捕获的范围，以下是每个选项的解释<br><img src="/img/2024-9-1/22.png"><br>所以使用前需要勾选这个两个选项<br><img src="/img/2024-9-1/12.jpg"><br>才可以尽可能多的捕获全部的内核输出。</p><p>还有一点很怪，每次开机，Dbgview只能打开一次且不能关闭（不然再次打开会报错，然后”Capture Kernel”会被关闭）；<br>使用前，”Capture Event”也要保证开启（不然工具没反应）</p><p>KmdManager使用：<br>需要以管理身份运行（不然一直显示 Register失败）<br>然后还要关闭 win10的驱动签名检测（不然就算Register了，也Run不起来），详细操作参考<a href="https://blog.csdn.net/sanqiuai/article/details/119452511">这篇</a>和<a href="https://jingyan.baidu.com/article/636f38bb14f05096b9461008.html">这篇</a>。</p><p>KmdManager之外：<br>据观察，KmdManager是以服务的形式加载驱动的<br>因此也可以不使用它，换个方式，在管理员cmd中 以服务形式注册、加载驱动<br><img src="/img/2024-9-1/20.jpg"></p><h2 id="双机调试搭建"><a href="#双机调试搭建" class="headerlink" title="双机调试搭建"></a>双机调试搭建</h2><p>参考<a href="https://zhuanlan.zhihu.com/p/620568244">这篇</a>，写的非常清楚。</p><p>首先是被调试方的设置这之后把此状态拍成 快照”snapshot3”了，所以接下来每次不需要重新设置了，直接启动该快照即可）<br><img src="/img/2024-9-1/29.jpg"><br>然后是调试方的设置<br><img src="/img/2024-9-1/32.jpg"></p><p>之后每次要进行 双击调试，只需先打开本机上的Windbg，按上图所示设置一下；<br>然后 Vmware中直接打开win10d的快照”Snapshot3”，然后重启即可。</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="题-1"><a href="#题-1" class="headerlink" title="题(1)"></a>题(1)</h2><h3 id="沙箱分析"><a href="#沙箱分析" class="headerlink" title="沙箱分析"></a>沙箱分析</h3><p>先使用云沙箱对 hack.exe进行初步分析，发现代码注入等行为<br><img src="/img/2024-9-1/1.png"></p><p>同时，发现某进程有 对C盘中某文件写入token1的行为<br><img src="/img/2024-9-1/2.jpg"><br>但C盘无该文件，因此自行创建 放到指定路径后，<br><img src="/img/2024-9-1/7.jpg"><br>运行 hack.exe，再读取此文件内容，就得到了token1<br><img src="/img/2024-9-1/8.png"></p><h3 id="用户态hook"><a href="#用户态hook" class="headerlink" title="用户态hook"></a>用户态hook</h3><p>既然题目中说是往内存中写了些东西，因此锁定一个关键API————WriteProcessMemory<br>然后使用如下hack.dll进行注入，hook实现API被调用时 打印传入参数和目标进程的名称。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Psapi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">FILE* fp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(*Func)</span><span class="params">(HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpBaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T nSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T* lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line">Func OriginFunc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BYTE HookCode[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>, <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                          <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line">BYTE OriginCode[<span class="number">0x50</span>];</span><br><span class="line">SIZE_T HookLen = <span class="built_in">sizeof</span>(HookCode);</span><br><span class="line">DWORD saved = <span class="number">0</span>;</span><br><span class="line">WCHAR FILENAME[MAX_PATH];</span><br><span class="line"><span class="function">BOOL <span class="title">HackWriteProcessMemory</span><span class="params">(HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpBaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T nSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T* lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">VirtualProtect</span>(OriginFunc, HookLen, PAGE_EXECUTE_READWRITE, &amp;saved);</span><br><span class="line">    <span class="built_in">memcpy</span>(OriginFunc, OriginCode, HookLen);    <span class="comment">// 脱钩</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Call WriteProcessMemory(%p,%p,%p,%d,%p)&quot;</span>, hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class="line">    <span class="built_in">GetModuleFileNameEx</span>(hProcess, <span class="literal">NULL</span>, FILENAME, MAX_PATH);</span><br><span class="line">    <span class="built_in">wprintf</span>(<span class="string">L&quot;ProcessName=%s\n&quot;</span>, FILENAME);</span><br><span class="line">    BOOL ret = <span class="built_in">OriginFunc</span>(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class="line">    <span class="built_in">memcpy</span>(OriginFunc, HookCode, HookLen);      <span class="comment">// 重新挂勾</span></span><br><span class="line">    <span class="built_in">VirtualProtect</span>(OriginFunc, HookLen, saved, &amp;saved);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OriginFunc = WriteProcessMemory;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(OriginFunc, HookLen, PAGE_EXECUTE_READWRITE, &amp;saved);</span><br><span class="line">    <span class="built_in">memcpy</span>(OriginCode, OriginFunc, HookLen);    <span class="comment">// 保存初始前几字节</span></span><br><span class="line">    *(__int64*)(HookCode + <span class="number">2</span>) = (__int64)HackWriteProcessMemory;    <span class="comment">//构造Inline hook</span></span><br><span class="line">    <span class="built_in">memcpy</span>(OriginFunc, HookCode, HookLen);      <span class="comment">// Inline hook</span></span><br><span class="line">    <span class="built_in">VirtualProtect</span>(OriginFunc, HookLen, saved, &amp;saved);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hook done\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH: &#123;</span><br><span class="line">        <span class="built_in">AllocConsole</span>();</span><br><span class="line">        <span class="type">errno_t</span> err = <span class="built_in">freopen_s</span>(&amp;fp, <span class="string">&quot;CONOUT$&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">        <span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Failed to redirect stdout to CONOUT$\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">hack</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Xenos直接注入，输出结果<br><img src="/img/2024-9-1/9.png"><br>但很可惜，目前来看没啥用</p><h3 id="内核hook"><a href="#内核hook" class="headerlink" title="内核hook"></a>内核hook</h3><p>用户态搞不定那就进内核，锁定内核函数————MmCopyMemory<br>然后使用如下 hack2.sys进行加载，hook实现当调用者为 ace.sys时，打印传入参数。<br>（不得不说，hook在内核态中的实现，真的比用户态要复杂太多了<br>别说手搓了，就让我看出个所以然也要费好大劲，这里只能按照自己粗浅的理解，将代码分为大致几块）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BACKTRACE_DEPTH 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL <span class="string">L&quot;\\??\\xia0ji2333&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">UINT64 BaseAddr=<span class="literal">NULL</span>, DLLSize=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT g_Object = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;           <span class="comment">// 驱动DriverEntry  </span></span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName; <span class="comment">// 驱动全路径  </span></span><br><span class="line">    UNICODE_STRING BaseDllName; <span class="comment">// 驱动名字  </span></span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> newcode[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">// mov rax, xxx</span></span><br><span class="line">    <span class="number">0xFF</span>,<span class="number">0xE0</span>                                           <span class="comment">// jmp rax</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> oldcode[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">KIRQL <span class="title function_">WPOFFx64</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    KIRQL irql = KeRaiseIrqlToDpcLevel();</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 &amp;= <span class="number">0xfffffffffffeffff</span>;</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    _disable();</span><br><span class="line">    <span class="keyword">return</span> irql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WPONx64</span><span class="params">(KIRQL irql)</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 |= <span class="number">0x10000</span>;</span><br><span class="line">    _enable();</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    KeLowerIrql(irql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = oldcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Hook</span><span class="params">()</span> &#123;</span><br><span class="line">    KIRQL irql = WPOFFx64();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(newcode); i++) &#123;</span><br><span class="line">        target[i] = newcode[i];</span><br><span class="line">    &#125;</span><br><span class="line">    WPONx64(irql);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(*Copy)</span><span class="params">(PVOID, MM_COPY_ADDRESS, SIZE_T, ULONG, SIZE_T *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">bianliqudongmokuai</span><span class="params">(PUNICODE_STRING name, UINT64* pBaseAddr,UINT64* pSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    LDR_DATA_TABLE_ENTRY *TE, *Tmp;</span><br><span class="line">    TE = (LDR_DATA_TABLE_ENTRY*)g_Object-&gt;DriverSection;</span><br><span class="line">    PLIST_ENTRY LinkList;</span><br><span class="line">    ;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList = TE-&gt;InLoadOrderLinks.Flink;  </span><br><span class="line">    <span class="keyword">while</span> (LinkList != &amp;TE-&gt;InLoadOrderLinks)</span><br><span class="line">    &#123;</span><br><span class="line">        Tmp = (LDR_DATA_TABLE_ENTRY*)LinkList;</span><br><span class="line">        <span class="keyword">if</span> (RtlCompareUnicodeString(&amp;Tmp-&gt;BaseDllName, name, FALSE))</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;Found Module!\n&quot;</span>));</span><br><span class="line">            *pBaseAddr = (UINT64)(Tmp-&gt;DllBase);</span><br><span class="line">            *pSize = (UINT64)(Tmp-&gt;SizeOfImage);</span><br><span class="line">        &#125;</span><br><span class="line">        LinkList = LinkList-&gt;Flink;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS</span><br><span class="line">    <span class="title function_">myMmCopyMemory</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PVOID TargetAddress,</span></span><br><span class="line"><span class="params">    _In_ MM_COPY_ADDRESS SourceAddress,</span></span><br><span class="line"><span class="params">    _In_ SIZE_T NumberOfBytes,</span></span><br><span class="line"><span class="params">    _In_ ULONG Flags,</span></span><br><span class="line"><span class="params">    _Out_ PSIZE_T NumberOfBytesTransferred</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!BaseAddr) &#123;</span><br><span class="line">        UNICODE_STRING name;</span><br><span class="line">        RtlInitUnicodeString(&amp;name, <span class="string">L&quot;ace.sys&quot;</span>);</span><br><span class="line">        bianliqudongmokuai(&amp;name,&amp;BaseAddr,&amp;DLLSize);</span><br><span class="line">        <span class="keyword">if</span> (!BaseAddr) &#123;</span><br><span class="line">            <span class="keyword">goto</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PVOID backtrace[MAX_BACKTRACE_DEPTH];</span><br><span class="line">    USHORT capturedFrames = RtlCaptureStackBackTrace(<span class="number">0</span>, MAX_BACKTRACE_DEPTH, backtrace, <span class="literal">NULL</span>);</span><br><span class="line">    UINT64 addr = BaseAddr;</span><br><span class="line">    UINT64 size = DLLSize;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (USHORT i = <span class="number">0</span>; i &lt; capturedFrames; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (backtrace[i] &gt;= addr &amp;&amp; backtrace[i] &lt;= addr + size) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;xia0ji233: calls MmCopyMemory(%p,%p,%d,%p,%p)\n&quot;</span>), TargetAddress, SourceAddress, NumberOfBytes, Flags, NumberOfBytesTransferred);</span><br><span class="line">        kprintf((<span class="string">&quot;Here is data: &quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (INT64 i = <span class="number">0</span>; i &lt; NumberOfBytes; i++) &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;%02x &quot;</span>), *((<span class="type">unsigned</span> <span class="type">char</span>*)SourceAddress.VirtualAddress + i));</span><br><span class="line">        &#125;</span><br><span class="line">        kprintf((<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end:</span><br><span class="line">    Unhook();</span><br><span class="line">    Copy func = (Copy)target;</span><br><span class="line">    NTSTATUS s = func(TargetAddress, SourceAddress, NumberOfBytes, Flags, NumberOfBytesTransferred);</span><br><span class="line">    Hook();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteDevice</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start delete device\n&quot;</span>), __LINE__);</span><br><span class="line">    <span class="keyword">if</span> (pDriver-&gt;DeviceObject) &#123;</span><br><span class="line">        UNICODE_STRING Sym;</span><br><span class="line">        RtlInitUnicodeString(&amp;Sym, SYMBOL);</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Symbol\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteSymbolicLink(&amp;Sym);</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: Delete Device\n&quot;</span>), __LINE__);</span><br><span class="line">        IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">    &#125;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: end delete device\n&quot;</span>), __LINE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: start unload\n&quot;</span>), __LINE__);</span><br><span class="line">    Unhook();</span><br><span class="line">    DeleteDevice(pDriver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">CreateDevice</span><span class="params">(PDEVICE_OBJECT driver)</span> &#123;</span><br><span class="line">    NTSTATUS status;</span><br><span class="line">    UNICODE_STRING MyDriver;</span><br><span class="line">    PDEVICE_OBJECT device = <span class="literal">NULL</span>;</span><br><span class="line">    RtlInitUnicodeString(&amp;MyDriver, <span class="string">L&quot;\\DEVICE\\xia0ji233&quot;</span>);</span><br><span class="line">    status = IoCreateDevice(</span><br><span class="line">        driver,</span><br><span class="line">        <span class="keyword">sizeof</span>(driver-&gt;DeviceExtension),</span><br><span class="line">        &amp;MyDriver,</span><br><span class="line">        FILE_DEVICE_UNKNOWN,</span><br><span class="line">        FILE_DEVICE_SECURE_OPEN,</span><br><span class="line">        FALSE,</span><br><span class="line">        &amp;device</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (status == STATUS_SUCCESS) &#123;</span><br><span class="line">        UNICODE_STRING Sym;</span><br><span class="line">        RtlInitUnicodeString(&amp;Sym, SYMBOL);</span><br><span class="line">        status = IoCreateSymbolicLink(&amp;Sym, &amp;MyDriver);</span><br><span class="line">        <span class="keyword">if</span> (status == STATUS_SUCCESS) &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;Line %d:xia0ji233: symbol linked success\n&quot;</span>), __LINE__);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            kprintf((<span class="string">&quot;Line %d:xia0ji233: symbol linked failed status=%x\n&quot;</span>), __LINE__, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;Line %d:xia0ji233: create device fail status=%x\n&quot;</span>), __LINE__, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    CreateDevice(DriverObject);</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: RegistryPath = %S\n&quot;</span>), __LINE__, RegistryPath-&gt;Buffer);</span><br><span class="line">    target = MmCopyMemory;</span><br><span class="line">    kprintf((<span class="string">&quot;Line %d:xia0ji233: MmCopyMemory=%p\n&quot;</span>), __LINE__, target);</span><br><span class="line">    g_Object = DriverObject;</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(oldcode); i++) &#123;</span><br><span class="line">            oldcode[i] = target[i];</span><br><span class="line">        &#125;</span><br><span class="line">        *(UINT64*)(newcode + <span class="number">2</span>) = myMmCopyMemory;</span><br><span class="line">        Hook();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        kprintf((<span class="string">&quot;xia0ji233:hahaha&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而情况总是那么不尽人意，加载就蓝屏了……<br><img src="/img/2024-9-1/21.jpg"></p><p>蓝屏分析：<br>windbg中分析dmp文件可知，为异常码 0xc0000096（执行特权指令），原因是执行了“mov cr0,rax”<br>但不晓得如何解决……</p><h3 id="ace-sys加载"><a href="#ace-sys加载" class="headerlink" title="ace.sys加载"></a>ace.sys加载</h3><p>换个思路，目光先移回题目文件，看看能不能把从输出内容入手。<br>先打开 Dbgview，然后运行 hack.exe，最后加载 ace.sys（因为加了VMP，所以载的很慢），然后惊奇发现：Dbgview中 捕获并一直输出 token2<br><img src="/img/2024-9-1/25.jpg"><br>然后还注意到，返回了 Windows错误代码31<br><img src="/img/2024-9-1/26.png"></p><p>那么至此，题(1)所有token，就都到手了。</p><h2 id="题-1-其他思路"><a href="#题-1-其他思路" class="headerlink" title="题(1)其他思路"></a>题(1)其他思路</h2><p>虽说此时已经没题(1)啥事了，但是在看其他几位大佬的帖子时，注意到其找到token2的方式如下————<br>加载完 ace.sys后，打开 WinDbg会非预期地触发蓝屏（蓝屏代码0x00000ace），然后由此为切入点</p><h3 id="内核调试-I"><a href="#内核调试-I" class="headerlink" title="内核调试 I"></a>内核调试 I</h3><p>存在调试工具检测手段，其很可能来自于一个后续被创建的内核线程，因此锁定内核函数————nt!PsCreateSystemThread()</p><p>将目光转向本机上的WinDbg，开始操作————<br>“bp nt!PsCreateSystemThread”，给nt!PsCreateSystemThread()下断点<br>“g”&#x2F;f5，继续运行，加载一下ace.sys。此时 win10卡停在加载ace.sys的界面（未返回 Windows错误代码31），windbg中显示已断在 nt!PsCreateSystemThread()<br>“k”，查看调用堆栈，发现过于正常了，说明此时调用根本不来自ace.sys<br><img src="/img/2024-9-1/37.png"></p><p>那接下来咋整？只能 “g””k””g””k”…… 直到调用栈中显示 nt!PsCreateSystemThread()的调用者不再来自系统的内核函数<br>参考别人的帖子来看，大致到这样？<br><img src="/img/2024-9-1/39.jpg"></p><p>这一直傻愣愣地”g””k”，感觉有点折磨，想到可以用windbg脚本，循环执行”g””k”，每次去检查调用堆栈，直到匹配到如上图所示的情况后 再断下<br>但很无奈，网上我能搜到的教程，绝大部分讲的都只限于windbg每条命令的用法，鲜有提及脚本编写<br>就算有涉及，也难以实现我上述需求</p><h3 id="内核调试-II"><a href="#内核调试-II" class="headerlink" title="内核调试 II"></a>内核调试 II</h3><p>浅浅换个思路————<br>“bp nt!DbgPrintEx”，给nt!DbgPrintEx()下断点；<br>“g”；<br>“kv”，发现 nt!DbgPrintEx()被一个奇怪的地方调用，说明此时位于 ace.sys的逻辑中了；<br><img src="/img/2024-9-1/40.png"><br>“r”，查看rcx,rdx,r8,r9，获取 nt!DbgPrintEx()的参数，其中r8存着token2地址，rdx存着参数”Level”（调试级别，用于指定输出信息的详细程度）<br><img src="/img/2024-9-1/41.png"><br><img src="/img/2024-9-1/42.png"><br>“r rdx&#x3D;0”，把Level改为0，使得其输出 能在Windbg中显示<br>“gu”，Step Out，执行到 nt!DbgPrintEx()刚返回处，可以看到此时已成功输出 “token:”<br><img src="/img/2024-9-1/43.png"></p><p>“g””gu””g””gu”……，但为什么接下来都没见到输出了？原来每次调用 nt!DbgPrintEx()时，其传入rdx的值，即level的值都是5，所以上面的改法治标不治本<br>“uf rip”，反汇编 返回处附近的代码，进而找到调用 nt!DbgPrintEx()前，rdx被赋值的逻辑处，即 ffffd608-f0013e64<br><img src="/img/2024-9-1/44.jpg"><br>“eb ffffd608-f0013e65 00”，把此处”05”改成”00”<br><img src="/img/2024-9-1/45.png"><br>“uf rip”，再次查看反汇编，这下 改过来了<br><img src="/img/2024-9-1/46.jpg"><br>“bl”，在其中禁用断点<br>“g”，此时，token2源源不断的输出啦！<br><img src="/img/2024-9-1/47.png"></p><h2 id="题-2"><a href="#题-2" class="headerlink" title="题(2)"></a>题(2)</h2><h3 id="用户态调试"><a href="#用户态调试" class="headerlink" title="用户态调试"></a>用户态调试</h3><p>题(2)要求通过程序让 token1成功输出。在此之前，需先动调查看token1输出机制</p><p>思路整理：<br>最初云沙箱分析时，发现对 C:\2024GameSafeRace.token1有”文件写入”的行为。<br>但该路径下一开始是没有此文件的，所以在此之前肯定还存在”文件创建”的行为。<br>然而，实际运行hack.exe后，发现 该路径下甚至没有出现此文件。<br>所以可以判断，程序的”文件创建”过程出了问题，因此锁定API————CreateFileA()。</p><p>动调目标确认：<br>使用如下powershell脚本，实现 运行指定进程后，列举出该进程创建的新进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$before</span> = <span class="built_in">Get-Process</span></span><br><span class="line"><span class="built_in">Start-Process</span> <span class="string">&quot;C:\Users\12467\Desktop\...&quot;</span></span><br><span class="line"><span class="built_in">Start-Sleep</span> <span class="literal">-Seconds</span> <span class="number">5</span></span><br><span class="line"><span class="variable">$after</span> = <span class="built_in">Get-Process</span></span><br><span class="line"><span class="variable">$newProcesses</span> = <span class="built_in">Compare-Object</span> <span class="literal">-ReferenceObject</span> <span class="variable">$before</span> <span class="literal">-DifferenceObject</span> <span class="variable">$after</span> <span class="literal">-Property</span> Id, Name | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.SideIndicator <span class="operator">-eq</span> <span class="string">&quot;=&gt;&quot;</span> &#125;</span><br><span class="line"><span class="variable">$newProcesses</span> | <span class="built_in">ForEach-Object</span> &#123; <span class="built_in">Write-Output</span> <span class="variable">$_</span>.Name &#125;</span><br></pre></td></tr></table></figure><p>可以看到成功输出了<br><img src="/img/2024-9-1/59.png"><br>很显然，“文件创建”行为不会来自前几个进程，因此由此确认接下来动调的目标————Taskmgr.exe了。</p><p>附加进程调试：<br>别忘了调试器检测，因此先要给x64dbg改个名，然后启动 hack.exe，让x64dbg附加到 Taskmgr.exe，开始操作————<br>在 CreateFileA()处下断点，一直f9，直到断在该处；<br>rcx等 查看传递参数，其中[rsp+28]处 存着参数”dwCreationDisposition”，其值为3，可以从下图得知其含义<br><img src="/img/2024-9-1/52.jpg"><br>ctrl+f9运行到返回，然后再单步，从而来到刚调用完 CreateFileA()处；<br>rax 查看返回值，发现是 “FFFFFFFFFFFFFFFF（-1）”，说明调用失败</p><p>再来一次————<br>这次在程序刚断在 CreateFileA()时，把[rsp+28]处的值改为1；<br>接下来再运行，会发现 rax中的返回值已改，C:\2024GameSafeRace.token1中也已有文件<br><img src="/img/2024-9-1/54.png"></p><p>这样一来，后续程序的思路便有了————修改 调用CreateFileA()前 参数传递的逻辑，把”mov xxx 3”改为”mov xxx 1”.<br><img src="/img/2024-9-1/53.png"></p><h3 id="用户态patch"><a href="#用户态patch" class="headerlink" title="用户态patch"></a>用户态patch</h3><p>dll大致逻辑：<br>遍历所有线程，获取其入口地址处 前几个字节；<br>将遍历所得的 前几个字节，与目标的前几字节 比较，定位到调用 CreateFileA()的线程；<br><img src="/img/2024-9-1/55.jpg"><br>最后通过偏移，定位到该线程中的”mov xxx,3”语句，把 “03”改成”01”<br><img src="/img/2024-9-1/56.png"></p><p>hack4.dll如下————</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">_THREADINFOCLASS</span>&#123;</span><br><span class="line">    ThreadBasicInformation,</span><br><span class="line">    ThreadTimes,</span><br><span class="line">    ThreadPriority,</span><br><span class="line">    ThreadBasePriority,</span><br><span class="line">    ThreadAffinityMask,</span><br><span class="line">    ThreadImpersonationToken,</span><br><span class="line">    ThreadDescriptorTableEntry,</span><br><span class="line">    ThreadEnableAlignmentFaultFixup,</span><br><span class="line">    ThreadEventPair_Reusable,</span><br><span class="line">    ThreadQuerySetWin32StartAddress,</span><br><span class="line">    ThreadZeroTlsCell,</span><br><span class="line">    ThreadPerformanceCount,</span><br><span class="line">    ThreadAmILastThread,</span><br><span class="line">    ThreadIdealProcessor,</span><br><span class="line">    ThreadPriorityBoost,</span><br><span class="line">    ThreadSetTlsArrayAddress,</span><br><span class="line">    ThreadIsIoPending,</span><br><span class="line">    ThreadHideFromDebugger,</span><br><span class="line">    ThreadBreakOnTermination,</span><br><span class="line">    MaxThreadInfoClass</span><br><span class="line">&#125;THREADINFOCLASS;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CLIENT_ID</span>&#123;</span><br><span class="line">    HANDLE UniqueProcess;</span><br><span class="line">    HANDLE UniqueThread;</span><br><span class="line">&#125;CLIENT_ID;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_THREAD_BASIC_INFORMATION</span>&#123;</span><br><span class="line">    LONG ExitStatus;</span><br><span class="line">    PVOID TebBaseAddress;</span><br><span class="line">    CLIENT_ID ClientId;</span><br><span class="line">    LONG AffinityMask;</span><br><span class="line">    LONG Priority;</span><br><span class="line">    LONG BasePriority;</span><br><span class="line">&#125;THREAD_BASIC_INFORMATION,*PTHREAD_BASIC_INFORMATION;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="built_in">LONG</span> (__stdcall *ZwQueryInformationThread)(</span><br><span class="line">    IN HANDLE ThreadHandle,</span><br><span class="line">    IN THREADINFOCLASS ThreadInformationClass,</span><br><span class="line">    OUT PVOID ThreadInformation,</span><br><span class="line">    IN ULONG ThreadInformationLength,</span><br><span class="line">    OUT PULONG ReturnLength OPTIONAL</span><br><span class="line">    ) = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BYTE CODE[] = &#123;</span><br><span class="line">    <span class="number">0x40</span>,<span class="number">0x53</span>,<span class="number">0x48</span>,<span class="number">0x83</span>,<span class="number">0xEC</span>,<span class="number">0x20</span>,<span class="number">0x48</span>,<span class="number">0x8B</span>,<span class="number">0xD9</span>,<span class="number">0x48</span>,<span class="number">0x85</span>,<span class="number">0xC9</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BOOL <span class="title">hack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HANDLE hThreadSnap = INVALID_HANDLE_VALUE; </span><br><span class="line">    THREADENTRY32 te32; </span><br><span class="line">    DWORD dwOwnerPID = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">    hThreadSnap = <span class="built_in">CreateToolhelp32Snapshot</span>( TH32CS_SNAPTHREAD, <span class="number">0</span> ); </span><br><span class="line">    <span class="keyword">if</span>( hThreadSnap == INVALID_HANDLE_VALUE ) </span><br><span class="line">    <span class="keyword">return</span>( FALSE ); </span><br><span class="line"></span><br><span class="line">    te<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(THREADENTRY32 ); </span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">Thread32First</span>( hThreadSnap, &amp;te32 ) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>( hThreadSnap );    </span><br><span class="line">        <span class="keyword">return</span>( FALSE );</span><br><span class="line">    &#125;</span><br><span class="line">    ULONG64 StartAddress;</span><br><span class="line">    DWORD dwReturnLength;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>( te<span class="number">32.</span>th32OwnerProcessID == dwOwnerPID )</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (te<span class="number">32.</span>th32OwnerProcessID) &#123;</span><br><span class="line">                HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_QUERY_INFORMATION, FALSE, te<span class="number">32.</span>th32ThreadID);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    HINSTANCE hNTDLL = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;ntdll&quot;</span>);</span><br><span class="line">                    (FARPROC&amp;)ZwQueryInformationThread  = ::<span class="built_in">GetProcAddress</span>(hNTDLL,<span class="string">&quot;ZwQueryInformationThread&quot;</span>);</span><br><span class="line">                    PVOID startaddr;                                               </span><br><span class="line">                                        <span class="built_in">ZwQueryInformationThread</span>(</span><br><span class="line">                                                hThread,                                                 </span><br><span class="line">                                                ThreadQuerySetWin32StartAddress,       </span><br><span class="line">                                                &amp;startaddr,                                                       </span><br><span class="line">                                                <span class="built_in">sizeof</span>(startaddr),                                       </span><br><span class="line">                                                <span class="literal">NULL</span>                                                                </span><br><span class="line">                                                );</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">memcmp</span>(startaddr,CODE,<span class="built_in">sizeof</span>(CODE))) &#123;</span><br><span class="line">                        <span class="type">char</span> msg[<span class="number">0x50</span>];</span><br><span class="line">                        <span class="built_in">sprintf_s</span>(msg, <span class="built_in">sizeof</span>(msg), <span class="string">&quot;Found the Shellcode in address:%p&quot;</span>, startaddr);</span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, msg, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        <span class="built_in">sprintf_s</span>(msg, <span class="built_in">sizeof</span>(msg), <span class="string">&quot;Replace The byte %02x to 0x01 in addr %p\n&quot;</span>, *((BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>), (BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>);</span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, msg, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        *((BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">return</span> TRUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>( <span class="built_in">Thread32Next</span>(hThreadSnap, &amp;te32 ) );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>( hThreadSnap );</span><br><span class="line">    <span class="keyword">return</span>( FALSE );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">hack</span>()) &#123;</span><br><span class="line">            <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Fail&quot;</span>, <span class="string">&quot;FAIL&quot;</span>, MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Success&quot;</span>, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来运行hack.exe，Xenos中找到 Taskmgr.exe，直接注入 hack4.dll。<br>可以看到此时，C:\2024GameSafeRace.token1 成功被创建<br><img src="/img/2024-9-1/57.png"></p><h3 id="内核patch"><a href="#内核patch" class="headerlink" title="内核patch"></a>内核patch</h3><p>要通过程序（而非内核调试）的方式，让 token2成功输出。<br>换句话说，要通过驱动去修改 nt!DbgPrintEx()调用前的 rdx赋值逻辑</p><p>hack3.sys大致逻辑：<br>遍历所有内核线程，获取其入口地址处 前几个字节；<br>将遍历所得的 前几个字节，与目标的前几字节 比较，定位到调用 nt!DbgPrintEx()的内核线程；<br>通过偏移，定位到该线程中的”mov edx,5”语句，把 “05”改成”00”。</p><p>不过这里大佬的代码不能直接拿来用，有两个点需要修改————<br>1.大佬帖子里调用 nt!DbgPrintEx()的内核线程，其入口地址是”0xFFFFBB__________”；<br>而我这里通过 多次查看ETHREAD结构体，会发现入口地址不一样<br><img src="/img/2024-9-1/50.jpg"><br>2.我这里入口地址处前几个字节，与帖子里也不一样<br><img src="/img/2024-9-1/51.png"></p><p>以下为修改后的————</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kprintf(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span>;</span><br><span class="line">VOID <span class="title function_">UnloadDriver</span><span class="params">(PDRIVER_OBJECT DriverObject)</span>;</span><br><span class="line">NTSTATUS <span class="title function_">EnumerateKernelThreads</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(*ZWQUERYSYSTEMINFORMATION)</span><span class="params">(ULONG, PVOID, ULONG, PULONG)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SYSTEM_PROCESS_INFORMATION</span> &#123;</span></span><br><span class="line">    ULONG NextEntryOffset;</span><br><span class="line">    ULONG NumberOfThreads;</span><br><span class="line">    LARGE_INTEGER Reserved[<span class="number">3</span>];</span><br><span class="line">    LARGE_INTEGER CreateTime;</span><br><span class="line">    LARGE_INTEGER UserTime;</span><br><span class="line">    LARGE_INTEGER KernelTime;</span><br><span class="line">    UNICODE_STRING ImageName;</span><br><span class="line">    ULONG BasePriority;</span><br><span class="line">    HANDLE ProcessId;</span><br><span class="line">    HANDLE InheritedFromProcessId;</span><br><span class="line">&#125; SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SYSTEM_THREAD_INFORMATION</span> &#123;</span></span><br><span class="line">    LARGE_INTEGER KernelTime;</span><br><span class="line">    LARGE_INTEGER UserTime;</span><br><span class="line">    LARGE_INTEGER CreateTime;</span><br><span class="line">    ULONG WaitTime;</span><br><span class="line">    PVOID StartAddress;</span><br><span class="line">    CLIENT_ID ClientId;</span><br><span class="line">    ULONG Priority;</span><br><span class="line">    LONG BasePriority;</span><br><span class="line">    ULONG ContextSwitchCount;</span><br><span class="line">    LONG State;</span><br><span class="line">    LONG WaitReason;</span><br><span class="line">&#125; SYSTEM_THREAD_INFORMATION, * PSYSTEM_THREAD_INFORMATION;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">SYSTEM_INFORMATION_CLASS</span> &#123;</span></span><br><span class="line">    SystemProcessInformation = <span class="number">5</span></span><br><span class="line">&#125; SYSTEM_INFORMATION_CLASS;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SystemModuleInformation 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//——————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> CODE[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x08</span>, <span class="number">0x58</span>, <span class="number">0x89</span>, <span class="number">0x48</span>, <span class="number">0xC4</span>, <span class="number">0x8B</span>, <span class="number">0x48</span>, <span class="number">0x55</span>, <span class="number">0x20</span>, <span class="number">0x70</span>, <span class="number">0x89</span>, <span class="number">0x4C</span>, <span class="number">0x18</span>, <span class="number">0x78</span>, <span class="number">0x89</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">KIRQL <span class="title function_">WPOFFx64</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    KIRQL irql = KeRaiseIrqlToDpcLevel();</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 &amp;= <span class="number">0xfffffffffffeffff</span>;</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    _disable();</span><br><span class="line">    <span class="keyword">return</span> irql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WPONx64</span><span class="params">(KIRQL irql)</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT64 cr0 = __readcr0();</span><br><span class="line">    cr0 |= <span class="number">0x10000</span>;</span><br><span class="line">    _enable();</span><br><span class="line">    __writecr0(cr0);</span><br><span class="line">    KeLowerIrql(irql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">MDLWriteMemory(PVOID pBaseAddress, PVOID pWriteData, SIZE_T writeDataSize)</span><br><span class="line">&#123;</span><br><span class="line">    PMDL pMdl = <span class="literal">NULL</span>;</span><br><span class="line">    PVOID pNewAddress = <span class="literal">NULL</span>;</span><br><span class="line">    pMdl = IoAllocateMdl(pBaseAddress, writeDataSize, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pMdl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    MmBuildMdlForNonPagedPool(pMdl);</span><br><span class="line">    pNewAddress = MmMapLockedPagesSpecifyCache(pMdl, KernelMode, MmNonCached, <span class="literal">NULL</span>, FALSE, NormalPagePriority);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pNewAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        IoFreeMdl(pMdl);</span><br><span class="line">    &#125;</span><br><span class="line">    RtlCopyMemory(pNewAddress, pWriteData, writeDataSize);</span><br><span class="line">    MmUnmapLockedPages(pNewAddress, pMdl);</span><br><span class="line">    IoFreeMdl(pMdl);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">EnumerateKernelThreads</span><span class="params">()</span> &#123;</span><br><span class="line">    UNICODE_STRING routineName;</span><br><span class="line">    RtlInitUnicodeString(&amp;routineName, <span class="string">L&quot;ZwQuerySystemInformation&quot;</span>);</span><br><span class="line">    ZWQUERYSYSTEMINFORMATION ZwQuerySystemInformation = (ZWQUERYSYSTEMINFORMATION)MmGetSystemRoutineAddress(&amp;routineName);</span><br><span class="line">    <span class="keyword">if</span> (!ZwQuerySystemInformation) &#123;</span><br><span class="line">        <span class="keyword">return</span> STATUS_UNSUCCESSFUL;</span><br><span class="line">    &#125;</span><br><span class="line">    ULONG returnLength = <span class="number">0</span>;</span><br><span class="line">    ZwQuerySystemInformation(SystemProcessInformation, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;returnLength);</span><br><span class="line">    PVOID buffer = ExAllocatePool2(POOL_FLAG_NON_PAGED, returnLength, <span class="string">&#x27;MyTa&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="keyword">return</span> STATUS_INSUFFICIENT_RESOURCES;</span><br><span class="line">    &#125;</span><br><span class="line">    NTSTATUS status = ZwQuerySystemInformation(SystemProcessInformation, buffer, returnLength, &amp;returnLength);</span><br><span class="line">    <span class="keyword">if</span> (!NT_SUCCESS(status)) &#123;</span><br><span class="line">        ExFreePool(buffer);</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span>; k++) &#123;</span><br><span class="line">        PSYSTEM_PROCESS_INFORMATION current = (PSYSTEM_PROCESS_INFORMATION)buffer;</span><br><span class="line">        <span class="keyword">while</span> (TRUE) &#123;</span><br><span class="line">            PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(current + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (ULONG i = <span class="number">0</span>; i &lt; current-&gt;NumberOfThreads; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (((UINT64)(threadInfo-&gt;StartAddress) &amp; <span class="number">0xFFFF000000000000</span>) == <span class="number">0xFFFF000000000000</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (MmIsAddressValid(threadInfo-&gt;StartAddress) &amp;&amp; RtlEqualMemory(threadInfo-&gt;StartAddress, CODE, <span class="keyword">sizeof</span>(CODE))) &#123;</span><br><span class="line">                        kprintf((<span class="string">&quot;Shellcode Found in %p\n&quot;</span>), threadInfo-&gt;StartAddress);</span><br><span class="line">                        <span class="type">char</span>* shellcode = threadInfo-&gt;StartAddress;</span><br><span class="line">                        MDLWriteMemory(shellcode + <span class="number">0x51</span> + <span class="number">1</span>, <span class="string">&quot;\x00&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                        MDLWriteMemory(shellcode + <span class="number">0xb4</span> + <span class="number">1</span>, <span class="string">&quot;\x00&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                        MDLWriteMemory(shellcode + <span class="number">0x124</span> + <span class="number">1</span>, <span class="string">&quot;\x00&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                threadInfo++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (current-&gt;NextEntryOffset == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            current = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)current + current-&gt;NextEntryOffset);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExFreePool(buffer);</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">UnloadDriver</span><span class="params">(PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(DriverObject);</span><br><span class="line">    kprintf((<span class="string">&quot;Driver Unloaded\n&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span> &#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(RegistryPath);</span><br><span class="line">    DriverObject-&gt;DriverUnload = UnloadDriver;</span><br><span class="line">    kprintf((<span class="string">&quot;Driver Loaded\n&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> EnumerateKernelThreads();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载后难得没有返回Windows错误代码，说明可以正常运行。</p><p>接下来，加载ace.sys后，再多加载几次该驱动<br>好消息，可以看到输出了部分内容<br><img src="/img/2024-9-1/49.png"><br>坏消息，除此之外啥都没输出，不知道问题出在哪里……这里算是个存疑</p><h2 id="题-3"><a href="#题-3" class="headerlink" title="题(3)"></a>题(3)</h2><h2 id="用户态patch-1"><a href="#用户态patch-1" class="headerlink" title="用户态patch"></a>用户态patch</h2><p>题(3)要求让 token1往指定的位置写入。简单来讲，就是修改 CreateFileA()的参数”lpFileName”。<br>所以和前面一个dll的思路差不多</p><p>dll大致逻辑————<br>内存中分配一块区域，用于存储 自定义路径，获取其指针；<br>通过偏移定位到该线程中的”mov rax,A727C0574231D098”语句，把操作数（原路径的指针）改为 自定义路径的指针</p><p>hack5.dll如下————</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出处：https://www.52pojie.cn/thread-1913623-1-1.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NewDest <span class="string">&quot;E:\\MyOwnPath.token1&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">_THREADINFOCLASS</span>&#123;</span><br><span class="line">    ThreadBasicInformation,</span><br><span class="line">    ThreadTimes,</span><br><span class="line">    ThreadPriority,</span><br><span class="line">    ThreadBasePriority,</span><br><span class="line">    ThreadAffinityMask,</span><br><span class="line">    ThreadImpersonationToken,</span><br><span class="line">    ThreadDescriptorTableEntry,</span><br><span class="line">    ThreadEnableAlignmentFaultFixup,</span><br><span class="line">    ThreadEventPair_Reusable,</span><br><span class="line">    ThreadQuerySetWin32StartAddress,</span><br><span class="line">    ThreadZeroTlsCell,</span><br><span class="line">    ThreadPerformanceCount,</span><br><span class="line">    ThreadAmILastThread,</span><br><span class="line">    ThreadIdealProcessor,</span><br><span class="line">    ThreadPriorityBoost,</span><br><span class="line">    ThreadSetTlsArrayAddress,</span><br><span class="line">    ThreadIsIoPending,</span><br><span class="line">    ThreadHideFromDebugger,</span><br><span class="line">    ThreadBreakOnTermination,</span><br><span class="line">    MaxThreadInfoClass</span><br><span class="line">&#125;THREADINFOCLASS;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CLIENT_ID</span>&#123;</span><br><span class="line">    HANDLE UniqueProcess;</span><br><span class="line">    HANDLE UniqueThread;</span><br><span class="line">&#125;CLIENT_ID;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_THREAD_BASIC_INFORMATION</span>&#123;</span><br><span class="line">    LONG ExitStatus;</span><br><span class="line">    PVOID TebBaseAddress;</span><br><span class="line">    CLIENT_ID ClientId;</span><br><span class="line">    LONG AffinityMask;</span><br><span class="line">    LONG Priority;</span><br><span class="line">    LONG BasePriority;</span><br><span class="line">&#125;THREAD_BASIC_INFORMATION,*PTHREAD_BASIC_INFORMATION;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="built_in">LONG</span> (__stdcall *ZwQueryInformationThread)(</span><br><span class="line">    IN HANDLE ThreadHandle,</span><br><span class="line">    IN THREADINFOCLASS ThreadInformationClass,</span><br><span class="line">    OUT PVOID ThreadInformation,</span><br><span class="line">    IN ULONG ThreadInformationLength,</span><br><span class="line">    OUT PULONG ReturnLength OPTIONAL</span><br><span class="line">    ) = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BYTE CODE[] = &#123;</span><br><span class="line">    <span class="number">0x40</span>,<span class="number">0x53</span>,<span class="number">0x48</span>,<span class="number">0x83</span>,<span class="number">0xEC</span>,<span class="number">0x20</span>,<span class="number">0x48</span>,<span class="number">0x8B</span>,<span class="number">0xD9</span>,<span class="number">0x48</span>,<span class="number">0x85</span>,<span class="number">0xC9</span></span><br><span class="line">&#125;;</span><br><span class="line">BYTE HACKCODE[] = &#123;</span><br><span class="line">    <span class="number">0x48</span>,<span class="number">0xB9</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>   <span class="comment">//mov rcx,xxx</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BOOL <span class="title">hack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HANDLE hThreadSnap = INVALID_HANDLE_VALUE; </span><br><span class="line">    THREADENTRY32 te32; </span><br><span class="line">    DWORD dwOwnerPID = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">    hThreadSnap = <span class="built_in">CreateToolhelp32Snapshot</span>( TH32CS_SNAPTHREAD, <span class="number">0</span> ); </span><br><span class="line">    <span class="keyword">if</span>( hThreadSnap == INVALID_HANDLE_VALUE ) </span><br><span class="line">    <span class="keyword">return</span>( FALSE ); </span><br><span class="line"></span><br><span class="line">    te<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(THREADENTRY32 ); </span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">Thread32First</span>( hThreadSnap, &amp;te32 ) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>( hThreadSnap );    </span><br><span class="line">        <span class="keyword">return</span>( FALSE );</span><br><span class="line">    &#125;</span><br><span class="line">    ULONG64 StartAddress;</span><br><span class="line">    DWORD dwReturnLength;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>( te<span class="number">32.</span>th32OwnerProcessID == dwOwnerPID )</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (te<span class="number">32.</span>th32OwnerProcessID) &#123;</span><br><span class="line">                HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_QUERY_INFORMATION, FALSE, te<span class="number">32.</span>th32ThreadID);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    HINSTANCE hNTDLL = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;ntdll&quot;</span>);</span><br><span class="line">                    (FARPROC&amp;)ZwQueryInformationThread  = ::<span class="built_in">GetProcAddress</span>(hNTDLL,<span class="string">&quot;ZwQueryInformationThread&quot;</span>);</span><br><span class="line">                    PVOID startaddr;                                            </span><br><span class="line">                                        <span class="built_in">ZwQueryInformationThread</span>(</span><br><span class="line">                                                hThread,                                                      </span><br><span class="line">                                                ThreadQuerySetWin32StartAddress,        </span><br><span class="line">                                                &amp;startaddr,                                                   </span><br><span class="line">                                                <span class="built_in">sizeof</span>(startaddr),                                      </span><br><span class="line">                                                <span class="literal">NULL</span>                                                                </span><br><span class="line">                                                );</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">memcmp</span>(startaddr,CODE,<span class="built_in">sizeof</span>(CODE))) &#123;</span><br><span class="line">                        <span class="type">char</span> msg[<span class="number">0x50</span>];</span><br><span class="line">                        <span class="built_in">sprintf_s</span>(msg, <span class="built_in">sizeof</span>(msg), <span class="string">&quot;Found the Shellcode in address:%p&quot;</span>, startaddr);</span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, msg, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        <span class="built_in">sprintf_s</span>(msg, <span class="built_in">sizeof</span>(msg), <span class="string">&quot;Replace The byte %02x to 0x01 in addr %p\n&quot;</span>, *((BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>), (BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>);</span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, msg, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        *((BYTE*)startaddr - <span class="number">0x5ddb</span> + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 新添加逻辑</span></span><br><span class="line">                        LPVOID buffer=<span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="number">0x1000</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">                        <span class="built_in">memcpy</span>(buffer, NewDest, <span class="built_in">sizeof</span>(NewDest));</span><br><span class="line">                        *(ULONG64*)(HACKCODE + <span class="number">2</span>) = (ULONG64)buffer;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">memcpy</span>((BYTE*)startaddr - <span class="number">0x5ddb</span> - <span class="number">0x67</span>, HACKCODE, <span class="built_in">sizeof</span>(HACKCODE));</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;PATH replace to &quot;</span> NewDest, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">                        <span class="keyword">return</span> TRUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>( <span class="built_in">Thread32Next</span>(hThreadSnap, &amp;te32 ) );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>( hThreadSnap );</span><br><span class="line">    <span class="keyword">return</span>( FALSE );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">hack</span>()) &#123;</span><br><span class="line">            <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Fail&quot;</span>, <span class="string">&quot;FAIL&quot;</span>, MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Success&quot;</span>, <span class="string">&quot;Success&quot;</span>, MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入后，看样子是成功了<br><img src="/img/2024-9-1/58.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.52pojie.cn/thread-1913623-1-1.html">https://www.52pojie.cn/thread-1913623-1-1.html</a><br><a href="https://bbs.kanxue.com/thread-281351.htm">https://bbs.kanxue.com/thread-281351.htm</a><br><a href="https://bbs.kanxue.com/homepage-878559.htm">https://bbs.kanxue.com/homepage-878559.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊程序逆向</title>
      <link href="/2024/06/23/2024-6-23%20%E7%89%B9%E6%AE%8A%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/"/>
      <url>/2024/06/23/2024-6-23%20%E7%89%B9%E6%AE%8A%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>逆向过程中，常常会遇到一些所使用的 语言、框架、平台较为特殊的程序<br>对其逆向手段与常规途径有所不同，故在此汇总</p><h1 id="特殊语言"><a href="#特殊语言" class="headerlink" title="特殊语言"></a>特殊语言</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>从正向开发的角度来看，C++在C的基础上多了不少特性，就不赘述了<br>这里仅从逆向的角度，记录一些影响分析过程的特性：</p><ol><li>类</li></ol><p>1）实例<br>类与结构体的实例 在存储上类似<br>作为值类型，实例直接存放数据的值；数据在哪 看实例申明位置，一般在栈中</p><p>当实例作为参数时，一般不直接传递实例本身，而是传递其引用或指针<br>以下为三种情况下的底层行为<br><img src="/img/2024-6-23/39.jpg"></p><p>2）非静态成员函数<br>类的非静态成员函数 在实际调用时，会隐式传递一个this指针作为第一个参数，其指向调用该函数的实例<br><img src="/img/2024-6-23/37.jpg"><br>这也是为什么某些函数在IDA中被调用时，会比源码中多出一个传参（比如Android native的JNI函数）<br><img src="/img/2024-6-23/38.jpg"></p><p>3）虚函数<br>拥有虚函数的类，其实例的内存布局较为特殊<br><img src="/img/2024-6-23/29.jpg"></p><ol start="2"><li>STL库</li></ol><p>作为C++标准库的一部分，提供了许多通用的数据结构和算法，包括以下重要组件————<br>容器：用于存储和管理数据的数据结构。常见容器有 std::vector（动态数组）、std::list（双向链表）<br>算法：用于操作容器中数据的通用算法。常见算法有 std::sort（排序算法）、std::find（查找算法）</p><ol start="3"><li>异常处理机制</li></ol><p>核心在于理解栈展开的过程<br><img src="/img/2024-6-23/28.jpg"><br>要注意，虽然C++下的的 try、catch，与 Windows SEH下的 __try、__except有几分相似，但本质上具有不同结构</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>作为解释型语言，逃脱不了暴露源码的共性，因此一般要面对的是经过Pyinstaller打包后的exe<br>不过逆向也比较清晰，先pyinstxtractor解包得到pyc字节码文件，而后pycdc反编译</p><p>但由于反编译代码可读性过分高了，因此存在一些反pycdc手段：</p><ol><li>基于pyc文件结构进行加花，如更改Magic Number<br><img src="/img/2024-6-23/2.jpg"><br>这就需要去查看 Python各版本的<a href="https://www.cnblogs.com/Here-is-SG/p/15885799.html">Magic Number对照表</a>，进行pyc修复</li><li>通过添加错误字节码，造成反编译失败<br>此时就得放弃反编译，转而用pydisasm等工具进行反汇编，从python反汇编代码入手</li><li>引入Cython，将逻辑放入平台原生机器码中（有点像Android native层防护），而后以模块的形式import，具体见下方</li></ol><h2 id="Cython"><a href="#Cython" class="headerlink" title="Cython"></a>Cython</h2><p>作为python的扩展模块和超集，引入了OOP原则，拥有十分特殊的编译流程<br><img src="/img/2024-6-23/1.png"><br>一般出现于 pyinstxtractor解包出来的so、pyd文件，但由于Cython本身的特性，其反编译后的形态与常规ELF有很大不同</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>Go的函数调用约定与 C&#x2F;C++有所不同，反编译后在可读性上会稍有降低<br>不过重点还是在于函数名的恢复，可使用IDA自带插件进行</p><h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><p>作为解释型语言，可使用unluac工具对其字节码文件进行反编译</p><h1 id="特殊框架"><a href="#特殊框架" class="headerlink" title="特殊框架"></a>特殊框架</h1><h2 id="QuickJS"><a href="#QuickJS" class="headerlink" title="QuickJS"></a>QuickJS</h2><p>概述：<br>QuickJS引擎有较为独特的运行机制，首先将js源码转换成为C，不过此时的C源码本质上是一个解释器（js字节码存储在数组中被解释），然后C被编译为机器码</p><p>逆向：</p><ol><li>dump出程序中的 JS字节码</li><li>使用qjsc（需要修改源码，添加反汇编打印功能） 将任意 example.js编译为 example.c</li><li>example.c中 替换qjsc_hello[]为上述字节码</li><li>编译 example.c，运行后查看打印出的 反汇编代码</li></ol><h2 id="eBPF"><a href="#eBPF" class="headerlink" title="eBPF"></a>eBPF</h2><p>见此<a href="https://tttang.com/archive/1550/#toc_0x00-bpf">文章</a></p><h2 id="Ruby-Packer"><a href="#Ruby-Packer" class="headerlink" title="Ruby Packer"></a>Ruby Packer</h2><p>概述：<br>本质上是一个打包工具，将ruby源码文件 打包成squashfs文件系统，放入Ruby解释器<br>因此逆向的关键在于解包</p><p>逆向（解包）：<br>使用 binwalk进行文件提取，生成 extracted文件夹<br><img src="/img/2024-6-23/3.png"><br>其中“\squashfs-root\enclose_io_memfs\local\out.rb” 为主程序</p><h2 id="Unicorn"><a href="#Unicorn" class="headerlink" title="Unicorn"></a>Unicorn</h2><p>概述：<br>一个基于QEMU的CPU仿真框架，其在逆向过程中常用于模拟执行、代码追踪，这里通过一个简单的脚本展示一下常用API</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> addressof</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 各地址值，可以通过动调得到 </span></span><br><span class="line">ADDRESS = <span class="number">0xE51000</span>          <span class="comment"># 程序.text段加载的基址，可以通过ctrl+s查看</span></span><br><span class="line">INPUT_ADDRESS = <span class="number">0xE5701D</span>    <span class="comment"># input的存放地址</span></span><br><span class="line">KEY_ADDRESS = <span class="number">0xE5705C</span>      <span class="comment"># key的存放地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;...&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.seek(<span class="number">0x400</span>)                <span class="comment"># 来到文件.text节的偏移处</span></span><br><span class="line">    X64_CODE = file.read(<span class="number">0x4400</span>)    <span class="comment"># 读取整个.text节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Unidbg</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, flag</span>):</span><br><span class="line">        <span class="comment"># 初始化Unicorn模拟器实例，设置架构和位数</span></span><br><span class="line">        mu = Uc(UC_ARCH_X86, UC_MODE_64)</span><br><span class="line">        <span class="comment"># 在加载基址处分配内存</span></span><br><span class="line">        mu.mem_map(ADDRESS, <span class="number">0x1000000</span>)</span><br><span class="line">        <span class="comment"># 初始化内存</span></span><br><span class="line">        mu.mem_write(ADDRESS, X64_CODE)</span><br><span class="line">        mu.mem_write(INPUT_ADDRESS, flag)     </span><br><span class="line">        mu.mem_write(KEY_ADDRESS, <span class="string">b&#x27;\x90\xF0\x70\x7C\x52\x05\x91\x90\xAA\xDA\x8F\xFA\x7B\xBC\x79\x4D&#x27;</span>)</span><br><span class="line">        <span class="comment"># 初始化寄存器</span></span><br><span class="line">        mu.reg_write(UC_X86_REG_RAX, <span class="number">0x00000000</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RBX, <span class="number">0x0107102D</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RCX, <span class="number">0x5F55E617</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RDX, <span class="number">0x00000001</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RSI, INPUT_ADDRESS)  <span class="comment"># 指向flag</span></span><br><span class="line">        mu.reg_write(UC_X86_REG_RDI, KEY_ADDRESS)    <span class="comment"># 指向key</span></span><br><span class="line">        mu.reg_write(UC_X86_REG_RBP, <span class="number">0x00F5FF38</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RSP, <span class="number">0x00F5FF28</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, <span class="number">0x00E55310</span>)</span><br><span class="line">        <span class="comment"># 添加代码执行钩子，特定事件下触发回调函数</span></span><br><span class="line">        mu.hook_add(UC_HOOK_CODE, <span class="variable language_">self</span>.trace)               <span class="comment"># 发生指令执行事件</span></span><br><span class="line">        mu.hook_add(UC_HOOK_MEM_READ, <span class="variable language_">self</span>.hook_mem_read)   <span class="comment"># 发生内存读取事件  </span></span><br><span class="line">        <span class="comment"># 初始化代码追踪过程中所需的参数</span></span><br><span class="line">        <span class="variable language_">self</span>.mu = mu</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        self.except_addr = 0</span></span><br><span class="line"><span class="string">        self.path = []        # 用来保存代码的跳转轨迹</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 初始化Capstone反汇编实例，设置架构和位数</span></span><br><span class="line">        <span class="variable language_">self</span>.md = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 回调函数1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trace</span>(<span class="params">self, mu, address, size, data</span>):</span><br><span class="line">        <span class="comment"># 追踪cmp或test指令，并打印其地址</span></span><br><span class="line">        disasm = <span class="variable language_">self</span>.md.disasm(mu.mem_read(address, size), address)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> disasm:</span><br><span class="line">            mnemonic = i.mnemonic</span><br><span class="line">            <span class="keyword">if</span> mnemonic == <span class="string">&#x27;cmp&#x27;</span> <span class="keyword">or</span> mnemonic == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;Instruction <span class="subst">&#123;mnemonic&#125;</span> at <span class="subst">&#123;<span class="built_in">hex</span>(address)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        # 判断是否发生了代码跳转，并记录跳转轨迹</span></span><br><span class="line"><span class="string">        if address != self.except_addr:</span></span><br><span class="line"><span class="string">            self.path.append(address)</span></span><br><span class="line"><span class="string">        self.except_addr = address + size</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 回调函数2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hook_mem_read</span>(<span class="params">self, mu, access, address, size, value, data</span>):</span><br><span class="line">        <span class="comment"># 追踪访问input或key的指令，并打印其地址</span></span><br><span class="line">        <span class="keyword">if</span> address &gt;= INPUT_ADDRESS <span class="keyword">and</span> address &lt;= INPUT_ADDRESS + <span class="number">41</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Read input[<span class="subst">&#123;address - INPUT_ADDRESS&#125;</span>] at <span class="subst">&#123;<span class="built_in">hex</span>(mu.reg_read(UC_X86_REG_RIP))&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> address &gt;= KEY_ADDRESS <span class="keyword">and</span> address &lt;= KEY_ADDRESS + <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Read key[<span class="subst">&#123;address - KEY_ADDRESS&#125;</span>] at <span class="subst">&#123;<span class="built_in">hex</span>(mu.reg_read(UC_X86_REG_RIP))&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 虚拟机启动函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.mu.emu_start(<span class="number">0x00E55310</span>, -<span class="number">1</span>)     <span class="comment"># 从RIP处启动</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        print([hex(addr)for addr in self.path])</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口点，传入flag</span></span><br><span class="line">unidbg_obj = Unidbg(<span class="string">b&#x27;...&#x27;</span>)</span><br><span class="line">unidbg_obj.start()</span><br></pre></td></tr></table></figure><p>接下来主要关注如何对使用Unicorn框架的程序进行分析</p><p>逆向（符号还原）：</p><ol><li>将Unicorn库文件（如unicorn.dll）拖入IDA，得到其IDA数据库文件（unicorn.dll.i64）</li><li>使用IDA的BinDiff插件，将当前程序与其比较，然后导入符号进前者<br><img src="/img/2024-6-23/27.jpg"></li></ol><p>逆向（获取参数含义）：<br>重点在于获取程序初始化Uc实例时，传入的参数的含义<br>可直接从Unicorn源码中获取该信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.\ANACONDA\Lib\site-packages\unicorn\include\unicorn</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Architecture type</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">uc_arch</span> &#123;</span></span><br><span class="line">UC_ARCH_ARM = <span class="number">1</span>, <span class="comment">// ARM architecture (including Thumb, Thumb-2)</span></span><br><span class="line">UC_ARCH_ARM64,   <span class="comment">// ARM-64, also called AArch64</span></span><br><span class="line">UC_ARCH_MIPS,    <span class="comment">// Mips architecture</span></span><br><span class="line">UC_ARCH_X86,     <span class="comment">// X86 architecture (including x86 &amp; x86-64)</span></span><br><span class="line">UC_ARCH_PPC,     <span class="comment">// PowerPC architecture</span></span><br><span class="line">UC_ARCH_SPARC,   <span class="comment">// Sparc architecture</span></span><br><span class="line">UC_ARCH_M68K,    <span class="comment">// M68K architecture</span></span><br><span class="line">UC_ARCH_RISCV,   <span class="comment">// RISCV architecture</span></span><br><span class="line">UC_ARCH_S390X,   <span class="comment">// S390X architecture</span></span><br><span class="line">UC_ARCH_TRICORE, <span class="comment">// TriCore architecture</span></span><br><span class="line">UC_ARCH_MAX,</span><br><span class="line">&#125; uc_arch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mode type</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">uc_mode</span> &#123;</span></span><br><span class="line">    UC_MODE_LITTLE_ENDIAN = <span class="number">0</span>,    <span class="comment">// little-endian mode (default mode)</span></span><br><span class="line">    UC_MODE_BIG_ENDIAN = <span class="number">1</span> &lt;&lt; <span class="number">30</span>, <span class="comment">// big-endian mode</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// arm / arm64</span></span><br><span class="line">    UC_MODE_ARM = <span class="number">0</span>,        <span class="comment">// ARM mode</span></span><br><span class="line">    UC_MODE_THUMB = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">// THUMB mode (including Thumb-2)</span></span><br><span class="line">    <span class="comment">// Depreciated, use UC_ARM_CPU_* with uc_ctl instead.</span></span><br><span class="line">    UC_MODE_MCLASS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,  <span class="comment">// ARM&#x27;s Cortex-M series.</span></span><br><span class="line">    UC_MODE_V8 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,      <span class="comment">// ARMv8 A32 encodings for ARM</span></span><br><span class="line">    UC_MODE_ARMBE8 = <span class="number">1</span> &lt;&lt; <span class="number">10</span>, <span class="comment">// Big-endian data and Little-endian code.</span></span><br><span class="line">                              <span class="comment">// Legacy support for UC1 only.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// arm (32bit) cpu types</span></span><br><span class="line">    <span class="comment">// Depreciated, use UC_ARM_CPU_* with uc_ctl instead.</span></span><br><span class="line">    UC_MODE_ARM926 = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,  <span class="comment">// ARM926 CPU type</span></span><br><span class="line">    UC_MODE_ARM946 = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,  <span class="comment">// ARM946 CPU type</span></span><br><span class="line">    UC_MODE_ARM1176 = <span class="number">1</span> &lt;&lt; <span class="number">9</span>, <span class="comment">// ARM1176 CPU type</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mips</span></span><br><span class="line">    UC_MODE_MICRO = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,    <span class="comment">// MicroMips mode (currently unsupported)</span></span><br><span class="line">    UC_MODE_MIPS3 = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,    <span class="comment">// Mips III ISA (currently unsupported)</span></span><br><span class="line">    UC_MODE_MIPS32R6 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>, <span class="comment">// Mips32r6 ISA (currently unsupported)</span></span><br><span class="line">    UC_MODE_MIPS32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,   <span class="comment">// Mips32 ISA</span></span><br><span class="line">    UC_MODE_MIPS64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,   <span class="comment">// Mips64 ISA</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ppc</span></span><br><span class="line">    UC_MODE_PPC32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// 32-bit mode</span></span><br><span class="line">    UC_MODE_PPC64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 64-bit mode (currently unsupported)</span></span><br><span class="line">    UC_MODE_QPX =</span><br><span class="line">        <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">// Quad Processing eXtensions mode (currently unsupported)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// riscv</span></span><br><span class="line">    UC_MODE_RISCV32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// 32-bit mode</span></span><br><span class="line">    UC_MODE_RISCV64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 64-bit mode</span></span><br><span class="line">&#125; uc_mode;</span><br></pre></td></tr></table></figure><h2 id="Intel-VT-x"><a href="#Intel-VT-x" class="headerlink" title="Intel VT-x"></a>Intel VT-x</h2><p>概述：<br>intel处理器的硬件虚拟化技术 简单拉来讲遵循如下运行逻辑：</p><ol><li>Guest OS每执行特殊指令、触发异常……等行为时，会产生 VM-Exit事件</li><li>Guest OS此时会将控制权转移给 Host OS</li><li>Guest OS中针对不同 Eixt-Reasons（退出码），转交给不同 VM-Exit Handler处理<br><img src="/img/2024-6-23/9.jpg"><br>对于进一步的细节实现，可以去翻阅intel白皮书的”Volume 3C”部分</li></ol><p>逆向：<br>和常规VM的分析比较类似，关键还是在于分析Guest OS中基于switch-case结构的退出码处理逻辑，<br>分析出各退出码所使用的Handler</p><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><p>概述：<br>一个跨平台的UI开发工具包，这里主要涉及其在Android平台下的逆向<br>通过查看apk如下部分，可以看出使用了Flutter<br><img src="/img/2024-6-23/7.jpg"></p><p>逆向（静态方法）：</p><ol><li>从apk中提取 ”&#x2F;lib&#x2F;arm64-v8a“文件夹</li><li>使用 Blutter，从libapp.so中解析 Dart虚拟机快照<br><img src="/img/2024-6-23/8.png"></li><li>IDA中，使用输出文件下的 “\ida_script\addNames.py”，对 libapp.so进行符号还原</li><li>libapp.so中，查看常用 事件处理回调函数，如 onSubmitted(),onTap()</li></ol><p>逆向（动态方法）：</p><ol><li>使用 reFlutter，编译修改过的 libflutter.so</li><li>重打包进apk，启动后 自动获取快照</li></ol><h1 id="特殊平台"><a href="#特殊平台" class="headerlink" title="特殊平台"></a>特殊平台</h1><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>有一说一，以Android的体量，完全可以单开一个系列来讲，而不是被贯以“特殊”的名号归并在这篇文章中<br>但鉴于CTF环境下的Android逆向，远没有实际场景中来的复杂，因此也就一并记录在这了<br>这里简单记录了仅在CTF环境下涉及的操作</p><h3 id="java层"><a href="#java层" class="headerlink" title="java层"></a>java层</h3><p>smali修改：</p><ol><li>jadx下，“Smali”面板中找到对应逻辑<br><img src="/img/2024-6-23/12.jpg"></li><li>apktool反编译apk（若存在加密dex，则加参数 –only-main-classes）</li><li>smali目录中找到 类的对应smali文件，<br><img src="/img/2024-6-23/13.png"><br>修改smali语句<br><img src="/img/2024-6-23/14.jpg"></li><li>apktool重打包文件夹</li><li>MT管理器重签名apk<br><img src="/img/2024-6-23/33.png"></li></ol><p>动调：</p><ol><li>adb连上模拟器<br><img src="/img/2024-6-23/15.png"></li><li>修改apk配置文件，添加“android:debuggable&#x3D;”true”” （如果系统 ro.debuggable属性为 true，则跳过此步）<br><img src="/img/2024-6-23/34.jpg"></li><li>模拟器上运行apk</li><li>jadx中选择要用的 adb，以及要附加的 模拟器上进程<br><img src="/img/2024-6-23/16.jpg"></li><li>此时可在Code界面选中要下断点的Java语句，<br><img src="/img/2024-6-23/17.png"><br>然后在Smali界面 查看其对应的Smali语句<br><img src="/img/2024-6-23/18.png"></li></ol><p>hook（native也通用）：</p><ol><li>adb连上模拟器</li><li>进入adb的shell，启动 frida-server</li><li>模拟器上运行apk</li><li>编写实现hook功能的js脚本<br><img src="/img/2024-6-23/23.jpg"></li><li>使用frida（Attach模式）对指定进程注入js脚本<br>此时进入frida交互式控制台，可在模拟器上与apk交互，本地cmd中查看输出<br><img src="/img/2024-6-23/24.png"></li></ol><p>脱一代落地壳：</p><ol><li>adb连上模拟器</li><li>进入adb的shell，启动 frida-server<br><img src="/img/2024-6-23/19.jpg"></li><li>使用frida-dexdump脱壳<br><img src="/img/2024-6-23/20.png"></li></ol><h3 id="native层"><a href="#native层" class="headerlink" title="native层"></a>native层</h3><p>JNI方法分析：</p><ol><li>静态注册的：可以在IDA函数窗口中直接找到<br><img src="/img/2024-6-23/25.jpg"></li><li>动态注册的：需在JNI_Onload()中找到目标方法。且分析前需还原名称，先定位env变量，然后将其类型修改为 JNIEnv*<br><img src="/img/2024-6-23/26.jpg"></li></ol><p>动调（普通函数）：</p><ol><li><p>adb连上模拟器</p></li><li><p>修改apk配置文件，添加 “android:debuggable&#x3D;”true””（如果系统 ro.debuggable属性为 true，则跳过此步）；<br><img src="/img/2024-6-23/34.jpg"><br>添加 “android:extractNativeLibs&#x3D;”true””（或者把so传到该应用 &#x2F;data&#x2F;app&#x2F;…&#x2F;…&#x2F;lib&#x2F;x86_64 目录下）</p></li><li><p>模拟器上运行apk</p></li><li><p>adb设置 本地端口到模拟器端口的转发；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:23946 tcp:23946</span><br></pre></td></tr></table></figure><p>再进入shell，root启动 android_x64_server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb -s emulator-5554 shell</span><br><span class="line">su </span><br><span class="line">/data/local/tmp/android_x64_server</span><br></pre></td></tr></table></figure></li><li><p>IDA中，“Debugger-&gt;Switch debugger”窗口，选择 “Remote Linux debugger”<br>“Debugger-&gt;Process options”窗口，配置 Application,Hostname,Port<br><img src="/img/2024-6-23/22.jpg"><br>“Debugger-&gt;Attach to process”窗口，附加到模拟器上目标进程</p></li><li><p>将 &#x2F;data&#x2F;app&#x2F;…&#x2F;…&#x2F;lib&#x2F;x86_64 下的so与本地的so 进行匹配<br><img src="/img/2024-6-23/35.jpg"><br>此时断在libc.so中，各线程处于非Running状态，应用界面也无法交互<br><img src="/img/2024-6-23/32.jpg"></p></li><li><p>此时可开始下断点，可通过此时so的基址 加上静态时的偏移，定位到目标位置；<br><img src="/img/2024-6-23/31.jpg"><br>或者打开so的函数列表，定位到目标位置（如果在列表中的话）<br><img src="/img/2024-6-23/36.jpg"></p></li><li><p>f9运行，此时可与应用界面交互，进而触发断点</p></li></ol><p>动调（.init_array&#x2F;JNI_Onload）：</p><ol><li><p>…</p></li><li><p>…</p></li><li><p>模拟器上以调试模式启动apk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -D -n &lt;package&gt;/.MainActivity</span><br></pre></td></tr></table></figure><p>此时界面上会弹出提示<br><img src="/img/2024-6-23/40.jpg"></p></li><li><p>…</p></li><li><p>IDA中，“Debugger-&gt;Switch debugger”窗口，选择 “Remote Linux debugger”<br>“Debugger-&gt;Process options”窗口，配置 Application,Hostname,Port<br><img src="/img/2024-6-23/22.jpg"><br>“Debugger-&gt;Debugger options”窗口，设置 “Suspend on library load&#x2F;unload”<br><img src="/img/2024-6-23/41.jpg"><br>“Debugger-&gt;Attach to process”窗口，附加到模拟器上目标进程</p></li><li><p>将进程的JDWP调试端口映射到本地端口8700；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:8700 jdwp:&lt;PID&gt;</span><br></pre></td></tr></table></figure><p>而后通过jdb连接到该端口，解除应用 Wait For Debugger状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</span><br></pre></td></tr></table></figure></li><li><p>一直f9运行，直到目标so加载，进行匹配<br><img src="/img/2024-6-23/42.jpg"><br>此时断在linker64中，各线程处于非Running状态，应用界面因未加载而空白<br><img src="/img/2024-6-23/43.jpg"></p></li><li><p>此时可开始下断点，可通过搜索直接定位到目标位置<br><img src="/img/2024-6-23/44.jpg"></p></li><li><p>…</p></li></ol><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>拿到的ipa和apk较为相似，本质上都是一个压缩包，要先对其解包<br>解包后就是与传统PE、ELF类似的逆向流程，无非此时的可执行格式是Mach-O</p><h2 id="HarmonyOS"><a href="#HarmonyOS" class="headerlink" title="HarmonyOS"></a>HarmonyOS</h2><p>近几年的新玩意，逆向需求相对较少，也因此目前市面上的逆向工具也相对稀少<br>目前还是使用基于jadx的 abc-decompiler，然后分析解包出来的abc文件</p><h2 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h2><p>.NET拥有自己独特的一套生态，其托管代码经编译器处理后，也以exe, dll的格式存在，但内部是 IL代码+元数据（这也是为什么.NET程序无法被IDA反编译）；接着IL代码在CLR（.NET运行时环境）中被即时编译为 Windows平台的机器码<br>综上，逆向过程主要面向IL代码，围绕dnSpy展开</p><h3 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h3><p>先从正向开发的角度，Unity有两种项目构建脚本：<br><img src="/img/2024-6-23/30.jpg"></p><ol><li>Mono2x：<br>将源码编译为IL代码，从而在运行时环境中执行；<br>构建生成 Assembly-CSharp.dll</li><li>IL2CPP：<br>将源码先编译为IL代码，然后转换成等效C++代码，最后编译为各平台机器码，从而直接执行；<br>构建不生成 Assembly-CSharp.dll，但会生成 GameAssembly.dll &#x2F; libil2cpp.so（Windows&#x2F;Android），以及 global-metadata.dat</li></ol><p>逆向（使用Mono2x构建）<br>直接从 Assembly-CSharp.dll入手</p><p>逆向（使用IL2CPP构建）：<br>从 GameAssembly.dll &#x2F; libil2cpp.so入手，但需先进行符号还原</p><ol><li>使用 Il2CppDumper，传入 GameAssembly.dll &#x2F; libil2cpp.so, global-metadata.dat，输出 dump.cs等文件<br>（global-metadata.dat等文件可能会存在被加密的情况，此时需要从内存中dump出解密后的）<br><img src="/img/2024-6-23/11.png"></li><li>IDA中，使用ida_with_struct_py3.py脚本，选择script.json, il2cpp.h，对GameAssembly.dll &#x2F; libil2cpp.so 进行符号还原</li></ol><h1 id="特殊架构"><a href="#特殊架构" class="headerlink" title="特殊架构"></a>特殊架构</h1><p>除了常规x86外，逆向过程中不免还要阅读ARM等架构下汇编</p><h2 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h2><p>刚接触时，见到其范畴下的一些名词时总会感到疑惑，这里统一进行解释：</p><ol><li>ARMv7&#x2F;ARMv8：ARM32&#x2F;ARM64 架构的其中一个版本</li><li>AArch32&#x2F;AArch64：ARM64的 32&#x2F;64位 执行状态。前者用于兼容ARM32程序</li><li>Thumb&#x2F;ARM&#x2F;Thumb-2：ARM32的 16位&#x2F;32位&#x2F;混用 指令集编码方式</li></ol><h3 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h3><p>其实照理来说应该是IoT方向的事，但既然逆向过程中遇到了，就也一并记录下来了</p><p>逆向（识别）：</p><ol><li>bin文件扔进IDA，在跳出窗口“Processor type”栏中，指定基于 ARM架构进行反汇编</li><li>暂时跳过 RAM, ROM , Input file的基址和大小的填写<br><img src="/img/2024-6-23/4.jpg"></li><li>快捷键d 先后改动0x0, 0x4处数据 被识别的位数。此时0x0, 0x4处的四字节，分别是程序的栈基址、程序载入基址&#x2F;代码段基址<br><img src="/img/2024-6-23/5.png"></li><li>根据这两个四字节数据，大胆猜测RAM, ROM的基址</li><li>bin文件重新把扔进IDA。此时填入 前面猜测的基址信息<br><img src="/img/2024-6-23/6.jpg"></li><li>快捷键shift+end*3，选中从光标处到末尾的内容（全选），生成反汇编代码</li></ol><h3 id="Android-native"><a href="#Android-native" class="headerlink" title="Android native"></a>Android native</h3><p>见上方”Android”一栏</p><h2 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>特殊语言<br><a href="https://blog.csdn.net/jrl137824675/article/details/102616684">C++的虚函数与内存</a></p></li><li><p>特殊框架<br><a href="https://mrwq.github.io/aggregate-paper/butian/quickjs%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91">quickjs程序逆向</a><br><a href="https://bbs.kanxue.com/thread-282785.htm">《安卓逆向这档事》番外实战篇3-拨云见日之浅谈Flutter逆向</a><br><a href="https://s1lenc3-chenmo.github.io/2021/07/25/unicorn%E5%85%A5%E9%97%A8%E5%8F%8A%E5%BC%BA%E7%BD%91%E6%9D%AFunicorn-like-a-pro%E5%A4%8D%E7%8E%B0/">unicorn入门及强网杯unicorn-like-a-pro复现</a></p></li><li><p>特殊平台<br><a href="https://curz0n.github.io/2021/05/10/android-so-reverse">Android so层逆向分析入门</a><br><a href="https://blog.csdn.net/Crazy__Hope/article/details/116063873">ida调试app找不到so</a><br><a href="https://www.cnblogs.com/bmjoker/p/11962585.html">IDA动态调试 .init_array</a><br><a href="https://blog.csdn.net/linxinfa/article/details/116572369">教你使用IL2CppDumper从Unity il2cpp的二进制文件中获取类型、方法、字段等（反编译）</a><br><a href="https://www.52pojie.cn/thread-618515-1-1.html">unity游戏生成与修改so文件教程</a></p></li><li><p>特殊平台<br><a href="https://bbs.kanxue.com/thread-249844.htm">使用IDA pro逆向ARM M系核心的Bin固件</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见保护手段</title>
      <link href="/2024/05/01/2024-5-1%20%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%89%8B%E6%AE%B5/"/>
      <url>/2024/05/01/2024-5-1%20%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%89%8B%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>这里对做题过程中遇到的保护手段 进行汇总，<br>旨在未来逆向过程中，可以更快速准确识别出特定保护手段，并为对抗提供思路</p><h1 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h1><h2 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h2><p>魔改原理:</p><ol><li>修改标识“UPX”</li><li>修改区段名“UPX1”“UPX2”……</li><li>修改ELF的overlay_offset字段值<br><img src="/img/2024-5-1/18.jpg"></li><li>去特征码，具体见此<a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=326995">文章</a>的(2)</li></ol><p>对抗：<br>恢复魔改部分，然后UPX工具正常脱壳<br>如果是基于项目源码级别的魔改，UPX工具不管用，则需要手动脱壳，参考下方的Nspack脱壳</p><h2 id="Nspack"><a href="#Nspack" class="headerlink" title="Nspack"></a>Nspack</h2><p>原理：</p><ol><li>初始化时保存各寄存器的值<br><img src="/img/2024-5-1/21.jpg"></li><li>对原程序各区块进行解密</li><li>恢复各寄存器值<br><img src="/img/2024-5-1/36.jpg"></li><li>跳转到原程序OEP<br><img src="/img/2024-5-1/20.jpg"></li></ol><p>对抗（寻找OEP）：</p><ol><li>单步分析法：单步执行，直到遇到“跳转到原程序OEP”的逻辑</li><li>ESP定律法：在程序进行“初始化时保存各寄存器的值”的逻辑时，对ESP指向的位置下硬件断点<br><img src="/img/2024-5-1/22.png"></li><li>一步直达法：直接搜索匹配“popad”指令，直到遇到“跳转到原程序OEP”的逻辑</li></ol><p>对抗（dump+IAT修复）：<br>具体见此<a href="https://www.52pojie.cn/thread-1534675-1-1.html">文章</a></p><h2 id="Themida"><a href="#Themida" class="headerlink" title="Themida"></a>Themida</h2><p>对抗：<br>使用 unlicense脱壳</p><h1 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h1><h2 id="面向源码"><a href="#面向源码" class="headerlink" title="面向源码"></a>面向源码</h2><h3 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h3><p>原理：<br>源码中通过构造内联汇，干扰反汇编引擎</p><ol><li>jz+jnz：等效jmp跳转<br><img src="/img/2024-5-1/15.png"></li><li>_emit 0xE8：插入call指令机器码作为脏字节<br><img src="/img/2024-5-1/43.jpg"></li><li>add esp：破坏堆栈平衡<br><img src="/img/2024-5-1/44.jpg"></li><li>call $+n + retn：获取EIP值后跳转<br><img src="/img/2024-5-1/45.jpg"></li><li>jmp reg：基于寄存器的间接跳转</li></ol><h3 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h3><p>原理：</p><ol><li>使用VirtualProtect()等API，对内存页面进行操作</li><li>为其定义函数指针，再到程序里通过解密后函数指针的方式进行调用</li></ol><p>对抗：<br>动调后自行解码；或基于原程序解码逻辑，编写脚本自行解码</p><h3 id="字符串混淆"><a href="#字符串混淆" class="headerlink" title="字符串混淆"></a>字符串混淆</h3><h3 id="名称混淆"><a href="#名称混淆" class="headerlink" title="名称混淆"></a>名称混淆</h3><p>原理：<br>通过更换函数名、变量名降低代码可读性<br>和字符串混淆一样，其实都可通过源码以外的方式实现，见下方</p><h2 id="面向IR"><a href="#面向IR" class="headerlink" title="面向IR"></a>面向IR</h2><h3 id="OLLVM"><a href="#OLLVM" class="headerlink" title="OLLVM"></a>OLLVM</h3><p>原理：<br>基于LLVM编译器框架（Clang前端将C&#x2F;C++源码转换为中间表示IR，使用一系列Pass对其优化，而后在解释器中执行），<br>使用特定Pass实现对IR的混淆，进而间接对最后编译出的机器码进行混淆<br><img src="/img/2024-5-1/40.png"></p><p>对抗：<br>具体见此项目 <a href="https://github.com/cq674350529/deflat">deflat-master</a></p><h3 id="BlackObfuscator"><a href="#BlackObfuscator" class="headerlink" title="BlackObfuscator"></a>BlackObfuscator</h3><p>原理：<br>基于dex2jar项目（将dex文件先转换成中间格式IR，再转换为class文件，最后打包成jar包），<br>对IR进行混淆，进而间接对生成的jar包进行混淆；最后将jar转换回dex<br><img src="/img/2024-5-1/42.jpg"></p><p>对抗：<br>可以使用高版本JEB自带的反混淆功能进行去除</p><h3 id="movfuscator"><a href="#movfuscator" class="headerlink" title="movfuscator"></a>movfuscator</h3><p>原理：<br>使用LCC编译器作为前端（将C源码转换为中间表示IR），<br>将IR转换为仅包含mov指令的机器码<br><img src="/img/2024-5-1/41.jpg"></p><p>对抗：<br>虽然市面上有 demovfuscator解混淆器，但效果微乎其微<br>因此一般不会直接对汇编逻辑进行分析，而是从字符串、爆破等角度切入</p><h2 id="面向字节码"><a href="#面向字节码" class="headerlink" title="面向字节码"></a>面向字节码</h2><h3 id="Proguard-R8"><a href="#Proguard-R8" class="headerlink" title="Proguard&#x2F;R8"></a>Proguard&#x2F;R8</h3><p>原理：<br>Android开发中，用于java字节码的压缩、优化、混淆、预校验（Android Gradle 3.4.0及以上默认使用R8，否则Proguard）<br>其中混淆涉及对类、方法、变量的名称混淆<br><img src="/img/2024-5-1/39.jpg"></p><h1 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h1><h2 id="断点检测"><a href="#断点检测" class="headerlink" title="断点检测"></a>断点检测</h2><p>原理：<br>针对软件断点————<br>CRC内存校验、关键API首字节0xCC检测</p><p>针对硬件断点————<br>GetThreadContext()获取DRx寄存器值<br><img src="/img/2024-5-1/38.jpg"></p><h2 id="系统信息检测"><a href="#系统信息检测" class="headerlink" title="系统信息检测"></a>系统信息检测</h2><p>原理：<br>针对进程、文件、窗口、端口等系统信息进行检测</p><h2 id="系统API"><a href="#系统API" class="headerlink" title="系统API"></a>系统API</h2><p>Windows下————</p><ol><li>NtQueryInformationProcess()</li><li>IsDebuggerPresent()</li><li>CheckRemoteDebuggerPresent()</li></ol><p>Linux下————</p><ol><li>ptrace(PTRACE_TRACEME, …)</li></ol><h2 id="自我创建"><a href="#自我创建" class="headerlink" title="自我创建"></a>自我创建</h2><p>原理：</p><ol><li>获取当前可执行文件的路径</li><li>以挂起的模式（4u: CREATE_SUSPENDED）创建子进程</li><li>修改子进程的主线程 的上下文</li><li>恢复子进程，从而让其执行</li><li>等待子进程结束</li><li>关闭子进程，以及其主线程<br><img src="/img/2024-5-1/10.jpg"></li></ol><p>对抗（跟踪子进程调试）：</p><ol><li>IDA中，先找到子进程开始的位置，获取其Hex值，然后在文件中 通过Hex定位到该处<br><img src="/img/2024-5-1/1.png"></li><li>将其首个Hex改为“CC”，用于后续 触发异常<br><img src="/img/2024-5-1/2.png"></li><li>将调试器设置为 JIT调试器<br>对于Ollydbg————<br><img src="/img/2024-5-1/3.jpg"><br>对于x64dbg————<br><img src="/img/2024-5-1/4.jpg"></li><li>程序扔进调试器，运行至 ResumeThread()，单步步过。此时异常触发，当前调试器 作为JIT调试器，被系统自动调用，附加到子进程上</li><li>将”CC“处复原</li></ol><h2 id="天堂之门"><a href="#天堂之门" class="headerlink" title="天堂之门"></a>天堂之门</h2><p>原理：</p><ol><li>Windows机制————WoW64子系统<br>WoW64下，32位程序在加载32位dll的同时，也加载64位dll；64位dll中，wow64.dll，wow64win.dll，wow64cpu.dll负责环境转换，ntdll.dll负责最终与内核交互。可以说，x86环境是WoW64”模拟”出来的.对于x86程序，woW64就相当于其内核</li><li>CPU工作模式————长模式<br><img src="/img/2024-5-1/37.png"><br>因此在汇编层面通常会具有如下表现<br><img src="/img/2024-5-1/5.jpg"></li></ol><p>对抗：<br>dump出异架构下的机器码，单独分析逻辑<br>可使用Capstone等工具查看反汇编</p><h2 id="Debug-Blocker"><a href="#Debug-Blocker" class="headerlink" title="Debug Blocker"></a>Debug Blocker</h2><p>原理：<br>Windows下————</p><ol><li>使用Mutex区分父子进程<br><img src="/img/2024-5-1/8.jpg"></li><li>子进程在被调试过程中抛出异常</li><li>父进程在循环中不断接收调试事件，并基于异常码 对子进程进行特定处理<br><img src="/img/2024-5-1/9.jpg"></li></ol><p>Linux下————<br><img src="/img/2024-5-1/11.png"></p><h1 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h1><p>原理：<br>循环读取bytecode，并基于其中的opcode，调用指定的Handler进行处理<br><img src="/img/2024-5-1/13.jpg"></p><p>对抗：<br>分析出各Handler实现的功能，并手写解释器，打印出字节码对应的汇编指令</p><h2 id="栈式"><a href="#栈式" class="headerlink" title="栈式"></a>栈式</h2><p>JVM就是非常典型的 栈式虚拟机。这里从字节码入手，可以总结出其运行机制————<br>使用栈来存储操作数。指令不需要指定操作数的位置，而是直接从栈中弹出操作数。执行完后，将结果压回栈顶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">package com;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Hello &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        String hello = &quot;This is a Demo&quot;;</span></span><br><span class="line"><span class="comment">        String result = hello.replaceAll(&quot;Demo&quot;, &quot;Hello Demo&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(result);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.Hello &#123;</span><br><span class="line">  <span class="keyword">public</span> com.Hello();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0           <span class="comment">// 将局部变量表索引0处的值（this引用）推入操作数栈</span></span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">1</span>  <span class="comment">// 调用父类构造函数，从操作数栈中弹出this引用作为参数</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span>         </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: ldc           #<span class="number">2</span>  <span class="comment">// 将常量池中的字符串&quot;This is a Demo&quot;推入操作数栈</span></span><br><span class="line">       <span class="number">2</span>: astore_1          <span class="comment">// 将操作数栈顶的值（即字符串&quot;This is a Demo&quot;）弹出并存储到局部变量表的索引1位置</span></span><br><span class="line">       <span class="number">3</span>: aload_1           <span class="comment">// 将局部变量表索引1处的值（即字符串&quot;This is a Demo&quot;）推入操作数栈</span></span><br><span class="line">       <span class="number">4</span>: ldc           #<span class="number">3</span>  <span class="comment">// 将常量池中的字符串&quot;Demon&quot;推入操作数栈</span></span><br><span class="line">       <span class="number">6</span>: ldc           #<span class="number">4</span>  <span class="comment">// 将常量池中的字符串&quot;Hello Demo&quot;推入操作数栈</span></span><br><span class="line">       <span class="number">8</span>: invokevirtual #<span class="number">5</span>  <span class="comment">// 调用String对象的replaceAll方法，从操作数栈中弹出两个字符串作为参数，并将结果压回操作数栈</span></span><br><span class="line">      <span class="number">11</span>: astore_2          <span class="comment">// 将操作数栈顶的值（即替换后的字符串）弹出并存储到局部变量表的索引2位置</span></span><br><span class="line">      <span class="number">12</span>: getstatic     #<span class="number">6</span>  <span class="comment">// 获取System.out字段（PrintStream对象），并将其推入操作数栈</span></span><br><span class="line">      <span class="number">15</span>: aload_2           <span class="comment">// 将局部变量表索引2处的值（替换后的字符串）推入操作数栈</span></span><br><span class="line">      <span class="number">16</span>: invokevirtual #<span class="number">7</span>  <span class="comment">// 调用PrintStream对象的println方法，从操作数栈中弹出参数（替换后的字符串），并输出</span></span><br><span class="line">      <span class="number">19</span>: <span class="keyword">return</span>            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寄存器式"><a href="#寄存器式" class="headerlink" title="寄存器式"></a>寄存器式</h2><p>DVM就是非常典型的 寄存器式虚拟机，这里从smali入手，可以总结出其运行机制————<br>依赖一组寄存器来存储操作数。指令指明操作数所在的寄存器。执行完后，结果存储在指定的目标寄存器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">package com;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Hello &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        String hello = &quot;This is a Demo&quot;;</span></span><br><span class="line"><span class="comment">        String result = hello.replaceAll(&quot;Demo&quot;, &quot;Hello Demo&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(result);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">.<span class="keyword">class</span> <span class="title class_">public</span> Lcom/Hello;</span><br><span class="line">.super Ljava/lang/Object;</span><br><span class="line">.source <span class="string">&quot;Hello.java&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># direct methods</span></span><br><span class="line">.method <span class="keyword">public</span> constructor &lt;init&gt;()V</span><br><span class="line">    .locals <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">3</span></span><br><span class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V               <span class="comment">// 调用父类Object的构造函数，从操作数栈中弹出this引用作为参数</span></span><br><span class="line">    <span class="keyword">return</span>-<span class="type">void</span> </span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.method <span class="keyword">public</span> <span class="type">static</span> <span class="built_in">main</span>([Ljava/lang/String;)V</span><br><span class="line">    .locals <span class="number">3</span>                           <span class="comment">// 定义3个局部变量</span></span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">5</span></span><br><span class="line">    <span class="type">const</span>-string v0, <span class="string">&quot;This is a Demo&quot;</span>   <span class="comment">// 将字符串&quot;This is a Demo&quot;加载到寄存器v0</span></span><br><span class="line">    .line <span class="number">6</span></span><br><span class="line">    <span class="type">const</span>-string v1, <span class="string">&quot;Demo&quot;</span>             <span class="comment">// 将字符串&quot;Demon&quot;加载到寄存器v1</span></span><br><span class="line">    <span class="type">const</span>-string v2, <span class="string">&quot;Hello Demo&quot;</span>       <span class="comment">// 将字符串&quot;Hello Demo&quot;加载到寄存器v2</span></span><br><span class="line">    invoke-<span class="keyword">virtual</span> &#123;v0, v1, v2&#125;, Ljava/lang/String;-&gt;<span class="built_in">replaceAll</span>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; <span class="comment">// 调用String对象的replaceAll方法，传入v0、v1、v2作为参数，并将结果存储回v0</span></span><br><span class="line">    move-result-object v0               <span class="comment">// 将调用replaceAll方法的结果（替换后的字符串）存储到寄存器v0</span></span><br><span class="line">    .line <span class="number">7</span></span><br><span class="line">    sget-object v1, Ljava/lang/System;-&gt;out:Ljava/io/PrintStream;                   <span class="comment">// 获取System.out字段（PrintStream对象），并将其存储到寄存器v1</span></span><br><span class="line">    invoke-<span class="keyword">virtual</span> &#123;v1, v0&#125;, Ljava/io/PrintStream;-&gt;<span class="built_in">println</span>(Ljava/lang/String;)V    <span class="comment">// 调用PrintStream对象的println方法，传入v0中的替换后的字符串，并输出</span></span><br><span class="line">    .line <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span>-<span class="type">void</span> </span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><h1 id="逻辑隐藏"><a href="#逻辑隐藏" class="headerlink" title="逻辑隐藏"></a>逻辑隐藏</h1><p>这块严格来讲不算保护手段，但介于部分逻辑所在位置较为隐蔽，对逆向过程产生了一定干扰，因此也一并记录在这了</p><h2 id="文件机制"><a href="#文件机制" class="headerlink" title="文件机制"></a>文件机制</h2><h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><h3 id="init-array"><a href="#init-array" class="headerlink" title=".init_array"></a>.init_array</h3><p>原理：<br>一个存储初始化函数的指针 的数组，程序启动时被自动调用，先于main()执行，用于执行一些初始化操作，如全局变量的初始化<br><img src="/img/2024-5-1/32.jpg"></p><h3 id="data-rsrc"><a href="#data-rsrc" class="headerlink" title=".data&#x2F;.rsrc"></a>.data&#x2F;.rsrc</h3><p>原理：<br>将可执行文件嵌在程序的 数据段、资源段，而后释放出来</p><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><h3 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h3><p>原理：</p><ol><li>构造 跳转至钩子函数的 jmp语句（构造操作码、计算操作数）<br><img src="/img/2024-5-1/24.png"></li><li>使用VirtualProtectEx(), WriteProcessMemory()，将目标函数 内存区域的最前端 用jmp语句覆盖<br><img src="/img/2024-5-1/25.png"></li><li>保存 目标函数内存区域 最前端的数据<br><img src="/img/2024-5-1/26.png"></li><li>钩子函数内，使用VirtualProtectEx(), WriteProcessMemory()，将目标函数的内存区域复原（脱钩）<br><img src="/img/2024-5-1/27.png"></li></ol><h3 id="IAT-Hook"><a href="#IAT-Hook" class="headerlink" title="IAT Hook"></a>IAT Hook</h3><p>原理：</p><ol><li>获取当前进程的句柄<br><img src="/img/2024-5-1/28.png"></li><li>将目标dll载入内存，并获取目标API的地址<br><img src="/img/2024-5-1/29.png"></li><li>找到IAT中 存储着目标API地址 的位置，用Hook函数的地址 覆盖掉<br><img src="/img/2024-5-1/30.jpg"></li></ol><h3 id="GOT-Hook"><a href="#GOT-Hook" class="headerlink" title="GOT Hook"></a>GOT Hook</h3><h3 id="VFT-Hook"><a href="#VFT-Hook" class="headerlink" title="VFT Hook"></a>VFT Hook</h3><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h3><p>原理：</p><ol><li>__try{}</li><li>__except filter：检查异常码，并根据检查结果设置返回值<br>__except：包含具体异常处理程序，逻辑被隐藏于此</li><li>__finally<br><img src="/img/2024-5-1/35.jpg"></li></ol><p>对抗（伪代码下显示__except逻辑）：        </p><ol><li>__try{}中会触发异常的语句，patch成 jmp到__except的语句<br><img src="/img/2024-5-1/33.png"></li><li>__except中首个语句，patch成 nop<br><img src="/img/2024-5-1/34.png"></li></ol><h3 id="VEH"><a href="#VEH" class="headerlink" title="VEH"></a>VEH</h3><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>原理：</p><ol><li>抛出异常时，将会读取ELF .eh_frame段中的异常处理信息（DWARF格式，也属于调试信息），从而进行栈展开</li><li>此时会执行隐藏在 DWARF Expression中的代码<br><img src="/img/2024-5-1/31.png"><br>具体见此<a href="https://bbs.kanxue.com/thread-271891.htm">文章</a></li></ol><h2 id="傀儡进程"><a href="#傀儡进程" class="headerlink" title="傀儡进程"></a>傀儡进程</h2><p>原理：</p><ol><li>CreateProcess()以挂起形式创建一个进程</li><li>GetThreadContext()获取进程CONTEXT</li><li>ZwUnmapViewOfSection()卸载进程内存映像</li><li>VirtualAlloc()分配内存空间</li><li>WriteProcessMemory()将恶意代码写入分配的内存</li><li>SetThreadContext()设置进程CONTEXT</li><li>ResumeThread()唤醒进程，在新内存映像下运行</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>加壳<br><a href="https://www.cnblogs.com/Un1corn/p/18442445">常见魔改UPX</a></p></li><li><p>代码混淆<br><a href="https://xz.aliyun.com/t/14625?time__1311=GqAhYK0KBKAK7KDsD7+vPiIuqmunhli7oD">逆向专辑–花指令阅读与分析</a><br><a href="https://mabin004.github.io/2018/08/23/ollvm%E5%AD%A6%E4%B9%A0/">利用ollvm进行代码混淆</a><br><a href="https://blog.niunaijun.top/index.php/archives/35.html">浅谈BlackObfuscator控制流混淆的设计思路</a><br><a href="https://bbs.kanxue.com/thread-273880.htm#msg_header_h3_0">Android 简单加密壳 - proguard混淆</a></p></li><li><p>反调试<br><a href="https://bbs.kanxue.com/thread-272871.htm">病毒木马常用手段之自我创建</a><br><a href="https://bbs.kanxue.com/thread-270153.htm">天堂之门 (Heaven’s Gate) C语言实现</a></p></li><li><p>VM<br><a href="https://geneblue.github.io/2019/09/13/android/sec--android-dex-vmp/">Android DEX-VMP 虚拟保护技术 </a></p></li><li><p>逻辑隐藏<br><a href="https://blog.csdn.net/hurricane_0x01/article/details/52184318?locationNum=13&fps=1">傀儡进程原理及调试</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见加密算法</title>
      <link href="/2024/04/17/2024-4-17%20%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2024/04/17/2024-4-17%20%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这里对做题过程中遇到的常见算法 进行汇总，<br>从其参数特征、大致原理、代码实现等方面进行粗略总结，<br>旨在未来逆向过程中，可以更快速准确识别出特定算法（及其魔改），并为解密提供思路</p><h1 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h1><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><h3 id="流加密"><a href="#流加密" class="headerlink" title="流加密"></a>流加密</h3><h4 id="ROT"><a href="#ROT" class="headerlink" title="ROT"></a>ROT</h4><ul><li>大致原理</li></ul><p>字母回转替换式 </p><ul><li>类型</li></ul><p>ROT5、ROT13、ROT18、ROT47</p><h4 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a><em>RC4</em></h4><ul><li>大致原理</li></ul><p>1.KSA&#x2F;初始化S盒<br><img src="/img/2024-4-17/2.jpg"><br>2.PRGA&#x2F;生成密文<br><img src="/img/2024-4-17/3.jpg"></p><ul><li>参数特征</li></ul><p>1.key（长度不限）、S盒（256字节）<br>2.明文（长度不限）</p><ul><li><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">rc4_encrypt</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> std::string&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        S[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (j + S[i] + key[i % key.<span class="built_in">length</span>()]) % <span class="number">256</span>;</span><br><span class="line">        std::<span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    std::string out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : data) &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span>;</span><br><span class="line">        std::<span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> k = S[(S[i] + S[j]) % <span class="number">256</span>];</span><br><span class="line">        out.<span class="built_in">push_back</span>(c ^ k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string key = <span class="string">&quot;SecretKey&quot;</span>;</span><br><span class="line">    std::string data = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    std::string encrypted_data = <span class="built_in">rc4_encrypt</span>(key, data);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Encrypted Data: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> c : encrypted_data) &#123;</span><br><span class="line">        std::cout &lt;&lt; std::hex &lt;&lt; (<span class="type">int</span>)c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解密实现</p></li></ul><p>解密逻辑与加密逻辑相同，因此将密文扔进行加密逻辑 即可获取明文</p><h4 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h4><ul><li>参数特征</li></ul><p>1.明文（长度不限）<br>2.key（16字节）</p><h4 id="ChaCha20"><a href="#ChaCha20" class="headerlink" title="ChaCha20"></a>ChaCha20</h4><h3 id="块加密"><a href="#块加密" class="headerlink" title="块加密"></a>块加密</h3><h4 id="TEA-XTEA"><a href="#TEA-XTEA" class="headerlink" title="TEA &amp; XTEA"></a>TEA &amp; XTEA</h4><ul><li>代码实现</li></ul><p>见此<a href="https://blog.csdn.net/zhuguanlin121/article/details/122829415?ops_request_misc=&request_id=&biz_id=102&utm_term=TEA%E8%A7%A3%E5%AF%86&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-122829415.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">文章</a></p><h4 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h4><ul><li>大致原理</li></ul><p><img src="/img/2024-4-17/4.jpg"></p><ul><li>参数特征</li></ul><p>1.明文（int数组，长度不限）<br>2.key（int数组，长度为4）</p><ul><li>代码实现</li></ul><p>见此<a href="https://blog.csdn.net/zhuguanlin121/article/details/122829415?ops_request_misc=&request_id=&biz_id=102&utm_term=TEA%E8%A7%A3%E5%AF%86&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-122829415.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">文章</a></p><h4 id="AES-128"><a href="#AES-128" class="headerlink" title="AES-128"></a><em>AES-128</em></h4><ul><li>大致原理</li></ul><p><img src="/img/2024-4-17/5.jpg"><br>1.涉及sbox的 密钥扩展<br>2.9+1轮的 加密主体<br><img src="/img/2024-4-17/6.jpg"></p><ul><li>参数特征</li></ul><p>1.key（16字节）<br>2.明文块（16字节）、扩展key（44字节）</p><ul><li>代码实现</li></ul><p>见此<a href="https://blog.csdn.net/weixin_51732593/article/details/128516206?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-128516206-blog-121461373.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-128516206-blog-121461373.235%5Ev43%5Econtrol&utm_relevant_index=5">文章</a></p><h4 id="DES"><a href="#DES" class="headerlink" title="DES"></a><em>DES</em></h4><ul><li>大致原理</li></ul><p><img src="/img/2024-4-17/22.jpg"></p><ul><li>参数特征</li></ul><p>1.明文块（8字节）<br>2.key（8字节）</p><ul><li>代码实现</li></ul><p>见此<a href="https://blog.csdn.net/Sciurdae/article/details/134031995">文章</a></p><h4 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h4><ul><li>大致原理</li></ul><p>1.传入key，<br><img src="/img/2024-4-17/8.png"><br>先后使用FK,CK 进行密钥扩展<br><img src="/img/2024-4-17/9.png"><br>2.传入明文块，<br><img src="/img/2024-4-17/10.png"><br>进行加密，<br><img src="/img/2024-4-17/11.png"><br>其中————<br>先是 S盒替换（非线性变换）<br><img src="/img/2024-4-17/12.jpg"><br>然后是 移位和异或（线性变换）<br><img src="/img/2024-4-17/13.jpg"><br>最后是 轮密钥加（当前轮密钥与中间结果异或）<br><img src="/img/2024-4-17/14.png"></p><ul><li>参数特征</li></ul><p>1.key（16字节）<br>2.明文块（16字节）</p><ul><li>轮次特征</li></ul><p>1.4+32<br>2.4+32+4</p><ul><li>代码实现</li></ul><p>见此<a href="https://www.cnblogs.com/kentle/p/14135865.html">文章</a></p><h4 id="Blowfish"><a href="#Blowfish" class="headerlink" title="Blowfish"></a>Blowfish</h4><ul><li>大致原理</li></ul><p>1.基于key，生成子密钥sbox, pbox<br><img src="/img/2024-4-17/15.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 16</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">BLOWFISH_CTX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> pbox[N + <span class="number">2</span>];  </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sbox[<span class="number">4</span>][<span class="number">256</span>];</span><br><span class="line">&#125;BLOWFISH_CTX,*PBLOWFISH_CTX;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">BlowFishInit</span><span class="params">(BLOWFISH_CTX* blowCtx, <span class="type">unsigned</span> <span class="type">char</span> * key, <span class="type">unsigned</span> <span class="type">int</span> keylen)</span></span><br><span class="line">&#123;                                            </span><br><span class="line">    <span class="comment">//1.初始化S盒</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> Row = <span class="number">0</span>; Row &lt; <span class="number">4</span>; Row++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> Col = <span class="number">0</span>; Col &lt; <span class="number">256</span>; Col++)</span><br><span class="line">        &#123;</span><br><span class="line">            blowCtx-&gt;sbox[Row][Col] = ORIG_S[Row][Col];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化P盒：</span></span><br><span class="line">    <span class="type">int</span> KeyIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt; N + <span class="number">2</span>; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            data = (data &lt;&lt; <span class="number">8</span>) | key[KeyIndex];</span><br><span class="line">            KeyIndex++;</span><br><span class="line">            <span class="keyword">if</span> (KeyIndex &gt;= keylen)</span><br><span class="line">                KeyIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        blowCtx-&gt;pbox[index] = ORIG_P[index] ^ data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.加密P盒</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Data1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Data2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N + <span class="number">2</span>; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BlowFish_Encry(blowCtx, &amp;Data1, &amp;Data2);</span><br><span class="line">        blowCtx-&gt;pbox[i] = Data1;</span><br><span class="line">        blowCtx-&gt;pbox[i+<span class="number">1</span>] = Data2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.加密S盒</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BlowFish_Encry(blowCtx, &amp;Data1, &amp;Data2);</span><br><span class="line">            blowCtx-&gt;sbox[i][j] = Data1;</span><br><span class="line">            blowCtx-&gt;sbox[i][j + <span class="number">1</span>] = Data2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.环读取每个明文块，进行加密<br><img src="/img/2024-4-17/16.jpg"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BlowFish_Encry</span><span class="params">(PBLOWFISH_CTX blowCtx, <span class="type">unsigned</span> <span class="type">int</span>* left, <span class="type">unsigned</span> <span class="type">int</span>* right)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>  Xl;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>  Xr;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>  temp;</span><br><span class="line">    <span class="type">short</span>       i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入数据的前4字节、后4字节</span></span><br><span class="line">    Xl = *left;</span><br><span class="line">    Xr = *right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始置换的16轮加密</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        Xl = Xl ^ blowCtx-&gt;pbox[i];</span><br><span class="line">        Xr = F(blowCtx, Xl) ^ Xr;</span><br><span class="line"></span><br><span class="line">        temp = Xl;</span><br><span class="line">        Xl = Xr;</span><br><span class="line">        Xr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终置换</span></span><br><span class="line">    temp = Xl;</span><br><span class="line">    Xl = Xr;                         </span><br><span class="line">    Xr = temp;</span><br><span class="line"></span><br><span class="line">    Xr = Xr ^ blowCtx-&gt;pbox[N];             </span><br><span class="line">    Xl = Xl ^ blowCtx-&gt;pbox[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    *left = Xl;</span><br><span class="line">    *right = Xr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的F函数<br><img src="/img/2024-4-17/17.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">F</span><span class="params">(BLOWFISH_CTX* ctx, <span class="type">unsigned</span> <span class="type">long</span> x)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> a, b, c, d;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>  y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分割输入</span></span><br><span class="line">    a = (x &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    b = (x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    c = (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFf</span>;</span><br><span class="line">    d = x &amp; <span class="number">0xFF</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//替换c操作</span></span><br><span class="line">    y = ctx-&gt;sbox[<span class="number">0</span>][a] + ctx-&gt;sbox[<span class="number">1</span>][b];</span><br><span class="line">    y = y ^ ctx-&gt;sbox[<span class="number">2</span>][c];</span><br><span class="line">    y = y + ctx-&gt;sbox[<span class="number">3</span>][d];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数特征</li></ul><p>1.key（16字节）<br>2.明文块（8字节） </p><ul><li>轮次特征</li></ul><p>1.18 + 4*256<br>2.16</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a><em>RSA</em></h3><ul><li>大致原理</li></ul><p><img src="/img/2024-4-17/23.jpg"></p><ul><li>解密实现</li></ul><p>1.找到加密运算中的指数，即为公钥E<br>2.找到加密运算中的模数，即为质数乘积N<br>3.找到加密运算中的密文C<br>4.使用yafu工具，找到生成N的两个质数p, q<br><img src="/img/2024-4-17/7.png"><br>5.通过公式(p-1)(q-1)，算出欧拉函数值T<br>6.使用gmpy2库，通过T, E找到私钥D<br>7.使用gmpy2库，通过D, N将C转换为明文M</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥</span></span><br><span class="line">E = </span><br><span class="line"></span><br><span class="line"><span class="comment"># 质数乘积N</span></span><br><span class="line">N = </span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文(Hex/Decimal)</span></span><br><span class="line">C = </span><br><span class="line"></span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">T = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">D = gmpy2.invert(E, T)</span><br><span class="line"></span><br><span class="line">M = gmpy2.powmod(C, D, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(M)[<span class="number">2</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="编码算法"><a href="#编码算法" class="headerlink" title="编码算法"></a>编码算法</h1><h2 id="Base8"><a href="#Base8" class="headerlink" title="Base8"></a>Base8</h2><ul><li>大致原理</li></ul><p>每3位（3&#x2F;8字节）转换为 1字节</p><h2 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h2><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a><em>Base64</em></h2><ul><li>大致原理</li></ul><p><img src="/img/2024-4-17/18.jpg"></p><h2 id="Base85"><a href="#Base85" class="headerlink" title="Base85"></a>Base85</h2><h1 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h1><h2 id="MD2"><a href="#MD2" class="headerlink" title="MD2"></a>MD2</h2><ul><li>轮次特征</li></ul><p>16 + 18*48</p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a><em>MD5</em></h2><ul><li>大致原理</li></ul><p><img src="/img/2024-4-17/24.jpg"><br>1.开头 初始化四个32位变量（0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476）<br>2.结尾 输出128位的哈希值&#x2F;Hex<br><img src="/img/2024-4-17/19.jpg"></p><ul><li>解密实现（在线解密网站）</li></ul><p><a href="https://www.somd5.com/">https://www.somd5.com/</a><br><a href="https://www.cmd5.com/">https://www.cmd5.com</a><br><a href="https://hashes.com/zh/decrypt/hash">https://hashes.com/zh/decrypt/hash</a></p><h2 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h2><ul><li>大致原理</li></ul><p><img src="/img/2024-4-17/25.jpg"><br>1.开头 初始化五个32位哈希值（0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0）<br>2.中间 共四阶段的处理（每阶段使用一个32位常量K，循环20次）<br>3.结尾 更新五个32位哈希值<br><img src="/img/2024-4-17/20.png"></p><h2 id="SHA-256"><a href="#SHA-256" class="headerlink" title="SHA-256"></a><em>SHA-256</em></h2><ul><li>大致原理</li></ul><p>1.开头 初始化八个32位哈希值（0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19）<br>2.结尾 更新八个32位哈希值</p><h2 id="CRC32"><a href="#CRC32" class="headerlink" title="CRC32"></a>CRC32</h2><ul><li>代码实现</li></ul><p>python：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_crc_table</span>():</span><br><span class="line">    poly = <span class="number">0xEDB88320</span></span><br><span class="line">    crc_table = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        crc = i</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> crc &amp; <span class="number">1</span>:</span><br><span class="line">                crc = (crc &gt;&gt; <span class="number">1</span>) ^ poly</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                crc &gt;&gt;= <span class="number">1</span></span><br><span class="line">        crc_table.append(crc)</span><br><span class="line">    <span class="keyword">return</span> crc_table</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc32</span>(<span class="params">data</span>):</span><br><span class="line">    crc_table = generate_crc_table()</span><br><span class="line">    crc = <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        crc = (crc &gt;&gt; <span class="number">8</span>) ^ crc_table[(crc &amp; <span class="number">0xFF</span>) ^ byte]</span><br><span class="line">    <span class="keyword">return</span> crc ^ <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;Hello, World!&quot;</span></span><br><span class="line">crc32_value = crc32(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;CRC32 Value: <span class="subst">&#123;crc32_value:08X&#125;</span>&quot;</span>) </span><br></pre></td></tr></table></figure><h1 id="压缩算法"><a href="#压缩算法" class="headerlink" title="压缩算法"></a>压缩算法</h1><h2 id="Huffman"><a href="#Huffman" class="headerlink" title="Huffman"></a>Huffman</h2><ul><li>大致原理</li></ul><p><a href="https://www.bilibili.com/video/BV1qu411F7Zs/?spm_id_from=333.337.search-card.all.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">见此视频</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向工具使用</title>
      <link href="/2024/03/17/2024-3-17%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/03/17/2024-3-17%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>说来惭愧，逆向过程中经常打断我思路的一点，莫过于一下想不起来逆向工具中 某个功能、某个操作在哪里使用、怎么使用。然后要么一个个点过去尝试，要么网上的帖子一篇篇找过去，实在是有点麻烦。<br>虽说这和使用熟练度脱不开干系，不过既然想到了，那就干脆一劳永逸地汇总到一篇去，用到的时候方便查看</p><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="快捷键类"><a href="#快捷键类" class="headerlink" title="快捷键类"></a>快捷键类</h2><h3 id="X"><a href="#X" class="headerlink" title="X"></a>X</h3><ul><li>c：生成汇编<br><img src="/img/2024-3-17/4.jpg"><br>对于无法生成的情况————<br>1）快捷键d，将前几个db 改为dd&#x2F;dq<br>2）以其为首个元素，将后续转换为Array<br>3）此时可正常生成汇编</li><li>e：设置函数结尾<br><img src="/img/2024-3-17/32.jpg"></li><li>g：跳到指定地址查看</li><li>n：重命名</li><li>p：定义为函数<br><img src="/img/2024-3-17/5.png"></li><li>r：以char类型显示数据</li><li>space：Text view、Graph view间切换</li><li>u：取消原先定义的汇编<br><img src="/img/2024-3-17/3.jpg"></li><li>x：查看交叉引用</li><li>y：更改变量类型<br><img src="/img/2024-3-17/28.jpg"></li></ul><h3 id="alt-X"><a href="#alt-X" class="headerlink" title="alt+X"></a>alt+X</h3><ul><li><p>alt+t：文本搜索<br><img src="/img/2024-3-17/6.png"></p></li><li><p>alt+b：二进制搜索<br><img src="/img/2024-3-17/7.png"></p></li><li><p>alt+i：立即数搜索<br><img src="/img/2024-3-17/34.jpg"></p></li><li><p>alt+l：锁定选择开始处（实现大范围选择），再次点击取消选择<br><img src="/img/2024-3-17/37.jpg"></p></li><li><p>alt+g：段寄存器值查看。ARM架构下可用于分辨指令编码方式是Thumb还是ARM<br><img src="/img/2024-3-17/30.jpg"></p></li><li><p>alt+s：修改段属性<br><img src="/img/2024-3-17/29.jpg"></p></li></ul><h3 id="ctrl-X"><a href="#ctrl-X" class="headerlink" title="ctrl+X"></a>ctrl+X</h3><ul><li>ctrl+e：查看所有入口点</li><li>ctrl+l：查看所有符号名称<br><img src="/img/2024-3-17/31.jpg"></li><li>ctrl+s：查看所有段信息</li><li>ctrl+alt+b：查看所有已设置断点</li></ul><h3 id="shift-X"><a href="#shift-X" class="headerlink" title="shift+X"></a>shift+X</h3><ul><li>shift+e：dump<br><img src="/img/2024-3-17/1.png"></li></ul><h2 id="非快捷键类"><a href="#非快捷键类" class="headerlink" title="非快捷键类"></a>非快捷键类</h2><ul><li><p>ELF动调：<br>1）kali上启动 linux_server<br>2）ELF放入kali<br>3）选择“Remote Linux debugger”连接 linux_server<br><img src="/img/2024-3-17/8.png"></p></li><li><p>下特殊断点：<br>1）选中汇编语句，先f2下软件断点<br>2）右键选择“Edit breakpoint…”，在“Breakpoint settings”中进行编辑<br>3）硬件断点：勾选“Hardware”<br> 条件断点：“Condition”栏中输入<br> 内存断点（基于硬件断点）：勾选“Read”&#x2F;“Write”</p></li><li><p>对于dump出的x64机器码，以x64格式解析<br>1）将字符串转换为Hex（”E8”-&gt; 0xE8）<br>2）扔进IDA，以“Binary file”载入，以“64-bit mode”反汇编<br><img src="/img/2024-3-17/14.png"></p></li><li><p>加载新的类型库<br><img src="/img/2024-3-17/35.jpg"></p></li><li><p>创建新结构体<br><img src="/img/2024-3-17/36.jpg"></p></li><li><p>数据块转换为数组<br><img src="/img/2024-3-17/9.png"></p></li><li><p>基于汇编进行patch<br><img src="/img/2024-3-17/10.jpg"></p></li><li><p>开启代码追踪，并导出追踪结果<br><img src="/img/2024-3-17/11.jpg"><br><img src="/img/2024-3-17/12.png"></p></li><li><p>设置调试器对于各异常的处理方式<br><img src="/img/2024-3-17/13.png"></p></li><li><p>动调时Text view下显示机器码<br><img src="/img/2024-3-17/16.jpg"></p></li><li><p>重设置基址<br><img src="/img/2024-3-17/33.jpg"></p></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>“align”指令：用于指示内存对齐</li><li>BYTE,WORD提取宏：<br>1）BYTEn()：提取第n个BYTE（从右到左，从低地址到高地址）<br>LOBYTE() -&gt; BYTE0()<br>HIBYTE() -&gt; BYTE1()<br>2）WORDn() 提取第n个WORD<br>LOWORD() -&gt; WORD0()<br>HIWORD() -&gt; WORD1()</li><li>“retaddr”指针变量：指向此函数的返回处<br><img src="/img/2024-3-17/15.jpg"></li><li>交叉引用窗口Type列：<br>1）w：Write<br>2）r：Read<br>3）p：Procedure call<br>4）o：Other<br><img src="/img/2024-3-17/27.jpg"></li></ol><h1 id="OllyDbg"><a href="#OllyDbg" class="headerlink" title="OllyDbg"></a>OllyDbg</h1><h2 id="快捷键类-1"><a href="#快捷键类-1" class="headerlink" title="快捷键类"></a>快捷键类</h2><ol><li><p>f2：下软件断点</p></li><li><p>ctrl+f2：重新运行程序</p></li><li><p>f9：运行到断点处</p></li><li><p>f7：单步步入</p></li><li><p>f8：单步步过</p></li><li><p>alt+t：打开内存镜像</p></li><li><p>ctrl+g：查看指定地址处的汇编</p></li></ol><h2 id="非快捷键类-1"><a href="#非快捷键类-1" class="headerlink" title="非快捷键类"></a>非快捷键类</h2><ol><li>查找字符串：右键-&gt;中文搜索引擎-&gt;搜索ASCII-&gt;ctrl+f-&gt;双击</li></ol><h1 id="x64dbg"><a href="#x64dbg" class="headerlink" title="x64dbg"></a>x64dbg</h1><h2 id="快捷键类-2"><a href="#快捷键类-2" class="headerlink" title="快捷键类"></a>快捷键类</h2><ol><li>ctrl+p：补丁功能，生成patch后的文件</li><li>ctrl+g：查看指定API</li></ol><h2 id="非快捷键类-2"><a href="#非快捷键类-2" class="headerlink" title="非快捷键类"></a>非快捷键类</h2><ol><li>dump<br><img src="/img/2024-3-17/17.jpg"></li><li>ScyllaHide插件<br><img src="/img/2024-3-17/21.png"><br>1）r3层反调试绕过<br><img src="/img/2024-3-17/22.jpg"><br>2）dll注入<br>3）附进程调试</li><li>运行到某API刚调用完它的位置：<br>1）ctrl+g定位该函数入口处，下断点<br>2）f9运行到该处<br>3）ctrl+f9运行到返回（ret指令）<br>4）继续单步，即可来到 刚调用完该API的位置<br><img src="/img/2024-3-17/26.png"></li></ol><h1 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h1><h2 id="命令类"><a href="#命令类" class="headerlink" title="命令类"></a>命令类</h2><ol><li>b&#x2F;break：<br><img src="/img/2024-3-17/25.jpg"></li></ol><h2 id="非命令类"><a href="#非命令类" class="headerlink" title="非命令类"></a>非命令类</h2><ol><li>跟踪子进程调试 实现<br><img src="/img/2024-3-17/23.png"></li><li>dump：<br>1）“pgrep -x <ELF>”<br>2）“cat &#x2F;proc&#x2F;<pid>&#x2F;maps”<br>3）“gdb attach <pid>”<br>4）“dump memory &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;memory.dump <start_address> <end_address>” </li><li>修改寄存器值<br><img src="/img/2024-3-17/24.png"></li></ol><h1 id="dnSpy"><a href="#dnSpy" class="headerlink" title="dnSpy"></a>dnSpy</h1><h2 id="非快捷键类-3"><a href="#非快捷键类-3" class="headerlink" title="非快捷键类"></a>非快捷键类</h2><ol><li>打开“程序集资源管理器”<br><img src="/img/2024-3-17/18.jpg"></li><li>全局查找字符串<br><img src="/img/2024-3-17/19.png"></li><li>获取资源数据(Resources.xxx)<br><img src="/img/2024-3-17/20.jpg"></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 汇编语言程序</title>
      <link href="/2023/11/09/2023-11-9%20%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/11/09/2023-11-9%20%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>本系列为《汇编语言（第3版）》的个人阅读笔记，<br>期间使用的图片摘自b站视频<a href="https://www.bilibili.com/video/BV1Wu411B72F/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">《通俗易懂的汇编语言（王爽老师的书）》</a></p><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><p>•介绍<br><img src="/img/2023-11-9/1.jpg"><br>•包含<br>&#x2F;&#x2F;控制权返还，内存释放<br><img src="/img/2023-11-9/2.jpg"></p><h2 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h2><p>•介绍<br><img src="/img/2023-11-9/3.jpg"><br>•包含<br>&#x2F;&#x2F;段定义<br><img src="/img/2023-11-9/4.jpg"><br>&#x2F;&#x2F;段与段寄存器关联建立：assume<br><img src="/img/2023-11-9/5.jpg"><br>&#x2F;&#x2F;程序结束标记：end<br><img src="/img/2023-11-9/6.jpg"><br>&#x2F;&#x2F;段内数据定义<br><img src="/img/2023-11-9/7.jpg"></p><h1 id="从编写到执行"><a href="#从编写到执行" class="headerlink" title="从编写到执行"></a>从编写到执行</h1><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><h2 id="编译与链接"><a href="#编译与链接" class="headerlink" title="编译与链接"></a>编译与链接</h2><p><img src="/img/2023-11-9/8.jpg"></p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>•DOS正常执行<br>&#x2F;&#x2F;介绍<br><img src="/img/2023-11-9/9.jpg"><br>&#x2F;&#x2F;演示<br><img src="/img/2023-11-9/10.jpg"></p><p>•Debug跟踪<br>&#x2F;&#x2F;介绍<br><img src="/img/2023-11-9/11.jpg"><br>&#x2F;&#x2F;演示<br>1＞将程序加载入内存中，并查看其在内存中的具体位置<br><img src="/img/2023-11-9/12.jpg"><br>2＞单步执行程序，查看每次过后寄存器的情况<br><img src="/img/2023-11-9/13.jpg"></p><h1 id="段的使用"><a href="#段的使用" class="headerlink" title="段的使用"></a>段的使用</h1><p>对于段本身的位置：<br>在汇编语言中，各类段的段地址通常由系统自动分配和确定，用户无需手动指定段地址</p><h2 id="基础使用方式"><a href="#基础使用方式" class="headerlink" title="基础使用方式"></a>基础使用方式</h2><h3 id="一般框架下"><a href="#一般框架下" class="headerlink" title="一般框架下"></a>一般框架下</h3><p>•概述<br><img src="/img/2023-11-9/14.jpg"><br>注：有时候，数据、代码和栈并非会严格分开存储，代码段中也可以有数据、栈</p><p>•演示<br>&#x2F;&#x2F;代码段中使用数据<br><img src="/img/2023-11-9/15.jpg"><br>注：<br>1.这里的代码段分为数据部分和代码部分。数据部分用于数据定义，是从该代码段的[0]处开始存储；<br>代码部分存储在其下方。<br><img src="/img/2023-11-9/16.jpg"><br>2.在代码部分的前后添加“start:”“start”，是为了指明代码开始位置(程序入口)，<br>使系统在识别时，CS:IP指向正确地址，从而不会把数据部分当作代码<br><img src="/img/2023-11-9/17.jpg"></p><p>&#x2F;&#x2F;代码段中使用栈<br><img src="/img/2023-11-9/18.jpg"></p><h3 id="复杂框架下"><a href="#复杂框架下" class="headerlink" title="复杂框架下"></a>复杂框架下</h3><p>•概述<br>注：在大部分复杂情况下，为了程序结构更清晰,数据、代码和栈还是选择分开存放在数据段、代码段和栈段中</p><p>•演示<br>&#x2F;&#x2F;数据, 代码, 栈放入各自的段<br><img src="/img/2023-11-9/19.jpg"><br>注：<br>1.代码段开始出现了 包含栈段名“stack”、数据段名“data” 的赋值语句，其含义特殊<br><img src="/img/2023-11-9/20.jpg"><br>2.“stack”会被解析为栈段的段地址，然后被存入SS中；同理，“data”会被解析为数据段的段地址，被存入DS中<br>3.这可理解为是一个 在代码段中初始化各个段寄存器 的操作。<br>接下来，用户需要在内存中定位信息时，无需知道其具体段地址，只用引用段前缀即可</p><h2 id="在模块化程序下"><a href="#在模块化程序下" class="headerlink" title="在模块化程序下"></a>在模块化程序下</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="/img/2023-11-9/21.jpg"></p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>•使用数据段<br><img src="/img/2023-11-9/22.jpg"><br>•使用栈段<br><img src="/img/2023-11-9/23.jpg"><br>注：<br>1.这里子程序开头的“push bp”，把BP的旧值临时放入栈中 的操作，<br>既为子程序中 数据的寄存 暂腾出空间，避免寄存器冲突问题<br>2.同时BP的旧值也没丢失。在子程序最后，通过“pop bp”，旧值又恢复到BP中</p><h1 id="操作符与标号"><a href="#操作符与标号" class="headerlink" title="操作符与标号"></a>操作符与标号</h1><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="seg-offset"><a href="#seg-offset" class="headerlink" title="seg; offset"></a>seg; offset</h3><p>•介绍<br>后跟标号，用于获取标有该标号的数据或指令在代码段中的 段地址&#x2F;偏移地址</p><p>•演示<br>&#x2F;&#x2F;获取数据的地址信息<br> <img src="/img/2023-11-9/24.jpg"><br>&#x2F;&#x2F;获取指令的地址信息<br> <img src="/img/2023-11-9/25.jpg"></p><h2 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h2><h3 id="地址标号"><a href="#地址标号" class="headerlink" title="地址标号"></a>地址标号</h3><p>•介绍<br>1.只可标记指令和代码段中的数据<br>2.标记时，会带上“:”<br>3.使用时，与操作符配合<br>4.本身包含 被标记数据或指令的地址信息，</p><p>•演示<br>&#x2F;&#x2F;标记指令<br><img src="/img/2023-11-9/26.jpg"><br>&#x2F;&#x2F;标记代码段中的数据<br><img src="/img/2023-11-9/27.jpg"></p><h3 id="数据标号"><a href="#数据标号" class="headerlink" title="数据标号"></a>数据标号</h3><p>•介绍<br>1.只可标记数据，但代码段数据段中的均可<br>2.标记时，不带上“:”<br>3.使用时，单独出现<br>4.本身 既包含被标记数据的地址信息，又包含单元长度信息<br><img src="/img/2023-11-9/28.jpg"><br>注：<br>使用数据标号后，对数据访问操作的指令 会更加简易直观。<br>虽然底层实现还是通过内存寻址，但看起来就像高级语言中的表示一样，直接面向变量或数组</p><p>•演示<br>&#x2F;&#x2F;标记代码段中的数据<br><img src="/img/2023-11-9/29.jpg"><br>&#x2F;&#x2F;标记数据段中的数据<br><img src="/img/2023-11-9/30.jpg"></p><h1 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h1><h2 id="系统自带"><a href="#系统自带" class="headerlink" title="系统自带"></a>系统自带</h2><p>注：当触发内中断（软件中断）时执行<br>•类型<br>&#x2F;&#x2F;BIOS类（与硬件设备相关）<br><img src="/img/2023-11-9/31.jpg"><br>&#x2F;&#x2F;DOS类<br><img src="/img/2023-11-9/32.jpg"><br>•安装过程<br><img src="/img/2023-11-9/33.jpg"></p><h2 id="用户编写"><a href="#用户编写" class="headerlink" title="用户编写"></a>用户编写</h2><p>•背景<br>有时，对于用户想进行的操作控制，没有对应的中断处理程序可满足具体需求此时，<br>用户可在原有基础之上，对中断处理程序进行改写，或重新自定义</p><p>•演示<br>&#x2F;&#x2F;改写<br><img src="/img/2023-11-9/34.jpg"><br>&#x2F;&#x2F;自定义<br><img src="/img/2023-11-9/35.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 汇编指令</title>
      <link href="/2023/11/02/2023-11-2%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/11/02/2023-11-2%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本系列为《汇编语言（第3版）》的个人阅读笔记，<br>期间使用的图片摘自b站视频<a href="https://www.bilibili.com/video/BV1Wu411B72F/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">《通俗易懂的汇编语言（王爽老师的书）》</a></p><h1 id="指令种类"><a href="#指令种类" class="headerlink" title="指令种类"></a>指令种类</h1><h2 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h2><h3 id="数据移动"><a href="#数据移动" class="headerlink" title="数据移动"></a>数据移动</h3><p>mov</p><h3 id="数据串移动"><a href="#数据串移动" class="headerlink" title="数据串移动"></a>数据串移动</h3><p>movsb&#x2F;movsw; PSW.DF&#x2F;SI&#x2F;DI</p><h3 id="加减"><a href="#加减" class="headerlink" title="加减"></a>加减</h3><p>add&#x2F;sub</p><h3 id="乘除"><a href="#乘除" class="headerlink" title="乘除"></a>乘除</h3><p>mul&#x2F;div; AX&#x2F;DX</p><h3 id="进位加减"><a href="#进位加减" class="headerlink" title="进位加减"></a>进位加减</h3><p>adc(sbb); PSW.CF</p><h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><p>sxx&#x2F;rxx; PSW.CF</p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>cmp</p><h2 id="流程转移"><a href="#流程转移" class="headerlink" title="流程转移"></a>流程转移</h2><p>•背景 &amp; 本质<br><img src="/img/2023-11-2/15.jpg"><br>•分类<br><img src="/img/2023-11-2/16.jpg"></p><h3 id="指令地址表示"><a href="#指令地址表示" class="headerlink" title="指令地址表示"></a>指令地址表示</h3><p>CS:offset标号<br>•介绍<br>注：“offset 标号”，在这里代表着标有该标号的指令在代码段中的偏移地址<br><img src="/img/2023-11-2/30.jpg"><br>•演示<br><img src="/img/2023-11-2/31.jpg"></p><h3 id="无条件跳转"><a href="#无条件跳转" class="headerlink" title="无条件跳转"></a>无条件跳转</h3><p>jmp</p><h3 id="条件跳转（基于CX）"><a href="#条件跳转（基于CX）" class="headerlink" title="条件跳转（基于CX）"></a>条件跳转（基于CX）</h3><p>jcxz; CX</p><h3 id="条件跳转（基于PSW）"><a href="#条件跳转（基于PSW）" class="headerlink" title="条件跳转（基于PSW）"></a>条件跳转（基于PSW）</h3><p>jxxx; PSW</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>loop; CX</p><h3 id="指令重复"><a href="#指令重复" class="headerlink" title="指令重复"></a>指令重复</h3><p>rep; CX</p><h3 id="子程序调用"><a href="#子程序调用" class="headerlink" title="子程序调用"></a>子程序调用</h3><p>call</p><h3 id="子程序返回"><a href="#子程序返回" class="headerlink" title="子程序返回"></a>子程序返回</h3><p>ret&#x2F;retf</p><h2 id="访问内存"><a href="#访问内存" class="headerlink" title="访问内存"></a>访问内存</h2><h3 id="访问数据段"><a href="#访问数据段" class="headerlink" title="访问数据段"></a>访问数据段</h3><p>move; DS:[…]<br>•背景 &amp; 介绍<br><img src="/img/2023-11-2/21.jpg"><br>•演示<br>&#x2F;&#x2F;读写<br><img src="/img/2023-11-2/22.jpg"><br><img src="/img/2023-11-2/23.jpg"></p><h3 id="访问栈段"><a href="#访问栈段" class="headerlink" title="访问栈段"></a>访问栈段</h3><p>push&#x2F;pop&#x2F;mov; SS:SP&#x2F;SS:[…]<br>•介绍<br><img src="/img/2023-11-2/24.jpg"></p><p>•演示<br>&#x2F;&#x2F;栈顶确定：SS:SP<br>注：栈底默认是在SS:[0]处<br><img src="/img/2023-11-2/25.jpg"></p><p>&#x2F;&#x2F;入栈与出栈<br>注：每次操作过后，栈顶位置都会相应调整；<br>CPU不知道栈空间大小，因此超界问题要自己注意避免<br>1＞push, pop<br><img src="/img/2023-11-2/26.jpg"><br>2＞move; SS:[…]<br><img src="/img/2023-11-2/27.jpg"></p><h3 id="访问代码段（指令跳转）"><a href="#访问代码段（指令跳转）" class="headerlink" title="访问代码段（指令跳转）"></a>访问代码段（指令跳转）</h3><p>jump; CS:IP<br>•背景 &amp; 介绍<br><img src="/img/2023-11-2/28.jpg"><br>•演示<br><img src="/img/2023-11-2/29.jpg"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>•关于CPU对各类段的访问<br>1.对于数据段或栈段的访问，需要用户使用具体的指令进行控制<br>2.对于代码段，CPU会在程序运行时自行访问，一般情况下，无需用户使用具体的指令进行控制。<br>（除非用户想更改CPU访问代码段的顺序，即要进行指令跳转）</p><p>•对于上述操作和各寄存器的关系<br>1.CPU要进行上述各操作 有个前提，就是要事先知道相关信息 在内存中的地址<br>2.因此，需要先把地址存入各寄存器，然后对寄存器进行引用，从而让CPU能够从中读取地址信息</p><p>•段寄存器的数据送入方式<br>无法直接将数据送入DS，因为电路设计，数据要先送入通用寄存器，再送入DS<br><img src="/img/2023-11-2/17.jpg"></p><p>•段寄存器的引用<br>1.段前缀 显式使用<br><img src="/img/2023-11-2/18.jpg"><br>2.段前缀 隐式省略（单独使用[…]）<br>[idata]——默认段地址放在DS中<br><img src="/img/2023-11-2/19.jpg"><br>[bx]之类的——默认段地址放在DS中；[bp]之类的——默认段地址放在SS中<br><img src="/img/2023-11-2/20.jpg"></p><h1 id="内存寻址方式"><a href="#内存寻址方式" class="headerlink" title="内存寻址方式"></a>内存寻址方式</h1><p><img src="/img/2023-11-2/5.jpg"></p><h2 id="idata"><a href="#idata" class="headerlink" title="[idata]"></a>[idata]</h2><h2 id="bx"><a href="#bx" class="headerlink" title="[bx]"></a>[bx]</h2><h2 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx+idata]"></a>[bx+idata]</h2><p>•介绍<br><img src="/img/2023-11-2/12.jpg"><br>&#x2F;&#x2F;其他写法<br><img src="/img/2023-11-2/13.jpg"><br>•演示<br><img src="/img/2023-11-2/14.jpg"></p><h2 id="bx-si"><a href="#bx-si" class="headerlink" title="[bx+si]"></a>[bx+si]</h2><p>•介绍<br><img src="/img/2023-11-2/9.jpg"><br>&#x2F;&#x2F;其他写法<br><img src="/img/2023-11-2/10.jpg"><br>•演示<br><img src="/img/2023-11-2/11.jpg"></p><h2 id="bx-si-idata"><a href="#bx-si-idata" class="headerlink" title="[bx+si+idata]"></a>[bx+si+idata]</h2><p>•介绍<br><img src="/img/2023-11-2/6.jpg"><br>&#x2F;&#x2F;其他写法<br><img src="/img/2023-11-2/7.jpg"><br>•演示<br><img src="/img/2023-11-2/8.jpg"></p><h1 id="操作与数据长度"><a href="#操作与数据长度" class="headerlink" title="操作与数据长度"></a>操作与数据长度</h1><h2 id="字节操作"><a href="#字节操作" class="headerlink" title="字节操作"></a>字节操作</h2><p>•隐式<br>指令中涉及8位寄存器，所以无须指明，CPU便知道要访问应是内存的字节单元<br><img src="/img/2023-11-2/1.jpg"><br>•显式<br>在没有寄存器参与的内存单元访问指令中，用byte ptr指明所要访问内存单元的长度，CPU由此得知要访问的是字节单元<br><img src="/img/2023-11-2/2.jpg"></p><h2 id="字操作"><a href="#字操作" class="headerlink" title="字操作"></a>字操作</h2><p>•隐式<br>指令中涉及16位寄存器，所以无须指明，CPU便知道要访问是内存的字单元<br><img src="/img/2023-11-2/3.jpg"><br>•显示<br>在没有寄存器参与的内存单元访问指令中，用word ptr指明所要访问内存单元的长度，CPU由此得知要访问的是字单元<br><img src="/img/2023-11-2/4.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 硬件原理</title>
      <link href="/2023/11/01/2023-11-1%20%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%E7%A1%AC%E4%BB%B6%E5%8E%9F%E7%90%86/"/>
      <url>/2023/11/01/2023-11-1%20%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%E7%A1%AC%E4%BB%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本系列为《汇编语言（第3版）》的个人阅读笔记，<br>期间使用的图片摘自b站视频<a href="https://www.bilibili.com/video/BV1Wu411B72F/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=df8ab441eb5564fe1f6e7970564ef7bf">《通俗易懂的汇编语言（王爽老师的书）》</a></p><h1 id="CPU-内部结构"><a href="#CPU-内部结构" class="headerlink" title="CPU 内部结构"></a>CPU 内部结构</h1><p><img src="/img/2023-11-1/1.jpg"></p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>•存储共性<br>8086CPU所有的寄存器都是16位的，可以存放两个字节<br>•类型<br><img src="/img/2023-11-1/3.jpg"></p><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>AX, BX, CX, DX<br>•作用<br>&#x2F;&#x2F;BX<br>在各类内存寻址方式中，用于存储偏移地址 或 偏移地址的基地址;<br>与BP相比，其通常用于 在内存的数据段中 的寻址<br>&#x2F;&#x2F;CX<br>常与各类转移指令配合使用，<br>CPU通过检测其中的值 来判断是·否进行跳转</p><p>•特性<br>&#x2F;&#x2F;高低位独立存储<br><img src="/img/2023-11-1/4.jpg"></p><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>CS, DS, SS, ES<br>•作用<br>注：CPU通过读取在段寄存器中的地址，就可以快速定位到内存中的信息<br><img src="/img/2023-11-1/5.jpg"><br>•更改方式<br><img src="/img/2023-11-1/6.jpg"></p><h3 id="指令指针寄存器"><a href="#指令指针寄存器" class="headerlink" title="指令指针寄存器"></a>指令指针寄存器</h3><p>IP<br>•作用<br>IP中存储的是下一要执行指令的偏移地址，通常与CS代码段寄存器配合使用。<br>CS中存储的是下一要执行指令的段地址，两者的地址经过地址加法器运算后，所得即为下一要执行指令的物理地址</p><h3 id="指针寄存器"><a href="#指针寄存器" class="headerlink" title="指针寄存器"></a>指针寄存器</h3><p>SP, BP<br>•作用<br>&#x2F;&#x2F;SP<br>SP中存储的是栈顶的偏移地址，通常与 SS栈段寄存器配合使用。<br>SS中存储的是栈顶的段地址，两者的地址经过地址加法器运算后，所得即为栈顶的物理地址<br>&#x2F;&#x2F;BP<br>在各类内存寻址方式中，用于存储偏移地址 或 偏移地址的基地址；<br>与BX相比，其通常用于 在内存的栈段中 的寻址</p><h3 id="变址寄存器"><a href="#变址寄存器" class="headerlink" title="变址寄存器"></a>变址寄存器</h3><p>SI, DI<br>•作用<br>注：在变址寻址方式中用于存储 偏移量，与存储在BX或BP中的基地址配合使用，联合构成偏移地址<br>&#x2F;&#x2F;SI<br>source index，源变址寄存器<br>&#x2F;&#x2F;DI：<br>destination index，目标变址寄存器<br>•特性<br>&#x2F;&#x2F;单独使用时 与BX类似<br><img src="/img/2023-11-1/8.jpg"><br><img src="/img/2023-11-1/9.jpg"><br>&#x2F;&#x2F;不支持高低位独立存储<br>SI和DI不能分成两个8位寄存器来使用</p><h3 id="标志寄存器-PSW"><a href="#标志寄存器-PSW" class="headerlink" title="标志寄存器&#x2F;PSW"></a>标志寄存器&#x2F;PSW</h3><p>•作用<br>注：<br>1.用来存储相关指令的某些执行结果<br>2.用来为CPU执行相关指令提供行为依据<br>3.用来控制CPU的相关工作方式<br>&#x2F;&#x2F;OF, DF, SF, ZF, PF, CF<br><img src="/img/2023-11-1/12.jpg"><br>&#x2F;&#x2F;IF, TF<br><img src="/img/2023-11-1/13.jpg"></p><p>•更改方式<br><img src="/img/2023-11-1/14.jpg"><br>&#x2F;&#x2F;DF<br><img src="/img/2023-11-1/15.jpg"><br>&#x2F;&#x2F;IF<br><img src="/img/2023-11-1/16.jpg"></p><h2 id="地址加法器"><a href="#地址加法器" class="headerlink" title="地址加法器"></a>地址加法器</h2><p>•背景<br>注：简单来讲就是，20位的物理地址与16位的CPU不匹配<br><img src="/img/2023-11-1/17.jpg"></p><p>•工作流程<br><img src="/img/2023-11-1/18.jpg"></p><h1 id="CPU-数据访问"><a href="#CPU-数据访问" class="headerlink" title="CPU 数据访问"></a>CPU 数据访问</h1><p><img src="/img/2023-11-1/19.jpg"></p><h2 id="访问内存"><a href="#访问内存" class="headerlink" title="访问内存"></a>访问内存</h2><p>•与内存连接<br>&#x2F;&#x2F;媒介：三类总线<br><img src="/img/2023-11-1/20.jpg"></p><p>•从内存读取<br>&#x2F;&#x2F;具备：三类信息<br><img src="/img/2023-11-1/21.jpg"></p><p>&#x2F;&#x2F;过程简单示意<br>＞数据读取<br><img src="/img/2023-11-1/22.jpg"><br>＞指令读取与执行<br><img src="/img/2023-11-1/23.jpg"></p><h2 id="访问I-O端口"><a href="#访问I-O端口" class="headerlink" title="访问I&#x2F;O端口"></a>访问I&#x2F;O端口</h2><p>•与端口连接<br>&#x2F;&#x2F;端口原理<br><img src="/img/2023-11-1/24.jpg"><br>&#x2F;&#x2F;媒介<br><img src="/img/2023-11-1/25.jpg"></p><p>•从端口读取<br><img src="/img/2023-11-1/26.jpg"></p><h1 id="CPU-中断处理"><a href="#CPU-中断处理" class="headerlink" title="CPU 中断处理"></a>CPU 中断处理</h1><p>对于“中断”的理解：<br>1.中断不完全是由 异常 引发的<br>2.它可以是由于 用户想实现某些操作控制，<br>    而主动引发的</p><p>对于“中断处理”的理解：<br>1.中断处理不仅仅表示 处理异常<br>2.它也可以理解为 CPU对用户的某些<br>    操作控制 进行响应</p><p>对于“中断处理程序”的理解：<br>中断处理程序更像是一个库，<br>1.出现异常时，库内程序会被自行调用执行<br>2.用户想要进行某些操作控制时，<br>   也可以使用特定手段 主动调用库内程序</p><h2 id="内中断-软件中断"><a href="#内中断-软件中断" class="headerlink" title="内中断&#x2F;软件中断"></a>内中断&#x2F;软件中断</h2><p>•介绍<br>由CPU内部发生的事件而引起的中断<br>•引发原因<br>&#x2F;&#x2F;出现除法错误<br>&#x2F;&#x2F;设置了单步执行<br><img src="/img/2023-11-1/28.jpg"><br>&#x2F;&#x2F;执行into指令<br>&#x2F;&#x2F;执行int指令<br><img src="/img/2023-11-1/29.jpg"><br>•处理过程<br>注：整个过程由CPU自行完成<br><img src="/img/2023-11-1/30.jpg"></p><h2 id="外中断-硬件中断"><a href="#外中断-硬件中断" class="headerlink" title="外中断&#x2F;硬件中断"></a>外中断&#x2F;硬件中断</h2><p>•介绍<br>由外部设备发生的事件引起的中断<br>•引发原因<br>&#x2F;&#x2F;键盘输入<br>&#x2F;&#x2F;打印机请求<br>&#x2F;&#x2F;……</p><p>•处理过程<br>（与内中断类似）</p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h2><p>&#x2F;&#x2F;地址空间<br><img src="/img/2023-11-1/31.jpg"><br>&#x2F;&#x2F; 8位存储单元(字节单元)<br><img src="/img/2023-11-1/32.jpg"></p><h2 id="程序装入及扩充"><a href="#程序装入及扩充" class="headerlink" title="程序装入及扩充"></a>程序装入及扩充</h2><p>•程序装入<br><img src="/img/2023-11-1/33.jpg"><br>•扩充<br>&#x2F;&#x2F;覆盖<br>&#x2F;&#x2F;交换</p><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><p>•类型：RAM</p><p>•所存储信息<br>&#x2F;&#x2F; 16位字单元<br><img src="/img/2023-11-1/34.jpg"><br>&#x2F;&#x2F;二进制信息<br>进行读取时，一段二进制信息是被用作数据还是指令，要看指向该地址的寄存器的类型<br><img src="/img/2023-11-1/35.jpg"><br>•显存<br>&#x2F;&#x2F;介绍<br>显存空间是从内存空问中划分出来的，同样执行存储功能，但其存储对象是显卡输出到显示器上的每个像素的信息<br>&#x2F;&#x2F;内部结构<br><img src="/img/2023-11-1/36.jpg"></p><h2 id="中断向量表-中断描述符表"><a href="#中断向量表-中断描述符表" class="headerlink" title="中断向量表&#x2F;中断描述符表"></a>中断向量表&#x2F;中断描述符表</h2><p>•名称区别<br>&#x2F;&#x2F;中断向量表<br>用于intel 8086，每个表项占4字节</p><p>&#x2F;&#x2F;中断描述符表（IDT）<br>用于x86，每个表项占4字节；<br>用于x64，每个表项占8字节</p><p>•原理（以前者为例）<br>注：中断处理程序的中断类型码与其CS, IP的存储地址 的换算关系——(CS)&#x3D;(N<em>4+2); (IP)&#x3D;(N</em>4)<br><img src="/img/2023-11-1/37.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode Top100 简单</title>
      <link href="/2023/04/02/2023-4-2%20Leetcode%20Top100%20%E7%AE%80%E5%8D%95/"/>
      <url>/2023/04/02/2023-4-2%20Leetcode%20Top100%20%E7%AE%80%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h1><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组 哈希表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashtable;              <span class="comment">// 创建哈希表（无序），键是数组值，值是索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = hashtable.<span class="built_in">find</span>(target - nums[i]); <span class="comment">// 查找 target - nums[i] 是否在哈希表中，返回迭代器（类似于指向键值对的指针）</span></span><br><span class="line">            <span class="keyword">if</span> (it != hashtable.<span class="built_in">end</span>()) &#123;                <span class="comment">// 如果找到目标值，即 it 不为 end（无效元素）</span></span><br><span class="line">                <span class="keyword">return</span> &#123;it-&gt;second, i&#125;;                 <span class="comment">// 返回第一个数的索引和当前索引</span></span><br><span class="line">            &#125;</span><br><span class="line">            hashtable[nums[i]] = i;                     <span class="comment">// 如果没找到，将当前值和索引存入哈希表</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组 双指针</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[right]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[left], nums[right]);</span><br><span class="line">                left++;     <span class="comment">// 左指针指向当前已经处理好的序列的尾部，其左边均为非零数</span></span><br><span class="line">            &#125;</span><br><span class="line">            right++;    <span class="comment">// 右指针指向待处理序列的头部，其与左指针之间均为零</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 哈希表 链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode *&gt; visited;</span><br><span class="line">        ListNode *temp = headA;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">nullptr</span>) &#123;   <span class="comment">// 首先遍历链表 headA，并将链表 headA 中的每个节点加入哈希集合中</span></span><br><span class="line">            visited.<span class="built_in">insert</span>(temp);   </span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = headB;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">nullptr</span>) &#123;   <span class="comment">// 然后遍历链表 headB，对于遍历到的每个节点，判断该节点是否在哈希集合中</span></span><br><span class="line">            <span class="keyword">if</span> (visited.<span class="built_in">count</span>(temp)) &#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归 链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            ListNode* next = curr-&gt;next;    <span class="comment">// 当前 curr-&gt;next 被 prev 覆盖前，先记录</span></span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;    <span class="comment">// 当前 curr 后移前，先记录到 prev 中</span></span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="回文链表"><a href="#回文链表" class="headerlink" title="回文链表"></a>回文链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表 双指针</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            visited.<span class="built_in">emplace_back</span>(temp-&gt;val);    <span class="comment">// 将链表所有节点值存入 vector</span></span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> length = visited.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (length + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;    </span><br><span class="line">            <span class="keyword">if</span> (visited[i] != visited[length - <span class="number">1</span> - i]) &#123;    <span class="comment">// 检查数组是否为回文</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法练习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
